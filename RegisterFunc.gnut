/**

    Current File dump by Neko 

    Import :
        Number : int or float both ok
        var : it can be any type

                                                    2021.10.9
**/


/*
* @Breif Tells the file system on the client a level to precache.
* @Pramas string
* @NativeName: ClientPreCacheLevel
* @NativeFunctionAddress 00000001407A8110
*/

void function ClientPreCacheLevel(string)

/*
* @Breif Pre cache a level during video to fix popping and make loading faster.
* @Pramas string
* @NativeName: PreCacheLevelDuringVideo
* @NativeFunctionAddress 00000001407A8070
*/

void function PreCacheLevelDuringVideo(string)

/*
* @Breif Render the level load screen for this map immediately works best after PreCacheLevelDuringVideo.
* @Pramas string
* @NativeName: SetLevelNameForLoading
* @NativeFunctionAddress 00000001407A7FF0
*/

void function SetLevelNameForLoading(string)

/*
* @Breif 
* @Pramas 
* @NativeName: ClientIsPreCaching
* @NativeFunctionAddress 00000001407A7F70
*/

bool function ClientIsPreCaching()

/*
* @Breif Tells the file system that a file at the exact path provided must exist in the currently loading VPK.
* @Pramas string
* @NativeName: VPKNotifyFile
* @NativeFunctionAddress 00000001407AEC60
*/

void function VPKNotifyFile(string)

/*
* @Breif Generate a random floating point number in [0, A)
* @Pramas float
* @NativeName: SHARED_SCRIPT( Script_RandomFloat )
* @NativeFunctionAddress 00000001408F1580
*/

float function RandomFloat(var, number)

/*
* @Breif Generate a random floating point number in [A, B)
* @Pramas float, float
* @NativeName: SHARED_SCRIPT( Script_RandomFloatRange )
* @NativeFunctionAddress 00000001408F1650
*/

float function RandomFloatRange(var, number, number)

/*
* @Breif Generate a random integer in [0, A)
* @Pramas int
* @NativeName: SHARED_SCRIPT( Script_RandomInt )
* @NativeFunctionAddress 00000001408F1740
*/

int function RandomInt(var, number)

/*
* @Breif Generate a random integer in [A, B)
* @Pramas int, int
* @NativeName: SHARED_SCRIPT( Script_RandomIntRange )
* @NativeFunctionAddress 00000001408F17F0
*/

int function RandomIntRange(var, number, number)

/*
* @Breif Generate a random integer in [A, B]
* @Pramas int, int
* @NativeName: SHARED_SCRIPT( Script_RandomIntRangeInclusive )
* @NativeFunctionAddress 00000001408F18D0
*/

int function RandomIntRangeInclusive(var, number, number)

/*
* @Breif Returns true if this is server script
* @Pramas 
* @NativeName: Client_IsServer
* @NativeFunctionAddress 00000001407AD660
*/

bool function IsServer()

/*
* @Breif Returns true if this is client script
* @Pramas 
* @NativeName: Client_IsClient
* @NativeFunctionAddress 00000001408F7D10
*/

bool function IsClient()

/*
* @Breif Returns true if this is UI script
* @Pramas 
* @NativeName: Client_IsUI
* @NativeFunctionAddress 00000001408F7C70
*/

bool function IsUI()

/*
* @Breif Returns true if the game was launched with "-tools".
* @Pramas 
* @NativeName: Client_IsToolsMode
* @NativeFunctionAddress 00000001408F7C20
*/

bool function IsToolsMode()

/*
* @Breif Returns true if the game was launched with "-fnf".
* @Pramas 
* @NativeName: Client_IsFNF
* @NativeFunctionAddress 00000001408F7BD0
*/

bool function IsFNF()

/*
* @Breif Returns true if the game was launched with "-qa".
* @Pramas 
* @NativeName: Client_IsQA
* @NativeFunctionAddress 00000001408F7B80
*/

bool function IsQA()

/*
* @Breif Returns true if the game was launched with the specified parameter.
* @Pramas string
* @NativeName: Client_Dev_CommandLineHasParm
* @NativeFunctionAddress 00000001408F7AF0
*/

bool function Dev_CommandLineHasParm(string)

/*
* @Breif Returns the string following the parameter if it exists.
* @Pramas string
* @NativeName: Client_Dev_CommandLineParmValue
* @NativeFunctionAddress 00000001408F7A70
*/

string function Dev_CommandLineParmValue(string)

/*
* @Breif Removes parameter from the command line. Useful if you want a command line parameter to only be effective once.
* @Pramas string
* @NativeName: Client_Dev_CommandLineRemoveParm
* @NativeFunctionAddress 00000001408F7A00
*/

void function Dev_CommandLineRemoveParm(string)

/*
* @Breif Adds parameter to the command line. Useful to change code/scrip the command line. Pass in the key and value.
* @Pramas string, string
* @NativeName: Client_Dev_CommandLineAddParm
* @NativeFunctionAddress 00000001408F7980
*/

void function Dev_CommandLineAddParm(string, string)

/*
* @Breif empty function: takes int, bool, float, returns 1
* @Pramas int, bool, float
* @NativeName: Client_NativeFuncTest
* @NativeFunctionAddress 00000001408F78F0
*/

int function NativeFuncTest(int, bool, float)

/*
* @Breif Gets the level of 'developer'
* @Pramas 
* @NativeName: Client_GetDeveloperLevel
* @NativeFunctionAddress 00000001408F7850
*/

int function GetDeveloperLevel()

/*
* @Breif Gets the integer value of the 'bug_reproNum' convar
* @Pramas 
* @NativeName: Client_GetBugReproNum
* @NativeFunctionAddress 00000001408F77B0
*/

int function GetBugReproNum()

/*
* @Breif 
* @Pramas string flagName
* @NativeName: Client_WhenBuildFlag
* @NativeFunctionAddress 00000001407AD660
*/

bool function WhenBuildFlag(string flagName)

/*
* @Breif Wraps given angle to [-180, 180] range
* @Pramas float
* @NativeName: Client_Script_AngleNormalize
* @NativeFunctionAddress 00000001408F76D0
*/

float function AngleNormalize(float)

/*
* @Breif Given an absolute angle and absolute direction vector, returns a local direction vector; one that is relative to the absolute angle's axes
* @Pramas vector, vector
* @NativeName: Client_Script_CalcRelativeVector
* @NativeFunctionAddress 00000001408F7610
*/

vector function CalcRelativeVector(vector, vector)

/*
* @Breif Given an angle and vector, returns the angular difference needed to face from the given angle to the given vector
* @Pramas vector, vector
* @NativeName: Client_Script_CalcRelativeAngles
* @NativeFunctionAddress 00000001408F7540
*/

vector function CalcRelativeAngles(vector, vector)

/*
* @Breif Given an absolute origin, return the origin relative to the given entity
* @Pramas entity, vector
* @NativeName: Client_Script_CalcOriginRelativeToEntity
* @NativeFunctionAddress 00000001408F7460
*/

vector function CalcOriginRelativeToEntity(entity, vector)

/*
* @Breif Given some absolute angles, return the angles relative to the given entity
* @Pramas entity, vector
* @NativeName: Client_Script_CalcAnglesRelativeToEntity
* @NativeFunctionAddress 00000001408F7380
*/

vector function CalcAnglesRelativeToEntity(entity, vector)

/*
* @Breif Given an absolute origin, return the origin relative to the given absolute origin and angles
* @Pramas vector, vector, vector
* @NativeName: Client_Script_CalcOriginRelativeToAbsOriginAngles
* @NativeFunctionAddress 00000001408F72B0
*/

vector function CalcOriginRelativeToAbsOriginAngles(vector, vector, vector)

/*
* @Breif Given some absolute angles, return the angles relative to the given absolute origin and angles
* @Pramas vector, vector, vector
* @NativeName: Client_Script_CalcAnglesRelativeToAbsOriginAngles
* @NativeFunctionAddress 00000001408F71E0
*/

vector function CalcAnglesRelativeToAbsOriginAngles(vector, vector, vector)

/*
* @Breif Given some angles, an axis of rotation vector, and degree angle offset: Returns the angles rotated about the axis by the offset
* @Pramas vector, vector, float
* @NativeName: Client_Script_RotateAnglesAboutAxis
* @NativeFunctionAddress 00000001408F7100
*/

vector function RotateAnglesAboutAxis(vector, vector, float)

/*
* @Breif Given a vector, an axis of rotation vector, and degree angle offset: Returns the vector rotated about the axis by the offset
* @Pramas vector, vector, float
* @NativeName: Client_Script_VectorRotateAxis
* @NativeFunctionAddress 00000001408F7020
*/

vector function VectorRotateAxis(vector, vector, float)

/*
* @Breif Given an angle and vector, returns the angular difference needed to face from the given angle to the given vector
* @Pramas vector, vector, vector, vector
* @NativeName: Client_Script_IsBoxIntersectingBox
* @NativeFunctionAddress 00000001408F6F90
*/

bool function BoxIntersectsBox(vector, vector, vector, vector)

/*
* @Breif For debugging
* @Pramas 
* @NativeName: Client_Script_TriggerBreakpoint
* @NativeFunctionAddress 00000001407AEC60
*/

void function TriggerBreakpoint()

/*
* @Breif Prints to the game's spam logfile (usually stored in DevNet).
* @Pramas ( string )
* @NativeName: SHARED_SCRIPT( ScriptPrintToSpamLog )
* @NativeFunctionAddress 00000001407AEC60
*/

void function SpamLog(var, string)

/*
* @Breif Initialize profile entry with name.
* @Pramas int, string
* @NativeName: Client_Script_PerfInitLabel
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfInitLabel(int, string)

/*
* @Breif Start timer for profile entry.
* @Pramas int
* @NativeName: Client_Script_PerfStart
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfStart(int)

/*
* @Breif End the timer for profile entry.
* @Pramas int
* @NativeName: Client_Script_PerfEnd
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfEnd(int)

/*
* @Breif Clear all data
* @Pramas 
* @NativeName: Client_Script_PerfClearAll
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfClearAll()

/*
* @Breif Reset just the timing data, keep labels.
* @Pramas 
* @NativeName: Client_Script_PerfReset_ScriptCmd
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfReset()

/*
* @Breif Print profile data.
* @Pramas 
* @NativeName: Client_Script_PerfDump_ScriptCmd
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfDump()

/*
* @Breif Start rpof timer for index.
* @Pramas int, string
* @NativeName: Client_Script_RProfStart
* @NativeFunctionAddress 00000001407AEC60
*/

void function RProfStart(int, string)

/*
* @Breif End rpof timer for index.
* @Pramas int
* @NativeName: Client_Script_RProfEnd
* @NativeFunctionAddress 00000001407AEC60
*/

void function RProfEnd(int)

/*
* @Breif Start a timer.  Use TimerEnd to get the elapsed time.  Only one Timer can be active at a time.
* @Pramas 
* @NativeName: Client_Script_TimerStart
* @NativeFunctionAddress 00000001408F6F20
*/

void function TimerStart()

/*
* @Breif End the timer started with TimerStart.  Return milliseconds since TimerStart was called.  Only one Timer can be active at a time.
* @Pramas 
* @NativeName: Client_Script_TimerEnd
* @NativeFunctionAddress 00000001408F6E80
*/

float function TimerEnd()

/*
* @Breif Returns first parameter clamped between first and second parameter.
* @Pramas float, float, float
* @NativeName: Client_Script_Clamp
* @NativeFunctionAddress 00000001408F6D80
*/

float function clamp(float, float, float)

/*
* @Breif Interpolate with cubic hermite during ease-in and ease-out times
* @Pramas startTime, moveTime, easeIn, easeOut
* @NativeName: SHARED_SCRIPT( Script_Interpolate )
* @NativeFunctionAddress 00000001408F1E80
*/

float function Interpolate(var, number, number, number, number)

/*
* @Breif Linearly interpolate between two vectors
* @Pramas vecFrom, vecTo, percent
* @NativeName: SHARED_SCRIPT( Script_LerpVector )
* @NativeFunctionAddress 00000001408F1EC0
*/

vector function LerpVector(var, vector, vector, number)

/*
* @Breif Spherically linear interpolate between two vectors
* @Pramas vecFrom, vecTo, percent
* @NativeName: SHARED_SCRIPT( Script_SlerpVector )
* @NativeFunctionAddress 00000001408F1FF0
*/

vector function SlerpVector(var, vector, vector, number)

/*
* @Breif Get a random 2d point in a circle, as a 3d point, with optional 3d base
* @Pramas radius, base3D_or_null
* @NativeName: SHARED_SCRIPT( Script_GetRandom3DPointIn2DCircle )
* @NativeFunctionAddress 00000001408F2120
*/

vector function GetRandom3DPointIn2DCircle(var, number, var)

/*
* @Breif Map a value V from C to D. Linier interpolate between A and B mapped to C and D
* @Pramas float, float, float, float, float
* @NativeName: Client_Script_Graph
* @NativeFunctionAddress 00000001408F6C60
*/

float function Graph(float, float, float, float, float)

/*
* @Breif Map a value V from C to D. If V <= A, result = C. If V >= B, result = D. Otherwise linearly interpolate between A and B mapped to C and D
* @Pramas float, float, float, float, float
* @NativeName: Client_Script_GraphCapped
* @NativeFunctionAddress 00000001408F6B10
*/

float function GraphCapped(float, float, float, float, float)

/*
* @Breif Map a value V from Vector C to Vector D. If V <= A, result = C. If V >= B, result = D. Otherwise linearly interpolate between A and B mapped to C and D
* @Pramas float, float, float, vector, vector
* @NativeName: Client_Script_GraphCappedVector
* @NativeFunctionAddress 00000001408F6A00
*/

vector function GraphCappedVector(float, float, float, vector, vector)

/*
* @Breif Remap [0,1] to a cosine curved [0,1]
* @Pramas float
* @NativeName: Client_Script_Smooth01
* @NativeFunctionAddress 00000001408F6860
*/

float function Smooth01(float)

/*
* @Breif Interpolate between values, preserving velocity (so it is smooth)
* @Pramas float, float, float, float, float
* @NativeName: Client_Script_SmoothCD
* @NativeFunctionAddress 00000001408F6720
*/

var function SmoothCD(float, float, float, float, float)

/*
* @Breif Interpolate between values, preserving velocity (so it is smooth)
* @Pramas vector, vector, vector, float, float
* @NativeName: Client_Script_SmoothCDVector
* @NativeFunctionAddress 00000001408F6620
*/

var function SmoothCDVector(vector, vector, vector, float, float)

/*
* @Breif 
* @Pramas float, float, float
* @NativeName: Client_Script_ApproachAngle
* @NativeFunctionAddress 00000001408F6500
*/

float function ApproachAngle(float, float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: Client_Script_ExponentialDeltaAngle
* @NativeFunctionAddress 00000001408F6400
*/

float function ExponentialDeltaAngle(float, float, float, float)

/*
* @Breif Call before reloading scripts
* @Pramas 
* @NativeName: Client_Script_ReloadingScriptsBegin
* @NativeFunctionAddress 00000001407AEC60
*/

void function ReloadingScriptsBegin()

/*
* @Breif Call after reloading scripts
* @Pramas 
* @NativeName: Client_Script_ReloadingScriptsEnd
* @NativeFunctionAddress 00000001407AEC60
*/

void function ReloadingScriptsEnd()

/*
* @Breif Given a settings asset name, returns an object that represents the (unmodded) block of data for calls into GetSettingsBlockInt/Float/etc.
* @Pramas asset settingsAssetName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockForAsset )
* @NativeFunctionAddress 00000001408F27E0
*/

var function GetSettingsBlockForAsset()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockBool )
* @NativeFunctionAddress 00000001408F28F0
*/

var function GetSettingsBlockBool()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockInt )
* @NativeFunctionAddress 00000001408F29E0
*/

var function GetSettingsBlockInt()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockFloat )
* @NativeFunctionAddress 00000001408F2B20
*/

var function GetSettingsBlockFloat()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockVector )
* @NativeFunctionAddress 00000001408F2C60
*/

var function GetSettingsBlockVector()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockString )
* @NativeFunctionAddress 00000001408F2D90
*/

var function GetSettingsBlockString()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockAsset )
* @NativeFunctionAddress 00000001408F2EA0
*/

var function GetSettingsBlockAsset()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockStringAsAsset )
* @NativeFunctionAddress 00000001408F2FC0
*/

var function GetSettingsBlockStringAsAsset()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its array in that setting block, and returns an object representing the array. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockArray )
* @NativeFunctionAddress 00000001408F30D0
*/

var function GetSettingsBlockArray()

/*
* @Breif Given a settings array (from GetSettingsBlockArray), returns the number of elements in the array.
* @Pramas var settingsArray
* @NativeName: SHARED_SCRIPT( Script_GetSettingsArraySize )
* @NativeFunctionAddress 00000001408F3240
*/

var function GetSettingsArraySize()

/*
* @Breif Given a settings array (from GetSettingsBlockArray), returns the requested element of the array as a settings block.
* @Pramas var settingsArray, int index
* @NativeName: SHARED_SCRIPT( Script_GetSettingsArrayElem )
* @NativeFunctionAddress 00000001408F32A0
*/

var function GetSettingsArrayElem()

/*
* @Breif Given a settings asset name, returns the 31-bit "unique ID" that was generated for it in Bakery.
* @Pramas asset settingsAssetName
* @NativeName: Client_Script_GetUniqueIdForSettingsAsset
* @NativeFunctionAddress 00000001408F6360
*/

int function GetUniqueIdForSettingsAsset(asset settingsAssetName)

/*
* @Breif Given a 31-bit unique ID for a settings asset, returns the settings asset name.
* @Pramas int uniqueId
* @NativeName: Client_Script_GetSettingsAssetForUniqueId
* @NativeFunctionAddress 00000001408F62F0
*/

asset function GetSettingsAssetForUniqueId(int uniqueId)

/*
* @Breif Given a settings asset name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsBool
* @NativeFunctionAddress 00000001408F6290
*/

bool function GetGlobalSettingsBool(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsInt
* @NativeFunctionAddress 00000001408F61E0
*/

int function GetGlobalSettingsInt(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsFloat
* @NativeFunctionAddress 00000001408F6130
*/

float function GetGlobalSettingsFloat(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsVector
* @NativeFunctionAddress 00000001408F6050
*/

vector function GetGlobalSettingsVector(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsString
* @NativeFunctionAddress 00000001408F5EC0
*/

string function GetGlobalSettingsString(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsAsset
* @NativeFunctionAddress 00000001408F5E50
*/

asset function GetGlobalSettingsAsset(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsStringAsAsset
* @NativeFunctionAddress 00000001408F5DE0
*/

asset function GetGlobalSettingsStringAsAsset(asset, string)

/*
* @Breif Slow dev ONLY. Given a player setting name and key, resolves a string key to its value in that setting info file
* @Pramas string, string
* @NativeName: Client_Script_GetAISettingByKeyField_Global
* @NativeFunctionAddress 00000001408F5D20
*/

var function Dev_GetAISettingByKeyField_Global(string, string)

/*
* @Breif Slow dev ONLY. Given a player setting name and key, resolves a string key to its asset value in that setting info file
* @Pramas string, string
* @NativeName: Client_Script_GetAISettingAssetByKeyField_Global
* @NativeFunctionAddress 00000001408F5CB0
*/

asset function Dev_GetAISettingAssetByKeyField_Global(string, string)

/*
* @Breif Given a weapon name and key, resolves a string key to its value in that weapons info file. Assumes no mods set.
* @Pramas string, string
* @NativeName: Client_GetWeaponInfoFileKeyField_Global
* @NativeFunctionAddress 00000001408F5BE0
*/

var function GetWeaponInfoFileKeyField_Global(string, string)

/*
* @Breif Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.
* @Pramas string weaponName, array< string > modArray, string key
* @NativeName: Client_GetWeaponInfoFileKeyField_WithMods_Global
* @NativeFunctionAddress 00000001408F5B00
*/

var function GetWeaponInfoFileKeyField_WithMods_Global(string weaponName, array< string > modArray, string key)

/*
* @Breif Given a weapon name, returns a list of the mods available on that weapon
* @Pramas string weaponName
* @NativeName: Client_GetWeaponMods_Global
* @NativeFunctionAddress 00000001408F5A40
*/

array< string > function GetWeaponMods_Global(string weaponName)

/*
* @Breif 
* @Pramas entity ent, string weaponName, array< string > modArray
* @NativeName: Client_Script_SetBodyGroupsForWeaponConfig
* @NativeFunctionAddress 00000001408F59B0
*/

void function SetBodyGroupsForWeaponConfig(entity ent, string weaponName, array< string > modArray)

/*
* @Breif Given a weapon name and key, resolves a string key to its value in that weapons info file. Assumes no mods set.
* @Pramas string weaponname, string key
* @NativeName: Client_GetWeaponInfoFileKeyFieldAsset_Global
* @NativeFunctionAddress 00000001408F58E0
*/

asset function GetWeaponInfoFileKeyFieldAsset_Global(string weaponname, string key)

/*
* @Breif Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.
* @Pramas string weaponName, array< string > modArray, string key
* @NativeName: Client_GetWeaponInfoFileKeyFieldAsset_WithMods_Global
* @NativeFunctionAddress 00000001408F5800
*/

asset function GetWeaponInfoFileKeyFieldAsset_WithMods_Global(string weaponName, array< string > modArray, string key)

/*
* @Breif Given ( entity, hitboxIndex ) - returns the hitgroup for the hitbox on that entity
* @Pramas var, int
* @NativeName: Client_GetHitgroupForHitboxOnEntity
* @NativeFunctionAddress 00000001408F5740
*/

int function GetHitgroupForHitboxOnEntity(var, int)

/*
* @Breif Check out file from P4
* @Pramas string
* @NativeName: Client_ScriptDevP4Checkout
* @NativeFunctionAddress 00000001407AEC60
*/

void function DevP4Checkout(string)

/*
* @Breif Add or edit a file to P4
* @Pramas string
* @NativeName: Client_ScriptDevP4Add
* @NativeFunctionAddress 00000001407AEC60
*/

void function DevP4Add(string)

/*
* @Breif Append string to a temp buffer. Dev only.
* @Pramas string
* @NativeName: Client_ScriptDevTextBufferWrite
* @NativeFunctionAddress 00000001408F56F0
*/

void function DevTextBufferWrite(string)

/*
* @Breif Append string to a temp buffer. Dev only.
* @Pramas 
* @NativeName: Client_ScriptDevTextBufferClear
* @NativeFunctionAddress 00000001408F5620
*/

void function DevTextBufferClear()

/*
* @Breif Dump temp buffer out to specified path/filename.
* @Pramas string
* @NativeName: Client_ScriptDevTextBufferDumpToFile
* @NativeFunctionAddress 00000001408F55C0
*/

bool function DevTextBufferDumpToFile(string)

/*
* @Breif 
* @Pramas 
* @NativeName: Client_ScriptGetPersistentDataDefScriptVersion
* @NativeFunctionAddress 00000001408F54F0
*/

int function GetPersistentDataDefScriptVersion()

/*
* @Breif Get a count of how many distinct values the given enum has.
* @Pramas string
* @NativeName: Client_ScriptPersistenceGetEnumCount
* @NativeFunctionAddress 00000001408F5450
*/

int function PersistenceGetEnumCount(string)

/*
* @Breif Get a count of how many distinct values the given enum has.
* @Pramas string, string
* @NativeName: Client_ScriptPersistenceGetEnumIndexForItemName
* @NativeFunctionAddress 00000001408F53A0
*/

int function PersistenceGetEnumIndexForItemName(string, string)

/*
* @Breif Get a count of how many distinct values the given enum has.
* @Pramas string, int
* @NativeName: Client_ScriptPersistenceGetEnumItemNameForIndex
* @NativeFunctionAddress 00000001408F5330
*/

string function PersistenceGetEnumItemNameForIndex(string, int)

/*
* @Breif Returns true if the given enum value contains the given value.
* @Pramas string, string
* @NativeName: Client_ScriptPersistenceEnumValueIsValid
* @NativeFunctionAddress 00000001408F52D0
*/

bool function PersistenceEnumValueIsValid(string, string)

/*
* @Breif Get a count of how many elements the given item has.
* @Pramas string
* @NativeName: Client_ScriptPersistenceGetArrayCount
* @NativeFunctionAddress 00000001408F5230
*/

int function PersistenceGetArrayCount(string)

/*
* @Breif Returns whether the user is using a controller instead of a keyboard
* @Pramas 
* @NativeName: Script_IsControllerModeActive
* @NativeFunctionAddress 00000001408F51D0
*/

bool function IsControllerModeActive()

/*
* @Breif Returns true if the last input was from the dpad or arrow keys
* @Pramas 
* @NativeName: Script_GetDpadNavigationActive
* @NativeFunctionAddress 00000001408F5180
*/

bool function GetDpadNavigationActive()

/*
* @Breif Sets the XP required for a player to get to a certain level
* @Pramas int, int
* @NativeName: Script_SetXPForLevel
* @NativeFunctionAddress 00000001408F5110
*/

void function SetXPForLevel(int, int)

/*
* @Breif Gets level for a player with a given amount of XP
* @Pramas int
* @NativeName: Script_GetLevelForXP
* @NativeFunctionAddress 00000001408F5060
*/

int function GetLevelForXP(int)

/*
* @Breif Gets the value of a convar as a string
* @Pramas string
* @NativeName: Client_Script_GetConVarString
* @NativeFunctionAddress 00000001408F5000
*/

string function GetConVarString(string)

/*
* @Breif Gets the value of a convar as an integer
* @Pramas string
* @NativeName: Client_Script_GetConVarInt
* @NativeFunctionAddress 00000001408F4F60
*/

int function GetConVarInt(string)

/*
* @Breif Gets the value of a convar as a float
* @Pramas string
* @NativeName: Client_Script_GetConVarFloat
* @NativeFunctionAddress 00000001408F4EC0
*/

float function GetConVarFloat(string)

/*
* @Breif Gets the value of a convar as a boolean
* @Pramas string
* @NativeName: Client_Script_GetConVarBool
* @NativeFunctionAddress 00000001408F4E60
*/

bool function GetConVarBool(string)

/*
* @Breif Sets the value of a convar with a string
* @Pramas string, string
* @NativeName: Client_Script_SetConVarString
* @NativeFunctionAddress 00000001408F4E00
*/

void function SetConVarString(string, string)

/*
* @Breif Sets the value of a convar with an integer
* @Pramas string, int
* @NativeName: Client_Script_SetConVarInt
* @NativeFunctionAddress 00000001408F4DA0
*/

void function SetConVarInt(string, int)

/*
* @Breif Sets the value of a convar with a float
* @Pramas string, float
* @NativeName: Client_Script_SetConVarFloat
* @NativeFunctionAddress 00000001408F4D30
*/

void function SetConVarFloat(string, float)

/*
* @Breif Sets the value of a convar with a boolean
* @Pramas string, bool
* @NativeName: Client_Script_SetConVarBool
* @NativeFunctionAddress 00000001408F4CE0
*/

void function SetConVarBool(string, bool)

/*
* @Breif Sets the value of a convar to its internal default value
* @Pramas string
* @NativeName: Client_Script_SetConVarToDefault
* @NativeFunctionAddress 00000001408F4C90
*/

void function SetConVarToDefault(string)

/*
* @Breif Returns if an entity is a magnetic target
* @Pramas entity
* @NativeName: Client_Script_IsMagneticTarget
* @NativeFunctionAddress 00000001408F4C20
*/

bool function IsMagneticTarget(entity)

/*
* @Breif Is entity a turret
* @Pramas entity
* @NativeName: Client_Script_IsTurret
* @NativeFunctionAddress 00000001408F4B60
*/

bool function IsTurret(entity)

/*
* @Breif Precache a material for use with SetImage.
* @Pramas asset
* @NativeName: ScriptPrecacheHUDMaterial
* @NativeFunctionAddress 00000001408F4B10
*/

void function PrecacheHUDMaterial(asset)

/*
* @Breif Remove all ragdolls
* @Pramas 
* @NativeName: Script_RemoveAllRagdolls
* @NativeFunctionAddress 00000001408F4AD0
*/

void function RemoveAllRagdolls()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSafeAreaScaleSetting
* @NativeFunctionAddress 00000001408F4A20
*/

float function GetSafeAreaScaleSetting()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMusicReducedSetting
* @NativeFunctionAddress 00000001408F49D0
*/

bool function GetMusicReducedSetting()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DeathHintsSettingIsEnabled
* @NativeFunctionAddress 00000001408F4980
*/

bool function DeathHintsSettingIsEnabled()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetDamageIndicatorStyle_Pilot
* @NativeFunctionAddress 00000001408F48E0
*/

int function GetDamageIndicatorStyle_Pilot()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetDamageIndicatorStyle_Titan
* @NativeFunctionAddress 00000001408F4840
*/

int function GetDamageIndicatorStyle_Titan()

/*
* @Breif Returns whether a demo is being played back
* @Pramas 
* @NativeName: Script_IsPlayingDemo
* @NativeFunctionAddress 00000001408F47E0
*/

bool function IsPlayingDemo()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_Script_EverythingUnlockedConVarEnabled
* @NativeFunctionAddress 00000001408F4790
*/

bool function EverythingUnlockedConVarEnabled()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_Script_GetUnixTimestamp
* @NativeFunctionAddress 00000001408F4700
*/

int function GetUnixTimestamp()

/*
* @Breif Gets the given datatable asset
* @Pramas asset datatablepath
* @NativeName: SHARED_SCRIPT( Script_GetDatatable )
* @NativeFunctionAddress 0000000140841FF0
*/

var function GetDataTable()

/*
* @Breif Finds the column in the datatable with the given name. -1 if none
* @Pramas var datatable, string columnName
* @NativeName: SHARED_SCRIPT( Script_GetDatatableColumnByName )
* @NativeFunctionAddress 0000000140842030
*/

var function GetDataTableColumnByName()

/*
* @Breif Returns the number of rows in the datatable.
* @Pramas var datatable
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowCount )
* @NativeFunctionAddress 0000000140842070
*/

var function GetDatatableRowCount()

/*
* @Breif Gets a bool from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableBool )
* @NativeFunctionAddress 00000001408420D0
*/

var function GetDataTableBool()

/*
* @Breif Gets an int from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableInt )
* @NativeFunctionAddress 0000000140842130
*/

var function GetDataTableInt()

/*
* @Breif Gets a float from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableFloat )
* @NativeFunctionAddress 00000001408421A0
*/

var function GetDataTableFloat()

/*
* @Breif Gets a vector from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableVector )
* @NativeFunctionAddress 0000000140842200
*/

var function GetDataTableVector()

/*
* @Breif Gets a string from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableString )
* @NativeFunctionAddress 0000000140842260
*/

var function GetDataTableString()

/*
* @Breif Gets an asset from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableAsset )
* @NativeFunctionAddress 00000001408422C0
*/

var function GetDataTableAsset()

/*
* @Breif Finds and returns the first row of the datatable for which the bool in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, bool value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingBoolValue )
* @NativeFunctionAddress 0000000140842320
*/

var function GetDataTableRowMatchingBoolValue()

/*
* @Breif Finds and returns the first row of the datatable for which the int in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, int value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingIntValue )
* @NativeFunctionAddress 0000000140842420
*/

var function GetDataTableRowMatchingIntValue()

/*
* @Breif Finds and returns the first row of the datatable for which the int in the given column is less than or equal to the given value. -1 if none
* @Pramas var datatable, int column, int value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowLessThanOrEqualToIntValue )
* @NativeFunctionAddress 0000000140842530
*/

var function GetDataTableRowLessThanOrEqualToIntValue()

/*
* @Breif Finds and returns the first row of the datatable for which the int in the given column is greater than or equal to the given value. -1 if none
* @Pramas var datatable, int column, int value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowGreaterThanOrEqualToIntValue )
* @NativeFunctionAddress 0000000140842640
*/

var function GetDataTableRowGreaterThanOrEqualToIntValue()

/*
* @Breif Finds and returns the first row of the datatable for which the float in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, float value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingFloatValue )
* @NativeFunctionAddress 0000000140842750
*/

var function GetDataTableRowMatchingFloatValue()

/*
* @Breif Finds and returns the first row of the datatable for which the float in the given column is less than or equal to the given value. -1 if none
* @Pramas var datatable, int column, float value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowLessThanOrEqualToFloatValue )
* @NativeFunctionAddress 0000000140842870
*/

var function GetDataTableRowLessThanOrEqualToFloatValue()

/*
* @Breif Finds and returns the first row of the datatable for which the float in the given column is greater than or equal to the given value. -1 if none
* @Pramas var datatable, int column, float value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowGreaterThanOrEqualToFloatValue )
* @NativeFunctionAddress 0000000140842980
*/

var function GetDataTableRowGreaterThanOrEqualToFloatValue()

/*
* @Breif Finds and returns the first row of the datatable for which the vector in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, vector value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingVectorValue )
* @NativeFunctionAddress 0000000140842A90
*/

var function GetDataTableRowMatchingVectorValue()

/*
* @Breif Finds and returns the first row of the datatable for which the string in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, string value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingStringValue )
* @NativeFunctionAddress 0000000140842BB0
*/

var function GetDataTableRowMatchingStringValue()

/*
* @Breif Finds and returns the first row of the datatable for which the asset in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, asset value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingAssetValue )
* @NativeFunctionAddress 0000000140842C80
*/

var function GetDataTableRowMatchingAssetValue()

/*
* @Breif Gets the color ID for the specified colorName.
* @Pramas string colorName
* @NativeName: SHARED_SCRIPT( Script_ColorPalette_GetIDFromString )
* @NativeFunctionAddress 00000001408F3E50
*/

var function ColorPalette_GetIDFromString()

/*
* @Breif Gets the RGB values for the color specified by the colorID.
* @Pramas int colorID
* @NativeName: Script_ColorPalette_GetColorFromID
* @NativeFunctionAddress 00000001408F3F50
*/

var function ColorPalette_GetColorFromID()

/*
* @Breif 
* @Pramas int versionMajor, int versionMinor, table keyValuePairs
* @NativeName: SHARED_SCRIPT( Script_CreatePINTelemetryHeader )
* @NativeFunctionAddress 00000001408F40A0
*/

var function CreatePINTelemetryHeader()

/*
* @Breif 
* @Pramas string eventName, table headerKeyValuePairs, table bodyKeyValuePairs
* @NativeName: SHARED_SCRIPT( Script_AddPINTelemetryEvent )
* @NativeFunctionAddress 00000001408F40E0
*/

var function AddPINTelemetryEvent()

/*
* @Breif Gets the platform name the way PIN likes it
* @Pramas 
* @NativeName: Client_Script_GetPINPlatformName
* @NativeFunctionAddress 00000001407ACDE0
*/

string function GetPINPlatformName()

/*
* @Breif Gets the title ID for PIN
* @Pramas 
* @NativeName: Client_Script_GetPINTitleId
* @NativeFunctionAddress 00000001407ACD90
*/

string function GetPINTitleId()

/*
* @Breif Set the legendary view model and world model for the weapon. These values override the default values for the weapon. Set the values to "" to use default world or view model again.
* @Pramas string weaponName, int legendaryIndex, asset viewModelName, asset worldModelName
* @NativeName: Client_Script_SetWeaponLegendaryModel
* @NativeFunctionAddress 00000001408F4690
*/

void function SetWeaponLegendaryModel(string weaponName, int legendaryIndex, asset viewModelName, asset worldModelName)

/*
* @Breif Setup an optic appearance override for this weapon type.
* @Pramas string weaponName, string oaName, int overrideIndex, OpticAppearanceOverride oao
* @NativeName: SHARED_SCRIPT( Script_SetupOpticAppearanceOverride )
* @NativeFunctionAddress 00000001408F4220
*/

var function SetupOpticAppearanceOverride()

/*
* @Breif 
* @Pramas string itemAlias, int GRX_ITEMFLAVORMODE_
* @NativeName: SHARED_SCRIPT( Script_MTX_RegisterItem )
* @NativeFunctionAddress 00000001408F4260
*/

var function GRX_RegisterItem()

/*
* @Breif 
* @Pramas int itemIdx
* @NativeName: SHARED_SCRIPT( Script_MTX_GetConsumableCount )
* @NativeFunctionAddress 00000001408F43B0
*/

var function GRX_GetConsumableCount()

/*
* @Breif 
* @Pramas int itemIdx
* @NativeName: SHARED_SCRIPT( Script_MTX_GetPackCount )
* @NativeFunctionAddress 00000001408F4490
*/

var function GRX_GetPackCount()

/*
* @Breif 
* @Pramas int itemIdx
* @NativeName: SHARED_SCRIPT( Script_MTX_HasItem )
* @NativeFunctionAddress 00000001408F4570
*/

var function GRX_HasItem()

/*
* @Breif 
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_MTX_GetUserInfo )
* @NativeFunctionAddress 00000001408F4620
*/

var function GRX_GetUserInfo()

/*
* @Breif Returns true if we are running on a PS4.
* @Pramas 
* @NativeName: Ps4_IsPs4
* @NativeFunctionAddress 00000001407AD660
*/

bool function Ps4_IsPs4()

/*
* @Breif Starts a validation of PS plus membership.
* @Pramas 
* @NativeName: Ps4_CheckPlus_Schedule
* @NativeFunctionAddress 00000001408476F0
*/

bool function Ps4_CheckPlus_Schedule()

/*
* @Breif Checks the status of the last Ps4_CheckPlus_Schedule.
* @Pramas 
* @NativeName: Ps4_CheckPlus_Running
* @NativeFunctionAddress 0000000140847690
*/

bool function Ps4_CheckPlus_Running()

/*
* @Breif Checks the outcome of the last Ps4_CheckPlus_Schedule.
* @Pramas 
* @NativeName: Ps4_CheckPlus_Allowed
* @NativeFunctionAddress 0000000140847630
*/

bool function Ps4_CheckPlus_Allowed()

/*
* @Breif Checks the results of the last Ps4_CheckPlus_Schedule.
* @Pramas 
* @NativeName: Ps4_CheckPlus_GetLastRequestResults
* @NativeFunctionAddress 0000000140847590
*/

int function Ps4_CheckPlus_GetLastRequestResults()

/*
* @Breif if the user has a chat restriction and the platform requires us to tell them, do it
* @Pramas 
* @NativeName: Plat_ShowChatRestrictionNotice
* @NativeFunctionAddress 0000000140847540
*/

void function Plat_ShowChatRestrictionNotice()

/*
* @Breif if the user has a ugc restriction and the platform requires us to tell them, do it
* @Pramas 
* @NativeName: Plat_ShowUGCRestrictionNotice
* @NativeFunctionAddress 00000001408474F0
*/

void function Plat_ShowUGCRestrictionNotice()

/*
* @Breif Returns true if the common system dialog is currently being drawn
* @Pramas 
* @NativeName: Plat_IsSystemMessageDialogOpen
* @NativeFunctionAddress 0000000140847490
*/

bool function Plat_IsSystemMessageDialogOpen()

/*
* @Breif Unlocks an achievement by ID on the respective platform
* @Pramas int
* @NativeName: Plat_UnlockAchievementByID
* @NativeFunctionAddress 0000000140847410
*/

void function Plat_UnlockAchievementByID(int)

/*
* @Breif Starts a join dialog of PS plus membership.
* @Pramas 
* @NativeName: Ps4_ScreenPlusDialog_Schedule
* @NativeFunctionAddress 00000001408473B0
*/

bool function Ps4_ScreenPlusDialog_Schedule()

/*
* @Breif Checks the status of the last Ps4_ScreenPlusDialog_Schedule.
* @Pramas 
* @NativeName: Ps4_ScreenPlusDialog_Running
* @NativeFunctionAddress 0000000140847350
*/

bool function Ps4_ScreenPlusDialog_Running()

/*
* @Breif Checks the outcome of the last Ps4_ScreenPlusDialog_Schedule.
* @Pramas 
* @NativeName: Ps4_ScreenPlusDialog_Allowed
* @NativeFunctionAddress 00000001408472F0
*/

bool function Ps4_ScreenPlusDialog_Allowed()

/*
* @Breif Schedule the running of the PSN login dialog.
* @Pramas 
* @NativeName: Ps4_LoginDialog_Schedule
* @NativeFunctionAddress 0000000140847290
*/

bool function Ps4_LoginDialog_Schedule()

/*
* @Breif Is the PSN login dialog still running.
* @Pramas 
* @NativeName: Ps4_LoginDialog_Running
* @NativeFunctionAddress 0000000140847230
*/

bool function Ps4_LoginDialog_Running()

/*
* @Breif Are we logged into the PS Network.
* @Pramas 
* @NativeName: Ps4_PSN_Is_Loggedin
* @NativeFunctionAddress 00000001408471D0
*/

bool function Ps4_PSN_Is_Loggedin()

/*
* @Breif Asks if the PS4 networking has been resolved.
* @Pramas 
* @NativeName: PS4_isUserNetworkingResolved
* @NativeFunctionAddress 0000000140847170
*/

bool function PS4_isUserNetworkingResolved()

/*
* @Breif Asks if the PS4 networking is enabled.
* @Pramas 
* @NativeName: PS4_isUserNetworkingEnabled
* @NativeFunctionAddress 0000000140847110
*/

bool function PS4_isUserNetworkingEnabled()

/*
* @Breif Ask what the last resolution state was!
* @Pramas 
* @NativeName: PS4_getUserNetworkingResolution
* @NativeFunctionAddress 0000000140847070
*/

int function PS4_getUserNetworkingResolution()

/*
* @Breif Removed the delay on any retest of UserNetworkingEnabled!
* @Pramas 
* @NativeName: PS4_ScheduleUserNetworkingEnabledTest
* @NativeFunctionAddress 0000000140847020
*/

void function PS4_ScheduleUserNetworkingEnabledTest()

/*
* @Breif Get the Return code from last run!
* @Pramas 
* @NativeName: PS4_getUserNetworkingErrorStatus
* @NativeFunctionAddress 0000000140846F80
*/

int function PS4_getUserNetworkingErrorStatus()

/*
* @Breif Get state of network for device.
* @Pramas 
* @NativeName: PS4_isNetworkingDown
* @NativeFunctionAddress 0000000140846F20
*/

bool function PS4_isNetworkingDown()

/*
* @Breif Returns true if you are in a state where you can invite friends.
* @Pramas 
* @NativeName: PS4_canInviteFriends
* @NativeFunctionAddress 0000000140846EC0
*/

bool function PS4_canInviteFriends()

/*
* @Breif Returns true if the currently signed in user has age restriction to play multiplayer.
* @Pramas 
* @NativeName: PS4_is_NetworkStatusAgeRestriction
* @NativeFunctionAddress 0000000140846E60
*/

bool function PS4_is_NetworkStatusAgeRestriction()

/*
* @Breif Returns true if a difrent signed in user has age restriction to play multiplayer.
* @Pramas 
* @NativeName: PS4_is_NetworkStatusAgeRestrictionOther
* @NativeFunctionAddress 0000000140846E00
*/

bool function PS4_is_NetworkStatusAgeRestrictionOther()

/*
* @Breif Returns true if we are running on a Durango.
* @Pramas 
* @NativeName: Script_Durango_IsDurango
* @NativeFunctionAddress 00000001407AD660
*/

bool function Durango_IsDurango()

/*
* @Breif Returns true if we are in the error screen. eg. "User signed out!"
* @Pramas 
* @NativeName: Script_Durango_InErrorScreen
* @NativeFunctionAddress 0000000140846DA0
*/

bool function Durango_InErrorScreen()

/*
* @Breif The error string that should be displayed while in the error screen.
* @Pramas 
* @NativeName: Script_Durango_GetErrorString
* @NativeFunctionAddress 0000000140846D40
*/

string function Durango_GetErrorString()

/*
* @Breif Show the account picker UI. This should only be called when Durango_IsSignedIn is true.
* @Pramas 
* @NativeName: Script_Durango_ShowAccountPicker
* @NativeFunctionAddress 0000000140846CF0
*/

void function Durango_ShowAccountPicker()

/*
* @Breif Discard the current user/controller pair and go to the splash screen.
* @Pramas 
* @NativeName: Script_Durango_GoToSplashScreen
* @NativeFunctionAddress 0000000140846CA0
*/

void function Durango_GoToSplashScreen()

/*
* @Breif Returns true if we are in the splash screen.
* @Pramas 
* @NativeName: Script_Durango_InSplashScreen
* @NativeFunctionAddress 0000000140846C40
*/

bool function Durango_InSplashScreen()

/*
* @Breif Returns true if we are in the middle of async signing in (eg. loading profile, checking if we have permission to play multiplayer).
* @Pramas 
* @NativeName: Script_Durango_IsSigningIn
* @NativeFunctionAddress 0000000140846BE0
*/

bool function Durango_IsSigningIn()

/*
* @Breif Returns true if we have a signed-in user on Durango.
* @Pramas 
* @NativeName: Script_Console_IsSignedIn
* @NativeFunctionAddress 0000000140846B80
*/

bool function Console_IsSignedIn()

/*
* @Breif Returns the current game display name as a string. Valid only if Console_IsSignedIn is true.
* @Pramas 
* @NativeName: Script_Durango_GetGameDisplayName
* @NativeFunctionAddress 0000000140846B20
*/

string function Durango_GetGameDisplayName()

/*
* @Breif Returns true if the user has skipped sign in. Always false in retail build.
* @Pramas 
* @NativeName: Script_Console_SkippedSignIn
* @NativeFunctionAddress 0000000140846AC0
*/

bool function Console_SkippedSignIn()

/*
* @Breif Gets the number of members in the X1 party. This may be different to the number of party members in your game with you.
* @Pramas 
* @NativeName: Script_Durango_GetNumPartyMembers
* @NativeFunctionAddress 0000000140846A20
*/

int function Durango_GetNumPartyMembers()

/*
* @Breif Creates a party of one if required. Call this when you press 'PLAY' in the main menu.
* @Pramas 
* @NativeName: Script_Durango_CreatePartyOfOneIfRequired
* @NativeFunctionAddress 00000001408469D0
*/

void function Durango_CreatePartyOfOneIfRequired()

/*
* @Breif Returns true if you are in a state where you can invite friends.
* @Pramas 
* @NativeName: Script_Durango_CanInviteFriends
* @NativeFunctionAddress 0000000140846970
*/

bool function Durango_CanInviteFriends()

/*
* @Breif Invite your friends to join your party.
* @Pramas 
* @NativeName: Script_Durango_InviteFriends
* @NativeFunctionAddress 0000000140846900
*/

bool function Durango_InviteFriends()

/*
* @Breif Leave the X1 party.
* @Pramas 
* @NativeName: Script_Durango_LeaveParty
* @NativeFunctionAddress 00000001408468B0
*/

void function Durango_LeaveParty()

/*
* @Breif Returns true if controller is disconnected post-main menu.
* @Pramas 
* @NativeName: Script_Durango_IsControllerDisconnected
* @NativeFunctionAddress 0000000140846850
*/

bool function Durango_IsControllerDisconnected()

/*
* @Breif Returns true if we are currently in a suspended state
* @Pramas 
* @NativeName: Script_Durango_IsSuspended
* @NativeFunctionAddress 00000001408467F0
*/

bool function Durango_IsSuspended()

/*
* @Breif Returns true if we are currently online. eg: connected to the internet
* @Pramas 
* @NativeName: Script_Console_IsOnline
* @NativeFunctionAddress 0000000140846790
*/

bool function Console_IsOnline()

/*
* @Breif Triggers an async check for user permissions. If user does not have permission they are sent back to splash with error. Call when user presses 'PLAY'.
* @Pramas 
* @NativeName: Script_Durango_VerifyMultiplayerPermissions
* @NativeFunctionAddress 0000000140846740
*/

void function Durango_VerifyMultiplayerPermissions()

/*
* @Breif Returns true if the currently signed in user has permission to play multiplayer.
* @Pramas 
* @NativeName: Script_Console_HasPermissionToPlayMultiplayer
* @NativeFunctionAddress 00000001408466E0
*/

bool function Console_HasPermissionToPlayMultiplayer()

/*
* @Breif Returns whether the signed in Durango player is a guest
* @Pramas 
* @NativeName: Script_Durango_IsGuest
* @NativeFunctionAddress 0000000140846680
*/

bool function Durango_IsGuest()

/*
* @Breif Call when enterring the lobby ( int gamemodeId, int difficultyLevelId )
* @Pramas int, int
* @NativeName: Script_Durango_OnLobbySessionStart
* @NativeFunctionAddress 0000000140846600
*/

void function Durango_OnLobbySessionStart(int, int)

/*
* @Breif Call when starting a multiplayer round ( int gamemodeId, int mapId, int difficultyLevelId, int roundId, int matchTypeId )
* @Pramas int, int, int, int, int
* @NativeName: Script_Durango_OnMultiplayerRoundStart
* @NativeFunctionAddress 0000000140846540
*/

void function Durango_OnMultiplayerRoundStart(int, int, int, int, int)

/*
* @Breif Update the currently signed in Durango player's game progress [0, 1]
* @Pramas float
* @NativeName: Script_Durango_SetGameProgress
* @NativeFunctionAddress 00000001408464B0
*/

void function Durango_SetGameProgress(float)

/*
* @Breif Update the currently signed in Durango player's SP progress [0, 1]
* @Pramas float
* @NativeName: Script_Durango_SetSpProgress
* @NativeFunctionAddress 0000000140846420
*/

void function Durango_SetSpProgress(float)

/*
* @Breif Update the currently signed in Durango player's number of collectibles found
* @Pramas int
* @NativeName: Script_Durango_SetCollectiblesFound
* @NativeFunctionAddress 00000001408463A0
*/

void function Durango_SetCollectiblesFound(int)

/*
* @Breif Gets the current player's XUID
* @Pramas 
* @NativeName: Script_Durango_GetXUID
* @NativeFunctionAddress 0000000140846300
*/

string function Durango_GetXUID()

/*
* @Breif Show the Durango help window (probably snapped) that has a game manual. Returns true if the window will be shown
* @Pramas 
* @NativeName: Script_Durango_ShowHelpWindow
* @NativeFunctionAddress 00000001408462A0
*/

bool function Durango_ShowHelpWindow()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Durango_IsJoinable
* @NativeFunctionAddress 0000000140846240
*/

bool function Durango_IsJoinable()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Durango_OpenPartyApp
* @NativeFunctionAddress 00000001408461F0
*/

void function Durango_OpenPartyApp()

/*
* @Breif Returns true if the full game is installed. You can't start mp or any sp map but sp_training and sp_crashsite if this is false.
* @Pramas 
* @NativeName: Client_IsGameFullyInstalled
* @NativeFunctionAddress 00000001408478A0
*/

bool function IsGameFullyInstalled()

/*
* @Breif Returns true if the game is partially installed. You can't start sp training this is false.
* @Pramas 
* @NativeName: Client_IsGamePartiallyInstalled
* @NativeFunctionAddress 0000000140847840
*/

bool function IsGamePartiallyInstalled()

/*
* @Breif Returns fraction 0.0 to 1.0 of downloading of full game progress.
* @Pramas 
* @NativeName: Client_GetGameFullyInstalledProgress
* @NativeFunctionAddress 00000001408477A0
*/

float function GetGameFullyInstalledProgress()

/*
* @Breif Returns whether there are assets loaded from before the game was fully instaled--i.e., we need to restart or reload rpaks.
* @Pramas 
* @NativeName: Client_HasNonFullyInstalledAssetsLoaded
* @NativeFunctionAddress 0000000140847750
*/

bool function HasNonFullyInstalledAssetsLoaded()

/*
* @Breif Returns the current visibility state of the specified visGroup
* @Pramas int
* @NativeName: IsVisGroupVisible
* @NativeFunctionAddress 00000001409BE8E0
*/

bool function IsVisGroupVisible(int)

/*
* @Breif Set the specified visGroup to the specified state.
* @Pramas int, bool
* @NativeName: SetVisGroupVisible
* @NativeFunctionAddress 00000001409BE860
*/

void function SetVisGroupVisible(int, bool)

/*
* @Breif Returns a new visGroup handle.
* @Pramas 
* @NativeName: CreateVisGroup
* @NativeFunctionAddress 00000001409BE790
*/

int function CreateVisGroup()

/*
* @Breif Returns the clients desired screen fade settings
* @Pramas 
* @NativeName: GetFadeParams
* @NativeFunctionAddress 00000001409BE6E0
*/

var function GetFadeParams()

/*
* @Breif Begin registration of remote functions and script network vars.
* @Pramas 
* @NativeName: Script_Remote_BeginRegisteringFunctions_Client
* @NativeFunctionAddress 00000001409BE6A0
*/

void function Remote_BeginRegisteringFunctions()

/*
* @Breif Begin registration of remote functions and script network vars for the level script.
* @Pramas 
* @NativeName: Script_Remote_BeginRegisteringLevelFunctions_Client
* @NativeFunctionAddress 00000001409BE610
*/

void function Remote_BeginRegisteringLevelFunctions()

/*
* @Breif Register a function name to be used in remote calls.
* @Pramas string
* @NativeName: Script_Remote_RegisterUntypedFunction_Client
* @NativeFunctionAddress 00000001409BE5C0
*/

void function Remote_RegisterUntypedFunction_deprecated(string)

/*
* @Breif Register a function name to be used in remote calls. Specify argument types with "bool", "int", "float", "vector", and "entity". "int" must be followed by min, max + 1. "float" and "vector" must be followed by min, max, bit count. The value will be rounded to the nearest 1/2^(bit count) fraction of the specified range. Use 32 to send perfectly precise values.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterUIFunction_Client
* @NativeFunctionAddress 00000001409B1EB0
*/

var function Remote_RegisterUIFunction()

/*
* @Breif Same as Remote_RegisterUIFunction, but the function is not required to exist. Useful for dev-only functions.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterUIFunction_Optional_Client
* @NativeFunctionAddress 00000001409B1EF0
*/

var function Remote_RegisterUIFunction_Optional()

/*
* @Breif Register a function name to be used in remote calls. Specify argument types with "bool", "int", "float", "vector", and "entity". "int" must be followed by min, max + 1. "float" and "vector" must be followed by min, max, bit count. The value will be rounded to the nearest 1/2^(bit count) fraction of the specified range. Use 32 to send perfectly precise values.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterClientFunction_Client
* @NativeFunctionAddress 00000001409B1F30
*/

var function Remote_RegisterClientFunction()

/*
* @Breif Same as Remote_RegisterClientFunction, but the function is not required to exist. Useful for dev-only functions.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterClientFunction_Optional_Client
* @NativeFunctionAddress 00000001409B1F70
*/

var function Remote_RegisterClientFunction_Optional()

/*
* @Breif Finish registration of remote functions and script network vars.
* @Pramas 
* @NativeName: Script_Remote_EndRegisteringFunctions_Client
* @NativeFunctionAddress 00000001409BE530
*/

void function Remote_EndRegisteringFunctions()

/*
* @Breif Finish registration of remote functions and script network vars for the level script.
* @Pramas 
* @NativeName: Script_Remote_EndRegisteringLevelFunctions_Client
* @NativeFunctionAddress 00000001409BE4A0
*/

void function Remote_EndRegisteringLevelFunctions()

/*
* @Breif Destroy a hud element.
* @Pramas var
* @NativeName: Hud_Destroy
* @NativeFunctionAddress 00000001409BE420
*/

void function Hud_Destroy(var)

/*
* @Breif Reveal a hud element.
* @Pramas var
* @NativeName: Hud_Show
* @NativeFunctionAddress 00000001409BE3B0
*/

void function Hud_Show(var)

/*
* @Breif Hide a hud element.
* @Pramas var
* @NativeName: Hud_Hide
* @NativeFunctionAddress 00000001409BE340
*/

void function Hud_Hide(var)

/*
* @Breif Set visibility of a hud element.
* @Pramas var, bool
* @NativeName: Hud_SetVisible
* @NativeFunctionAddress 00000001409BE2C0
*/

void function Hud_SetVisible(var, bool)

/*
* @Breif Refresh the visibility a hud element.
* @Pramas var
* @NativeName: Hud_UpdateVisibility
* @NativeFunctionAddress 00000001409BE240
*/

void function Hud_UpdateVisibility(var)

/*
* @Breif Returns whether the given hud element is currently visible.
* @Pramas var
* @NativeName: Hud_IsVisible
* @NativeFunctionAddress 00000001409BE1A0
*/

bool function Hud_IsVisible(var)

/*
* @Breif Returns whether the given hud element is above the screen blur effect
* @Pramas var
* @NativeName: Hud_IsAboveBlur
* @NativeFunctionAddress 00000001409BE100
*/

bool function Hud_IsAboveBlur(var)

/*
* @Breif Tells a hud element to draw before or after the screen blur effect
* @Pramas var, bool
* @NativeName: Hud_SetAboveBlur
* @NativeFunctionAddress 00000001409BE070
*/

void function Hud_SetAboveBlur(var, bool)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetVisGroupID
* @NativeFunctionAddress 00000001409BDFE0
*/

void function Hud_SetVisGroupID(var, int)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetVisGroupID
* @NativeFunctionAddress 00000001409BDF10
*/

int function Hud_GetVisGroupID(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_GetHudName
* @NativeFunctionAddress 00000001409BDE70
*/

string function Hud_GetHudName(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_GetScriptID
* @NativeFunctionAddress 00000001409BDDF0
*/

string function Hud_GetScriptID(var)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas var, string, int, float
* @NativeName: Hud_Script_SetAutoText
* @NativeFunctionAddress 00000001409BDD10
*/

void function Hud_SetAutoText(var, string, int, float)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas var, string, string, string, int, float
* @NativeName: Hud_Script_SetAutoTextWithAlternates
* @NativeFunctionAddress 00000001409BDC20
*/

void function Hud_SetAutoTextWithAlternates(var, string, string, string, int, float)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas var, string, int, vector
* @NativeName: Hud_Script_SetAutoTextVector
* @NativeFunctionAddress 00000001409BDB90
*/

void function Hud_SetAutoTextVector(var, string, int, vector)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas var, string, int, entity
* @NativeName: Hud_Script_SetAutoTextEntity
* @NativeFunctionAddress 00000001409BDAE0
*/

void function Hud_SetAutoTextEntity(var, string, int, entity)

/*
* @Breif Set the auto text settings for this HUD element. ( localization token, HATT type, start value, end value, transition time );
* @Pramas var, string, float, float, float
* @NativeName: Hud_Script_SetAutoTextCountTo
* @NativeFunctionAddress 00000001409BDA20
*/

void function Hud_SetAutoTextCountTo(var, string, float, float, float)

/*
* @Breif Enable the auto text updating
* @Pramas var
* @NativeName: Hud_Script_EnableAutoText
* @NativeFunctionAddress 00000001409BD990
*/

void function Hud_EnableAutoText(var)

/*
* @Breif Disable the auto text updating
* @Pramas var
* @NativeName: Hud_Script_DisableAutoText
* @NativeFunctionAddress 00000001409BD900
*/

void function Hud_DisableAutoText(var)

/*
* @Breif Returns true if an auto text has been set for it and it is enabled
* @Pramas var
* @NativeName: Hud_Script_IsAutoText
* @NativeFunctionAddress 00000001409BD860
*/

bool function Hud_IsAutoText(var)

/*
* @Breif Enable replacing key bindings with the actual key
* @Pramas var
* @NativeName: Hud_Script_EnableKeyBindingIcons
* @NativeFunctionAddress 00000001409BD7F0
*/

void function Hud_EnableKeyBindingIcons(var)

/*
* @Breif Disable replacing key bindings with the actual key
* @Pramas var
* @NativeName: Hud_Script_DisableKeyBindingIcons
* @NativeFunctionAddress 00000001409BD780
*/

void function Hud_DisableKeyBindingIcons(var)

/*
* @Breif Scale key binding icon sizes by this amount
* @Pramas var, float
* @NativeName: Hud_Script_SetKeyBindingIconScale
* @NativeFunctionAddress 00000001409BD6E0
*/

void function Hud_SetKeyBindingIconScale(var, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetWidth
* @NativeFunctionAddress 00000001409BD630
*/

int function Hud_GetWidth(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetHeight
* @NativeFunctionAddress 00000001409BD580
*/

int function Hud_GetHeight(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetX
* @NativeFunctionAddress 00000001409BD4D0
*/

int function Hud_GetX(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetY
* @NativeFunctionAddress 00000001409BD420
*/

int function Hud_GetY(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetAbsX
* @NativeFunctionAddress 00000001409BD370
*/

int function Hud_GetAbsX(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetAbsY
* @NativeFunctionAddress 00000001409BD2C0
*/

int function Hud_GetAbsY(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetAbsPos
* @NativeFunctionAddress 00000001409BD100
*/

var function Hud_GetAbsPos(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetParentRelativePos
* @NativeFunctionAddress 00000001409BCF40
*/

var function Hud_GetParentRelativePos(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseWidth
* @NativeFunctionAddress 00000001409BCE60
*/

int function Hud_GetBaseWidth(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseHeight
* @NativeFunctionAddress 00000001409BCD80
*/

int function Hud_GetBaseHeight(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBasePos
* @NativeFunctionAddress 00000001409BCBE0
*/

var function Hud_GetBasePos(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseSize
* @NativeFunctionAddress 00000001409BCA40
*/

var function Hud_GetBaseSize(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseX
* @NativeFunctionAddress 00000001409BC960
*/

int function Hud_GetBaseX(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseY
* @NativeFunctionAddress 00000001409BC880
*/

int function Hud_GetBaseY(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetClampToScreen
* @NativeFunctionAddress 00000001409BC7D0
*/

void function Hud_SetClampToScreen(var, int)

/*
* @Breif 
* @Pramas var, float, float
* @NativeName: Hud_SetClampBounds
* @NativeFunctionAddress 00000001409BC710
*/

void function Hud_SetClampBounds(var, float, float)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetWorldSpaceScale
* @NativeFunctionAddress 00000001409BC610
*/

void function Hud_SetWorldSpaceScale(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetADSFade
* @NativeFunctionAddress 00000001409BC520
*/

void function Hud_SetADSFade(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetDistanceFade
* @NativeFunctionAddress 00000001409BC430
*/

void function Hud_SetDistanceFade(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetFOVFade
* @NativeFunctionAddress 00000001409BC340
*/

void function Hud_SetFOVFade(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, float, float, float
* @NativeName: Hud_SetPulsate
* @NativeFunctionAddress 00000001409BC270
*/

void function Hud_SetPulsate(var, float, float, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ClearPulsate
* @NativeFunctionAddress 00000001409BC1E0
*/

void function Hud_ClearPulsate(var)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetOffscreenArrow
* @NativeFunctionAddress 00000001409BC150
*/

void function Hud_SetOffscreenArrow(var, bool)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsOnScreen
* @NativeFunctionAddress 00000001409BC0C0
*/

bool function Hud_IsOnScreen(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsLabel
* @NativeFunctionAddress 00000001409BC020
*/

bool function Hud_IsLabel(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsRuiPanel
* @NativeFunctionAddress 00000001409BBF80
*/

bool function Hud_IsRuiPanel(var)

/*
* @Breif 
* @Pramas var, var
* @NativeName: Hud_SetNavUp
* @NativeFunctionAddress 00000001409BBEF0
*/

void function Hud_SetNavUp(var, var)

/*
* @Breif 
* @Pramas var, var
* @NativeName: Hud_SetNavDown
* @NativeFunctionAddress 00000001409BBE60
*/

void function Hud_SetNavDown(var, var)

/*
* @Breif 
* @Pramas var, var
* @NativeName: Hud_SetNavLeft
* @NativeFunctionAddress 00000001409BBDD0
*/

void function Hud_SetNavLeft(var, var)

/*
* @Breif 
* @Pramas var, var
* @NativeName: Hud_SetNavRight
* @NativeFunctionAddress 00000001409BBD40
*/

void function Hud_SetNavRight(var, var)

/*
* @Breif 
* @Pramas var, int, int
* @NativeName: Hud_SetBaseSize
* @NativeFunctionAddress 00000001409BBC70
*/

void function Hud_SetBaseSize(var, int, int)

/*
* @Breif 
* @Pramas var, string, float
* @NativeName: Hud_SetTextTypeWriter
* @NativeFunctionAddress 00000001409BBBB0
*/

void function Hud_SetTextTypeWriter(var, string, float)

/*
* @Breif 
* @Pramas var, int, int
* @NativeName: Hud_SetBasePos
* @NativeFunctionAddress 00000001409BBAE0
*/

void function Hud_SetBasePos(var, int, int)

/*
* @Breif 
* @Pramas var, int, int, int, int
* @NativeName: Hud_SetBaseColor
* @NativeFunctionAddress 00000001409BB9E0
*/

void function Hud_SetBaseColor(var, int, int, int, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetX
* @NativeFunctionAddress 00000001409BB940
*/

void function Hud_SetX(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetY
* @NativeFunctionAddress 00000001409BB8A0
*/

void function Hud_SetY(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_OffsetX
* @NativeFunctionAddress 00000001409BB800
*/

void function Hud_OffsetX(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_OffsetY
* @NativeFunctionAddress 00000001409BB760
*/

void function Hud_OffsetY(var, int)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseColor
* @NativeFunctionAddress 00000001409BB580
*/

var function Hud_GetBaseColor(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseAlpha
* @NativeFunctionAddress 00000001409BB4A0
*/

int function Hud_GetBaseAlpha(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetCursorPriority
* @NativeFunctionAddress 00000001409BB3F0
*/

int function Hud_GetCursorPriority(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetCursorPriority
* @NativeFunctionAddress 00000001409BB370
*/

void function Hud_SetCursorPriority(var, int)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetCursorVelocityModifier
* @NativeFunctionAddress 00000001409BB2E0
*/

void function Hud_SetCursorVelocityModifier(var, float)

/*
* @Breif 
* @Pramas var, float, float
* @NativeName: Hud_SetCounterscrollScale
* @NativeFunctionAddress 00000001409BB240
*/

void function Hud_SetCounterscrollScale(var, float, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetBarProgress
* @NativeFunctionAddress 00000001409BB1A0
*/

void function Hud_SetBarProgress(var, float)

/*
* @Breif 
* @Pramas var, float, float
* @NativeName: Hud_SetBarProgressAndRate
* @NativeFunctionAddress 00000001409BB0F0
*/

void function Hud_SetBarProgressAndRate(var, float, float)

/*
* @Breif 
* @Pramas var, float, float, float
* @NativeName: Hud_SetBarProgressOverTime
* @NativeFunctionAddress 00000001409BB020
*/

void function Hud_SetBarProgressOverTime(var, float, float, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBarProgress
* @NativeFunctionAddress 00000001409BAF70
*/

float function Hud_GetBarProgress(var)

/*
* @Breif 
* @Pramas var, int, int
* @NativeName: Hud_SetBarSegmentInfo
* @NativeFunctionAddress 00000001409BAEC0
*/

void function Hud_SetBarSegmentInfo(var, int, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarInset
* @NativeFunctionAddress 00000001409BAE20
*/

void function Hud_SetBarInset(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarMargin
* @NativeFunctionAddress 00000001409BAD80
*/

void function Hud_SetBarMargin(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarProgressDirection
* @NativeFunctionAddress 00000001409BACE0
*/

void function Hud_SetBarProgressDirection(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarSegmentFill
* @NativeFunctionAddress 00000001409BAC40
*/

void function Hud_SetBarSegmentFill(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarProgressSource
* @NativeFunctionAddress 00000001409BABA0
*/

void function Hud_SetBarProgressSource(var, int)

/*
* @Breif 
* @Pramas var, entity
* @NativeName: Hud_SetBarProgressSourceEntity
* @NativeFunctionAddress 00000001409BAB00
*/

void function Hud_SetBarProgressSourceEntity(var, entity)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetBarProgressRemap
* @NativeFunctionAddress 00000001409BAA10
*/

void function Hud_SetBarProgressRemap(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarChangeStyle
* @NativeFunctionAddress 00000001409BA970
*/

void function Hud_SetBarChangeStyle(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarChangeDir
* @NativeFunctionAddress 00000001409BA8D0
*/

void function Hud_SetBarChangeDir(var, int)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetBarChangeDuration
* @NativeFunctionAddress 00000001409BA830
*/

void function Hud_SetBarChangeDuration(var, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ReturnToBaseColor
* @NativeFunctionAddress 00000001409BA7C0
*/

void function Hud_ReturnToBaseColor(var)

/*
* @Breif Sets the color of an element with components (red, green, blue, alpha); given as 0-255 values.
* @Pramas 
* @NativeName: Hud_Script_SetColor
* @NativeFunctionAddress 00000001409B2D20
*/

void function Hud_SetColor(var, var, var, var, var, var)

/*
* @Breif Sets the background color of an element with components (red, green, blue, alpha); given as 0-255 values.
* @Pramas 
* @NativeName: Hud_Script_SetColorBG
* @NativeFunctionAddress 00000001409B2E60
*/

void function Hud_SetColorBG(var, var, var, var, var, var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_Script_SetAlpha
* @NativeFunctionAddress 00000001409BA720
*/

void function Hud_SetAlpha(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_Script_SetPanelAlpha
* @NativeFunctionAddress 00000001409BA680
*/

void function Hud_SetPanelAlpha(var, int)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_GetPanelAlpha
* @NativeFunctionAddress 00000001409BA5A0
*/

int function Hud_GetPanelAlpha(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetAlpha
* @NativeFunctionAddress 00000001409BA4F0
*/

int function Hud_GetAlpha(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBaseAlpha
* @NativeFunctionAddress 00000001409BA470
*/

void function Hud_SetBaseAlpha(var, int)

/*
* @Breif Get the estimated drawn width of this label.
* @Pramas var
* @NativeName: Hud_GetTextWidth
* @NativeFunctionAddress 00000001409BA3C0
*/

int function Hud_GetTextWidth(var)

/*
* @Breif 
* @Pramas var, entity, vector, float, float
* @NativeName: Hud_Script_SetEntity
* @NativeFunctionAddress 00000001409BA2D0
*/

void function Hud_SetEntity(var, entity, vector, float, float)

/*
* @Breif 
* @Pramas var, entity, vector, float, float
* @NativeName: Hud_Script_SetEntityOverhead
* @NativeFunctionAddress 00000001409BA1E0
*/

void function Hud_SetEntityOverhead(var, entity, vector, float, float)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetHideOnEntityOverheadCloak
* @NativeFunctionAddress 00000001409BA150
*/

void function Hud_SetHideOnEntityOverheadCloak(var, bool)

/*
* @Breif 
* @Pramas var, vector
* @NativeName: Hud_SetOrigin
* @NativeFunctionAddress 00000001409BA0C0
*/

void function Hud_SetOrigin(var, vector)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ClearWorldOrigin
* @NativeFunctionAddress 00000001409BA030
*/

void function Hud_ClearWorldOrigin(var)

/*
* @Breif Adds a hint to the hint system with a max of 3 string args to the hint.
* @Pramas float, float, asset, string, [param1, param2, param3...]
* @NativeName: AddPlayerHint
* @NativeFunctionAddress 00000001409B3160
*/

void function AddPlayerHint(var, var, var, var, var, var)

/*
* @Breif 
* @Pramas string
* @NativeName: HidePlayerHint
* @NativeFunctionAddress 00000001409B9F70
*/

void function HidePlayerHint(string)

/*
* @Breif 
* @Pramas var, float, float
* @NativeName: Hud_SetScale
* @NativeFunctionAddress 00000001409B9EC0
*/

void function Hud_SetScale(var, float, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetScaleX
* @NativeFunctionAddress 00000001409B9E20
*/

void function Hud_SetScaleX(var, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetScaleY
* @NativeFunctionAddress 00000001409B9D80
*/

void function Hud_SetScaleY(var, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetScaleX
* @NativeFunctionAddress 00000001409B9CA0
*/

float function Hud_GetScaleX(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetScaleY
* @NativeFunctionAddress 00000001409B9BC0
*/

float function Hud_GetScaleY(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ReturnToBasePos
* @NativeFunctionAddress 00000001409B9B40
*/

void function Hud_ReturnToBasePos(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ReturnToBaseSize
* @NativeFunctionAddress 00000001409B9AC0
*/

void function Hud_ReturnToBaseSize(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsSelected
* @NativeFunctionAddress 00000001409B9A50
*/

bool function Hud_IsSelected(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsLocked
* @NativeFunctionAddress 00000001409B99C0
*/

bool function Hud_IsLocked(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsNew
* @NativeFunctionAddress 00000001409B9930
*/

bool function Hud_IsNew(var)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetSelected
* @NativeFunctionAddress 00000001409B98A0
*/

void function Hud_SetSelected(var, bool)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetLocked
* @NativeFunctionAddress 00000001409B9810
*/

void function Hud_SetLocked(var, bool)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetNew
* @NativeFunctionAddress 00000001409B9780
*/

void function Hud_SetNew(var, bool)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetListSize
* @NativeFunctionAddress 00000001409B96D0
*/

int function Hud_GetListSize(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_GetListItem
* @NativeFunctionAddress 00000001409B9620
*/

var function Hud_GetListItem(var, int)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetListSelectedItem
* @NativeFunctionAddress 00000001409B9590
*/

var function Hud_GetListSelectedItem(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetListPanelSelectedItem
* @NativeFunctionAddress 00000001409B94F0
*/

string function Hud_GetListPanelSelectedItem(var)

/*
* @Breif Returns the name of the row that is currently selected in a ListPanel
* @Pramas var
* @NativeName: Hud_GetListPanelSelectionRowNum
* @NativeFunctionAddress 00000001409B9440
*/

int function Hud_GetListPanelSelectionRowNum(var)

/*
* @Breif Returns the number of rows that are in a ListPanel
* @Pramas var
* @NativeName: Hud_GetListPanelRowCount
* @NativeFunctionAddress 00000001409B9390
*/

int function Hud_GetListPanelRowCount(var)

/*
* @Breif Sets the pin sibling by name
* @Pramas var, string
* @NativeName: Hud_SetPinSibling
* @NativeFunctionAddress 00000001409B92E0
*/

void function Hud_SetPinSibling(var, string)

/*
* @Breif 
* @Pramas x, y, duration, [interpolator]
* @NativeName: Hud_Script_MoveOverTime
* @NativeFunctionAddress 00000001409B3240
*/

void function Hud_MoveOverTime(var, var, number, number, number, int)

/*
* @Breif 
* @Pramas r, g, b, a, duration, [interpolator]
* @NativeName: Hud_Script_ColorOverTime
* @NativeFunctionAddress 00000001409B3380
*/

void function Hud_ColorOverTime(var, var, int, int, int, int, number, int)

/*
* @Breif 
* @Pramas wScale, hScale, duration, [interpolator]
* @NativeName: Hud_Script_ScaleOverTime
* @NativeFunctionAddress 00000001409B34C0
*/

void function Hud_ScaleOverTime(var, var, number, number, number, int)

/*
* @Breif 
* @Pramas x, y, duration, [interpolator]
* @NativeName: Hud_Script_OffsetOverTime
* @NativeFunctionAddress 00000001409B3600
*/

void function Hud_OffsetOverTime(var, var, number, number, number, int)

/*
* @Breif 
* @Pramas a, duration, [interpolator]
* @NativeName: Hud_Script_FadeOverTime
* @NativeFunctionAddress 00000001409B3740
*/

void function Hud_FadeOverTime(var, var, int, number, int)

/*
* @Breif 
* @Pramas var, float, int
* @NativeName: Hud_ReturnToBasePosOverTime
* @NativeFunctionAddress 00000001409B9220
*/

void function Hud_ReturnToBasePosOverTime(var, float, int)

/*
* @Breif 
* @Pramas var, float, int
* @NativeName: Hud_ReturnToBaseScaleOverTime
* @NativeFunctionAddress 00000001409B9160
*/

void function Hud_ReturnToBaseScaleOverTime(var, float, int)

/*
* @Breif 
* @Pramas x, duration, [interpolator]
* @NativeName: Hud_Script_SetXOverTime
* @NativeFunctionAddress 00000001409B3950
*/

void function Hud_SetXOverTime(var, var, number, number, int)

/*
* @Breif 
* @Pramas y, duration, [interpolator]
* @NativeName: Hud_Script_SetYOverTime
* @NativeFunctionAddress 00000001409B3A90
*/

void function Hud_SetYOverTime(var, var, number, number, int)

/*
* @Breif 
* @Pramas x, duration, [interpolator]
* @NativeName: Hud_Script_OffsetXOverTime
* @NativeFunctionAddress 00000001409B3BD0
*/

void function Hud_OffsetXOverTime(var, var, number, number, int)

/*
* @Breif 
* @Pramas y, duration, [interpolator]
* @NativeName: Hud_Script_OffsetYOverTime
* @NativeFunctionAddress 00000001409B3D10
*/

void function Hud_OffsetYOverTime(var, var, number, number, int)

/*
* @Breif 
* @Pramas duration, [interpolator]
* @NativeName: Hud_Script_HideOverTime
* @NativeFunctionAddress 00000001409B3E50
*/

void function Hud_HideOverTime(var, var, number, int)

/*
* @Breif 
* @Pramas r, g, b, a, duration, delay, [interpolator]
* @NativeName: Hud_Script_ColorOverTimeDelayed
* @NativeFunctionAddress 00000001409B3F90
*/

void function Hud_ColorOverTimeDelayed(var, var, int, int, int, int, number, number, int)

/*
* @Breif 
* @Pramas a, duration, delay, [interpolator]
* @NativeName: Hud_Script_FadeOverTimeDelayed
* @NativeFunctionAddress 00000001409B40D0
*/

void function Hud_FadeOverTimeDelayed(var, var, int, number, number, int)

/*
* @Breif 
* @Pramas var, string
* @NativeName: Hud_Script_RunAnimationScript
* @NativeFunctionAddress 00000001409B90E0
*/

void function Hud_RunAnimationScript(var, string)

/*
* @Breif Set the text of a label element. Optional parameters for localized-string '%s1'-type format vars.
* @Pramas index, string, [param1, param2, param3...]
* @NativeName: Hud_Script_SetText
* @NativeFunctionAddress 00000001409B4210
*/

void function Hud_SetText(var, var, string)

/*
* @Breif Sets the drawtext rui of an element that renders text (only supports RichText element at the moment).
* @Pramas var, string
* @NativeName: Hud_SetDrawTextRui
* @NativeFunctionAddress 00000001409B9060
*/

void function Hud_SetDrawTextRui(var, string)

/*
* @Breif Set the image of an imagePanel element.
* @Pramas var hudelem, asset
* @NativeName: Hud_SetImage
* @NativeFunctionAddress 00000001409B8FC0
*/

void function Hud_SetImage(var hudelem, asset)

/*
* @Breif Sets an image in the label on the left side, or right side if the second parameter is true.
* @Pramas var hudelem, asset, bool rightSide
* @NativeName: Hud_SetLabelImage
* @NativeFunctionAddress 00000001409B8F10
*/

void function Hud_SetLabelImage(var hudelem, asset, bool rightSide)

/*
* @Breif 
* @Pramas var, string, float, float, float, int, float
* @NativeName: Hud_RunAnimationCommand
* @NativeFunctionAddress 00000001409B8DF0
*/

void function Hud_RunAnimationCommand(var, string, float, float, float, int, float)

/*
* @Breif Gets the color of an element as an array with four elements (red, green, blue, alpha);.
* @Pramas var
* @NativeName: Hud_GetColor
* @NativeFunctionAddress 00000001409B8CF0
*/

var function Hud_GetColor(var)

/*
* @Breif Get the position of the given hud element, as an array with two elements.
* @Pramas var
* @NativeName: Hud_GetPos
* @NativeFunctionAddress 00000001409B8B30
*/

var function Hud_GetPos(var)

/*
* @Breif Set the position of the given hud element.
* @Pramas var, int, int
* @NativeName: Hud_SetPos
* @NativeFunctionAddress 00000001409B8A80
*/

void function Hud_SetPos(var, int, int)

/*
* @Breif Set the Z position of the given hud element.
* @Pramas var, int
* @NativeName: Hud_SetZ
* @NativeFunctionAddress 00000001409B8A00
*/

void function Hud_SetZ(var, int)

/*
* @Breif Get the size of the given hud element, as an array with two elements.
* @Pramas var
* @NativeName: Hud_GetSize
* @NativeFunctionAddress 00000001409B8840
*/

var function Hud_GetSize(var)

/*
* @Breif Set the size of the given hud element.
* @Pramas var, int, int
* @NativeName: Hud_SetSize
* @NativeFunctionAddress 00000001409B8790
*/

void function Hud_SetSize(var, int, int)

/*
* @Breif Set the width of the given hud element.
* @Pramas var, int
* @NativeName: Hud_SetWidth
* @NativeFunctionAddress 00000001409B8710
*/

void function Hud_SetWidth(var, int)

/*
* @Breif Set the height of the given hud element.
* @Pramas var, int
* @NativeName: Hud_SetHeight
* @NativeFunctionAddress 00000001409B8690
*/

void function Hud_SetHeight(var, int)

/*
* @Breif Get the rotation of the given hud element.
* @Pramas var
* @NativeName: Hud_GetRotation
* @NativeFunctionAddress 00000001409B85B0
*/

float function Hud_GetRotation(var)

/*
* @Breif Set the rotation of the given hud element.
* @Pramas var, float
* @NativeName: Hud_SetRotation
* @NativeFunctionAddress 00000001409B8510
*/

void function Hud_SetRotation(var, float)

/*
* @Breif Sets a button as pressed
* @Pramas var
* @NativeName: Hud_SetButtonPressed
* @NativeFunctionAddress 00000001409B84A0
*/

bool function Hud_SetButtonPressed(var)

/*
* @Breif Sets a button as not-pressed
* @Pramas var
* @NativeName: Hud_SetButtonNotPressed
* @NativeFunctionAddress 00000001409B8430
*/

bool function Hud_SetButtonNotPressed(var)

/*
* @Breif Returns whether a ToggleButton is toggled
* @Pramas var
* @NativeName: Hud_IsButtonToggled
* @NativeFunctionAddress 00000001409B83C0
*/

bool function Hud_IsButtonToggled(var)

/*
* @Breif 
* @Pramas var, string, string
* @NativeName: Hud_DialogList_AddListItem
* @NativeFunctionAddress 00000001409B8340
*/

void function Hud_DialogList_AddListItem(var, string, string)

/*
* @Breif Gets the size of the dialog list button
* @Pramas var
* @NativeName: Hud_GetDialogListItemCount
* @NativeFunctionAddress 00000001409B8290
*/

int function Hud_GetDialogListItemCount(var)

/*
* @Breif Gets the index of the selected entry of a dialog list button
* @Pramas var
* @NativeName: Hud_GetDialogListSelectionIndex
* @NativeFunctionAddress 00000001409B81E0
*/

int function Hud_GetDialogListSelectionIndex(var)

/*
* @Breif Sets the selected entry of a dialog list button by its index
* @Pramas var, int
* @NativeName: Hud_SetDialogListSelectionIndex
* @NativeFunctionAddress 00000001409B8160
*/

void function Hud_SetDialogListSelectionIndex(var, int)

/*
* @Breif Gets the string value of the selected entry of a dialog list button
* @Pramas var
* @NativeName: Hud_GetDialogListSelectionValue
* @NativeFunctionAddress 00000001409B80E0
*/

string function Hud_GetDialogListSelectionValue(var)

/*
* @Breif Sets the selected entry of a dialog list button by its string value
* @Pramas var, string
* @NativeName: Hud_SetDialogListSelectionValue
* @NativeFunctionAddress 00000001409B8060
*/

void function Hud_SetDialogListSelectionValue(var, string)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetDialogListValueIsNonDefault
* @NativeFunctionAddress 00000001409B7FF0
*/

bool function Hud_GetDialogListValueIsNonDefault(var)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SliderControl_SetMin
* @NativeFunctionAddress 00000001409B7F60
*/

void function Hud_SliderControl_SetMin(var, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SliderControl_SetMax
* @NativeFunctionAddress 00000001409B7ED0
*/

void function Hud_SliderControl_SetMax(var, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SliderControl_SetStepSize
* @NativeFunctionAddress 00000001409B7E40
*/

void function Hud_SliderControl_SetStepSize(var, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_SliderControl_GetCurrentValue
* @NativeFunctionAddress 00000001409B7D90
*/

float function Hud_SliderControl_GetCurrentValue(var)

/*
* @Breif 
* @Pramas var, string
* @NativeName: Hud_SetPlaylistVarName
* @NativeFunctionAddress 00000001409B7D10
*/

void function Hud_SetPlaylistVarName(var, string)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetGamemodeIdx
* @NativeFunctionAddress 00000001409B7C90
*/

void function Hud_SetGamemodeIdx(var, int)

/*
* @Breif Gets a child HUD element (for use with CNestedPanel);
* @Pramas var, string
* @NativeName: Hud_HudElement
* @NativeFunctionAddress 00000001409B7C10
*/

var function Hud_HudElement(var, string)

/*
* @Breif Gets a child HUD element (for use with CNestedPanel);
* @Pramas var, string
* @NativeName: Hud_HudElement
* @NativeFunctionAddress 00000001409B7C10
*/

var function Hud_GetChild(var, string)

/*
* @Breif Checks if a child HUD element for a given name exists
* @Pramas var, string
* @NativeName: Hud_HasChild
* @NativeFunctionAddress 00000001409B7B90
*/

bool function Hud_HasChild(var, string)

/*
* @Breif Gets the parent HUD element
* @Pramas var
* @NativeName: Hud_Script_GetParent
* @NativeFunctionAddress 00000001409B7B20
*/

var function Hud_GetParent(var)

/*
* @Breif Adds a closure to handle an event such as UIE_CLICK
* @Pramas var, int, var
* @NativeName: Hud_AddEventHandler
* @NativeFunctionAddress 00000001409B7A60
*/

void function Hud_AddEventHandler(var, int, var)

/*
* @Breif Removes a closure that was set to handle an event
* @Pramas var, int, var
* @NativeName: Hud_RemoveEventHandler
* @NativeFunctionAddress 00000001409B79A0
*/

void function Hud_RemoveEventHandler(var, int, var)

/*
* @Breif Sets the callback for commands this element listens for
* @Pramas var, var
* @NativeName: Hud_SetCommandHandler
* @NativeFunctionAddress 00000001409B7910
*/

void function Hud_SetCommandHandler(var, var)

/*
* @Breif Removes the callback for commands this element listens for
* @Pramas var
* @NativeName: Hud_ClearCommandHandler
* @NativeFunctionAddress 00000001409B7890
*/

void function Hud_ClearCommandHandler(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_Script_HandleEvent
* @NativeFunctionAddress 00000001409B7810
*/

void function Hud_HandleEvent(var, int)

/*
* @Breif Adds a closure to handle keypress events.
* @Pramas var hudelem, bool functionref( var hudelem, int keyId, bool isDown ) handlerFunc
* @NativeName: Hud_AddKeyPressHandler
* @NativeFunctionAddress 00000001409B7760
*/

void function Hud_AddKeyPressHandler(var hudelem, bool functionref( var hudelem, int keyId, bool isDown ) handlerFunc)

/*
* @Breif Returns whether the element is enabled (can be interacted with);
* @Pramas var
* @NativeName: Hud_IsEnabled
* @NativeFunctionAddress 00000001409B76C0
*/

bool function Hud_IsEnabled(var)

/*
* @Breif Sets whether the element is enabled (can be interacted with);
* @Pramas var, bool
* @NativeName: Hud_SetEnabled
* @NativeFunctionAddress 00000001409B7630
*/

void function Hud_SetEnabled(var, bool)

/*
* @Breif Returns whether the element has focus
* @Pramas var
* @NativeName: Hud_IsFocused
* @NativeFunctionAddress 00000001409B7590
*/

bool function Hud_IsFocused(var)

/*
* @Breif Gives the element focus
* @Pramas var
* @NativeName: Hud_SetFocused
* @NativeFunctionAddress 00000001409B7520
*/

bool function Hud_SetFocused(var)

/*
* @Breif Enable spherical warp distortion.
* @Pramas var
* @NativeName: Hud_WarpEnable
* @NativeFunctionAddress 00000001409B74A0
*/

void function Hud_WarpEnable(var)

/*
* @Breif Disable spherical warp distortion.
* @Pramas var
* @NativeName: Hud_WarpDisable
* @NativeFunctionAddress 00000001409B7420
*/

void function Hud_WarpDisable(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_GetUTF8Text
* @NativeFunctionAddress 00000001409B7380
*/

string function Hud_GetUTF8Text(var)

/*
* @Breif 
* @Pramas var, string
* @NativeName: Hud_Script_SetUTF8Text
* @NativeFunctionAddress 00000001409B72E0
*/

void function Hud_SetUTF8Text(var, string)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_SelectAll
* @NativeFunctionAddress 00000001409B7270
*/

void function Hud_SelectAll(var)

/*
* @Breif Move cursor to the Start of the text buffer and resets scroll position
* @Pramas var
* @NativeName: Hud_GotoRichTextStart
* @NativeFunctionAddress 00000001409B7200
*/

void function Hud_GotoRichTextStart(var)

/*
* @Breif Gets the RUI instance associated with a RuiPanel.
* @Pramas var hudElem
* @NativeName: Hud_Script_GetRui
* @NativeFunctionAddress 00000001409B47B0
*/

var function Hud_GetRui()

/*
* @Breif Populates a GridButtonListPanel with a given number of RuiButtons.
* @Pramas var hudelem, int
* @NativeName: Hud_InitGridButtons
* @NativeFunctionAddress 00000001409B7160
*/

void function Hud_InitGridButtons(var hudelem, int)

/*
* @Breif Populates a GridButtonListPanel with a specified number of RuiButtons, rows, and columns.
* @Pramas var hudelem, int, int, int
* @NativeName: Hud_InitGridButtonsDetailed
* @NativeFunctionAddress 00000001409B7090
*/

void function Hud_InitGridButtonsDetailed(var hudelem, int, int, int)

/*
* @Breif Sets a GridButtonListPanel's scroll bar position
* @Pramas var hudelem, int
* @NativeName: Hud_ScrollToItemIndex
* @NativeFunctionAddress 00000001409B7010
*/

void function Hud_ScrollToItemIndex(var hudelem, int)

/*
* @Breif Sets a GridButtonListPanel's scroll bar position
* @Pramas var hudelem, var button
* @NativeName: Hud_ScrollToItemButton
* @NativeFunctionAddress 00000001409B6F80
*/

void function Hud_ScrollToItemButton(var hudelem, var button)

/*
* @Breif Starts message mode on a chat box
* @Pramas var
* @NativeName: Hud_StartMessageMode
* @NativeFunctionAddress 00000001409B6EF0
*/

void function Hud_StartMessageMode(var)

/*
* @Breif Stops message mode on a chat box
* @Pramas var
* @NativeName: Hud_StopMessageMode
* @NativeFunctionAddress 00000001409B6E70
*/

void function Hud_StopMessageMode(var)

/*
* @Breif Checks if gamepad is enabled (either through convar or playlist)
* @Pramas 
* @NativeName: Script_IsGamepadEnabled
* @NativeFunctionAddress 00000001407AED90
*/

bool function IsGamepadEnabled()

/*
* @Breif Unbinds all gamepad buttons
* @Pramas 
* @NativeName: Script_UnbindAllGamepad
* @NativeFunctionAddress 00000001407AED50
*/

void function UnbindAllGamepad()

/*
* @Breif Checks if the current user should receive the EU version of the EULA or not
* @Pramas 
* @NativeName: Script_ShouldUserSeeEULAForEU
* @NativeFunctionAddress 00000001407AED00
*/

bool function ShouldUserSeeEULAForEU()

/*
* @Breif Shortens a number and make it pretty for display. Localizes for commas vs dot notation
* @Pramas string
* @NativeName: Script_ShortenNumber
* @NativeFunctionAddress 00000001407AECA0
*/

string function ShortenNumber(string)

/*
* @Breif Sets the base layer animation for chroma hardware. gradient  maps values 0-1 to colors.
* @Pramas int CHROMALOOP_anim, int CHROMATRANS_transition, table< float, vector > gradient, float transitionTime, float animRate = 1.0
* @NativeName: Script_Chroma_SetBaseLayer
* @NativeFunctionAddress 00000001402BA0E0
*/

var function Chroma_SetBaseLayer()

/*
* @Breif Adds a temporary animated overlay on chroma hardware. gradient maps values 0-1 to colors.
* @Pramas int CHROMALOOP_anim, int CHROMAWAVE_alpha, table< float, vector > gradient, float duration, float animRate = 1.0
* @NativeName: Script_Chroma_AddOverlay
* @NativeFunctionAddress 00000001402BA120
*/

var function Chroma_AddOverlay()

/*
* @Breif Adds an animated overlay on chroma hardware. Returns a handle to be passed into Chroma_RemovePersistentOverlay. gradient maps values 0-1 to colors.
* @Pramas int CHROMALOOP_anim, int CHROMALOOP_alpha, int CHROMATRANS_transition, table< float, vector > gradient, float transitionTime, float animRate = 1.0, float alphaRate = 1.0
* @NativeName: Script_Chroma_AddPersistentOverlay
* @NativeFunctionAddress 00000001402BA160
*/

var function Chroma_AddPersistentOverlay()

/*
* @Breif Removes an animated overlay previously added with Chroma_AddPersistentOverlay.
* @Pramas int handle, int CHROMATRANS_transition, float transitionTime
* @NativeName: Script_Chroma_RemovePersistentOverlay
* @NativeFunctionAddress 00000001402BA1A0
*/

var function Chroma_RemovePersistentOverlay()

/*
* @Breif Sets the overall opacity of a persistent chroma overlay.
* @Pramas int handle, float alpha
* @NativeName: Script_Chroma_SetPersistentOverlayAlpha
* @NativeFunctionAddress 00000001402BA1E0
*/

var function Chroma_SetPersistentOverlayAlpha()

/*
* @Breif Returns the duration of the given sound.
* @Pramas string
* @NativeName: ScriptGetSoundDuration
* @NativeFunctionAddress 00000001409B6C10
*/

float function GetSoundDuration(string)

/*
* @Breif Plays given sound on this client, centered on listener. Returns a handle object which will signal OnSoundFinished.
* @Pramas string soundName
* @NativeName: ScriptSound_EmitUISound
* @NativeFunctionAddress 00000001409B6530
*/

var function EmitUISound()

/*
* @Breif Stops any sound played on the listener for this client with the given name.
* @Pramas string soundName
* @NativeName: ScriptSound_StopUISoundByName
* @NativeFunctionAddress 00000001409B6690
*/

var function StopUISoundByName()

/*
* @Breif Stops any sound played on the listener for this client with the given name. (transition to StopUISoundByName)
* @Pramas string soundName
* @NativeName: ScriptSound_StopUISoundByName
* @NativeFunctionAddress 00000001409B6690
*/

var function StopUISound()

/*
* @Breif Plays given sound on this client, centered on listener. Stops last sound played with PlayUIMusic first.Does nothing if the last call to PlayUIMusic was with the same sound name and it is still playing.
* @Pramas string soundName
* @NativeName: ScriptSound_PlayUIMusic
* @NativeFunctionAddress 00000001409B67C0
*/

var function PlayUIMusic()

/*
* @Breif Stops last sound played with PlayUIMusic.
* @Pramas 
* @NativeName: ScriptSound_StopUIMusic
* @NativeFunctionAddress 00000001409B6800
*/

var function StopUIMusic()

/*
* @Breif Pauses any sound played on the listener for this client with the given name.
* @Pramas string soundName
* @NativeName: ScriptSound_PauseUISoundByName
* @NativeFunctionAddress 00000001409B68F0
*/

var function PauseUISoundByName()

/*
* @Breif Resumes any paused sound played on the listener for this client with the given name.
* @Pramas string soundName
* @NativeName: ScriptSound_ResumeUISoundByName
* @NativeFunctionAddress 00000001409B6A20
*/

var function ResumeUISoundByName()

/*
* @Breif Returns true if the sound associated with the given signal handle is still playing.
* @Pramas var soundSignalingHandle
* @NativeName: ScriptSound_IsSoundStillPlaying
* @NativeFunctionAddress 00000001409B61E0
*/

var function IsUISoundStillPlaying()

/*
* @Breif Get the current sound volume as a float 0 to 1.
* @Pramas 
* @NativeName: Script_GetSoundVolume
* @NativeFunctionAddress 00000001407B11A0
*/

float function GetSoundVolume()

/*
* @Breif Set the current sound volume as a float 0 to 1.
* @Pramas float
* @NativeName: Script_SetSoundVolume
* @NativeFunctionAddress 00000001407B10B0
*/

void function SetSoundVolume(float)

/*
* @Breif Get the current joy invert as a float.
* @Pramas 
* @NativeName: Script_GetJoyInvert
* @NativeFunctionAddress 00000001407B0FE0
*/

bool function GetJoyInvert()

/*
* @Breif Set the current joy invert as a float.
* @Pramas bool
* @NativeName: Script_SetJoyInvert
* @NativeFunctionAddress 00000001407B0F00
*/

void function SetJoyInvert(bool)

/*
* @Breif Sets the binding for the given +ability command.
* @Pramas var, int, string, string, int
* @NativeName: ScriptUI_SetAbilityBinding
* @NativeFunctionAddress 00000001407AE280
*/

void function SetAbilityBinding(var, int, string, string, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsGamepadPS4
* @NativeFunctionAddress 00000001407AE220
*/

bool function IsGamepadPS4()

/*
* @Breif 
* @Pramas string format, ...
* @NativeName: Script_Localize
* @NativeFunctionAddress 00000001407A2FF0
*/

var function Localize()

/*
* @Breif 
* @Pramas int loadoutIndex
* @NativeName: Client_Script_IsBTLoadoutUnlocked
* @NativeFunctionAddress 00000001407AE1A0
*/

bool function IsBTLoadoutUnlocked(int loadoutIndex)

/*
* @Breif 
* @Pramas string urlText, int flags
* @NativeName: Script_LaunchExternalWebBrowser
* @NativeFunctionAddress 00000001407AE130
*/

void function LaunchExternalWebBrowser(string urlText, int flags)

/*
* @Breif Launch a browser to link your steam account
* @Pramas 
* @NativeName: Script_LinkSteamAccount
* @NativeFunctionAddress 00000001407AE0F0
*/

void function LinkSteamAccount()

/*
* @Breif Launch a browser to unlink your steam account
* @Pramas 
* @NativeName: Script_UnlinkSteamAccount
* @NativeFunctionAddress 00000001407AE0B0
*/

void function UnlinkSteamAccount()

/*
* @Breif Returns 1 if linked, 0 if not linked, and -1 if unknown
* @Pramas 
* @NativeName: Script_GetSteamLinkStatus
* @NativeFunctionAddress 00000001407ADFE0
*/

int function GetSteamAccountStatus()

/*
* @Breif Tells the game to update the online status of non-Origin friends
* @Pramas 
* @NativeName: Script_UpdateFriends
* @NativeFunctionAddress 00000001407ADFA0
*/

void function UpdateFriendsList()

/*
* @Breif Takes a .res file and creates a menu from it.
* @Pramas string name, asset resFile
* @NativeName: Script_CreateMenu
* @NativeFunctionAddress 00000001407ADF40
*/

var function CreateMenu(string name, asset resFile)

/*
* @Breif Like CreateMenu, but with special functionality for the key binding menu
* @Pramas var parentPanel, string name, asset resFile
* @NativeName: Script_CreateKeyBindingPanel
* @NativeFunctionAddress 00000001407ADEC0
*/

var function CreateKeyBindingPanel(var parentPanel, string name, asset resFile)

/*
* @Breif Like CreateMenu, but with special functionality for video options
* @Pramas var parentPanel, string name, asset resFile
* @NativeName: Script_CreateVideoOptionsPanel
* @NativeFunctionAddress 00000001407ADE40
*/

var function CreateVideoOptionsPanel(var parentPanel, string name, asset resFile)

/*
* @Breif Opens a menu created by CreateMenu
* @Pramas var
* @NativeName: Script_OpenMenu
* @NativeFunctionAddress 00000001407ADDD0
*/

void function OpenMenu(var)

/*
* @Breif Closes a menu created by CreateMenu
* @Pramas var
* @NativeName: Script_CloseMenu
* @NativeFunctionAddress 00000001407ADD60
*/

void function CloseMenu(var)

/*
* @Breif If set to true, this menu will listen to commands, not button presses. Mouse input will still work.
* @Pramas var, bool
* @NativeName: Script_SetMenuReceivesCommands
* @NativeFunctionAddress 00000001407ADC80
*/

void function SetMenuReceivesCommands(var, bool)

/*
* @Breif If menu is set to listen to commands, these commands will pass through (will NOT be sent to the menu).
* @Pramas var, string
* @NativeName: Script_AddCommandForMenuToPassThrough
* @NativeFunctionAddress 00000001407ADC00
*/

void function AddCommandForMenuToPassThrough(var, string)

/*
* @Breif Gets the focused element
* @Pramas 
* @NativeName: Script_GetFocus
* @NativeFunctionAddress 00000001407ADBB0
*/

var function GetFocus()

/*
* @Breif Gets the mouse focused element
* @Pramas 
* @NativeName: Script_GetMouseFocus
* @NativeFunctionAddress 00000001407ADB60
*/

var function GetMouseFocus()

/*
* @Breif Resets the focus to default for the menu
* @Pramas var
* @NativeName: Script_FocusDefaultMenuItem
* @NativeFunctionAddress 00000001407ADAF0
*/

void function FocusDefaultMenuItem(var)

/*
* @Breif Remembers the currently focused item, so that it will be refocused the next time the menu is opened. (This normally happens when closing the menu.)
* @Pramas var
* @NativeName: Script_SaveFocusedItemForReopen
* @NativeFunctionAddress 00000001407ADA20
*/

void function SaveFocusedItemForReopen(var)

/*
* @Breif Gets a list of elements within the given menu with the given classname
* @Pramas var menu, string classname
* @NativeName: Script_GetElementsByClassname
* @NativeFunctionAddress 00000001407AD940
*/

array< var > function GetElementsByClassname(var menu, string classname)

/*
* @Breif Sets blurring of background behind menus
* @Pramas bool
* @NativeName: Script_SetBlurEnabled
* @NativeFunctionAddress 00000001407AD8D0
*/

void function SetBlurEnabled(bool)

/*
* @Breif Returns whether background is blurred
* @Pramas 
* @NativeName: Script_IsBlurEnabled
* @NativeFunctionAddress 00000001407AD880
*/

bool function IsBlurEnabled()

/*
* @Breif Sets the mouse cursor to be visible
* @Pramas bool
* @NativeName: UIScript_SetMouseCursorVisible
* @NativeFunctionAddress 00000001407AD820
*/

void function SetMouseCursorVisible(bool)

/*
* @Breif Returns whether the game is connected to a server
* @Pramas 
* @NativeName: UIScript_IsConnected
* @NativeFunctionAddress 00000001407AD7C0
*/

bool function IsConnected()

/*
* @Breif Returns whether the game is fully connected to a server
* @Pramas 
* @NativeName: Script_IsFullyConnected
* @NativeFunctionAddress 00000001407AD760
*/

bool function IsFullyConnected()

/*
* @Breif Sends a client command to the server
* @Pramas string
* @NativeName: Script_ClientCommand
* @NativeFunctionAddress 00000001407AD700
*/

void function ClientCommand(string)

/*
* @Breif Do a restore,  SaveGame_Load( string saveName )
* @Pramas string
* @NativeName: UIScript_SaveGame_Load
* @NativeFunctionAddress 00000001407AD6B0
*/

void function SaveGame_Load(string)

/*
* @Breif Checks if a file is ok to use. SaveGame_IsValid( string saveName )
* @Pramas string
* @NativeName: UIScript_SaveGame_IsLoadable
* @NativeFunctionAddress 00000001407AD660
*/

bool function SaveGame_IsLoadable(string)

/*
* @Breif Checks if a file is ok to use. SaveGame_IsValid( string saveName )
* @Pramas string
* @NativeName: UIScript_SaveGame_IsReadable
* @NativeFunctionAddress 00000001407AD660
*/

bool function SaveGame_IsReadable(string)

/*
* @Breif Return the script version of a save load. SaveGame_GetVersion( string saveName 
* @Pramas string
* @NativeName: UIScript_SaveGame_GetVersion
* @NativeFunctionAddress 00000001407AD5D0
*/

int function SaveGame_GetVersion(string)

/*
* @Breif Return the script start point of a save load. SaveGame_GetStartPoint( string saveName 
* @Pramas string
* @NativeName: UIScript_SaveGame_GetStartPoint
* @NativeFunctionAddress 00000001407AD5D0
*/

int function SaveGame_GetStartPoint(string)

/*
* @Breif Return the map name of a save load. SaveGame_GetMapName( string saveName 
* @Pramas string
* @NativeName: UIScript_SaveGame_GetMapName
* @NativeFunctionAddress 00000001407AD4F0
*/

string function SaveGame_GetMapName(string)

/*
* @Breif Suspend live streaming
* @Pramas 
* @NativeName: LiveStream_Suspend
* @NativeFunctionAddress 00000001407AD480
*/

void function LiveStream_Suspend()

/*
* @Breif Resume live streaming
* @Pramas 
* @NativeName: LiveStream_Resume
* @NativeFunctionAddress 00000001407AD400
*/

void function LiveStream_Resume()

/*
* @Breif Does the Account have EA Access?( Only call when we have a active user )
* @Pramas 
* @NativeName: Script_UserHasEAAccess
* @NativeFunctionAddress 00000001407AD390
*/

bool function Script_UserHasEAAccess()

/*
* @Breif Gets the team of the local player
* @Pramas 
* @NativeName: Script_GetTeam
* @NativeFunctionAddress 00000001407AD2D0
*/

int function GetTeam()

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: ScriptUI_GetPersistentVar
* @NativeFunctionAddress 00000001407A6DC0
*/

var function GetPersistentVar(var, string)

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: ScriptUI_GetPersistentVarAsInt
* @NativeFunctionAddress 00000001407A6E00
*/

int function GetPersistentVarAsInt(var, string)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_IsPersistenceAvailable
* @NativeFunctionAddress 00000001407AD270
*/

bool function IsPersistenceAvailable()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_GetXP
* @NativeFunctionAddress 00000001407AD1D0
*/

int function GetXP()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_GetLevel
* @NativeFunctionAddress 00000001407AD130
*/

int function GetLevel()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_GetGen
* @NativeFunctionAddress 00000001407AD0A0
*/

int function GetGen()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_GetRank
* @NativeFunctionAddress 00000001407AD010
*/

int function GetRank()

/*
* @Breif 
* @Pramas string
* @NativeName: Script_DoesUserHaveTwitchPrimeReward
* @NativeFunctionAddress 00000001407ACFB0
*/

bool function DoesUserHaveTwitchPrimeReward(string)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_GetPINNucleusId
* @NativeFunctionAddress 00000001407ACF30
*/

string function GetPINNucleusId()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_GetPINNucleusPid
* @NativeFunctionAddress 00000001407ACEB0
*/

string function GetPINNucleusPid()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_GetPINPlatformId
* @NativeFunctionAddress 00000001407ACE30
*/

string function GetPINPlatformId()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_GetPlayerPINPlatformName
* @NativeFunctionAddress 00000001407ACDE0
*/

string function GetPlayerPINPlatformName()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_GetPlayerPINTitleId
* @NativeFunctionAddress 00000001407ACD90
*/

string function GetPlayerPINTitleId()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PIN_GetSessionId
* @NativeFunctionAddress 00000001407AEE30
*/

string function PIN_GetSessionId()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUI_PIN_GetSessionDuration
* @NativeFunctionAddress 00000001407ACCD0
*/

int function PIN_GetSessionDuration()

/*
* @Breif Begins searching for a matchmaking server
* @Pramas 
* @NativeName: Script_SearchForPartyServer
* @NativeFunctionAddress 00000001407ACC80
*/

void function SearchForPartyServer()

/*
* @Breif Cancels searching for a matchmaking server
* @Pramas 
* @NativeName: Script_MatchmakingCancel
* @NativeFunctionAddress 00000001407ACC30
*/

void function MatchmakingCancel()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetLobbyDevString
* @NativeFunctionAddress 00000001407ACBD0
*/

string function GetLobbyDevString()

/*
* @Breif 
* @Pramas string playlistName
* @NativeName: UIScript_GetMatchmakingCurrentDatacenterETA
* @NativeFunctionAddress 00000001407A6E40
*/

var function GetMatchmakingCurrentDatacenterETA()

/*
* @Breif 
* @Pramas string playlistName
* @NativeName: UIScript_GetMatchmakingCurrentRankedDatacenterETA
* @NativeFunctionAddress 00000001407A6F30
*/

var function GetMatchmakingCurrentRankedDatacenterETA()

/*
* @Breif 
* @Pramas string playlistName
* @NativeName: UIScript_GetMatchmakingDatacenterETAs
* @NativeFunctionAddress 00000001407A7020
*/

var function GetMatchmakingDatacenterETAs()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMyMatchmakingStatus
* @NativeFunctionAddress 00000001407ACB70
*/

string function GetMyMatchmakingStatus()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetMyMatchmakingStatusParam
* @NativeFunctionAddress 00000001407ACAF0
*/

string function GetMyMatchmakingStatusParam(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMMDF
* @NativeFunctionAddress 00000001407ACA50
*/

int function GetMMDF()

/*
* @Breif 
* @Pramas int queryScriptId, int itemIdx
* @NativeName: UIScript_MTX_CraftItem
* @NativeFunctionAddress 00000001407A7060
*/

var function GRX_CraftItem()

/*
* @Breif 
* @Pramas int queryScriptId, int queryGoal, int purchaseQuantity, array< int > itemIdx, array< int > GRX_CURRENCY_
* @NativeName: UIScript_MTX_PurchaseStoreOffer
* @NativeFunctionAddress 00000001407A70A0
*/

var function GRX_PurchaseStoreOffer()

/*
* @Breif 
* @Pramas int queryScriptId, int itemIdx
* @NativeName: UIScript_MTX_OpenPack
* @NativeFunctionAddress 00000001407A70E0
*/

var function GRX_OpenPack()

/*
* @Breif Get the current UI time
* @Pramas 
* @NativeName: UITime
* @NativeFunctionAddress 00000001407AC9B0
*/

float function Time()

/*
* @Breif Returns the number of players in a certain team
* @Pramas int
* @NativeName: Script_GetTeamSize
* @NativeFunctionAddress 00000001407AC8B0
*/

int function GetTeamSize(int)

/*
* @Breif Returns true if this dedi can load game levels
* @Pramas 
* @NativeName: Script_CanLoadGameLevels
* @NativeFunctionAddress 00000001407AC840
*/

bool function CanLoadGameLevels()

/*
* @Breif Toggles the value of look invert (joy_inverty)
* @Pramas 
* @NativeName: Script_ToggleLookInvert
* @NativeFunctionAddress 00000001407AC7B0
*/

void function ToggleLookInvert()

/*
* @Breif RunsAnimationScript
* @Pramas string
* @NativeName: Script_RunAnimationScript
* @NativeFunctionAddress 00000001407AC730
*/

void function RunAnimationScript(string)

/*
* @Breif Forces HUD animations to update, which normally only happens when a frame is rendered. Useful for HUD animations with zero duration.
* @Pramas 
* @NativeName: Script_ForceUpdateHUDAnimations
* @NativeFunctionAddress 00000001407AC6E0
*/

void function ForceUpdateHUDAnimations()

/*
* @Breif Returns true if the client script VM is available to be run
* @Pramas 
* @NativeName: Script_CanRunClientScript
* @NativeFunctionAddress 00000001407AC650
*/

bool function CanRunClientScript()

/*
* @Breif Executes a client script function with arbitrary arguments. (supports int, float, bool, vector, string, and the fake UI player entity)
* @Pramas string funcName, ...
* @NativeName: Script_RunClientScript
* @NativeFunctionAddress 00000001407A7120
*/

var function RunClientScript()

/*
* @Breif Executes a .cfg file
* @Pramas string
* @NativeName: Script_ExecConfig
* @NativeFunctionAddress 00000001407AC5B0
*/

void function ExecConfig(string)

/*
* @Breif Fills key bindings menu with current bindings; pass in key binding menu
* @Pramas var
* @NativeName: Script_KeyBindings_FillInCurrent
* @NativeFunctionAddress 00000001407AC530
*/

void function KeyBindings_FillInCurrent(var)

/*
* @Breif Resets key bindings to default (cfg/config_default_pc.cfg); pass in key binding menu
* @Pramas var
* @NativeName: Script_KeyBindings_ResetToDefault
* @NativeFunctionAddress 00000001407AC4B0
*/

void function KeyBindings_ResetToDefault(var)

/*
* @Breif Tells the menu that if a tapped binding is bound, also bind its corresponding held binding
* @Pramas var, string, string
* @NativeName: Script_KeyBindings_AddTappedHeldPair
* @NativeFunctionAddress 00000001407AC430
*/

void function KeyBindings_AddTappedHeldPair(var, string, string)

/*
* @Breif Clears all registered tapped-held pairs
* @Pramas var
* @NativeName: Script_KeyBindings_ClearTappedHeldPairs
* @NativeFunctionAddress 00000001407AC3C0
*/

void function KeyBindings_ClearTappedHeldPairs(var)

/*
* @Breif Returns true if the keybindings menu's overlay is visible
* @Pramas var
* @NativeName: Script_KeyBindings_IsBindingOverlayPanelVisible
* @NativeFunctionAddress 00000001407AC330
*/

bool function KeyBindings_IsBindingOverlayPanelVisible(var)

/*
* @Breif Fills video options menu with current settings; pass in video options menu
* @Pramas var
* @NativeName: Script_VideoOptions_FillInCurrent
* @NativeFunctionAddress 00000001407AC2B0
*/

void function VideoOptions_FillInCurrent(var)

/*
* @Breif Resets video options to recommended settings; pass in video options menu
* @Pramas var
* @NativeName: Script_VideoOptions_ResetToRecommended
* @NativeFunctionAddress 00000001407AC230
*/

void function VideoOptions_ResetToRecommended(var)

/*
* @Breif Applies video options in menu; pass in video options menu
* @Pramas var
* @NativeName: Script_VideoOptions_Apply
* @NativeFunctionAddress 00000001407AC1B0
*/

void function VideoOptions_Apply(var)

/*
* @Breif Changed the aspect ratio to native when the Full Screen video mode is selected.
* @Pramas var
* @NativeName: Script_VideoOptions_OnWindowedChanged
* @NativeFunctionAddress 00000001407AC140
*/

void function VideoOptions_OnWindowedChanged(var)

/*
* @Breif Resets the resolution list (for when the aspect ratio changes)
* @Pramas var
* @NativeName: Script_VideoOptions_ResetResolutionList
* @NativeFunctionAddress 00000001407AC0C0
*/

void function VideoOptions_ResetResolutionList(var)

/*
* @Breif Rejects the new settings (for use after UICodeCallback_VideoSettingsChangedDialog)
* @Pramas var
* @NativeName: Script_VideoOptions_RejectNewSettings
* @NativeFunctionAddress 00000001407AC050
*/

void function VideoOptions_RejectNewSettings(var)

/*
* @Breif Retrieves the current gamma adjustment value.
* @Pramas 
* @NativeName: Script_VideoOptions_GetGammaAdjustment
* @NativeFunctionAddress 00000001407ABF90
*/

float function VideoOptions_GetGammaAdjustment()

/*
* @Breif Updates the current gamma adjustment value.
* @Pramas float
* @NativeName: Script_VideoOptions_SetGammaAdjustment
* @NativeFunctionAddress 00000001407ABF30
*/

void function VideoOptions_SetGammaAdjustment(float)

/*
* @Breif Notifies the video options menu that the resolution selection changed.
* @Pramas var
* @NativeName: Script_VideoOptions_ResolutionSelectionChanged
* @NativeFunctionAddress 00000001407ABEC0
*/

void function VideoOptions_ResolutionSelectionChanged(var)

/*
* @Breif Notifies the video options menu that the adaptive resolution setting changed.
* @Pramas var
* @NativeName: Script_VideoOptions_AdaptiveResChanged
* @NativeFunctionAddress 00000001407ABE40
*/

void function VideoOptions_AdaptiveResChanged(var)

/*
* @Breif Notifies the video options menu that the adaptive resolution FPS text input changed.
* @Pramas var
* @NativeName: Script_VideoOptions_AdaptiveResTextChanged
* @NativeFunctionAddress 00000001407ABDD0
*/

void function VideoOptions_AdaptiveResTextChanged(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Script_VideoOptions_FOVChanged
* @NativeFunctionAddress 00000001407ABD50
*/

void function VideoOptions_FOVChanged(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Script_VideoOptions_FOVTextChanged
* @NativeFunctionAddress 00000001407ABCE0
*/

void function VideoOptions_FOVTextChanged(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Script_VideoOptions_TextureStreamBudgetChanged
* @NativeFunctionAddress 00000001407ABC70
*/

void function VideoOptions_TextureStreamBudgetChanged(var)

/*
* @Breif Enable the background movie in the base panel
* @Pramas 
* @NativeName: Script_EnableBackgroundMovie
* @NativeFunctionAddress 00000001407ABC30
*/

void function EnableBackgroundMovie()

/*
* @Breif Disable the background movie in the base panel
* @Pramas 
* @NativeName: Script_DisableBackgroundMovie
* @NativeFunctionAddress 00000001407ABBB0
*/

void function DisableBackgroundMovie()

/*
* @Breif Whether the intro video has been viewed (convar intro_viewed)
* @Pramas 
* @NativeName: Script_GetIntroViewedVersion
* @NativeFunctionAddress 00000001407ABB10
*/

int function GetIntroViewedVersion()

/*
* @Breif Sets whether the intro video has been viewed (convar intro_viewed)
* @Pramas int version
* @NativeName: Script_SetIntroViewedVersion
* @NativeFunctionAddress 00000001407ABA90
*/

void function SetIntroViewedVersion(int version)

/*
* @Breif Gets current version of the EULA
* @Pramas 
* @NativeName: Script_GetCurrentEULAVersion
* @NativeFunctionAddress 00000001407AB9F0
*/

int function GetCurrentEULAVersion()

/*
* @Breif Gets version of the EULA that the user has accepted (convar eula_version_accepted)
* @Pramas 
* @NativeName: Script_GetEULAVersionAccepted
* @NativeFunctionAddress 00000001407AB950
*/

int function GetEULAVersionAccepted()

/*
* @Breif Sets version of the EULA that the user has accepted (convar eula_version_accepted)
* @Pramas int
* @NativeName: Script_SetEULAVersionAccepted
* @NativeFunctionAddress 00000001407AB8D0
*/

void function SetEULAVersionAccepted(int)

/*
* @Breif 
* @Pramas 
* @NativeName: UIScript_GetMenuWasMultiplayerPlayedLast
* @NativeFunctionAddress 00000001407AB880
*/

bool function GetMenuWasMultiplayerPlayedLast()

/*
* @Breif 
* @Pramas bool
* @NativeName: UIScript_SetMenuWasMultiplayerPlayedLast
* @NativeFunctionAddress 00000001407AB800
*/

void function SetMenuWasMultiplayerPlayedLast(bool)

/*
* @Breif Gets value of convar 'rankedplay_display_enabled'
* @Pramas 
* @NativeName: Script_GetRankedPlayDisplayEnabled
* @NativeFunctionAddress 00000001407AB7B0
*/

bool function GetRankedPlayDisplayEnabled()

/*
* @Breif Gets value of convar 'rankedplay_voice_enabled'
* @Pramas 
* @NativeName: Script_GetRankedPlayVoiceEnabled
* @NativeFunctionAddress 00000001407AB760
*/

bool function GetRankedPlayVoiceEnabled()

/*
* @Breif Save player config to storage.
* @Pramas 
* @NativeName: Script_SavePlayerSettings
* @NativeFunctionAddress 00000001407AB710
*/

void function SavePlayerSettings()

/*
* @Breif 
* @Pramas int datacenterIndex
* @NativeName: Script_SetDatacenter
* @NativeFunctionAddress 00000001407AB6B0
*/

void function SetDatacenter(int datacenterIndex)

/*
* @Breif 
* @Pramas int datacenterIndex
* @NativeName: Script_SetRankedDatacenter
* @NativeFunctionAddress 00000001407AB630
*/

void function SetRankedDatacenter(int datacenterIndex)

/*
* @Breif Returns the name of the current datacenter
* @Pramas 
* @NativeName: Script_GetCurrentDatacenterName
* @NativeFunctionAddress 00000001407AB5C0
*/

string function GetDatacenterName()

/*
* @Breif Returns the ping of the current datacenter
* @Pramas 
* @NativeName: Script_GetCurrentDatacenterPing
* @NativeFunctionAddress 00000001407AB510
*/

int function GetDatacenterPing()

/*
* @Breif Returns the minimum ping of the current datacenter
* @Pramas 
* @NativeName: Script_GetCurrentDatacenterMinPing
* @NativeFunctionAddress 00000001407AB450
*/

int function GetDatacenterMinPing()

/*
* @Breif Returns the packet loss of the current datacenter
* @Pramas 
* @NativeName: Script_GetCurrentDatacenterPacketLoss
* @NativeFunctionAddress 00000001407AB3A0
*/

int function GetDatacenterPacketLoss()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetCurrentDatacenterSelectedReasonSymbol
* @NativeFunctionAddress 00000001407AB340
*/

string function GetDatacenterSelectedReasonSymbol()

/*
* @Breif Returns true if we're doing doing QoS on datacenters
* @Pramas 
* @NativeName: Script_IsSendingDatacenterPings
* @NativeFunctionAddress 00000001407AB2F0
*/

bool function IsSendingDatacenterPings()

/*
* @Breif Returns HTTP-status code of datacenter download
* @Pramas 
* @NativeName: Script_GetDatacenterDownloadStatusCode
* @NativeFunctionAddress 00000001407AB260
*/

int function GetDatacenterDownloadStatusCode()

/*
* @Breif Returns true if we've a valid datacenter to matchmake with.
* @Pramas 
* @NativeName: Script_IsDatacenterMatchmakingOk
* @NativeFunctionAddress 00000001407AB1C0
*/

int function IsDatacenterMatchmakingOk()

/*
* @Breif Returns true if you have bad rep
* @Pramas 
* @NativeName: Script_DoIHaveBadReputation
* @NativeFunctionAddress 00000001407AB130
*/

bool function DoIHaveBadRep()

/*
* @Breif Returns the language the game is running at
* @Pramas 
* @NativeName: DetectLanguage
* @NativeFunctionAddress 00000001407AB0B0
*/

string function GetLanguage()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPublicGameVersion
* @NativeFunctionAddress 00000001407AB050
*/

string function GetPublicGameVersion()

/*
* @Breif Clears all text from all hud chat panels
* @Pramas 
* @NativeName: HudChat_ClearTextFromAllChatPanels
* @NativeFunctionAddress 00000001407AB010
*/

void function HudChat_ClearTextFromAllChatPanels()

/*
* @Breif Has any text chat window been closed recently. Hack for stopping input duplication
* @Pramas 
* @NativeName: HudChat_HasAnyMessageModeStoppedRecently
* @NativeFunctionAddress 00000001407B0B40
*/

bool function HudChat_HasAnyMessageModeStoppedRecently()

/*
* @Breif Brings up a player's profile card given that player's userId as a decimal string
* @Pramas string
* @NativeName: Script_ShowPlayerProfileCardForUID
* @NativeFunctionAddress 00000001407AAFA0
*/

void function ShowPlayerProfileCardForUID(string)

/*
* @Breif Toggles voice mute on a player.
* @Pramas string
* @NativeName: Script_TogglePlayerVoiceMutedForUID
* @NativeFunctionAddress 00000001407AAF30
*/

void function TogglePlayerVoiceMutedForUID(string)

/*
* @Breif Is this player's voice muted.
* @Pramas string
* @NativeName: Script_IsPlayerVoiceMutedForUID
* @NativeFunctionAddress 00000001407AAEB0
*/

bool function IsPlayerVoiceMutedForUID(string)

/*
* @Breif Toggles text mute on a player.
* @Pramas string
* @NativeName: Script_TogglePlayerTextMutedForUID
* @NativeFunctionAddress 00000001407AAE40
*/

void function TogglePlayerTextMutedForUID(string)

/*
* @Breif Is this player's text muted.
* @Pramas string
* @NativeName: Script_IsPlayerTextMutedForUID
* @NativeFunctionAddress 00000001407AADC0
*/

bool function IsPlayerTextMutedForUID(string)

/*
* @Breif Do current settings or restrictions prevent voice chat.
* @Pramas 
* @NativeName: Script_VoiceIsRestricted
* @NativeFunctionAddress 00000001407AAD60
*/

bool function VoiceIsRestricted()

/*
* @Breif Returns if local player has an entitlement
* @Pramas int
* @NativeName: Script_LocalPlayerHasEntitlement
* @NativeFunctionAddress 00000001407AFE30
*/

bool function LocalPlayerHasEntitlement(int)

/*
* @Breif Returns list of price strings for local currency
* @Pramas array< int >
* @NativeName: Script_GetEntitlementPricesAsStr
* @NativeFunctionAddress 00000001407A7230
*/

var function GetEntitlementPricesAsStr()

/*
* @Breif Returns list of price ints, counted in 'cents'.
* @Pramas array< int >
* @NativeName: Script_GetEntitlementPricesAsInt
* @NativeFunctionAddress 00000001407A7270
*/

var function GetEntitlementPricesAsInt()

/*
* @Breif Returns list of undiscounted price strings, if the price was discounted, for local currency
* @Pramas array< int >
* @NativeName: Script_GetEntitlementOriginalPricesAsStr
* @NativeFunctionAddress 00000001407A72B0
*/

var function GetEntitlementOriginalPricesAsStr()

/*
* @Breif 
* @Pramas array< int >
* @NativeName: Script_GetEntitlementBalances
* @NativeFunctionAddress 00000001407A72F0
*/

var function GetEntitlementBalances()

/*
* @Breif Purchase entitlement
* @Pramas int
* @NativeName: Script_PurchaseEntitlement
* @NativeFunctionAddress 00000001407AAD00
*/

void function PurchaseEntitlement(int)

/*
* @Breif Show system dialog for DLC store not available
* @Pramas 
* @NativeName: Script_ShowDLCStoreUnavailableNotice
* @NativeFunctionAddress 00000001407AACB0
*/

void function ShowDLCStoreUnavailableNotice()

/*
* @Breif Check if DLC store initialization is complete
* @Pramas 
* @NativeName: Script_IsDLCStoreInitialized
* @NativeFunctionAddress 00000001407AAC50
*/

bool function IsDLCStoreInitialized()

/*
* @Breif Initialize ingame DLC store
* @Pramas 
* @NativeName: Script_InitDLCStore
* @NativeFunctionAddress 00000001407AAC00
*/

void function InitDLCStore()

/*
* @Breif Open ingame DLC store
* @Pramas 
* @NativeName: Script_OnOpenDLCStore
* @NativeFunctionAddress 00000001407AABB0
*/

void function OnOpenDLCStore()

/*
* @Breif Close ingame DLC store
* @Pramas 
* @NativeName: Script_OnCloseDLCStore
* @NativeFunctionAddress 00000001407AAB60
*/

void function OnCloseDLCStore()

/*
* @Breif Opens the external platform store for purchasing the game
* @Pramas 
* @NativeName: Script_ShowGamePurchaseStore
* @NativeFunctionAddress 00000001407AAB10
*/

void function ShowGamePurchaseStore()

/*
* @Breif 
* @Pramas string
* @NativeName: Script_GetPlaylistDisplayName
* @NativeFunctionAddress 00000001407AAA90
*/

string function GetPlaylistDisplayName(string)

/*
* @Breif 
* @Pramas 
* @NativeName: UIScript_GetPlaylistVarOverridesCount
* @NativeFunctionAddress 00000001407AA9F0
*/

int function GetPlaylistVarOverridesCount()

/*
* @Breif 
* @Pramas int
* @NativeName: UIScript_GetPlaylistVarOverrideNameByIndex
* @NativeFunctionAddress 00000001407AA970
*/

string function GetPlaylistVarOverrideNameByIndex(int)

/*
* @Breif Gets the menu that the element is contained within
* @Pramas var
* @NativeName: Script_GetParentMenu
* @NativeFunctionAddress 00000001407AA8C0
*/

var function GetParentMenu(var)

/*
* @Breif Returns value of IsTestMap from the level's script list .rson file
* @Pramas 
* @NativeName: UIScript_IsTestMap
* @NativeFunctionAddress 00000001407AA860
*/

bool function IsTestMap()

/*
* @Breif Reactivates the UI after an error dialog
* @Pramas 
* @NativeName: Script_ReactivateUIAfterError
* @NativeFunctionAddress 00000001407AA820
*/

void function ReactivateUIAfterError()

/*
* @Breif Gets the local player's hardware name
* @Pramas 
* @NativeName: Script_GetPlayerHardware
* @NativeFunctionAddress 00000001407AA780
*/

string function GetPlayerHardware()

/*
* @Breif Gets the local player's uid (platform_user_id) as a string
* @Pramas 
* @NativeName: Script_GetPlayerUID
* @NativeFunctionAddress 00000001407AA720
*/

string function GetPlayerUID()

/*
* @Breif Gets the local player's name
* @Pramas 
* @NativeName: Script_GetPlayerName
* @NativeFunctionAddress 00000001407AA680
*/

string function GetPlayerName()

/*
* @Breif Gets the local player's name with clan tag
* @Pramas 
* @NativeName: Script_GetPlayerNameWithClanTag
* @NativeFunctionAddress 00000001407AA5F0
*/

string function GetPlayerNameWithClanTag()

/*
* @Breif Returns an object representing the local player (with select functions available)
* @Pramas 
* @NativeName: UIScript_GetLocalClientPlayer
* @NativeFunctionAddress 00000001407A73A0
*/

var function GetLocalClientPlayer()

/*
* @Breif returns true if we are the leader of our party, or true if we aren't in a party
* @Pramas 
* @NativeName: UIClientScript_IsPartyLeader
* @NativeFunctionAddress 00000001407AA580
*/

bool function IsPartyLeader()

/*
* @Breif returns the number of players current in our party
* @Pramas 
* @NativeName: UIClientScript_GetPartySize
* @NativeFunctionAddress 00000001407AA4D0
*/

int function GetPartySize()

/*
* @Breif Returns the name of the party leader
* @Pramas 
* @NativeName: UIClientScript_GetPartyLeaderName
* @NativeFunctionAddress 00000001407AA450
*/

string function GetPartyLeaderName()

/*
* @Breif Returns the name of the talker by index
* @Pramas int
* @NativeName: UIScript_GetChatroomTalkerName
* @NativeFunctionAddress 00000001407AA3E0
*/

string function GetChatroomTalkerName(int)

/*
* @Breif Returns mic status for a userid in a ChatRoom (passing in uid as string)
* @Pramas string
* @NativeName: UIScript_ChatRoom_MicStatus
* @NativeFunctionAddress 00000001407AA270
*/

int function GetChatroomMicStatus(string)

/*
* @Breif Returns mic status for a userid on the local players team ( passing in uid as string)
* @Pramas string
* @NativeName: UIScript_Team_MicStatus
* @NativeFunctionAddress 00000001407AA1D0
*/

int function GetTeamMicStatus(string)

/*
* @Breif Get the player's region
* @Pramas 
* @NativeName: UIScript_MyRegion
* @NativeFunctionAddress 00000001407AA170
*/

string function MyRegion()

/*
* @Breif Get the player's ping
* @Pramas 
* @NativeName: UIScript_MyPing
* @NativeFunctionAddress 00000001407AA0D0
*/

int function MyPing()

/*
* @Breif Get the player's current faction
* @Pramas 
* @NativeName: UIScript_GetCurrentFaction
* @NativeFunctionAddress 00000001407AA070
*/

string function GetCurrentFaction()

/*
* @Breif Requests the specified faction
* @Pramas string
* @NativeName: UIScript_RequestFaction
* @NativeFunctionAddress 00000001407AA010
*/

void function RequestFaction(string)

/*
* @Breif Returns the friends of the current player.
* @Pramas 
* @NativeName: UIScript_GetFriendInfo
* @NativeFunctionAddress 00000001407A7480
*/

var function GetFriendInfo()

/*
* @Breif Returns the friends of the current player and their presence.
* @Pramas 
* @NativeName: UIScript_GetFriendInfoAndPresence
* @NativeFunctionAddress 00000001407A74C0
*/

var function GetFriendInfoAndPresence()

/*
* @Breif Returns the latest remote match info we've received
* @Pramas 
* @NativeName: UIScript_GetRemoteMatchInfo
* @NativeFunctionAddress 00000001407A7500
*/

var function GetRemoteMatchInfo()

/*
* @Breif Attempts to join the party channel (passing in AccessToken, from id)
* @Pramas string, string
* @NativeName: UIScript_Communities_SubscribeToChatroomPartyChannel
* @NativeFunctionAddress 00000001407A9FB0
*/

void function SubscribeToChatroomPartyChannel(string, string)

/*
* @Breif Resets text chat subscribed channel lastModifiedTime and etag
* @Pramas 
* @NativeName: UIScript_Community_ResetActiveChatroomLastModified
* @NativeFunctionAddress 00000001407A9F60
*/

void function ResetActiveChatroomLastModified()

/*
* @Breif Get the current community's name, or nil if there is none.
* @Pramas 
* @NativeName: UIScript_GetCurrentCommunityName
* @NativeFunctionAddress 00000001407A9F00
*/

string ornull function GetCurrentCommunityName()

/*
* @Breif Get the current community's ID, or nil if there is none
* @Pramas 
* @NativeName: UIScript_GetCurrentCommunityId
* @NativeFunctionAddress 00000001407A9E60
*/

int function GetCurrentCommunityId()

/*
* @Breif Get the current number of players online in this community
* @Pramas 
* @NativeName: UIScript_GetCurrentCommunityPopulation
* @NativeFunctionAddress 00000001407A9DC0
*/

int function GetCurrentCommunityPopulation()

/*
* @Breif Returns true if the current community supports inviting the network to a match
* @Pramas 
* @NativeName: UIScript_DoesCurrentCommunitySupportInvites
* @NativeFunctionAddress 00000001407A9D60
*/

bool function DoesCurrentCommunitySupportInvites()

/*
* @Breif Returns true if the current community supports chat
* @Pramas 
* @NativeName: UIScript_DoesCurrentCommunitySupportChat
* @NativeFunctionAddress 00000001407A9D00
*/

bool function DoesCurrentCommunitySupportChat()

/*
* @Breif Returns true if Happy Hour for this community is in effect
* @Pramas 
* @NativeName: UIScript_IsCurrentCommunityInHappyHour
* @NativeFunctionAddress 00000001407A9C80
*/

bool function IsCurrentCommunityInHappyHour()

/*
* @Breif Get the player's membership level of the current community, or empty string if we don't know.
* @Pramas 
* @NativeName: UIScript_GetCurrentCommunityMembership
* @NativeFunctionAddress 00000001407A9C20
*/

string function GetCurrentCommunityMembershipLevel()

/*
* @Breif Returns true if we are at least an admin in the current community
* @Pramas 
* @NativeName: UIScript_AreWeAdminInCurrentCommunity
* @NativeFunctionAddress 00000001407A9BC0
*/

bool function AreWeAdminInCurrentCommunity()

/*
* @Breif Returns true if the current community is invite-only
* @Pramas 
* @NativeName: UIScript_IsCurrentCommunityInviteOnly
* @NativeFunctionAddress 00000001407A9B60
*/

bool function IsCurrentCommunityInviteOnly()

/*
* @Breif Returns true if we are in a community (passing in communityId)
* @Pramas int
* @NativeName: UIScript_AreWeInCommunity
* @NativeFunctionAddress 00000001407A9AF0
*/

bool function AreWeInCommunity(int)

/*
* @Breif Sets this community as our active community (passing in communityId). Returns bool to show success
* @Pramas int
* @NativeName: UIScript_SetActiveCommunity
* @NativeFunctionAddress 00000001407A9A80
*/

bool function SetActiveCommunity(int)

/*
* @Breif Reports this community as violating our acceptable standards
* @Pramas int, int
* @NativeName: UIScript_ReportCommunity
* @NativeFunctionAddress 00000001407A9A00
*/

void function ReportCommunity(int, int)

/*
* @Breif Reports this inbox message as violating our acceptable standards
* @Pramas int, int
* @NativeName: UIScript_ReportInboxMessage
* @NativeFunctionAddress 00000001407A9980
*/

void function ReportInboxMessage(int, int)

/*
* @Breif Attempts to join this community (passing in communityId)
* @Pramas int
* @NativeName: UIScript_JoinCommunity
* @NativeFunctionAddress 00000001407A9920
*/

void function JoinCommunity(int)

/*
* @Breif Attempts to leave this community (passing in communityId)
* @Pramas int
* @NativeName: UIScript_LeaveCommunity
* @NativeFunctionAddress 00000001407A98C0
*/

void function LeaveCommunity(int)

/*
* @Breif Gets the number of happy hour merits that the current user has left today
* @Pramas 
* @NativeName: UIScript_HappyHourMeritsLeft
* @NativeFunctionAddress 00000001407A9820
*/

int function GetHappyHourMeritsLeft()

/*
* @Breif Gets the happy hour status string for the current community
* @Pramas 
* @NativeName: UIScript_GetCurrentCommunityHappyHourStatus
* @NativeFunctionAddress 00000001407A97C0
*/

string function GetHappyHourStatus()

/*
* @Breif Returns the current open invite or null if there is none
* @Pramas 
* @NativeName: UIScript_GetOpenInvite
* @NativeFunctionAddress 00000001407A7540
*/

var function GetOpenInvite()

/*
* @Breif Returns the current party
* @Pramas 
* @NativeName: UIClientScript_GetParty
* @NativeFunctionAddress 00000001407A7580
*/

var function GetParty()

/*
* @Breif Returns true if we're going to ATTEMPT to join it
* @Pramas string, string, bool
* @NativeName: SCRIPT_Party_JoinUserParty
* @NativeFunctionAddress 00000001407A9750
*/

bool function JoinUserParty(string, string, bool)

/*
* @Breif indicates is you can issuea a invite , if not return a reason.
* @Pramas 
* @NativeName: Client_Script_CanInviteToparty
* @NativeFunctionAddress 00000001407A95A0
*/

int function CanInviteToparty()

/*
* @Breif Performs HTTP request for main menu promos
* @Pramas 
* @NativeName: UIScript_RequestMainMenuPromos
* @NativeFunctionAddress 00000001407A9550
*/

void function RequestMainMenuPromos()

/*
* @Breif Returns the promo data used on the main menu
* @Pramas 
* @NativeName: UIScript_GetMainMenuPromos
* @NativeFunctionAddress 00000001407A7690
*/

var function GetMainMenuPromos()

/*
* @Breif Returns true if we have new messages in the Inbox of this user
* @Pramas 
* @NativeName: UIScript_Inbox_HasNewMessages
* @NativeFunctionAddress 00000001407A94F0
*/

bool function Inbox_HasNewMessages()

/*
* @Breif Returns true if we have unread messages in the Inbox of this user
* @Pramas 
* @NativeName: UIScript_Inbox_HasUnreadMessages
* @NativeFunctionAddress 00000001407A9490
*/

bool function Inbox_HasUnreadMessages()

/*
* @Breif Returns the total number of messages in the Inbox of this user
* @Pramas 
* @NativeName: UIScript_Inbox_GetTotalMessageCount
* @NativeFunctionAddress 00000001407A93F0
*/

int function Inbox_GetTotalMessageCount()

/*
* @Breif Returns the message ID for the message index [0..n] from the Inbox of this user
* @Pramas int
* @NativeName: UIScript_Inbox_GetMessageIdByIndex
* @NativeFunctionAddress 00000001407A9330
*/

int function Inbox_GetMessageIdByIndex(int)

/*
* @Breif Returns the message ID for the next message after the ID passed in
* @Pramas int
* @NativeName: UIScript_Inbox_GetNextMessageId
* @NativeFunctionAddress 00000001407A9270
*/

int function Inbox_GetNextMessageId(int)

/*
* @Breif Returns the message ID for the previous message before the ID passed in
* @Pramas int
* @NativeName: UIScript_Inbox_GetPrevMessageId
* @NativeFunctionAddress 00000001407A91B0
*/

int function Inbox_GetPrevMessageId(int)

/*
* @Breif Returns the InboxMessage for this messageId
* @Pramas int
* @NativeName: UIScript_GetMessageById
* @NativeFunctionAddress 00000001407A76D0
*/

var function Inbox_GetMessage()

/*
* @Breif Deletes the specified message, by message id
* @Pramas int
* @NativeName: UIScript_Inbox_DeleteMessage
* @NativeFunctionAddress 00000001407A9150
*/

void function Inbox_DeleteMessage(int)

/*
* @Breif Executes the specified action for the message, by message id
* @Pramas int
* @NativeName: UIScript_Inbox_ExecuteMessageAction
* @NativeFunctionAddress 00000001407A90E0
*/

void function Inbox_ExecuteMessageAction(int)

/*
* @Breif Marks the specified message as read, by message id
* @Pramas int
* @NativeName: UIScript_Inbox_MarkMessageRead
* @NativeFunctionAddress 00000001407A9080
*/

void function Inbox_MarkMessageRead(int)

/*
* @Breif Returns true if we have new notes in the Inbox of this user
* @Pramas 
* @NativeName: UIScript_Inbox_HasNewNotes
* @NativeFunctionAddress 00000001407A9020
*/

bool function Inbox_HasNewNotes()

/*
* @Breif Returns true if we have unread notes in the Inbox of this user
* @Pramas 
* @NativeName: UIScript_Inbox_HasUnreadNotes
* @NativeFunctionAddress 00000001407A8FC0
*/

bool function Inbox_HasUnreadNotes()

/*
* @Breif Returns the total number of notes in the Inbox of this user
* @Pramas 
* @NativeName: UIScript_Inbox_GetTotalNoteCount
* @NativeFunctionAddress 00000001407A8F20
*/

int function Inbox_GetTotalNoteCount()

/*
* @Breif Returns the note ID for the next note after the ID passed in
* @Pramas int
* @NativeName: UIScript_Inbox_GetNextNoteId
* @NativeFunctionAddress 00000001407A8E60
*/

int function Inbox_GetNextNoteId(int)

/*
* @Breif Returns the note ID for the previous note before the ID passed in
* @Pramas int
* @NativeName: UIScript_Inbox_GetPrevNoteId
* @NativeFunctionAddress 00000001407A8DA0
*/

int function Inbox_GetPrevNoteId(int)

/*
* @Breif Returns the note ID for the note index [0..n] from the Inbox of this user
* @Pramas int
* @NativeName: UIScript_Inbox_GetNoteIdByIndex
* @NativeFunctionAddress 00000001407A8CE0
*/

int function Inbox_GetNoteIdByIndex(int)

/*
* @Breif Returns the InboxMessage for this noteId
* @Pramas int
* @NativeName: UIScript_GetNoteById
* @NativeFunctionAddress 00000001407A7730
*/

var function Inbox_GetNote()

/*
* @Breif Marks the specified note as read, by note id
* @Pramas int
* @NativeName: UIScript_Inbox_MarkNoteRead
* @NativeFunctionAddress 00000001407A8C80
*/

void function Inbox_MarkNoteRead(int)

/*
* @Breif Returns true if we have new events in the Inbox of this user
* @Pramas 
* @NativeName: UIScript_Inbox_HasNewEvents
* @NativeFunctionAddress 00000001407A8C20
*/

bool function Inbox_HasNewEvents()

/*
* @Breif Returns true if we have unread events in the Inbox of this user
* @Pramas 
* @NativeName: UIScript_Inbox_HasUnreadEvents
* @NativeFunctionAddress 00000001407A8BC0
*/

bool function Inbox_HasUnreadEvents()

/*
* @Breif Returns the total number of events in the Inbox of this user
* @Pramas 
* @NativeName: UIScript_Inbox_GetTotalEventCount
* @NativeFunctionAddress 00000001407A8B20
*/

int function Inbox_GetTotalEventCount()

/*
* @Breif Returns the event ID for the next event after the ID passed in
* @Pramas int
* @NativeName: UIScript_Inbox_GetNextEventId
* @NativeFunctionAddress 00000001407A8A60
*/

int function Inbox_GetNextEventId(int)

/*
* @Breif Returns the event ID for the previous event before the ID passed in
* @Pramas int
* @NativeName: UIScript_Inbox_GetPrevEventId
* @NativeFunctionAddress 00000001407A89A0
*/

int function Inbox_GetPrevEventId(int)

/*
* @Breif Returns the event ID for the event index [0..n] from the Inbox of this user
* @Pramas int
* @NativeName: UIScript_Inbox_GetEventIdByIndex
* @NativeFunctionAddress 00000001407A88E0
*/

int function Inbox_GetEventIdByIndex(int)

/*
* @Breif Returns the InboxMessage for this eventId
* @Pramas int
* @NativeName: UIScript_GetEventById
* @NativeFunctionAddress 00000001407A7790
*/

var function Inbox_GetEvent()

/*
* @Breif Marks the specified event as read, by event id
* @Pramas int
* @NativeName: UIScript_Inbox_MarkEventRead
* @NativeFunctionAddress 00000001407A8880
*/

void function Inbox_MarkEventRead(int)

/*
* @Breif Returns the CommunitySettings for the specified community
* @Pramas int
* @NativeName: UIScript_GetCommunitySettings
* @NativeFunctionAddress 00000001407A77F0
*/

var function GetCommunitySettings()

/*
* @Breif Saves the community settings
* @Pramas CommunitySettings
* @NativeName: UIScript_SaveCommunitySettings
* @NativeFunctionAddress 00000001407A7830
*/

var function SaveCommunitySettings()

/*
* @Breif Updates the current browse filters for communities
* @Pramas BrowseFilters
* @NativeName: UIScript_UpdateBrowseFilters
* @NativeFunctionAddress 00000001407A7870
*/

var function UpdateBrowseFilters()

/*
* @Breif Returns the number of total results for the current browse filter settings
* @Pramas 
* @NativeName: UIScript_GetBrowseResultCount
* @NativeFunctionAddress 00000001407A87C0
*/

int function GetBrowseResultCount()

/*
* @Breif Returns the starting index for the current browse filter results
* @Pramas 
* @NativeName: UIScript_GetBrowseResultStartIndex
* @NativeFunctionAddress 00000001407A8700
*/

int function GetBrowseResultStartIndex()

/*
* @Breif Returns true if the browse filter results are being fetched currently
* @Pramas 
* @NativeName: UIScript_IsBrowserFetchingMoreData
* @NativeFunctionAddress 00000001407A8680
*/

bool function IsBrowserFetchingMoreData()

/*
* @Breif Sends the community message out to the current community
* @Pramas int, string
* @NativeName: UIScript_BroadcastCommunityMessage
* @NativeFunctionAddress 00000001407A8610
*/

void function BroadcastCommunityMessage(int, string)

/*
* @Breif Returns the current BackendError string
* @Pramas 
* @NativeName: UIScript_GetBackendError
* @NativeFunctionAddress 00000001407A78B0
*/

var function GetBackendError()

/*
* @Breif returns true if the chatroom is currently muted
* @Pramas 
* @NativeName: UIScript_IsChatroomMuted
* @NativeFunctionAddress 00000001407A85B0
*/

bool function IsChatroomMuted()

/*
* @Breif Sets the cached user info state back to the initial state for the specified userId
* @Pramas string, string
* @NativeName: UIScript_ResetCommunityUserInfoCacheState
* @NativeFunctionAddress 00000001407A8550
*/

void function ResetCommunityUserInfoCacheState(string, string)

/*
* @Breif Returns the CommunityUserInfo for the specified hardware + userId
* @Pramas string, string
* @NativeName: UIClientScript_GetCommunityUserInfo
* @NativeFunctionAddress 00000001407A79C0
*/

var function GetUserInfo()

/*
* @Breif Returns the CommunityUserInfo for the specified hardware + userId for the specified ranked period
* @Pramas string, string, string
* @NativeName: UIClientScript_GetCommunityUserInfoForRankedPeriod
* @NativeFunctionAddress 00000001407A7B60
*/

var function GetUserInfoForRankedPeriod()

/*
* @Breif Returns the CommunityUserInfo for the local player
* @Pramas string, string, string
* @NativeName: UIClientScript_GetMyUserInfo
* @NativeFunctionAddress 00000001407A7BA0
*/

var function GetMyUserInfo()

/*
* @Breif Creates a new RUI instance for a nested widget and assigns the new instance handle to an argument : ruiHandle, argName, uiName
* @Pramas var ruiHandle, string argName, asset uiName
* @NativeName: Script_Rui_CreateNested
* @NativeFunctionAddress 00000001407A4430
*/

var function RuiCreateNested()

/*
* @Breif Destroys an existing RUI instance that is nested in another parent RUI instance: uiInstParent, argName
* @Pramas var uiInstParent, string argName
* @NativeName: Script_Rui_DestroyNested
* @NativeFunctionAddress 00000001407A4670
*/

var function RuiDestroyNested()

/*
* @Breif Destroys an existing RUI instance that is nested in another parent RUI instance, and does nothing if the RUI was already destroyed: uiInstParent, argName
* @Pramas var uiInstParent, string argName
* @NativeName: Script_Rui_DestroyNestedIfAlive
* @NativeFunctionAddress 00000001407A46B0
*/

var function RuiDestroyNestedIfAlive()

/*
* @Breif Sets a string argument: uiInst, argName, value
* @Pramas var uiInst, string argName, string value
* @NativeName: Script_Rui_SetString
* @NativeFunctionAddress 00000001407A48B0
*/

var function RuiSetString()

/*
* @Breif Sets an asset argument: uiInst, argName, value
* @Pramas var uiInst, string argName, asset value
* @NativeName: Script_Rui_SetAsset
* @NativeFunctionAddress 00000001407A48F0
*/

var function RuiSetAsset()

/*
* @Breif Sets an image argument: uiInst, argName, value
* @Pramas var uiInst, string argName, asset value
* @NativeName: Script_Rui_SetImage
* @NativeFunctionAddress 00000001407A4930
*/

var function RuiSetImage()

/*
* @Breif Sets a bool argument: uiInst, argName, value
* @Pramas var uiInst, string argName, bool value
* @NativeName: Script_Rui_SetBool
* @NativeFunctionAddress 00000001407A4970
*/

var function RuiSetBool()

/*
* @Breif Sets an integer argument: uiInst, argName, value
* @Pramas var uiInst, string argName, int value
* @NativeName: Script_Rui_SetInt
* @NativeFunctionAddress 00000001407A4AC0
*/

var function RuiSetInt()

/*
* @Breif Sets a float argument: uiInst, argName, value
* @Pramas var uiInst, string argName, float value
* @NativeName: Script_Rui_SetFloat
* @NativeFunctionAddress 00000001407A4C20
*/

var function RuiSetFloat()

/*
* @Breif Sets a float2 argument: uiInst, argName, value
* @Pramas var uiInst, string argName, vector value
* @NativeName: Script_Rui_SetFloat2
* @NativeFunctionAddress 00000001407A4DF0
*/

var function RuiSetFloat2()

/*
* @Breif Sets a float3 argument: uiInst, argName, value
* @Pramas var uiInst, string argName, vector value
* @NativeName: Script_Rui_SetFloat3
* @NativeFunctionAddress 00000001407A4FB0
*/

var function RuiSetFloat3()

/*
* @Breif Sets a game time argument: uiInst, argName, value
* @Pramas var uiInst, string argName, float value
* @NativeName: Script_Rui_SetGameTime
* @NativeFunctionAddress 00000001407A51A0
*/

var function RuiSetGameTime()

/*
* @Breif Sets a float4 argument from color/alpha: uiInst, argName, color, alpha
* @Pramas var uiInst, string argName, vector color, float alpha
* @NativeName: Script_Rui_SetColorAlpha
* @NativeFunctionAddress 00000001407A5330
*/

var function RuiSetColorAlpha()

/*
* @Breif Checks if an asset exists for this image name
* @Pramas string
* @NativeName: Script_Rui_ImageExists
* @NativeFunctionAddress 00000001407AF8D0
*/

bool function RuiImageExists(string)

/*
* @Breif Creates a new RUI macro that can be embedded in strings with the passed in macro name
* @Pramas asset uiName, string macroName
* @NativeName: Script_Rui_CreateEmbeddedRui
* @NativeFunctionAddress 00000001407A7C30
*/

var function RuiCreateEmbedded()

/*
* @Breif Gets the embedded rui that will draw with the given substitution name
* @Pramas string substitutionName
* @NativeName: Script_Rui_GetEmbeddedRuiHandle
* @NativeFunctionAddress 00000001407A59F0
*/

var function RuiGetEmbeddedHandle()

/*
* @Breif Sets a bool argument in a macro rui
* @Pramas var embeddedHandle, string argName, bool value
* @NativeName: Script_Rui_SetEmbeddedRuiBool
* @NativeFunctionAddress 00000001407A5B20
*/

var function RuiSetEmbeddedRuiBool()

/*
* @Breif Sets a int argument in a macro rui
* @Pramas var embeddedHandle, string argName, int value
* @NativeName: Script_Rui_SetEmbeddedRuiInt
* @NativeFunctionAddress 00000001407A5B60
*/

var function RuiSetEmbeddedRuiInt()

/*
* @Breif Sets a float argument in a macro rui
* @Pramas var embeddedHandle, string argName, float value
* @NativeName: Script_Rui_SetEmbeddedRuiFloat
* @NativeFunctionAddress 00000001407A5BA0
*/

var function RuiSetEmbeddedRuiFloat()

/*
* @Breif Sets a float2 argument in a macro rui
* @Pramas var embeddedHandle, string argName, vector value
* @NativeName: Script_Rui_SetEmbeddedRuiFloat2
* @NativeFunctionAddress 00000001407A5BE0
*/

var function RuiSetEmbeddedRuiFloat2()

/*
* @Breif Sets a float3 argument in a macro rui
* @Pramas var embeddedHandle, string argName, vector value
* @NativeName: Script_Rui_SetEmbeddedRuiFloat3
* @NativeFunctionAddress 00000001407A5C20
*/

var function RuiSetEmbeddedRuiFloat3()

/*
* @Breif Sets a float4 argument from color/alpha in a macro rui
* @Pramas var embeddedHandle, string argName, vector color, float alpha
* @NativeName: Script_Rui_SetEmbeddedRuiColorAlpha
* @NativeFunctionAddress 00000001407A5C60
*/

var function RuiSetEmbeddedRuiColorAlpha()

/*
* @Breif Sets a string argument in a macro rui
* @Pramas var embeddedHandle, string argName, string value
* @NativeName: Script_Rui_SetEmbeddedRuiString
* @NativeFunctionAddress 00000001407A5CA0
*/

var function RuiSetEmbeddedRuiString()

/*
* @Breif Sets a size of a macro rui
* @Pramas var embeddedHandle, vector value
* @NativeName: Script_Rui_SetEmbeddedRuiSize
* @NativeFunctionAddress 00000001407A7C70
*/

var function RuiSetEmbeddedRuiSize()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsAutoSprintForced
* @NativeFunctionAddress 00000001407A84C0
*/

bool function IsAutoSprintForced()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetAutoSprintForcedValue
* @NativeFunctionAddress 00000001407A8430
*/

bool function AutoSprintForcedValue()

/*
* @Breif Converts standard RGB to linear color
* @Pramas vector
* @NativeName: Script_SrgbToLinear
* @NativeFunctionAddress 00000001407A5D20
*/

var function SrgbToLinear()

/*
* @Breif Converts a string to an asset. Caution: Do not use unless you understand vbspinfo.
* @Pramas string assetPath
* @NativeName: Script_AssetDownloads_GetAssetFromString
* @NativeFunctionAddress 00000001407A5E20
*/

var function GetAssetFromString()

/*
* @Breif Flashes the game window on the taskbar if it isn't focused.
* @Pramas 
* @NativeName: Script_FlashGameWindow
* @NativeFunctionAddress 00000001407A83C0
*/

void function FlashGameWindow()

/*
* @Breif Returns the position of the cursor
* @Pramas 
* @NativeName: Script_GetCursorPosition
* @NativeFunctionAddress 00000001407A7D20
*/

var function GetCursorPosition()

/*
* @Breif Sets the position of the cursor
* @Pramas vector
* @NativeName: Script_SetGameCursorPosition
* @NativeFunctionAddress 00000001407A7DD0
*/

var function SetCursorPosition()

/*
* @Breif Forces VGUI to update mouse focus.
* @Pramas 
* @NativeName: Script_ForceVGUIFocusUpdate
* @NativeFunctionAddress 00000001407A8340
*/

void function ForceVGUIFocusUpdate()

/*
* @Breif Sets the rui for cursor tooltips
* @Pramas string ruiPath
* @NativeName: Script_GameCursor_SetTooltipRui
* @NativeFunctionAddress 00000001407A5EA0
*/

var function SetTooltipRui()

/*
* @Breif Hides the cursor tooltip
* @Pramas 
* @NativeName: Script_GameCursor_HideTooltipRui
* @NativeFunctionAddress 00000001407AF590
*/

void function HideTooltipRui()

/*
* @Breif Shows the cursor tooltip
* @Pramas 
* @NativeName: Script_GameCursor_ShowTooltipRui
* @NativeFunctionAddress 00000001407AF500
*/

void function ShowTooltipRui()

/*
* @Breif Returns the rui for cursor tooltips
* @Pramas 
* @NativeName: Script_GameCursor_GetTooltipRui
* @NativeFunctionAddress 00000001407A5EE0
*/

var function GetTooltipRui()

/*
* @Breif Returns the rui for the game cursor
* @Pramas 
* @NativeName: Script_GameCursor_GetCursorRui
* @NativeFunctionAddress 00000001407A5F70
*/

var function GetCursorRui()

/*
* @Breif Hides the cursor while in a menu
* @Pramas 
* @NativeName: Script_HideGameCursor
* @NativeFunctionAddress 00000001407A8300
*/

void function HideGameCursor()

/*
* @Breif Shows the cursor while in a menu
* @Pramas 
* @NativeName: Script_ShowGameCursor
* @NativeFunctionAddress 00000001407A82C0
*/

void function ShowGameCursor()

/*
* @Breif Prevents game cursor movement and dpad navigation in menus while disabled.
* @Pramas bool
* @NativeName: Script_SetMenuNavigationDisabled
* @NativeFunctionAddress 00000001407A8280
*/

void function SetMenuNavigationDisabled(bool)

/*
* @Breif Update spinner. You should call this every 50ms or so if you have a script function called during loading that takes more than 50ms.
* @Pramas 
* @NativeName: UpdateLoadingProgress_SuppressPumpMessages
* @NativeFunctionAddress 00000001407AF020
*/

void function UpdateLoadingProgress()

/*
* @Breif Clears the state of the key repeater. Useful when input is suspended.
* @Pramas 
* @NativeName: UIScript_ResetKeyRepeater
* @NativeFunctionAddress 00000001407A8230
*/

void function ResetKeyRepeater()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsPvELoadingForcedOn
* @NativeFunctionAddress 00000001407A81B0
*/

bool function IsPvELoadingForcedOn()

/*
* @Breif Play text as speech audio.
* @Pramas string
* @NativeName: Script_PlayTextToSpeech
* @NativeFunctionAddress 00000001407AEEB0
*/

void function PlayTextToSpeech(string)

/*
* @Breif Sets a custom load screen asset to be displayed when levels load.
* @Pramas asset
* @NativeName: UIScript_SetCustomLoadScreen
* @NativeFunctionAddress 00000001407A8160
*/

void function SetCustomLoadScreen(asset)

/*
* @Breif Registers a named networked variable.
* @Pramas string name, int SNDC_category, int SNVT_type, var defaultValue = 0, float rangemin = 0, float rangemax = 0
* @NativeName: Script_RegisterNetworkedVariable
* @NativeFunctionAddress 00000001408EBBD0
*/

var function RegisterNetworkedVariable()

/*
* @Breif Gets the internal index used to reference a scripted network variable. For use with FX_PATTACH_SCRIPT_NETWORK_VAR.
* @Pramas string name
* @NativeName: Script_GetNetworkedVariableIndex
* @NativeFunctionAddress 00000001408EBC10
*/

var function GetNetworkedVariableIndex()

/*
* @Breif Gets a global bool network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetBool_Client
* @NativeFunctionAddress 00000001408FC390
*/

bool function GetGlobalNetBool(string)

/*
* @Breif Gets an global int network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetInt_Client
* @NativeFunctionAddress 00000001408FC2B0
*/

int function GetGlobalNetInt(string)

/*
* @Breif Gets a global float network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetFloat_Client
* @NativeFunctionAddress 00000001408FC1D0
*/

float function GetGlobalNetFloat(string)

/*
* @Breif Gets a global time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetTime_Client
* @NativeFunctionAddress 00000001408FC130
*/

float function GetGlobalNetTime(string)

/*
* @Breif Gets a global entity network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetEnt_Client
* @NativeFunctionAddress 00000001408FC0D0
*/

entity function GetGlobalNetEnt(string)

/*
* @Breif Returns the number of gamemodes in the current playlist
* @Pramas 
* @NativeName: Client_GetCurrentPlaylistGamemodesCount
* @NativeFunctionAddress 0000000140848A50
*/

int function GetCurrentPlaylistGamemodesCount()

/*
* @Breif Returns the number of gamemodes in the specified playlist
* @Pramas string
* @NativeName: Client_GetPlaylistGamemodesCount
* @NativeFunctionAddress 00000001408489B0
*/

int function GetPlaylistGamemodesCount(string)

/*
* @Breif Returns the name of the gamemode at the specified index in the current playlist
* @Pramas int
* @NativeName: Client_GetCurrentPlaylistGamemodeByIndex
* @NativeFunctionAddress 0000000140848940
*/

string function GetCurrentPlaylistGamemodeByIndex(int)

/*
* @Breif Returns the name of the gamemode at the specified index in the specified playlist
* @Pramas string, int
* @NativeName: Client_GetPlaylistGamemodeByIndex
* @NativeFunctionAddress 00000001408488D0
*/

string function GetPlaylistGamemodeByIndex(string, int)

/*
* @Breif 
* @Pramas string, int, string
* @NativeName: Client_GetPlaylistGamemodeByIndexVar
* @NativeFunctionAddress 0000000140848850
*/

string function GetPlaylistGamemodeByIndexVar(string, int, string)

/*
* @Breif 
* @Pramas int, string, bool
* @NativeName: Client_GetCurrentPlaylistGamemodeByIndexVar
* @NativeFunctionAddress 00000001408487D0
*/

string function GetCurrentPlaylistGamemodeByIndexVar(int, string, bool)

/*
* @Breif Returns the number of maps for the gamemode at the specified index in the current playlist
* @Pramas int
* @NativeName: Client_GetCurrentPlaylistGamemodeByIndexMapsCount
* @NativeFunctionAddress 0000000140848720
*/

int function GetCurrentPlaylistGamemodeByIndexMapsCount(int)

/*
* @Breif Returns the number of maps for the gamemode at the specified index in the specified playlist
* @Pramas string, int
* @NativeName: Client_GetPlaylistGamemodeByIndexMapsCount
* @NativeFunctionAddress 0000000140848670
*/

int function GetPlaylistGamemodeByIndexMapsCount(string, int)

/*
* @Breif Returns the name of the map at the specified gamemode and map indices in the current playlist
* @Pramas int, int
* @NativeName: Client_GetCurrentPlaylistGamemodeByIndexMapByIndex
* @NativeFunctionAddress 00000001408485F0
*/

string function GetCurrentPlaylistGamemodeByIndexMapByIndex(int, int)

/*
* @Breif Returns the name of the map at the specified gamemode and map indices in the specified playlist
* @Pramas string, int, int
* @NativeName: Client_GetPlaylistGamemodeByIndexMapByIndex
* @NativeFunctionAddress 0000000140848560
*/

string function GetPlaylistGamemodeByIndexMapByIndex(string, int, int)

/*
* @Breif Returns the total number of maps in current playlist
* @Pramas 
* @NativeName: Client_GetCurrentPlaylistMapsCount
* @NativeFunctionAddress 00000001408484D0
*/

int function GetCurrentPlaylistMapsCount()

/*
* @Breif Returns the total number of maps in the specified playlist
* @Pramas string
* @NativeName: Client_GetPlaylistMapsCount
* @NativeFunctionAddress 0000000140848430
*/

int function GetPlaylistMapsCount(string)

/*
* @Breif 
* @Pramas 
* @NativeName: Client_IsPrivateMatch
* @NativeFunctionAddress 00000001408483D0
*/

bool function IsPrivateMatch()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_IsCoopMatch
* @NativeFunctionAddress 0000000140848370
*/

bool function IsCoopMatch()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_GetLobbyTeamsShowAsBalanced
* @NativeFunctionAddress 0000000140848320
*/

bool function GetLobbyTeamsShowAsBalanced()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_DevLobbyIsFrozen
* @NativeFunctionAddress 00000001407AD660
*/

bool function DevLobbyIsFrozen()

/*
* @Breif 
* @Pramas string, string, string
* @NativeName: Client_GetGamemodeVarOrUseValue
* @NativeFunctionAddress 00000001408482B0
*/

string function GetGamemodeVarOrUseValue(string, string, string)

/*
* @Breif Returns the total number of playlists
* @Pramas 
* @NativeName: Client_GetPlaylistCount
* @NativeFunctionAddress 0000000140848220
*/

int function GetPlaylistCount()

/*
* @Breif Gets the name of the playlist, by index
* @Pramas int
* @NativeName: Client_GetPlaylistName
* @NativeFunctionAddress 00000001408481B0
*/

string ornull function GetPlaylistName(int)

/*
* @Breif Get the original value of a variable from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, string
* @NativeName: Client_GetPlaylistVarOrUseValueOriginal
* @NativeFunctionAddress 0000000140848140
*/

string function GetPlaylistVarOrUseValueOriginal(string, string, string)

/*
* @Breif Get the name of the current playlist
* @Pramas 
* @NativeName: Client_GetCurrentPlaylistName
* @NativeFunctionAddress 00000001408480E0
*/

string function GetCurrentPlaylistName()

/*
* @Breif Get the original value of a variable from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string
* @NativeName: Client_GetCurrentPlaylistVarOrUseValueOriginal
* @NativeFunctionAddress 0000000140848070
*/

string function GetCurrentPlaylistVarOrUseValueOriginal(string, string)

/*
* @Breif Get the value of a string from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, string
* @NativeName: Client_GetPlaylistVarString
* @NativeFunctionAddress 0000000140848000
*/

string function GetPlaylistVarString(string, string, string)

/*
* @Breif Get the value of a bool from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, bool
* @NativeName: Client_GetPlaylistVarBool
* @NativeFunctionAddress 0000000140847F90
*/

bool function GetPlaylistVarBool(string, string, bool)

/*
* @Breif Get the value of an integer from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, int
* @NativeName: Client_GetPlaylistVarInt
* @NativeFunctionAddress 0000000140847ED0
*/

int function GetPlaylistVarInt(string, string, int)

/*
* @Breif Get the value of a float from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, float
* @NativeName: Client_GetPlaylistVarFloat
* @NativeFunctionAddress 0000000140847E10
*/

float function GetPlaylistVarFloat(string, string, float)

/*
* @Breif Get the value of a string from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string
* @NativeName: Client_GetCurrentPlaylistVarString
* @NativeFunctionAddress 0000000140847DA0
*/

string function GetCurrentPlaylistVarString(string, string)

/*
* @Breif Get the value of a bool from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, bool
* @NativeName: Client_GetCurrentPlaylistVarBool
* @NativeFunctionAddress 0000000140847D40
*/

bool function GetCurrentPlaylistVarBool(string, bool)

/*
* @Breif Get the value of an integer from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, int
* @NativeName: Client_GetCurrentPlaylistVarInt
* @NativeFunctionAddress 0000000140847C90
*/

int function GetCurrentPlaylistVarInt(string, int)

/*
* @Breif Get the value of a float from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, float
* @NativeName: Client_GetCurrentPlaylistVarFloat
* @NativeFunctionAddress 0000000140847BD0
*/

float function GetCurrentPlaylistVarFloat(string, float)

/*
* @Breif Gets the max players for the specified playlist
* @Pramas string
* @NativeName: Client_GetMaxPlayersForPlaylistName
* @NativeFunctionAddress 0000000140847B20
*/

int function GetMaxPlayersForPlaylistName(string)

/*
* @Breif Gets the max teams for the specified playlist
* @Pramas string
* @NativeName: Client_GetMaxTeamsForPlaylistName
* @NativeFunctionAddress 0000000140847A70
*/

int function GetMaxTeamsForPlaylistName(string)

/*
* @Breif Play a video
* @Pramas string, int, int, int, int, string, int, bool, bool, bool
* @NativeName: Script_PlayVideo
* @NativeFunctionAddress 00000001407B28B0
*/

void function PlayVideo(string, int, int, int, int, string, int, bool, bool, bool)

/*
* @Breif Plays a video at position using coordinates scaled relative to the base screen resolution
* @Pramas string, int, int, int, int, int, string, int, bool, bool, bool
* @NativeName: Script_PlayVideoScaled
* @NativeFunctionAddress 00000001407B2770
*/

void function PlayVideoScaled(string, int, int, int, int, int, string, int, bool, bool, bool)

/*
* @Breif Pause all VGUI videos
* @Pramas int
* @NativeName: Script_PauseVideos
* @NativeFunctionAddress 00000001407B2700
*/

void function PauseVideos(int)

/*
* @Breif Unpause all VGUI videos
* @Pramas int
* @NativeName: Script_UnpauseVideos
* @NativeFunctionAddress 00000001407B2690
*/

void function UnpauseVideos(int)

/*
* @Breif Hide all VGUI videos
* @Pramas int
* @NativeName: Script_HideVideos
* @NativeFunctionAddress 00000001407B2620
*/

void function HideVideos(int)

/*
* @Breif Unhide all VGUI videos
* @Pramas int
* @NativeName: Script_ShowVideos
* @NativeFunctionAddress 00000001407B25B0
*/

void function ShowVideos(int)

/*
* @Breif Stop video currently playing
* @Pramas int
* @NativeName: Script_StopVideos
* @NativeFunctionAddress 00000001407B2540
*/

void function StopVideos(int)

/*
* @Breif Returns true if there is a video currently playing
* @Pramas 
* @NativeName: Script_IsAnyVideoVisible
* @NativeFunctionAddress 00000001407B24F0
*/

bool function IsAnyVideoVisible()

/*
* @Breif Returns true if there is a video currently playing with the given filename
* @Pramas string
* @NativeName: Script_IsPlayingVideo
* @NativeFunctionAddress 00000001407B2490
*/

bool function IsPlayingVideo(string)

/*
* @Breif Start a video on a Bink channel
* @Pramas int channelId, asset videoFile, bool isLooping, float startTimeDelay
* @NativeName: Script_StartVideoOnChannel
* @NativeFunctionAddress 00000001407AEBB0
*/

void function StartVideoOnChannel(int channelId, asset videoFile, bool isLooping, float startTimeDelay)

/*
* @Breif Stop a video on a Bink channel
* @Pramas int
* @NativeName: Script_StopVideoOnChannel
* @NativeFunctionAddress 00000001407AEB30
*/

void function StopVideoOnChannel(int)

/*
* @Breif Stop videos on all Bink channels
* @Pramas 
* @NativeName: Script_StopVideoOnAllChannels
* @NativeFunctionAddress 00000001407AEAE0
*/

void function StopVideoOnAllChannels()

/*
* @Breif Pause a video on a Bink channel
* @Pramas int
* @NativeName: Script_PauseVideoOnChannel
* @NativeFunctionAddress 00000001407AEA60
*/

void function PauseVideoOnChannel(int)

/*
* @Breif Resume a paused video on a Bink channel
* @Pramas int
* @NativeName: Script_ResumeVideoOnChannel
* @NativeFunctionAddress 00000001407AE9E0
*/

void function ResumeVideoOnChannel(int)

/*
* @Breif Is a video currently assigned to this channel.
* @Pramas int
* @NativeName: Script_VideoChannelHasVideoAssigned
* @NativeFunctionAddress 00000001407AE950
*/

bool function VideoChannelHasVideoAssigned(int)

/*
* @Breif Is a video currently playing on this channel (false if no video assigned / stopped).
* @Pramas int
* @NativeName: Script_VideoChannelIsPlaying
* @NativeFunctionAddress 00000001407AE8C0
*/

bool function VideoChannelIsPlaying(int)

/*
* @Breif Is the video on this channel set to loop (false if no video assigned / stopped).
* @Pramas int
* @NativeName: Script_VideoChannelIsLooping
* @NativeFunctionAddress 00000001407AE830
*/

bool function VideoChannelIsLooping(int)

/*
* @Breif Is the video on this channel paused (false if no video assigned / stopped).
* @Pramas int
* @NativeName: Script_VideoChannelIsPaused
* @NativeFunctionAddress 00000001407AE7A0
*/

bool function VideoChannelIsPaused(int)

/*
* @Breif Is the video finished playing (false if no video assigned / stopped). Also false for looping videos.
* @Pramas int
* @NativeName: Script_VideoChannelIsFinished
* @NativeFunctionAddress 00000001407AE710
*/

bool function VideoChannelIsFinished(int)

/*
* @Breif Link a Bink channel to a material that allows video.
* @Pramas int channelId, asset materialName
* @NativeName: Script_LinkVideoChannelToMaterial
* @NativeFunctionAddress 00000001407AE6B0
*/

void function LinkVideoChannelToMaterial(int channelId, asset materialName)

/*
* @Breif Start searching for a match on this playlist
* @Pramas string
* @NativeName: StartMatchmaking
* @NativeFunctionAddress 0000000140847A20
*/

void function StartMatchmaking(string)

/*
* @Breif Stop searching for a match
* @Pramas 
* @NativeName: StopMatchmaking
* @NativeFunctionAddress 00000001408479E0
*/

void function StopMatchmaking()

/*
* @Breif Cancel searching for a match
* @Pramas 
* @NativeName: CancelMatchmaking
* @NativeFunctionAddress 00000001408479A0
*/

void function CancelMatchmaking()

/*
* @Breif Returns true if we are matchmaking
* @Pramas 
* @NativeName: AreWeMatchmaking
* @NativeFunctionAddress 0000000140847950
*/

bool function AreWeMatchmaking()

/*
* @Breif Indicate to the party what playlist we will be playing. Starts map preloading for single-map playlists.
* @Pramas string
* @NativeName: SetMatchmakingPlaylist
* @NativeFunctionAddress 0000000140847900
*/

void function SetMatchmakingPlaylist(string)

/*
* @Breif Given button id (ex: BUTTON_A), returns true if button is down.
* @Pramas int
* @NativeName: ScriptInputIsButtonDown
* @NativeFunctionAddress 00000001407AE640
*/

bool function InputIsButtonDown(int)

/*
* @Breif Given axis id (ex: ANALOG_LEFT_X) returns the value of the axis, in the (-1,1) range.
* @Pramas int
* @NativeName: ScriptInputGetAxis
* @NativeFunctionAddress 00000001407AE590
*/

float function InputGetAxis(int)

/*
* @Breif 
* @Pramas inMenu
* @NativeName: SetInMenuForButtonCallbacks
* @NativeFunctionAddress 00000001407A60D0
*/

void function SetInMenuForButtonCallbacks(var, bool)

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: RegisterButtonPressedCallback
* @NativeFunctionAddress 00000001407A6180
*/

void function RegisterButtonPressedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: DeregisterButtonPressedCallback
* @NativeFunctionAddress 00000001407A6210
*/

void function DeregisterButtonPressedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: RegisterButtonReleasedCallback
* @NativeFunctionAddress 00000001407A62A0
*/

void function RegisterButtonReleasedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: DeregisterButtonReleasedCallback
* @NativeFunctionAddress 00000001407A6340
*/

void function DeregisterButtonReleasedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: RegisterMenuButtonPressedCallback
* @NativeFunctionAddress 00000001407A63D0
*/

void function RegisterMenuButtonPressedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: RegisterMenuButtonReleasedCallback
* @NativeFunctionAddress 00000001407A6460
*/

void function RegisterMenuButtonReleasedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas axisID, callback
* @NativeName: RegisterStickMovedCallback
* @NativeFunctionAddress 00000001407A6500
*/

void function RegisterStickMovedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas axisID, callback
* @NativeName: DeregisterStickMovedCallback
* @NativeFunctionAddress 00000001407A65D0
*/

void function DeregisterStickMovedCallback(var, int, functionref())

/*
* @Breif Returns the TAPPED binding for a given key (like BUTTON_A)
* @Pramas int
* @NativeName: Script_GetKeyTappedBinding
* @NativeFunctionAddress 00000001407AE4E0
*/

string function GetKeyTappedBinding(int)

/*
* @Breif Returns the HELD binding for a given key (like BUTTON_A)
* @Pramas int
* @NativeName: Script_GetKeyHeldBinding
* @NativeFunctionAddress 00000001407AE430
*/

string function GetKeyHeldBinding(int)

/*
* @Breif Returns the keycode for given binding
* @Pramas string
* @NativeName: Script_GetKeyCodeForBinding
* @NativeFunctionAddress 00000001407AE350
*/

int function GetKeyCodeForBinding(string)

/*
* @Breif Returns 'party' or 'game' lobby type
* @Pramas 
* @NativeName: Client_GetLobbyType
* @NativeFunctionAddress 0000000140846190
*/

string function GetLobbyType()

/*
* @Breif Returns true if the local player is the party leader.
* @Pramas 
* @NativeName: AmIPartyLeader
* @NativeFunctionAddress 0000000140846110
*/

bool function AmIPartyLeader()

/*
* @Breif Returns true if the player passed in is in a party with the local player.
* @Pramas entity
* @NativeName: Script_IsPartyMember
* @NativeFunctionAddress 00000001408460A0
*/

bool function IsPartyMember(entity)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetTeamPendingPlayersReserved
* @NativeFunctionAddress 0000000140845FB0
*/

int function GetTeamPendingPlayersReserved(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetTeamPendingPlayersConnecting
* @NativeFunctionAddress 0000000140845EC0
*/

int function GetTeamPendingPlayersConnecting(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetTeamPendingPlayersLoading
* @NativeFunctionAddress 0000000140845DD0
*/

int function GetTeamPendingPlayersLoading(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTotalPendingPlayersReserved
* @NativeFunctionAddress 0000000140845AF0
*/

int function GetTotalPendingPlayersReserved()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTotalPendingPlayersConnecting
* @NativeFunctionAddress 0000000140845810
*/

int function GetTotalPendingPlayersConnecting()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTotalPendingPlayersLoading
* @NativeFunctionAddress 0000000140845530
*/

int function GetTotalPendingPlayersLoading()

/*
* @Breif Invite people to party.
* @Pramas array< string > to_be_invited
* @NativeName: Client_Script_DoInviteToParty
* @NativeFunctionAddress 00000001408454C0
*/

bool function DoInviteToParty(array< string > to_be_invited)

/*
* @Breif Invite person to be friend.
* @Pramas string
* @NativeName: Client_Script_DoInviteTobeFriend
* @NativeFunctionAddress 0000000140845420
*/

bool function DoInviteToBeFriend(string)

/*
* @Breif Returns true if origin is enabled.
* @Pramas 
* @NativeName: Script_Origin_IsEnabled
* @NativeFunctionAddress 00000001408453C0
*/

bool function Origin_IsEnabled()

/*
* @Breif Returns true if game is upto date in Origin.
* @Pramas 
* @NativeName: Script_Origin_IsUpToDate
* @NativeFunctionAddress 0000000140845360
*/

bool function Origin_IsUpToDate()

/*
* @Breif Returns true if origin is online. If Origin is not online please grey out "PLAY" in the main menu.
* @Pramas 
* @NativeName: Script_Origin_IsOnline
* @NativeFunctionAddress 0000000140845300
*/

bool function Origin_IsOnline()

/*
* @Breif Returns true if origin is ready to go. You should block leaving the main menu until this is true. If origin is enabled it needs to be ready before you connect to the party dedi
* @Pramas 
* @NativeName: Script_Origin_IsReady
* @NativeFunctionAddress 00000001408452A0
*/

bool function Origin_IsReady()

/*
* @Breif Returns true if the Origin session is joinable, eg. if Origin is enabled and we are ready and we have a valid session and our team is not full, and we are not in mp_npe level :D
* @Pramas 
* @NativeName: Script_Origin_IsJoinable
* @NativeFunctionAddress 0000000140845240
*/

bool function Origin_IsJoinable()

/*
* @Breif Returns true if the Origin overlay is available. Perf is safe to call this function repeatedly as it uses a cached value. Value may dynamically change as the game is running
* @Pramas 
* @NativeName: Script_Origin_IsOverlayAvailable
* @NativeFunctionAddress 00000001408451E0
*/

bool function Origin_IsOverlayAvailable()

/*
* @Breif Show the Origin invite friends dialog. Returns false if for some reason it didn't work.
* @Pramas 
* @NativeName: Script_Origin_ShowInviteFriendsDialog
* @NativeFunctionAddress 0000000140845180
*/

bool function Origin_ShowInviteFriendsDialog()

/*
* @Breif Get a class instance of a named hud element.
* @Pramas string
* @NativeName: HudElement
* @NativeFunctionAddress 00000001409C3C00
*/

var function HudElement(string)

/*
* @Breif Get a class instance of a named hud element.
* @Pramas string
* @NativeName: ScriptGetOrCreateHudElement
* @NativeFunctionAddress 00000001409C3B90
*/

var function GetOrCreateHudElement(string)

/*
* @Breif Run the specified animation script from hudanimations.txt.
* @Pramas string
* @NativeName: RunAnimationScript
* @NativeFunctionAddress 00000001409C3B30
*/

void function RunAnimationScript(string)

/*
* @Breif Get the size of the screen in pixels, as an array with two elements.
* @Pramas 
* @NativeName: GetScreenSize
* @NativeFunctionAddress 00000001409C3A60
*/

array< int > function GetScreenSize()

/*
* @Breif Convert vector (in world space) to screen coordinates. Returns an array with x, y, and a bool. Bool is false if the coordinate is not on-screen.
* @Pramas vector
* @NativeName: ToScreenSpace_Script
* @NativeFunctionAddress 00000001409C3990
*/

var function ToScreenSpace(vector)

/*
* @Breif Convert a vector (in world space) to clamped screen coordinates. Returns an array with x and y values. Meant to be followed up with Hud.ClipScreenPositionToBox()
* @Pramas vector pos
* @NativeName: ToScreenSpaceClamped
* @NativeFunctionAddress 00000001409C38C0
*/

array< int > function ToScreenSpaceClamped(vector pos)

/*
* @Breif Convert a vector (in world space) to clamped screen coordinates. Returns an array with x and y values. Meant to be followed up with Hud.ClipScreenPositionToBox()
* @Pramas vector, float, float
* @NativeName: Script_ToScreenSpaceClampedWithBounds
* @NativeFunctionAddress 00000001409C37B0
*/

var function ToScreenSpaceClampedWithBounds(vector, float, float)

/*
* @Breif Convert a vector (in world space) to coordinates in or on an ellipse on screen giving the player a hint which direction to look to see the target. Returns an array with x and y values.
* @Pramas vector
* @NativeName: ToScreenSpaceApproximate
* @NativeFunctionAddress 00000001409C36E0
*/

var function ToScreenSpaceApproximate(vector)

/*
* @Breif Given x, y, and left-right-top-bottom boundries, clamp the X & Y. Returns an array with x and y values.
* @Pramas int x, int y, int left, int right, int top, int bottom
* @NativeName: ClipScreenPositionToBox
* @NativeFunctionAddress 00000001409C3580
*/

array< int > function ClipScreenPositionToBox(int x, int y, int left, int right, int top, int bottom)

/*
* @Breif Convert a vector (in world space) to coordinates in or on an ellipse on screen giving the player a hint which direction to look to see the target. Returns an array with x and y values.
* @Pramas vector, float, float
* @NativeName: ToScreenSpaceApproximateWithBounds
* @NativeFunctionAddress 00000001409C3470
*/

var function ToScreenSpaceApproximateWithBounds(vector, float, float)

/*
* @Breif Enable spherical warp distortion.
* @Pramas 
* @NativeName: WarpEnable
* @NativeFunctionAddress 00000001409C3420
*/

void function WarpEnable()

/*
* @Breif Set global spherical warp settings (xWarp, xScale, yWarp, yScale, viewDist).
* @Pramas float, float, float, float, float
* @NativeName: WarpGlobalSettings
* @NativeFunctionAddress 00000001409C3340
*/

void function WarpGlobalSettings(float, float, float, float, float)

/*
* @Breif Disable spherical warp distortion.
* @Pramas 
* @NativeName: WarpDisable
* @NativeFunctionAddress 00000001409C32F0
*/

void function WarpDisable()

/*
* @Breif Destroy a hud element.
* @Pramas 
* @NativeName: Destroy
* @NativeFunctionAddress 00000001409C32A0
*/

void function Destroy()

/*
* @Breif Reveal a hud element.
* @Pramas 
* @NativeName: Show
* @NativeFunctionAddress 00000001409C3250
*/

void function Show()

/*
* @Breif Hide a hud element.
* @Pramas 
* @NativeName: Hide
* @NativeFunctionAddress 00000001409C3200
*/

void function Hide()

/*
* @Breif Set visibility of a hud element.
* @Pramas bool
* @NativeName: SetVisible
* @NativeFunctionAddress 00000001409C31A0
*/

void function SetVisible(bool)

/*
* @Breif Refresh the visibility a hud element.
* @Pramas 
* @NativeName: UpdateVisibility
* @NativeFunctionAddress 00000001409C3150
*/

void function UpdateVisibility()

/*
* @Breif Returns whether the given hud element is currently visible.
* @Pramas 
* @NativeName: IsVisible
* @NativeFunctionAddress 00000001409C30F0
*/

bool function IsVisible()

/*
* @Breif 
* @Pramas int
* @NativeName: SetVisGroupID
* @NativeFunctionAddress 00000001409C3080
*/

void function SetVisGroupID(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetVisGroupID
* @NativeFunctionAddress 00000001409C2FD0
*/

int function GetVisGroupID()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHudName
* @NativeFunctionAddress 00000001409C2F40
*/

string function GetHudName()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptID
* @NativeFunctionAddress 00000001409C2EB0
*/

string function GetScriptID()

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas string, int, float
* @NativeName: Script_SetAutoText
* @NativeFunctionAddress 00000001409C2E20
*/

void function SetAutoText(string, int, float)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas string, string, string, int, float
* @NativeName: Script_SetAutoTextWithAlternates
* @NativeFunctionAddress 00000001409C2D70
*/

void function SetAutoTextWithAlternates(string, string, string, int, float)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas string, int, vector
* @NativeName: Script_SetAutoTextVector
* @NativeFunctionAddress 00000001409C2CF0
*/

void function SetAutoTextVector(string, int, vector)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas string, int, entity
* @NativeName: Script_SetAutoTextEntity
* @NativeFunctionAddress 00000001409C2C50
*/

void function SetAutoTextEntity(string, int, entity)

/*
* @Breif Set the auto text settings for this HUD element. ( localization token, HATT type, start value, end value, transition time )
* @Pramas string, float, float, float
* @NativeName: Script_SetAutoTextCountTo
* @NativeFunctionAddress 00000001409C2BA0
*/

void function SetAutoTextCountTo(string, float, float, float)

/*
* @Breif Enable the auto text updating
* @Pramas 
* @NativeName: Script_EnableAutoText
* @NativeFunctionAddress 00000001409C2B50
*/

void function EnableAutoText()

/*
* @Breif Disable the auto text updating
* @Pramas 
* @NativeName: Script_DisableAutoText
* @NativeFunctionAddress 00000001409C2B00
*/

void function DisableAutoText()

/*
* @Breif Returns true if an auto text has been set for it and it is enabled
* @Pramas 
* @NativeName: Script_IsAutoText
* @NativeFunctionAddress 00000001409C2AA0
*/

bool function IsAutoText()

/*
* @Breif Enable replacing key bindings with the actual key
* @Pramas 
* @NativeName: Script_EnableKeyBindingIcons
* @NativeFunctionAddress 00000001409C2A50
*/

void function EnableKeyBindingIcons()

/*
* @Breif Disable replacing key bindings with the actual key
* @Pramas 
* @NativeName: Script_DisableKeyBindingIcons
* @NativeFunctionAddress 00000001409C2A00
*/

void function DisableKeyBindingIcons()

/*
* @Breif Scale key binding icon sizes by this amount
* @Pramas float
* @NativeName: Script_SetKeyBindingIconScale
* @NativeFunctionAddress 00000001409C2990
*/

void function SetKeyBindingIconScale(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWidth
* @NativeFunctionAddress 00000001409C28E0
*/

int function GetWidth()

/*
* @Breif 
* @Pramas 
* @NativeName: GetHeight
* @NativeFunctionAddress 00000001409C2830
*/

int function GetHeight()

/*
* @Breif 
* @Pramas 
* @NativeName: GetX
* @NativeFunctionAddress 00000001409C2780
*/

int function GetX()

/*
* @Breif 
* @Pramas 
* @NativeName: GetY
* @NativeFunctionAddress 00000001409C26D0
*/

int function GetY()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsX
* @NativeFunctionAddress 00000001409C2620
*/

int function GetAbsX()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsY
* @NativeFunctionAddress 00000001409C2570
*/

int function GetAbsY()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsPos
* @NativeFunctionAddress 00000001409C24A0
*/

var function GetAbsPos()

/*
* @Breif 
* @Pramas 
* @NativeName: GetParentRelativePos
* @NativeFunctionAddress 00000001409C23D0
*/

var function GetParentRelativePos()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseWidth
* @NativeFunctionAddress 00000001409C2320
*/

int function GetBaseWidth()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseHeight
* @NativeFunctionAddress 00000001409C2270
*/

int function GetBaseHeight()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBasePos
* @NativeFunctionAddress 00000001409C21A0
*/

var function GetBasePos()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseSize
* @NativeFunctionAddress 00000001409C20D0
*/

var function GetBaseSize()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseX
* @NativeFunctionAddress 00000001409C2020
*/

int function GetBaseX()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseY
* @NativeFunctionAddress 00000001409C1F70
*/

int function GetBaseY()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCursorPriority
* @NativeFunctionAddress 00000001409C1EC0
*/

int function GetCursorPriority()

/*
* @Breif 
* @Pramas int
* @NativeName: SetClampToScreen
* @NativeFunctionAddress 00000001409C1E50
*/

void function SetClampToScreen(int)

/*
* @Breif 
* @Pramas float, float
* @NativeName: SetClampBounds
* @NativeFunctionAddress 00000001409C1DC0
*/

void function SetClampBounds(float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetWorldSpaceScale
* @NativeFunctionAddress 00000001409C1D00
*/

void function SetWorldSpaceScale(float, float, float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetADSFade
* @NativeFunctionAddress 00000001409C1C40
*/

void function SetADSFade(float, float, float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetDistanceFade
* @NativeFunctionAddress 00000001409C1B80
*/

void function SetDistanceFade(float, float, float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetFOVFade
* @NativeFunctionAddress 00000001409C1AC0
*/

void function SetFOVFade(float, float, float, float)

/*
* @Breif 
* @Pramas float, float, float
* @NativeName: SetPulsate
* @NativeFunctionAddress 00000001409C1A20
*/

void function SetPulsate(float, float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: ClearPulsate
* @NativeFunctionAddress 00000001409C19D0
*/

void function ClearPulsate()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetOffscreenArrow
* @NativeFunctionAddress 00000001409C1970
*/

void function SetOffscreenArrow(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: IsOnScreen
* @NativeFunctionAddress 00000001409C1910
*/

bool function IsOnScreen()

/*
* @Breif 
* @Pramas 
* @NativeName: IsLabel
* @NativeFunctionAddress 00000001409C18B0
*/

bool function IsLabel()

/*
* @Breif 
* @Pramas var
* @NativeName: SetNavUp
* @NativeFunctionAddress 00000001409C1830
*/

void function SetNavUp(var)

/*
* @Breif 
* @Pramas var
* @NativeName: SetNavDown
* @NativeFunctionAddress 00000001409C17B0
*/

void function SetNavDown(var)

/*
* @Breif 
* @Pramas var
* @NativeName: SetNavLeft
* @NativeFunctionAddress 00000001409C1730
*/

void function SetNavLeft(var)

/*
* @Breif 
* @Pramas var
* @NativeName: SetNavRight
* @NativeFunctionAddress 00000001409C16B0
*/

void function SetNavRight(var)

/*
* @Breif 
* @Pramas int, int
* @NativeName: SetBaseSize
* @NativeFunctionAddress 00000001409C1630
*/

void function SetBaseSize(int, int)

/*
* @Breif 
* @Pramas string, float
* @NativeName: SetTextTypeWriter
* @NativeFunctionAddress 00000001409C15B0
*/

void function SetTextTypeWriter(string, float)

/*
* @Breif 
* @Pramas int, int
* @NativeName: SetBasePos
* @NativeFunctionAddress 00000001409C1530
*/

void function SetBasePos(int, int)

/*
* @Breif 
* @Pramas int, int, int, int
* @NativeName: SetBaseColor
* @NativeFunctionAddress 00000001409C1480
*/

void function SetBaseColor(int, int, int, int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetX
* @NativeFunctionAddress 00000001409C1410
*/

void function SetX(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetY
* @NativeFunctionAddress 00000001409C13A0
*/

void function SetY(int)

/*
* @Breif 
* @Pramas int
* @NativeName: OffsetX
* @NativeFunctionAddress 00000001409C1330
*/

void function OffsetX(int)

/*
* @Breif 
* @Pramas int
* @NativeName: OffsetY
* @NativeFunctionAddress 00000001409C12C0
*/

void function OffsetY(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseColor
* @NativeFunctionAddress 00000001409C11F0
*/

var function GetBaseColor()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseAlpha
* @NativeFunctionAddress 00000001409C1140
*/

int function GetBaseAlpha()

/*
* @Breif 
* @Pramas int
* @NativeName: SetCursorPriority
* @NativeFunctionAddress 00000001409C10D0
*/

void function SetCursorPriority(int)

/*
* @Breif 
* @Pramas float
* @NativeName: SetBarProgress
* @NativeFunctionAddress 00000001409C1060
*/

void function SetBarProgress(float)

/*
* @Breif 
* @Pramas float, float
* @NativeName: SetBarProgressAndRate
* @NativeFunctionAddress 00000001409C0FD0
*/

void function SetBarProgressAndRate(float, float)

/*
* @Breif 
* @Pramas float, float, float
* @NativeName: SetBarProgressOverTime
* @NativeFunctionAddress 00000001409C0F30
*/

void function SetBarProgressOverTime(float, float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetBarProgress
* @NativeFunctionAddress 00000001409C0E80
*/

float function GetBarProgress()

/*
* @Breif 
* @Pramas int, int
* @NativeName: SetBarSegmentInfo
* @NativeFunctionAddress 00000001409C0E00
*/

void function SetBarSegmentInfo(int, int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarInset
* @NativeFunctionAddress 00000001409C0D90
*/

void function SetBarInset(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarMargin
* @NativeFunctionAddress 00000001409C0D20
*/

void function SetBarMargin(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarProgressDirection
* @NativeFunctionAddress 00000001409C0CB0
*/

void function SetBarProgressDirection(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarSegmentFill
* @NativeFunctionAddress 00000001409C0C40
*/

void function SetBarSegmentFill(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarProgressSource
* @NativeFunctionAddress 00000001409C0BD0
*/

void function SetBarProgressSource(int)

/*
* @Breif 
* @Pramas entity
* @NativeName: SetBarProgressSourceEntity
* @NativeFunctionAddress 00000001409C0B50
*/

void function SetBarProgressSourceEntity(entity)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetBarProgressRemap
* @NativeFunctionAddress 00000001409C0A90
*/

void function SetBarProgressRemap(float, float, float, float)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarChangeStyle
* @NativeFunctionAddress 00000001409C0A20
*/

void function SetBarChangeStyle(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarChangeDir
* @NativeFunctionAddress 00000001409C09B0
*/

void function SetBarChangeDir(int)

/*
* @Breif 
* @Pramas float
* @NativeName: SetBarChangeDuration
* @NativeFunctionAddress 00000001409C0940
*/

void function SetBarChangeDuration(float)

/*
* @Breif 
* @Pramas 
* @NativeName: ReturnToBaseColor
* @NativeFunctionAddress 00000001409C08F0
*/

void function ReturnToBaseColor()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetAlpha
* @NativeFunctionAddress 00000001409C0880
*/

void function SetAlpha(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetPanelAlpha
* @NativeFunctionAddress 00000001409C0810
*/

void function SetPanelAlpha(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPanelAlpha
* @NativeFunctionAddress 00000001409C0760
*/

int function GetPanelAlpha()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAlpha
* @NativeFunctionAddress 00000001409C06B0
*/

int function GetAlpha()

/*
* @Breif 
* @Pramas int
* @NativeName: SetBaseAlpha
* @NativeFunctionAddress 00000001409C0640
*/

void function SetBaseAlpha(int)

/*
* @Breif Get the estimated drawn width of this label.
* @Pramas 
* @NativeName: GetTextWidth
* @NativeFunctionAddress 00000001409C0590
*/

int function GetTextWidth()

/*
* @Breif 
* @Pramas entity, vector, float, float
* @NativeName: Script_SetEntity
* @NativeFunctionAddress 00000001409C04D0
*/

void function SetEntity(entity, vector, float, float)

/*
* @Breif 
* @Pramas entity, vector, float, float
* @NativeName: Script_SetEntityOverhead
* @NativeFunctionAddress 00000001409C0410
*/

void function SetEntityOverhead(entity, vector, float, float)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetHideOnEntityOverheadCloak
* @NativeFunctionAddress 00000001409C03B0
*/

void function SetHideOnEntityOverheadCloak(bool)

/*
* @Breif 
* @Pramas vector
* @NativeName: SetOrigin
* @NativeFunctionAddress 00000001409C0350
*/

void function SetOrigin(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: ClearWorldOrigin
* @NativeFunctionAddress 00000001409C0300
*/

void function ClearWorldOrigin()

/*
* @Breif 
* @Pramas float, float
* @NativeName: SetScale
* @NativeFunctionAddress 00000001409C0270
*/

void function SetScale(float, float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetScaleX
* @NativeFunctionAddress 00000001409C0200
*/

void function SetScaleX(float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetScaleY
* @NativeFunctionAddress 00000001409C0190
*/

void function SetScaleY(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetScaleX
* @NativeFunctionAddress 00000001409C00E0
*/

float function GetScaleX()

/*
* @Breif 
* @Pramas 
* @NativeName: GetScaleY
* @NativeFunctionAddress 00000001409C0030
*/

float function GetScaleY()

/*
* @Breif 
* @Pramas 
* @NativeName: ReturnToBasePos
* @NativeFunctionAddress 00000001409BFFE0
*/

void function ReturnToBasePos()

/*
* @Breif 
* @Pramas 
* @NativeName: ReturnToBaseSize
* @NativeFunctionAddress 00000001409BFF90
*/

void function ReturnToBaseSize()

/*
* @Breif 
* @Pramas 
* @NativeName: IsSelected
* @NativeFunctionAddress 00000001409BFF30
*/

bool function IsSelected()

/*
* @Breif 
* @Pramas 
* @NativeName: IsLocked
* @NativeFunctionAddress 00000001409BFED0
*/

bool function IsLocked()

/*
* @Breif 
* @Pramas 
* @NativeName: IsNew
* @NativeFunctionAddress 00000001409BFE70
*/

bool function IsNew()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetSelected
* @NativeFunctionAddress 00000001409BFE10
*/

void function SetSelected(bool)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetLocked
* @NativeFunctionAddress 00000001409BFDB0
*/

void function SetLocked(bool)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetNew
* @NativeFunctionAddress 00000001409BFD50
*/

void function SetNew(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetListSize
* @NativeFunctionAddress 00000001409BFCA0
*/

int function GetListSize()

/*
* @Breif 
* @Pramas int
* @NativeName: GetListItem
* @NativeFunctionAddress 00000001409BFC20
*/

var function GetListItem(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetListSelectedItem
* @NativeFunctionAddress 00000001409BFBC0
*/

var function GetListSelectedItem()

/*
* @Breif 
* @Pramas 
* @NativeName: GetListPanelSelectedItem
* @NativeFunctionAddress 00000001409BFB30
*/

string function GetListPanelSelectedItem()

/*
* @Breif Sets the pin sibling by name
* @Pramas string
* @NativeName: SetPinSibling
* @NativeFunctionAddress 00000001409BFAD0
*/

void function SetPinSibling(string)

/*
* @Breif 
* @Pramas float, int
* @NativeName: ReturnToBasePosOverTime
* @NativeFunctionAddress 00000001409BFA40
*/

void function ReturnToBasePosOverTime(float, int)

/*
* @Breif 
* @Pramas float, int
* @NativeName: ReturnToBaseScaleOverTime
* @NativeFunctionAddress 00000001409BF9B0
*/

void function ReturnToBaseScaleOverTime(float, int)

/*
* @Breif 
* @Pramas string
* @NativeName: Script_RunAnimationScript
* @NativeFunctionAddress 00000001409BF950
*/

void function RunAnimationScript(string)

/*
* @Breif Set the image of an imagePanel element.
* @Pramas asset imageName
* @NativeName: SetImage
* @NativeFunctionAddress 00000001409BF8F0
*/

void function SetImage(asset imageName)

/*
* @Breif Sets an image in the label on the left side, or right side if the second parameter is true.
* @Pramas asset imageName, bool rightSide
* @NativeName: SetLabelImage
* @NativeFunctionAddress 00000001409BF880
*/

void function SetLabelImage(asset imageName, bool rightSide)

/*
* @Breif 
* @Pramas string, float, float, float, int, float
* @NativeName: RunAnimationCommand
* @NativeFunctionAddress 00000001409BF790
*/

void function RunAnimationCommand(string, float, float, float, int, float)

/*
* @Breif Gets the color of an element as an array with four elements (red, green, blue, alpha).
* @Pramas 
* @NativeName: GetColor
* @NativeFunctionAddress 00000001409BF6C0
*/

var function GetColor()

/*
* @Breif Get the position of the given hud element, as an array with two elements.
* @Pramas 
* @NativeName: GetPos
* @NativeFunctionAddress 00000001409BF5F0
*/

var function GetPos()

/*
* @Breif Set the position of the given hud element.
* @Pramas int, int
* @NativeName: SetPos
* @NativeFunctionAddress 00000001409BF570
*/

void function SetPos(int, int)

/*
* @Breif Set the Z position of the given hud element.
* @Pramas int
* @NativeName: SetZ
* @NativeFunctionAddress 00000001409BF500
*/

void function SetZ(int)

/*
* @Breif Get the size of the given hud element, as an array with two elements.
* @Pramas 
* @NativeName: GetSize
* @NativeFunctionAddress 00000001409BF430
*/

var function GetSize()

/*
* @Breif Set the size of the given hud element.
* @Pramas int, int
* @NativeName: SetSize
* @NativeFunctionAddress 00000001409BF3B0
*/

void function SetSize(int, int)

/*
* @Breif Set the width of the given hud element.
* @Pramas int
* @NativeName: SetWidth
* @NativeFunctionAddress 00000001409BF340
*/

void function SetWidth(int)

/*
* @Breif Set the height of the given hud element.
* @Pramas int
* @NativeName: SetHeight
* @NativeFunctionAddress 00000001409BF2D0
*/

void function SetHeight(int)

/*
* @Breif Get the rotation of the given hud element.
* @Pramas 
* @NativeName: GetRotation
* @NativeFunctionAddress 00000001409BF220
*/

float function GetRotation()

/*
* @Breif Set the rotation of the given hud element.
* @Pramas float
* @NativeName: SetRotation
* @NativeFunctionAddress 00000001409BF1B0
*/

void function SetRotation(float)

/*
* @Breif Gets a child HUD element (for use with CNestedPanel)
* @Pramas string
* @NativeName: HudElement
* @NativeFunctionAddress 00000001409BF140
*/

var function HudElement(string)

/*
* @Breif Gets a child HUD element (for use with CNestedPanel)
* @Pramas string
* @NativeName: HudElement
* @NativeFunctionAddress 00000001409BF140
*/

var function GetChild(string)

/*
* @Breif Checks if a child HUD element for a given name exists
* @Pramas string
* @NativeName: HasChild
* @NativeFunctionAddress 00000001409BF0D0
*/

bool function HasChild(string)

/*
* @Breif Gets the parent HUD element
* @Pramas 
* @NativeName: Script_GetParent
* @NativeFunctionAddress 00000001409BF070
*/

var function GetParent()

/*
* @Breif Adds a closure to handle an event such as UIE_CLICK
* @Pramas int, var
* @NativeName: AddEventHandler
* @NativeFunctionAddress 00000001409BEFD0
*/

void function AddEventHandler(int, var)

/*
* @Breif Removes a closure that was set to handle an event
* @Pramas int, var
* @NativeName: RemoveEventHandler
* @NativeFunctionAddress 00000001409BEF30
*/

void function RemoveEventHandler(int, var)

/*
* @Breif Sets the callback for commands this element receives
* @Pramas var
* @NativeName: SetCommandHandler
* @NativeFunctionAddress 00000001409BEEB0
*/

void function SetCommandHandler(var)

/*
* @Breif Clears the callback for commands this element receives
* @Pramas 
* @NativeName: ClearCommandHandler
* @NativeFunctionAddress 00000001409BEE60
*/

void function ClearCommandHandler()

/*
* @Breif Adds a closure to handle keypress events.
* @Pramas bool functionref( var hudelem, int keyId, bool isDown ) handlerFunc
* @NativeName: AddKeyPressHandler
* @NativeFunctionAddress 00000001409BEDE0
*/

void function AddKeyPressHandler(bool functionref( var hudelem, int keyId, bool isDown ) handlerFunc)

/*
* @Breif Returns whether the element is enabled (can be interacted with)
* @Pramas 
* @NativeName: IsEnabled
* @NativeFunctionAddress 00000001409BED80
*/

bool function IsEnabled()

/*
* @Breif Sets whether the element is enabled (can be interacted with)
* @Pramas bool
* @NativeName: SetEnabled
* @NativeFunctionAddress 00000001409BED20
*/

void function SetEnabled(bool)

/*
* @Breif Returns whether the element has focus
* @Pramas 
* @NativeName: IsFocused
* @NativeFunctionAddress 00000001409BECC0
*/

bool function IsFocused()

/*
* @Breif Gives the element focus
* @Pramas 
* @NativeName: SetFocused
* @NativeFunctionAddress 00000001409BEC60
*/

bool function SetFocused()

/*
* @Breif Enable spherical warp distortion.
* @Pramas 
* @NativeName: WarpEnable
* @NativeFunctionAddress 00000001409BEC10
*/

void function WarpEnable()

/*
* @Breif Disable spherical warp distortion.
* @Pramas 
* @NativeName: WarpDisable
* @NativeFunctionAddress 00000001409BEBC0
*/

void function WarpDisable()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetUTF8Text
* @NativeFunctionAddress 00000001409BEB30
*/

string function GetUTF8Text()

/*
* @Breif 
* @Pramas string
* @NativeName: Script_SetUTF8Text
* @NativeFunctionAddress 00000001409BEAD0
*/

void function SetUTF8Text(string)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SelectAll
* @NativeFunctionAddress 00000001409BEA80
*/

void function SelectAll()

/*
* @Breif Populates a GridButtonListPanel with a given number of RuiButtons.
* @Pramas int numButtons
* @NativeName: InitGridButtons
* @NativeFunctionAddress 00000001409BEA10
*/

void function InitGridButtons(int numButtons)

/*
* @Breif Populates a GridButtonListPanel with a specified number of RuiButtons, rows, and columns.
* @Pramas int numButtons, int rows, int cols
* @NativeName: InitGridButtonsDetailed
* @NativeFunctionAddress 00000001409BE970
*/

void function InitGridButtonsDetailed(int numButtons, int rows, int cols)

/*
* @Breif Sets the color of an element with components (red, green, blue, alpha) given as 0-255 values.
* @Pramas 
* @NativeName: Script_SetColor
* @NativeFunctionAddress 00000001409B1590
*/

void function SetColor(var, var, var, var, var)

/*
* @Breif Sets the background color of an element with components (red, green, blue, alpha) given as 0-255 values.
* @Pramas 
* @NativeName: Script_SetColorBG
* @NativeFunctionAddress 00000001409B15E0
*/

void function SetColorBG(var, var, var, var, var)

/*
* @Breif 
* @Pramas x, y, duration, [interpolator]
* @NativeName: Script_MoveOverTime
* @NativeFunctionAddress 00000001409B17A0
*/

void function MoveOverTime(var, number, number, number, int)

/*
* @Breif 
* @Pramas r, g, b, a, duration, [interpolator]
* @NativeName: Script_ColorOverTime
* @NativeFunctionAddress 00000001409B17F0
*/

void function ColorOverTime(var, int, int, int, int, number, int)

/*
* @Breif 
* @Pramas wScale, hScale, duration, [interpolator]
* @NativeName: Script_ScaleOverTime
* @NativeFunctionAddress 00000001409B1840
*/

void function ScaleOverTime(var, number, number, number, int)

/*
* @Breif 
* @Pramas x, y, duration, [interpolator]
* @NativeName: Script_OffsetOverTime
* @NativeFunctionAddress 00000001409B1890
*/

void function OffsetOverTime(var, number, number, number, int)

/*
* @Breif 
* @Pramas a, duration, [interpolator]
* @NativeName: Script_FadeOverTime
* @NativeFunctionAddress 00000001409B18E0
*/

void function FadeOverTime(var, int, number, int)

/*
* @Breif 
* @Pramas x, duration, [interpolator]
* @NativeName: Script_SetXOverTime
* @NativeFunctionAddress 00000001409B19D0
*/

void function SetXOverTime(var, number, number, int)

/*
* @Breif 
* @Pramas y, duration, [interpolator]
* @NativeName: Script_SetYOverTime
* @NativeFunctionAddress 00000001409B1A20
*/

void function SetYOverTime(var, number, number, int)

/*
* @Breif 
* @Pramas x, duration, [interpolator]
* @NativeName: Script_OffsetXOverTime
* @NativeFunctionAddress 00000001409B1A70
*/

void function OffsetXOverTime(var, number, number, int)

/*
* @Breif 
* @Pramas y, duration, [interpolator]
* @NativeName: Script_OffsetYOverTime
* @NativeFunctionAddress 00000001409B1AC0
*/

void function OffsetYOverTime(var, number, number, int)

/*
* @Breif 
* @Pramas duration, [interpolator]
* @NativeName: Script_HideOverTime
* @NativeFunctionAddress 00000001409B1B10
*/

void function HideOverTime(var, number, int)

/*
* @Breif 
* @Pramas r, g, b, a, duration, delay, [interpolator]
* @NativeName: Script_ColorOverTimeDelayed
* @NativeFunctionAddress 00000001409B1B60
*/

void function ColorOverTimeDelayed(var, int, int, int, int, number, number, int)

/*
* @Breif 
* @Pramas a, duration, delay, [interpolator]
* @NativeName: Script_FadeOverTimeDelayed
* @NativeFunctionAddress 00000001409B1BB0
*/

void function FadeOverTimeDelayed(var, int, number, number, int)

/*
* @Breif Set the text of a label element. Optional parameters for localized-string '%s1'-type format vars.
* @Pramas index, string, [param1, param2, param3...]
* @NativeName: Script_SetText
* @NativeFunctionAddress 00000001409B1C00
*/

void function SetText(var, string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetHealth
* @NativeFunctionAddress 0000000140D1D4E0
*/

int function GetHealth()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMaxHealth
* @NativeFunctionAddress 0000000140D1D430
*/

int function GetMaxHealth()

/*
* @Breif 
* @Pramas int
* @NativeName: ScriptSetHealth
* @NativeFunctionAddress 0000000140D1D3C0
*/

void function SetHealth(int)

/*
* @Breif 
* @Pramas int
* @NativeName: ScriptSetMaxHealth
* @NativeFunctionAddress 0000000140D1D350
*/

void function SetMaxHealth(int)

/*
* @Breif ( int damage, attacker, inflictor, additionalParams ) - Deals damage to the entity. Additional params table can contain: weapon, origin, force, forceKill, scriptType, damageSourceId, attackerClass, meleeAttack, meleeExecution, hitbox
* @Pramas int, entity, entity, var
* @NativeName: ScriptTakeDamage
* @NativeFunctionAddress 0000000140D1D270
*/

void function TakeDamage(int, entity, entity, var)

/*
* @Breif Is this entity alive?
* @Pramas 
* @NativeName: ScriptIsAlive
* @NativeFunctionAddress 0000000140D1D200
*/

bool function IsEntAlive()

/*
* @Breif Get the entity's armor type
* @Pramas 
* @NativeName: ScriptGetArmorType
* @NativeFunctionAddress 0000000140D1D150
*/

int function GetArmorType()

/*
* @Breif 
* @Pramas bool
* @NativeName: ScriptSetPassDamageToParent
* @NativeFunctionAddress 0000000140D1D0C0
*/

void function SetPassDamageToParent(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetPassDamageToParent
* @NativeFunctionAddress 0000000140D1D060
*/

bool function GetPassDamageToParent()

/*
* @Breif Set the file path of the model
* @Pramas asset
* @NativeName: ScriptSetModel
* @NativeFunctionAddress 0000000140D1CFF0
*/

bool function SetModel(asset)

/*
* @Breif Sets the entity's hold use and press use prompts.
* @Pramas string, string
* @NativeName: SetUsePrompts
* @NativeFunctionAddress 0000000140D1CF80
*/

void function SetUsePrompts(string, string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetNoTarget
* @NativeFunctionAddress 0000000140D1CF10
*/

bool function GetNoTarget()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetNoTarget
* @NativeFunctionAddress 0000000140D1CE70
*/

void function SetNoTarget(bool)

/*
* @Breif Get whether the smart ammo system can see this target
* @Pramas 
* @NativeName: GetNoTargetSmartAmmo
* @NativeFunctionAddress 0000000140D1CE00
*/

bool function GetNoTargetSmartAmmo()

/*
* @Breif Set whether the smart ammo system can see this target
* @Pramas bool
* @NativeName: SetNoTargetSmartAmmo
* @NativeFunctionAddress 0000000140D1CD60
*/

void function SetNoTargetSmartAmmo(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsDraw
* @NativeFunctionAddress 0000000140D1CCF0
*/

bool function IsDraw()

/*
* @Breif Returns true if solid entity
* @Pramas 
* @NativeName: IsSolid
* @NativeFunctionAddress 0000000140D1CC60
*/

bool function IsSolid()

/*
* @Breif Returns the name of the model
* @Pramas 
* @NativeName: ScriptGetModelName
* @NativeFunctionAddress 0000000140D1CBD0
*/

asset function GetModelName()

/*
* @Breif Returns Body group name from the hitboxid.
* @Pramas int
* @NativeName: GetBodygroupNameFromHitboxId
* @NativeFunctionAddress 0000000140D1CB20
*/

string ornull function GetBodygroupNameFromHitboxId(int)

/*
* @Breif Avoid using outside of debug code.
* @Pramas 
* @NativeName: GetClassname
* @NativeFunctionAddress 0000000140D1CA90
*/

string function GetCodeClassName()

/*
* @Breif Reliably returns server-side class name
* @Pramas 
* @NativeName: GetClassname
* @NativeFunctionAddress 0000000140D1CA90
*/

string function GetClassName()

/*
* @Breif Works on both server and client. Can return null.
* @Pramas 
* @NativeName: ScriptGetSignifierName
* @NativeFunctionAddress 0000000140D1CA00
*/

string ornull function GetNetworkedClassName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetEntityNameAsCStr
* @NativeFunctionAddress 0000000140D1C970
*/

string function GetTargetName()

/*
* @Breif Returns the script_name for this entity
* @Pramas 
* @NativeName: GetScriptName
* @NativeFunctionAddress 0000000140D1C8E0
*/

string function GetScriptName()

/*
* @Breif Sets the script_name for this entity
* @Pramas string
* @NativeName: SetScriptName
* @NativeFunctionAddress 0000000140D1C6C0
*/

void function SetScriptName(string)

/*
* @Breif Returns the instance_name for this entity
* @Pramas 
* @NativeName: GetInstanceName
* @NativeFunctionAddress 0000000140D1C630
*/

string function GetInstanceName()

/*
* @Breif Get the entity name stripped of template unique decoration
* @Pramas 
* @NativeName: GetPreTemplateName
* @NativeFunctionAddress 0000000140D1C5A0
*/

string function GetPreTemplateName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsOrigin
* @NativeFunctionAddress 0000000140D1C520
*/

vector function GetOrigin()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalOrigin
* @NativeFunctionAddress 0000000140D1C4C0
*/

vector function GetLocalOrigin()

/*
* @Breif Sets the position of the entity
* @Pramas vector
* @NativeName: ScriptSetOrigin
* @NativeFunctionAddress 0000000140D1C460
*/

void function SetOrigin(vector)

/*
* @Breif Sets the position of the entity relative to the world, regardless of parent orientation
* @Pramas vector
* @NativeName: ScriptSetAbsOrigin
* @NativeFunctionAddress 0000000140D1C400
*/

void function SetAbsOrigin(vector)

/*
* @Breif Sets the position of the entity relative to the world, regardless of parent orientation. Does it by smoothly interpolating the entity to the new location.
* @Pramas vector
* @NativeName: ScriptSetAbsOriginSmooth
* @NativeFunctionAddress 0000000140D1C3A0
*/

void function SetAbsOriginSmooth(vector)

/*
* @Breif Like SetAbsOrigin(), except it will not do any blending/lerping to the new location
* @Pramas vector
* @NativeName: ScriptSnapToAbsOrigin
* @NativeFunctionAddress 0000000140D1C340
*/

void function SnapToAbsOrigin(vector)

/*
* @Breif Sets the position of the entity relative to its parent
* @Pramas vector
* @NativeName: ScriptSetLocalOrigin
* @NativeFunctionAddress 0000000140D1C2E0
*/

void function SetLocalOrigin(vector)

/*
* @Breif Get the forward vector of the entity
* @Pramas 
* @NativeName: ScriptGetForward
* @NativeFunctionAddress 0000000140D1C200
*/

vector function GetForwardVector()

/*
* @Breif Get the right vector of the entity
* @Pramas 
* @NativeName: ScriptGetRight
* @NativeFunctionAddress 0000000140D1C120
*/

vector function GetRightVector()

/*
* @Breif Get the up vector of the entity
* @Pramas 
* @NativeName: ScriptGetUp
* @NativeFunctionAddress 0000000140D1C040
*/

vector function GetUpVector()

/*
* @Breif Set the orientation of the entity to have this forward vector
* @Pramas vector
* @NativeName: ScriptSetForward
* @NativeFunctionAddress 0000000140D1BFE0
*/

void function SetForwardVector(vector)

/*
* @Breif Set the orientation of the entity to have this forward vector relative to the world, regardless of parent orientation
* @Pramas vector
* @NativeName: ScriptSetAbsForward
* @NativeFunctionAddress 0000000140D1BFE0
*/

void function SetAbsForwardVector(vector)

/*
* @Breif Set the orientation of the entity to have this forward vector relative to its parent
* @Pramas vector
* @NativeName: ScriptSetLocalForward
* @NativeFunctionAddress 0000000140D1BF80
*/

void function SetLocalForwardVector(vector)

/*
* @Breif Set the orientation of the entity to have this forward vector, based on the given up vector
* @Pramas vector, vector
* @NativeName: ScriptSetForwardWithUp
* @NativeFunctionAddress 0000000140D1BF20
*/

void function SetForwardVectorWithUp(vector, vector)

/*
* @Breif Set the orientation of the entity to have this forward vector, based on the given up vector, relative to its parent
* @Pramas vector, vector
* @NativeName: ScriptSetLocalForwardWithUp
* @NativeFunctionAddress 0000000140D1BEC0
*/

void function SetLocalForwardVectorWithUp(vector, vector)

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsVelocity
* @NativeFunctionAddress 0000000140D1BE40
*/

vector function GetVelocity()

/*
* @Breif Get velocity that is weighted averaged with previous velocity
* @Pramas 
* @NativeName: GetSmoothedVelocity
* @NativeFunctionAddress 0000000140D1BD70
*/

vector function GetSmoothedVelocity()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalVelocity
* @NativeFunctionAddress 0000000140D1BD10
*/

vector function GetLocalVelocity()

/*
* @Breif 
* @Pramas vector
* @NativeName: ScriptSetAbsVelocity
* @NativeFunctionAddress 0000000140D1BCB0
*/

void function SetVelocity(vector)

/*
* @Breif Gets the "base" velocity, typically given to an entity from the last pusher it touched.
* @Pramas 
* @NativeName: GetBaseVelocity
* @NativeFunctionAddress 0000000140D1BC50
*/

vector function GetBaseVelocity()

/*
* @Breif Sets the "base" velocity, typically given to an entity from the last pusher it touched.
* @Pramas vector
* @NativeName: SetBaseVelocity
* @NativeFunctionAddress 0000000140D1BB90
*/

void function SetBaseVelocity(vector)

/*
* @Breif Set the local angular velocity - takes float pitch,yaw,roll velocities
* @Pramas float, float, float
* @NativeName: ScriptSetLocalAngularVelocity
* @NativeFunctionAddress 0000000140D1BAD0
*/

void function SetAngularVelocity(float, float, float)

/*
* @Breif Get the local angular velocity - returns a vector of pitch,yaw,roll
* @Pramas 
* @NativeName: ScriptGetLocalAngularVelocity
* @NativeFunctionAddress 0000000140D1BA70
*/

vector function GetAngularVelocity()

/*
* @Breif Get vector to center of object - absolute coords
* @Pramas 
* @NativeName: RenderedWorldSpaceCenter
* @NativeFunctionAddress 0000000140D1B9A0
*/

vector function GetCenter()

/*
* @Breif Get vector to eye position - absolute coords
* @Pramas 
* @NativeName: ScriptEyePosition
* @NativeFunctionAddress 0000000140D1B8C0
*/

vector function EyePosition()

/*
* @Breif The the position between the entity's eyes.
* @Pramas 
* @NativeName: PositionBetweenEyes
* @NativeFunctionAddress 0000000140D1B7F0
*/

vector function ShipHack_PositionBetweenEyes()

/*
* @Breif Set entity pitch, yaw, roll
* @Pramas vector
* @NativeName: ScriptSetAngles
* @NativeFunctionAddress 0000000140D1B790
*/

void function SetAngles(vector)

/*
* @Breif Set entity pitch, yaw, roll relative to world, regardless of parent orientation
* @Pramas vector
* @NativeName: ScriptSetAbsAngles
* @NativeFunctionAddress 0000000140D1B790
*/

void function SetAbsAngles(vector)

/*
* @Breif Set entity pitch, yaw, roll relative to world, regardless of parent orientation. Will smoothly interpolate to the new angles.
* @Pramas vector
* @NativeName: ScriptSetAbsAnglesSmooth
* @NativeFunctionAddress 0000000140D1B730
*/

void function SetAbsAnglesSmooth(vector)

/*
* @Breif Set entity pitch, yaw, roll relative to parent
* @Pramas vector
* @NativeName: ScriptSetLocalAngles
* @NativeFunctionAddress 0000000140D1B6D0
*/

void function SetLocalAngles(vector)

/*
* @Breif Get entity pitch, yaw, roll as a vector
* @Pramas 
* @NativeName: ScriptGetAngles
* @NativeFunctionAddress 0000000140D1B600
*/

vector function GetAngles()

/*
* @Breif Get entity pitch, yaw, roll as a vector relative to parent
* @Pramas 
* @NativeName: ScriptGetLocalAngles
* @NativeFunctionAddress 0000000140D1B530
*/

vector function GetLocalAngles()

/*
* @Breif Get eye angles
* @Pramas 
* @NativeName: ScriptEyeAngles
* @NativeFunctionAddress 0000000140D1B460
*/

vector function EyeAngles()

/*
* @Breif 
* @Pramas vector, vector
* @NativeName: ScriptSetSize
* @NativeFunctionAddress 0000000140D1B3F0
*/

void function SetSize(vector, vector)

/*
* @Breif Get a vector containing min bounds, centered on object
* @Pramas 
* @NativeName: Script_GetBoundingMins
* @NativeFunctionAddress 0000000140D1B320
*/

vector function GetBoundingMins()

/*
* @Breif Get a vector containing max bounds, centered on object
* @Pramas 
* @NativeName: Script_GetBoundingMaxs
* @NativeFunctionAddress 0000000140D1B250
*/

vector function GetBoundingMaxs()

/*
* @Breif Returns minimum bounds in world-space. This takes into account all movement of the current animation.
* @Pramas 
* @NativeName: WorldSpaceSurroundingMins
* @NativeFunctionAddress 0000000140D1B180
*/

vector function WorldSpaceSurroundingMins()

/*
* @Breif Returns maximum bounds in world-space. This takes into account all movement of the current animation.
* @Pramas 
* @NativeName: WorldSpaceSurroundingMaxs
* @NativeFunctionAddress 0000000140D1B0B0
*/

vector function WorldSpaceSurroundingMaxs()

/*
* @Breif Sets whether this entity will block AI LOS
* @Pramas bool
* @NativeName: SetBlocksLOS
* @NativeFunctionAddress 0000000140D1B040
*/

void function SetBlocksLOS(bool)

/*
* @Breif Gets whether this entity will block AI LOS
* @Pramas 
* @NativeName: BlocksLOS
* @NativeFunctionAddress 0000000140D1AFD0
*/

bool function GetBlocksLOS()

/*
* @Breif Sets whether this entity will block radius damage. An entity may block radius damage for other reasons, but setting this flag ensures that it will.
* @Pramas bool
* @NativeName: SetBlocksRadiusDamage
* @NativeFunctionAddress 0000000140D1AF60
*/

void function SetBlocksRadiusDamage(bool)

/*
* @Breif Gets whether this flag is set.
* @Pramas 
* @NativeName: GetBlocksRadiusDamage
* @NativeFunctionAddress 0000000140D1AEF0
*/

bool function GetBlocksRadiusDamage()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUtilRemove
* @NativeFunctionAddress 0000000140D1AE70
*/

void function Destroy()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTeamNumber
* @NativeFunctionAddress 0000000140D1ADC0
*/

int function GetTeam()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_ChangeTeam
* @NativeFunctionAddress 0000000140D1AD20
*/

bool function Code_SetTeam(int)

/*
* @Breif 
* @Pramas int newIndex
* @NativeName: Script_SetTeamMemberIndex
* @NativeFunctionAddress 0000000140D1AC80
*/

void function SetTeamMemberIndex(int newIndex)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTeamMemberIndex
* @NativeFunctionAddress 0000000140D1ABD0
*/

int function GetTeamMemberIndex()

/*
* @Breif 
* @Pramas int newID
* @NativeName: Script_SetSquadID
* @NativeFunctionAddress 0000000140D1AB30
*/

void function SetSquadID(int newID)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSquadID
* @NativeFunctionAddress 0000000140D1AA80
*/

int function GetSquadID()

/*
* @Breif 
* @Pramas int grade
* @NativeName: Script_SetGrade
* @NativeFunctionAddress 0000000140D1A9E0
*/

void function SetGrade(int grade)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrade
* @NativeFunctionAddress 0000000140D1A930
*/

int function GetGrade()

/*
* @Breif If in hierarchy, retrieves the entity's parent
* @Pramas 
* @NativeName: ScriptGetMoveParent
* @NativeFunctionAddress 0000000140D1A8A0
*/

entity function GetParent()

/*
* @Breif Gives the name of the attachment that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentAttachment
* @NativeFunctionAddress 0000000140D1A810
*/

string function GetParentAttachment()

/*
* @Breif Gives the index of the attachment that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentAttachmentIndex
* @NativeFunctionAddress 0000000140D1A730
*/

int function GetParentAttachmentIndex()

/*
* @Breif Gives the index of the hitbox that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentHitbox
* @NativeFunctionAddress 0000000140D1A650
*/

int function GetParentHitbox()

/*
* @Breif If in hierarchy, walks up the hierarchy to find the root parent
* @Pramas 
* @NativeName: ScriptGetRootMoveParent
* @NativeFunctionAddress 0000000140D1A5F0
*/

entity function GetRootMoveParent()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptFirstMoveChild
* @NativeFunctionAddress 0000000140D1A560
*/

entity function FirstMoveChild()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptNextMovePeer
* @NativeFunctionAddress 0000000140D1A4D0
*/

entity function NextMovePeer()

/*
* @Breif Set sound 'code' controller for sounds attached to entity.
* @Pramas float
* @NativeName: SetSoundCodeControllerValue
* @NativeFunctionAddress 0000000140D1A460
*/

void function SetSoundCodeControllerValue(float)

/*
* @Breif Unset sound 'code' controller for sounds attached to entity.
* @Pramas 
* @NativeName: UnsetSoundCodeControllerValue
* @NativeFunctionAddress 0000000140D1A3D0
*/

void function UnsetSoundCodeControllerValue()

/*
* @Breif type safe equivalent of ent.kv.model = model
* @Pramas asset
* @NativeName: SetValueForModelKey
* @NativeFunctionAddress 0000000140D1A330
*/

void function SetValueForModelKey(asset)

/*
* @Breif type safe equivalent of model = ent.kv.model
* @Pramas 
* @NativeName: GetValueForModelKey
* @NativeFunctionAddress 0000000140D1A250
*/

asset function GetValueForModelKey()

/*
* @Breif type safe equivalent of ent.kv.texture = model
* @Pramas asset
* @NativeName: SetValueForTextureKey
* @NativeFunctionAddress 0000000140D1A1B0
*/

void function SetValueForTextureKey(asset)

/*
* @Breif type safe equivalent of model = ent.kv.texture
* @Pramas 
* @NativeName: GetValueForTextureKey
* @NativeFunctionAddress 0000000140D1A0D0
*/

asset function GetValueForTextureKey()

/*
* @Breif type safe equivalent of ent.kv.effect_name = effect_name
* @Pramas asset
* @NativeName: SetValueForEffectNameKey
* @NativeFunctionAddress 0000000140D1A030
*/

void function SetValueForEffectNameKey(asset)

/*
* @Breif type safe equivalent of effect_name = ent.kv.effect_name
* @Pramas 
* @NativeName: GetValueForEffectNameKey
* @NativeFunctionAddress 0000000140D19F50
*/

asset function GetValueForEffectNameKey()

/*
* @Breif @
* @Pramas string, var
* @NativeName: ScriptSetValueForKey
* @NativeFunctionAddress 0000000140D19E20
*/

bool function SetValueForKey(string, var)

/*
* @Breif Get a string representation of the specified key's value.
* @Pramas string
* @NativeName: ScriptGetKeyValueAsString
* @NativeFunctionAddress 0000000140D19D90
*/

string function GetValueForKey(string)

/*
* @Breif Shortcut for GetValueForKey( "target" )
* @Pramas 
* @NativeName: Script_GetTarget
* @NativeFunctionAddress 0000000140D19D00
*/

string function GetTarget_Deprecated()

/*
* @Breif Returns true if the specified key exists on the entity.
* @Pramas string
* @NativeName: ScriptDoesKeyExist
* @NativeFunctionAddress 0000000140D19C70
*/

bool function HasKey(string)

/*
* @Breif Takes a key in the entity's key value list and returns the next key. Useful for iterating through key values.
* @Pramas var
* @NativeName: ScriptGetNextKey
* @NativeFunctionAddress 0000000140D19B00
*/

var function GetNextKey(var)

/*
* @Breif 
* @Pramas entity
* @NativeName: CopyGenericKeyValues
* @NativeFunctionAddress 0000000140D19A80
*/

void function CopyGenericKeyValues(entity)

/*
* @Breif Ensure that an entity's script scope has been created
* @Pramas 
* @NativeName: InitializeOrValidateScriptScope
* @NativeFunctionAddress 0000000140D19A20
*/

bool function ValidateScriptScope()

/*
* @Breif Retrieve the script-side data associated with an entity
* @Pramas 
* @NativeName: GetScriptScope
* @NativeFunctionAddress 0000000140D199A0
*/

var function GetScriptScope()

/*
* @Breif Retrieve the script-side data associated with an entity
* @Pramas 
* @NativeName: GetScriptScope
* @NativeFunctionAddress 0000000140D199A0
*/

var function scope()

/*
* @Breif Retrieve the unique identifier used to refer to the entity within the scripting system
* @Pramas 
* @NativeName: GetScriptId
* @NativeFunctionAddress 0000000140D19910
*/

string function GetScriptId()

/*
* @Breif Gets this entity's owner
* @Pramas 
* @NativeName: GetScriptOwnerEntity
* @NativeFunctionAddress 0000000140D19880
*/

entity function GetOwner()

/*
* @Breif Sets this entity's owner
* @Pramas entity
* @NativeName: SetScriptOwnerEntity
* @NativeFunctionAddress 0000000140D19800
*/

void function SetOwner(entity)

/*
* @Breif Get entity index of networked entity.  Script error if the entity doesn't have an index
* @Pramas 
* @NativeName: GetScriptEntIndex
* @NativeFunctionAddress 0000000140D19730
*/

int function GetEntIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: entindex
* @NativeFunctionAddress 0000000140D19680
*/

int function entindex()

/*
* @Breif Add entity to spatial partition data
* @Pramas 
* @NativeName: AddEntBackToSpatialPartition
* @NativeFunctionAddress 0000000140D195F0
*/

void function AddToSpatialPartition()

/*
* @Breif Remove entity from spatial partition data
* @Pramas 
* @NativeName: RemoveEntFromSpatialPartition
* @NativeFunctionAddress 0000000140D19560
*/

void function RemoveFromSpatialPartition()

/*
* @Breif Marks this entity as an attachment that never moves away from the attachment point
* @Pramas 
* @NativeName: MarkAsNonMovingAttachment
* @NativeFunctionAddress 0000000140D19500
*/

void function MarkAsNonMovingAttachment()

/*
* @Breif Don't create a giant bounding box even though we are attached to an attachment
* @Pramas 
* @NativeName: DontIncludeParentBbox
* @NativeFunctionAddress 0000000140D194A0
*/

void function DontIncludeParentBbox()

/*
* @Breif Hitbox overrides vphysics for trace checks on this entity
* @Pramas 
* @NativeName: UseHitBoxForTraceCheck
* @NativeFunctionAddress 0000000140D19440
*/

void function UseHitBoxForTraceCheck()

/*
* @Breif Treat entity as part of parent when calculating animations
* @Pramas entity
* @NativeName: ScriptSetBoneMerge
* @NativeFunctionAddress 0000000140D19330
*/

void function SetBoneMerge(entity)

/*
* @Breif Clear bone merge and unlink from parent
* @Pramas 
* @NativeName: ScriptClearBoneMerge
* @NativeFunctionAddress 0000000140D192E0
*/

void function ClearBoneMerge()

/*
* @Breif Stops movement physics for an entity
* @Pramas 
* @NativeName: ScriptStopPhysics
* @NativeFunctionAddress 0000000140D19280
*/

void function StopPhysics()

/*
* @Breif Sets the move type.
* @Pramas int
* @NativeName: ScriptSetPhysics
* @NativeFunctionAddress 0000000140D19210
*/

void function SetPhysics(int)

/*
* @Breif Gets the move type.
* @Pramas 
* @NativeName: ScriptGetPhysics
* @NativeFunctionAddress 0000000140D19160
*/

int function GetPhysics()

/*
* @Breif Sets this entity's move parent to be the same as the given entity's.
* @Pramas entity
* @NativeName: ScriptSetToSameParentAs
* @NativeFunctionAddress 0000000140D18FA0
*/

void function SetToSameParentAs(entity)

/*
* @Breif Prints information about the entity's parenting.
* @Pramas 
* @NativeName: DumpParentingState
* @NativeFunctionAddress 0000000140D18F50
*/

void function DumpParentingState()

/*
* @Breif Clears an entity's parenting.
* @Pramas 
* @NativeName: ClearParent
* @NativeFunctionAddress 0000000140D18F00
*/

void function ClearParent()

/*
* @Breif Clears all children attached to hitboxes
* @Pramas 
* @NativeName: ClearHitboxAttachedChildren
* @NativeFunctionAddress 0000000140D18EB0
*/

void function ClearHitboxAttachedChildren()

/*
* @Breif Transfers all children (entities parented to this entity) to another parent.
* @Pramas entity
* @NativeName: ScriptTransferChildrenTo
* @NativeFunctionAddress 0000000140D18E30
*/

void function TransferChildrenTo(entity)

/*
* @Breif Returns true if given entity is already a child of this entity
* @Pramas entity
* @NativeName: ScriptIsAncestorOf
* @NativeFunctionAddress 0000000140D18DA0
*/

bool function IsChild(entity)

/*
* @Breif Get an index that can be used for kill replay.
* @Pramas 
* @NativeName: GetIndexForEntity
* @NativeFunctionAddress 0000000140D18CE0
*/

int function GetIndexForEntity()

/*
* @Breif Turns off physics collision (for bouncy rolly type physics)
* @Pramas 
* @NativeName: Script_DisablePhysics
* @NativeFunctionAddress 0000000140D18C80
*/

void function DisablePhysics()

/*
* @Breif Gets the solid mask for this entity
* @Pramas 
* @NativeName: ScriptGetPhysicsSolidMask
* @NativeFunctionAddress 0000000140D18BD0
*/

int function GetPhysicsSolidMask()

/*
* @Breif Set the entity to be not solid.
* @Pramas 
* @NativeName: ScriptSetNotSolid
* @NativeFunctionAddress 0000000140D18B60
*/

void function NotSolid()

/*
* @Breif Sets an entity to solid (usually something that had NotSolid called on it.
* @Pramas 
* @NativeName: ScriptSetSolid
* @NativeFunctionAddress 0000000140D18AC0
*/

void function Solid()

/*
* @Breif Specify the bounding box for this entity, also switch collision over to BBOX (may stop physics movement, etc.)
* @Pramas vector, vector
* @NativeName: SetBoundingBox
* @NativeFunctionAddress 0000000140D18A30
*/

void function SetBoundingBox(vector, vector)

/*
* @Breif Set whether this entity will touch triggers
* @Pramas bool
* @NativeName: SetTouchTriggers
* @NativeFunctionAddress 0000000140D189B0
*/

void function SetTouchTriggers(bool)

/*
* @Breif Sets whether this entity will touch predicted triggers of a type or not
* @Pramas int
* @NativeName: SetIgnorePredictedTriggerTypes
* @NativeFunctionAddress 0000000140D18940
*/

void function SetIgnorePredictedTriggerTypes(int)

/*
* @Breif Sets an entity's title. This may be displayed on client HUDs.
* @Pramas string
* @NativeName: SetTitle
* @NativeFunctionAddress 0000000140D188E0
*/

void function SetTitle(string)

/*
* @Breif Gets an entity's title. This may be displayed on client HUDs.
* @Pramas 
* @NativeName: GetTitle
* @NativeFunctionAddress 0000000140D18850
*/

string function GetTitle()

/*
* @Breif Returns true if entity is a player.
* @Pramas 
* @NativeName: IsPlayer
* @NativeFunctionAddress 0000000140D187F0
*/

bool function IsPlayer()

/*
* @Breif Returns true if entity is an NPC.
* @Pramas 
* @NativeName: IsNPC
* @NativeFunctionAddress 0000000140D18790
*/

bool function IsNPC()

/*
* @Breif Returns true if entity is the world entity.
* @Pramas 
* @NativeName: IsWorld
* @NativeFunctionAddress 0000000140D18720
*/

bool function IsWorld()

/*
* @Breif Returns true if entity is a func brush.
* @Pramas 
* @NativeName: IsFuncBrush
* @NativeFunctionAddress 0000000140D186C0
*/

bool function IsFuncBrush()

/*
* @Breif Returns true if this is a projectile.
* @Pramas 
* @NativeName: IsProjectile
* @NativeFunctionAddress 0000000140D18660
*/

bool function IsProjectile()

/*
* @Breif Returns true if this is a trigger box.
* @Pramas 
* @NativeName: IsTriggerBox
* @NativeFunctionAddress 0000000140D18600
*/

bool function IsTriggerBox()

/*
* @Breif Sets the entity's next think time to as soon as possible. Calling this on multiple entities at the same time will synchronize their think times.
* @Pramas 
* @NativeName: SetNextThinkNow
* @NativeFunctionAddress 0000000140D18580
*/

void function SetNextThinkNow()

/*
* @Breif Get an encoded handle to this ent, suitable for sending to client script.
* @Pramas 
* @NativeName: GetEncodedEHandle
* @NativeFunctionAddress 0000000140D184B0
*/

int function GetEncodedEHandle()

/*
* @Breif Returns true if an entity has an output of the given name.
* @Pramas string
* @NativeName: ScriptHasOutput
* @NativeFunctionAddress 0000000140D18440
*/

bool function HasOutput(string)

/*
* @Breif sets the ground entity on a given entity
* @Pramas entity
* @NativeName: ScriptSetGroundEntity
* @NativeFunctionAddress 0000000140D183C0
*/

void function SetGroundEntity(entity)

/*
* @Breif Make AI treat this as a threat. Args: ( int priority, int extraPriority, int extraPriorityFlags ). Compare priority with values set in player and AI settings files. Flags are prefixed AI_AP_FLAG_*
* @Pramas int, int, int
* @NativeName: EnableAttackableByAI
* @NativeFunctionAddress 0000000140D18320
*/

void function EnableAttackableByAI(int, int, int)

/*
* @Breif Clear this entity from being a threat to AI
* @Pramas 
* @NativeName: DisableAttackableByAI
* @NativeFunctionAddress 0000000140D182D0
*/

void function DisableAttackableByAI()

/*
* @Breif Sets if AI can melee this entity
* @Pramas bool
* @NativeName: SetIsValidAIMeleeTarget
* @NativeFunctionAddress 0000000140D18260
*/

void function SetIsValidAIMeleeTarget(bool)

/*
* @Breif Gets if AI can melee this entity
* @Pramas 
* @NativeName: IsValidAIMeleeTarget
* @NativeFunctionAddress 0000000140D181F0
*/

bool function IsValidAIMeleeTarget()

/*
* @Breif Make AI try to path around this entity or not
* @Pramas bool
* @NativeName: SetAIObstacle
* @NativeFunctionAddress 0000000140D18180
*/

void function SetAIObstacle(bool)

/*
* @Breif Get the centerpoint of an entity.
* @Pramas 
* @NativeName: RenderedWorldSpaceCenter
* @NativeFunctionAddress 0000000140D1B9A0
*/

vector function GetWorldSpaceCenter()

/*
* @Breif Gets the boss player for an entity
* @Pramas 
* @NativeName: Script_GetBossPlayer
* @NativeFunctionAddress 0000000140D180F0
*/

entity function GetBossPlayer()

/*
* @Breif Mark this entity as belonging to the specified player
* @Pramas entity
* @NativeName: Script_SetBossPlayer
* @NativeFunctionAddress 0000000140D18070
*/

void function SetBossPlayer(entity)

/*
* @Breif Clear this entity of any player ownership.
* @Pramas 
* @NativeName: Script_ClearBossPlayer
* @NativeFunctionAddress 0000000140D17FC0
*/

void function ClearBossPlayer()

/*
* @Breif Marks this entity as usable by any player.
* @Pramas 
* @NativeName: ScriptSetUsable
* @NativeFunctionAddress 0000000140D17F70
*/

void function SetUsable()

/*
* @Breif Returns a integer representing of the usable state, so that you can return to this state later.
* @Pramas 
* @NativeName: ScriptGetUsableValue
* @NativeFunctionAddress 0000000140D17EC0
*/

int function GetUsableValue()

/*
* @Breif Sets the usable state by integer, which was earlier obtained from GetUsableValue().
* @Pramas int
* @NativeName: ScriptSetUsableValue
* @NativeFunctionAddress 0000000140D17E50
*/

void function SetUsableValue(int)

/*
* @Breif Adds a usable type to the entity. Should not be called often as need to recompute partition mask everytime a new value is added
* @Pramas int
* @NativeName: ScriptAddUsableValue
* @NativeFunctionAddress 0000000140D17DD0
*/

void function AddUsableValue(int)

/*
* @Breif Removes a usable type from the entity. Should not be called often as need to recompute partition mask evertime a new value is removed
* @Pramas int
* @NativeName: ScriptRemoveUsableValue
* @NativeFunctionAddress 0000000140D17D50
*/

void function RemoveUsableValue(int)

/*
* @Breif Marks this entity as usable by specific players.
* @Pramas string
* @NativeName: ScriptSetUsableByGroup
* @NativeFunctionAddress 0000000140D17CF0
*/

void function SetUsableByGroup(string)

/*
* @Breif Sets the priority of a usable ent
* @Pramas int
* @NativeName: ScriptSetUsablePriority
* @NativeFunctionAddress 0000000140D17C30
*/

void function SetUsablePriority(int)

/*
* @Breif In order for an object to be usable, the player must be a within a certain distance of the object's bounding box. This sets an override for that distance. Must also set flag USABLE_USE_DISTANCE_OVERRIDE to enable.
* @Pramas float
* @NativeName: ScriptSetUsableDistanceOverride
* @NativeFunctionAddress 0000000140D17BC0
*/

void function SetUsableDistanceOverride(float)

/*
* @Breif Set fov for this ent to use
* @Pramas float
* @NativeName: ScriptSetUsableFOV
* @NativeFunctionAddress 0000000140D17B50
*/

void function SetUsableFOV(float)

/*
* @Breif Converts to cosine degrees
* @Pramas float
* @NativeName: ScriptSetUsableFOVByDegrees
* @NativeFunctionAddress 0000000140D17AE0
*/

void function SetUsableFOVByDegrees(float)

/*
* @Breif 
* @Pramas float
* @NativeName: ScriptSetUsePromptSize
* @NativeFunctionAddress 0000000140D17A30
*/

void function SetUsePromptSize(float)

/*
* @Breif Undoes the effects of SetUsable().
* @Pramas 
* @NativeName: ScriptUnsetUsable
* @NativeFunctionAddress 0000000140D179E0
*/

void function UnsetUsable()

/*
* @Breif Make entity do lag compensation
* @Pramas bool
* @NativeName: SetLagCompensate
* @NativeFunctionAddress 0000000140D17980
*/

void function LagCompensate(bool)

/*
* @Breif Set the distance that this entity starts fading.
* @Pramas float
* @NativeName: SetFadeDist
* @NativeFunctionAddress 0000000140D178C0
*/

void function SetFadeDistance(float)

/*
* @Breif Controls whether the given entity is drawn as a viewmodel or not
* @Pramas bool
* @NativeName: RenderWithViewModels
* @NativeFunctionAddress 0000000140D17830
*/

void function RenderWithViewModels(bool)

/*
* @Breif Returns true if the entity is rendering in the view model pass
* @Pramas 
* @NativeName: IsRenderingWithViewModels
* @NativeFunctionAddress 0000000140D177D0
*/

bool function IsRenderingWithViewModels()

/*
* @Breif Sets the take damage type, DAMAGE_NO, DAMAGE_YES, DAMAGE_EVENTS_ONLY
* @Pramas int
* @NativeName: ScriptSetTakeDamageType
* @NativeFunctionAddress 0000000140D17750
*/

void function SetTakeDamageType(int)

/*
* @Breif True if this entity is being removed (deleted or killed).
* @Pramas 
* @NativeName: ScriptIsMarkedForDeletion
* @NativeFunctionAddress 0000000140D176E0
*/

bool function IsMarkedForDeletion()

/*
* @Breif If true, this entity will be do a callback to script before being destroyed.
* @Pramas bool
* @NativeName: SetDoDestroyCallback
* @NativeFunctionAddress 0000000140D17680
*/

void function SetDoDestroyCallback(bool)

/*
* @Breif Returns the amount of damage this entity would potentially inflict.
* @Pramas 
* @NativeName: GetDamage
* @NativeFunctionAddress 0000000140D175D0
*/

float function GetDamage()

/*
* @Breif True if standing on something
* @Pramas 
* @NativeName: IsOnGround
* @NativeFunctionAddress 0000000140D17540
*/

bool function IsOnGround()

/*
* @Breif If entity is parented to a pusher
* @Pramas 
* @NativeName: HasPusherAncestor
* @NativeFunctionAddress 0000000140D17480
*/

bool function HasPusherAncestor()

/*
* @Breif Return ground entity
* @Pramas 
* @NativeName: ScriptGetGroundEntity
* @NativeFunctionAddress 0000000140D173F0
*/

entity function GetGroundEntity()

/*
* @Breif Transform a world space position to where it would be if moving ground entity is in its original position.
* @Pramas 
* @NativeName: GetGroundRelativePos
* @NativeFunctionAddress 0000000140D17320
*/

vector function GetGroundRelativePos()

/*
* @Breif Set player visibility of this entity's name.
* @Pramas bool
* @NativeName: SetNameVisibleToOwner_script
* @NativeFunctionAddress 0000000140D172C0
*/

void function SetNameVisibleToOwner(bool)

/*
* @Breif Set player visibility of this entity's name.
* @Pramas bool
* @NativeName: SetNameVisibleToFriendly_script
* @NativeFunctionAddress 0000000140D17260
*/

void function SetNameVisibleToFriendly(bool)

/*
* @Breif Set player visibility of this entity's name.
* @Pramas bool
* @NativeName: SetNameVisibleToEnemy_script
* @NativeFunctionAddress 0000000140D17200
*/

void function SetNameVisibleToEnemy(bool)

/*
* @Breif Set player visibility of this entity's name.
* @Pramas bool
* @NativeName: SetNameVisibleToNeutral_script
* @NativeFunctionAddress 0000000140D171A0
*/

void function SetNameVisibleToNeutral(bool)

/*
* @Breif True if the entity is titan type.
* @Pramas 
* @NativeName: IsTitan
* @NativeFunctionAddress 0000000140D17140
*/

bool function IsTitan()

/*
* @Breif True if the entity is human type.
* @Pramas 
* @NativeName: IsHuman
* @NativeFunctionAddress 0000000140D170E0
*/

bool function IsHuman()

/*
* @Breif True if the entity is mechanical type
* @Pramas 
* @NativeName: IsMechanical
* @NativeFunctionAddress 0000000140D17080
*/

bool function IsMechanical()

/*
* @Breif True if the entity has gib models
* @Pramas 
* @NativeName: HasGibModel
* @NativeFunctionAddress 0000000140D17020
*/

bool function HasGibModel()

/*
* @Breif True if the entity is a zipline type.
* @Pramas 
* @NativeName: IsZipline
* @NativeFunctionAddress 0000000140D16FC0
*/

bool function IsZipline()

/*
* @Breif True if the entity is breakable glass.
* @Pramas 
* @NativeName: IsBreakableGlass
* @NativeFunctionAddress 0000000140D16F60
*/

bool function IsBreakableGlass()

/*
* @Breif True if the entity is a player decoy.
* @Pramas 
* @NativeName: IsPlayerDecoy
* @NativeFunctionAddress 0000000140D16F00
*/

bool function IsPlayerDecoy()

/*
* @Breif True if the entity is a hologram.
* @Pramas 
* @NativeName: IsHologram
* @NativeFunctionAddress 0000000140D16EA0
*/

bool function IsHologram()

/*
* @Breif Tell this entity whether to draw always upright on client minimaps
* @Pramas bool
* @NativeName: Script_Minimap_SetAlignUpright
* @NativeFunctionAddress 0000000140D16E30
*/

void function Minimap_SetAlignUpright(bool)

/*
* @Breif Tell this entity whether to clamp to the edges of client minimaps when drawing
* @Pramas bool
* @NativeName: Script_Minimap_SetClampToEdge
* @NativeFunctionAddress 0000000140D16DC0
*/

void function Minimap_SetClampToEdge(bool)

/*
* @Breif Tell this entity whether to use height tracking behavior on client minimaps
* @Pramas bool
* @NativeName: Script_Minimap_SetHeightTracking
* @NativeFunctionAddress 0000000140D16D50
*/

void function Minimap_SetHeightTracking(bool)

/*
* @Breif The size ratio of this icon relative to the size of the smaller side of client minimaps. Values around 0.1 are ideal
* @Pramas float
* @NativeName: Script_Minimap_SetObjectScale
* @NativeFunctionAddress 0000000140D16CE0
*/

void function Minimap_SetObjectScale(float)

/*
* @Breif Forces this entity to show up on client minimaps that match the team or player handle
* @Pramas int, entity
* @NativeName: Script_Minimap_AlwaysShow
* @NativeFunctionAddress 0000000140D16C50
*/

void function Minimap_AlwaysShow(int, entity)

/*
* @Breif Forces this entity to NOT show up on client minimaps that match the team or player handle
* @Pramas int, entity
* @NativeName: Script_Minimap_Hide
* @NativeFunctionAddress 0000000140D16BC0
*/

void function Minimap_Hide(int, entity)

/*
* @Breif Allows this entity to do default draw behavior on client minimaps that match the team or player handle (This is exclusive with AlwaysShow/Hide)
* @Pramas int, entity
* @NativeName: Script_Minimap_DisplayDefault
* @NativeFunctionAddress 0000000140D16B30
*/

void function Minimap_DisplayDefault(int, entity)

/*
* @Breif The z order of this entity on the minimap relative to all other minimap entities. Larger values draw on top. Must be positive or 0
* @Pramas int
* @NativeName: Script_Minimap_SetZOrder
* @NativeFunctionAddress 0000000140D16AC0
*/

void function Minimap_SetZOrder(int)

/*
* @Breif A custom integer that can be RUI tracked on the client. Code behavior isn't affected by this variable. Must be positive or 0
* @Pramas int
* @NativeName: Script_Minimap_SetCustomState
* @NativeFunctionAddress 0000000140D16A50
*/

void function Minimap_SetCustomState(int)

/*
* @Breif Return if entity is cloaked
* @Pramas bool
* @NativeName: IsCloaked
* @NativeFunctionAddress 0000000140D169E0
*/

bool function IsCloaked(bool)

/*
* @Breif Return when cloak ends (ie, when fade-in begins)
* @Pramas 
* @NativeName: GetCloakEndTime
* @NativeFunctionAddress 0000000140D16930
*/

float function GetCloakEndTime()

/*
* @Breif Sets the cloak (fade in, duration, fade out); duration: -1 for infinite, 0 to turn off
* @Pramas float, float, float
* @NativeName: SetCloakDuration
* @NativeFunctionAddress 0000000140D16890
*/

void function SetCloakDuration(float, float, float)

/*
* @Breif Makes existing cloak flicker off for (amount, duration); amount: 0..1; duration: -1 for infinite, 0 to turn off
* @Pramas float, float
* @NativeName: SetCloakFlicker
* @NativeFunctionAddress 0000000140D16800
*/

void function SetCloakFlicker(float, float)

/*
* @Breif Sets whether the entity can cloak or not
* @Pramas bool
* @NativeName: SetCanCloak
* @NativeFunctionAddress 0000000140D16740
*/

void function SetCanCloak(bool)

/*
* @Breif Gets whether the entity can cloak or not
* @Pramas 
* @NativeName: CanCloak
* @NativeFunctionAddress 0000000140D166D0
*/

bool function CanCloak()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsPhaseShifted
* @NativeFunctionAddress 0000000140D16660
*/

bool function IsPhaseShifted()

/*
* @Breif Get the current highlight context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentContext
* @NativeFunctionAddress 0000000140D165B0
*/

int function Highlight_GetCurrentContext()

/*
* @Breif Get the inside opacity on the current context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentInsideOpacity
* @NativeFunctionAddress 0000000140D164F0
*/

float function Highlight_GetCurrentInsideOpacity()

/*
* @Breif Get the outline opacity on the current context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentOutlineOpacity
* @NativeFunctionAddress 0000000140D16430
*/

float function Highlight_GetCurrentOutlineOpacity()

/*
* @Breif Tells if this entity can inherit the highlighting settings from a parent entity if there is no local settings.
* @Pramas 
* @NativeName: Script_Highlight_GetInheritHighlight
* @NativeFunctionAddress 0000000140D163C0
*/

bool function Highlight_GetInheritHighlight()

/*
* @Breif Get the inside function slot on the given context. 0 for a disabled a function.
* @Pramas int
* @NativeName: Script_Highlight_GetInsideFunction
* @NativeFunctionAddress 0000000140D162D0
*/

int function Highlight_GetInsideFunction(int)

/*
* @Breif Get the outline function slot on the given context. 0 for a disabled a function.
* @Pramas int
* @NativeName: Script_Highlight_GetOutlineFunction
* @NativeFunctionAddress 0000000140D161E0
*/

int function Highlight_GetOutlineFunction(int)

/*
* @Breif Get the outline radius on the given context.
* @Pramas int
* @NativeName: Script_Highlight_GetOutlineRadius
* @NativeFunctionAddress 0000000140D160E0
*/

float function Highlight_GetOutlineRadius(int)

/*
* @Breif Get custom parameters on the given context. Parameters are shared between inside and outline functions.
* @Pramas int, int
* @NativeName: Script_Highlight_GetParam
* @NativeFunctionAddress 0000000140D15FB0
*/

vector function Highlight_GetParam(int, int)

/*
* @Breif Get custom state on the given context.
* @Pramas int
* @NativeName: Script_Highlight_GetState
* @NativeFunctionAddress 0000000140D15EC0
*/

int function Highlight_GetState(int)

/*
* @Breif Tells if this entity will be drawn.
* @Pramas int
* @NativeName: Script_Highlight_IsEntityVisible
* @NativeFunctionAddress 0000000140D15E20
*/

bool function Highlight_IsEntityVisible(int)

/*
* @Breif Tells if this highlight will be drawn after all post-processes.
* @Pramas int
* @NativeName: Script_Highlight_IsAfterPostProcess
* @NativeFunctionAddress 0000000140D15D80
*/

bool function Highlight_IsAfterPostProcess(int)

/*
* @Breif Enable highlighting on this entity.
* @Pramas 
* @NativeName: Script_Highlight_Enable
* @NativeFunctionAddress 0000000140D15D30
*/

void function Highlight_Enable()

/*
* @Breif Set the current highlight context. 0 by default. Server has priority over client. Use context -1 to disable highlighting.
* @Pramas int
* @NativeName: Script_Highlight_SetCurrentContext
* @NativeFunctionAddress 0000000140D15CC0
*/

void function Highlight_SetCurrentContext(int)

/*
* @Breif Set if this entity can inherit the highlighting settings from a parent entity if there is no local settings. False by default. Shared by all contexts.
* @Pramas bool
* @NativeName: Script_Highlight_SetInheritHighlight
* @NativeFunctionAddress 0000000140D15C60
*/

void function Highlight_SetInheritHighlight(bool)

/*
* @Breif Given( contextID, insideSlot, entityVisible, outlineSlot, outlineRadius, state, afterPostProcess ) Set function slots on the given context. Use slot 0 to disable a function
* @Pramas int, int, bool, int, float, int, bool
* @NativeName: Script_Highlight_SetFunctions
* @NativeFunctionAddress 0000000140D15B70
*/

void function Highlight_SetFunctions(int, int, bool, int, float, int, bool)

/*
* @Breif Set custom parameters on the given context. Parameters are shared between inside and outline functions.
* @Pramas int, int, vector
* @NativeName: Script_Highlight_SetParam
* @NativeFunctionAddress 0000000140D15AE0
*/

void function Highlight_SetParam(int, int, vector)

/*
* @Breif Hide inside function in a given duration. 0 to hide immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_HideInside
* @NativeFunctionAddress 0000000140D159C0
*/

void function Highlight_HideInside(float)

/*
* @Breif Hide outline function in a given duration. 0 to hide immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_HideOutline
* @NativeFunctionAddress 0000000140D15890
*/

void function Highlight_HideOutline(float)

/*
* @Breif Show inside function in a given duration. 0 to show immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_ShowInside
* @NativeFunctionAddress 0000000140D15770
*/

void function Highlight_ShowInside(float)

/*
* @Breif Show outline function in a given duration. 0 to show immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_ShowOutline
* @NativeFunctionAddress 0000000140D15640
*/

void function Highlight_ShowOutline(float)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightEnableForTeam
* @NativeFunctionAddress 0000000140D155D0
*/

void function HighlightEnableForTeam(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightDisableForTeam
* @NativeFunctionAddress 0000000140D15560
*/

void function HighlightDisableForTeam(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightSetTeamBitField
* @NativeFunctionAddress 0000000140D154C0
*/

void function HighlightSetTeamBitField(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_IsHighlightEnabledForTeam
* @NativeFunctionAddress 0000000140D15420
*/

bool function IsHighlightEnabledForTeam(int)

/*
* @Breif Set the debounce duration for when AI are allowed to throw grenades at this target
* @Pramas float
* @NativeName: SetGrenadeTargetDebounce_Script
* @NativeFunctionAddress 0000000140D15390
*/

void function SetGrenadeTargetDebounce(float)

/*
* @Breif Hides this entity and its children (entity still gets sent to the client, it just isn't rendered)
* @Pramas 
* @NativeName: Script_MakeInvisible
* @NativeFunctionAddress 0000000140D15300
*/

void function MakeInvisible()

/*
* @Breif Shows this entity
* @Pramas 
* @NativeName: Script_MakeVisible
* @NativeFunctionAddress 0000000140D15270
*/

void function MakeVisible()

/*
* @Breif Hides this entity but not its children (entity still gets sent to the client, it just isn't rendered)
* @Pramas 
* @NativeName: Script_Hide
* @NativeFunctionAddress 0000000140D151E0
*/

void function Hide()

/*
* @Breif Shows this entity
* @Pramas 
* @NativeName: Script_Show
* @NativeFunctionAddress 0000000140D15150
*/

void function Show()

/*
* @Breif Sets whether this object has collision allowed or not. Note that other things might affect this object's collision, like its solid type
* @Pramas bool
* @NativeName: Script_SetCollisionAllowed
* @NativeFunctionAddress 0000000140D150E0
*/

void function SetCollisionAllowed(bool)

/*
* @Breif Sets the collision detail level of an entity to high
* @Pramas 
* @NativeName: Script_SetCollisionDetailHigh
* @NativeFunctionAddress 0000000140D15060
*/

void function SetCollisionDetailHigh()

/*
* @Breif 
* @Pramas entity, vector, vector, vector, int, int, int, int, entity, int
* @NativeName: Script_DispatchImpactEffects
* @NativeFunctionAddress 0000000140D14E80
*/

void function DispatchImpactEffects(entity, vector, vector, vector, int, int, int, int, entity, int)

/*
* @Breif 
* @Pramas bool
* @NativeName: ScriptSetAimAssistAllowed
* @NativeFunctionAddress 0000000140D14DE0
*/

void function SetAimAssistAllowed(bool)

/*
* @Breif Return the time that this entity spawned.
* @Pramas 
* @NativeName: GetTimeSinceSpawning
* @NativeFunctionAddress 0000000140D14D20
*/

float function GetTimeSinceSpawning()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetLifeState
* @NativeFunctionAddress 0000000140D14C70
*/

int function GetLifeState()

/*
* @Breif Increment invulnerability counter. IsInvulnerable will return true as long as that counter is > 0.
* @Pramas 
* @NativeName: PushInvulnerableToDamage
* @NativeFunctionAddress 0000000140D14BE0
*/

void function SetInvulnerable()

/*
* @Breif Decrement invulnerability counter. IsInvulnerable will return true as long as that counter is > 0.
* @Pramas 
* @NativeName: PopInvulnerableToDamage
* @NativeFunctionAddress 0000000140D14B50
*/

void function ClearInvulnerable()

/*
* @Breif Returns whether the entity is invulnerable to damage.
* @Pramas 
* @NativeName: IsInvulnerableToDamage
* @NativeFunctionAddress 0000000140D14AD0
*/

bool function IsInvulnerable()

/*
* @Breif Sets the entity to be active or inactive
* @Pramas bool
* @NativeName: SetInactive
* @NativeFunctionAddress 0000000140D14A30
*/

void function SetInactive(bool)

/*
* @Breif Set the shield health
* @Pramas int
* @NativeName: Script_SetShieldHealth
* @NativeFunctionAddress 0000000140D149C0
*/

void function SetShieldHealth(int)

/*
* @Breif Set the maximum shield health
* @Pramas int
* @NativeName: Script_SetShieldHealthMax
* @NativeFunctionAddress 0000000140D14900
*/

void function SetShieldHealthMax(int)

/*
* @Breif Get the shield health
* @Pramas 
* @NativeName: Script_GetShieldHealth
* @NativeFunctionAddress 0000000140D14850
*/

int function GetShieldHealth()

/*
* @Breif Get the maximum shield health
* @Pramas 
* @NativeName: Script_GetShieldHealthMax
* @NativeFunctionAddress 0000000140D147A0
*/

int function GetShieldHealthMax()

/*
* @Breif Does a trace to trigger all triggers along it
* @Pramas int, entity, entity, var, vector, vector, vector
* @NativeName: ScriptTraceAttackToTriggers
* @NativeFunctionAddress 0000000140D14680
*/

void function TraceAttackToTriggers(int, entity, entity, var, vector, vector, vector)

/*
* @Breif Returns array of entities that this entity is linked to
* @Pramas 
* @NativeName: ScriptGetLinkEntArray
* @NativeFunctionAddress 0000000140D145B0
*/

array< entity > function GetLinkEntArray()

/*
* @Breif Returns array of entities that are linked to this entity
* @Pramas 
* @NativeName: ScriptGetLinkParentArray
* @NativeFunctionAddress 0000000140D144E0
*/

array< entity > function GetLinkParentArray()

/*
* @Breif Creates a link from the current entity to the given entity
* @Pramas entity
* @NativeName: ScriptLinkToEnt
* @NativeFunctionAddress 0000000140D14460
*/

void function LinkToEnt(entity)

/*
* @Breif Removes a link from the current entity to the given entity
* @Pramas entity
* @NativeName: ScriptUnlinkFromEnt
* @NativeFunctionAddress 0000000140D143D0
*/

void function UnlinkFromEnt(entity)

/*
* @Breif Returns the single entity this entity is linked to (if there is one)
* @Pramas 
* @NativeName: ScriptGetLinkEnt
* @NativeFunctionAddress 0000000140D14370
*/

entity function GetLinkEnt()

/*
* @Breif Returns the single entity that connects to this entity (if there is one)
* @Pramas 
* @NativeName: ScriptGetLinkParent
* @NativeFunctionAddress 0000000140D14310
*/

entity function GetLinkParent()

/*
* @Breif Returns true if there exists a link from this entity to the given entity
* @Pramas entity
* @NativeName: IsLinkedToEnt
* @NativeFunctionAddress 0000000140D14270
*/

bool function IsLinkedToEnt(entity)

/*
* @Breif Sets whether this entity pushes other entities
* @Pramas bool
* @NativeName: SetPusher
* @NativeFunctionAddress 0000000140D14210
*/

void function SetPusher(bool)

/*
* @Breif Sets whether this entity pushes other entities
* @Pramas 
* @NativeName: IsPusher
* @NativeFunctionAddress 0000000140D141A0
*/

bool function GetPusher()

/*
* @Breif Sets whether this entity should kill NPCs when it pushes them
* @Pramas bool
* @NativeName: SetKillNPCOnPush
* @NativeFunctionAddress 0000000140D14140
*/

void function SetKillNPCOnPush(bool)

/*
* @Breif Forces an entity to be visible during phase shift.
* @Pramas bool
* @NativeName: Script_SetForceVisibleInPhaseShift
* @NativeFunctionAddress 0000000140D140A0
*/

void function SetForceVisibleInPhaseShift(bool)

/*
* @Breif Allows the shifter to see others while not in phase shift
* @Pramas bool
* @NativeName: Script_SetSeeOtherNonShifters
* @NativeFunctionAddress 0000000140D14000
*/

void function SetSeeOtherNonShifters(bool)

/*
* @Breif Allows ent to have aim assit applied to them on non phased players while they are phased
* @Pramas bool
* @NativeName: Script_SetCanBeAimAssistTrackedWhilePhased
* @NativeFunctionAddress 0000000140D13F60
*/

void function SetCanBeAimAssistTrackedWhilePhased(bool)

/*
* @Breif If true, this entity will be do a callback to script whenever it pushes an object
* @Pramas bool
* @NativeName: SetDoPusherCallback
* @NativeFunctionAddress 0000000140D13F00
*/

void function SetDoPusherCallback(bool)

/*
* @Breif Allows mantling on this entity (normally disabled for non-pusher entities)
* @Pramas 
* @NativeName: AllowMantle
* @NativeFunctionAddress 0000000140D13EA0
*/

void function AllowMantle()

/*
* @Breif Sets whether CodeCallback_DamageEntity should be called for this entity. Equivalent to ent.kv.damageNotifications
* @Pramas bool
* @NativeName: SetDamageNotifications
* @NativeFunctionAddress 0000000140D13E40
*/

void function SetDamageNotifications(bool)

/*
* @Breif Sets whether CodeCallback_OnEntityKilled should be called for this entity. Equivalent to ent.kv.deathNotifications
* @Pramas bool
* @NativeName: SetDeathNotifications
* @NativeFunctionAddress 0000000140D13DE0
*/

void function SetDeathNotifications(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPassThroughFlags
* @NativeFunctionAddress 0000000140D13D30
*/

int function GetPassThroughFlags()

/*
* @Breif Sets flags for when pass through happens on this entity
* @Pramas int
* @NativeName: Script_SetPassThroughFlags
* @NativeFunctionAddress 0000000140D13CC0
*/

void function SetPassThroughFlags(int)

/*
* @Breif Sets the thickness of and entity for pass through bullets.
* @Pramas int
* @NativeName: Script_SetPassThroughThickness
* @NativeFunctionAddress 0000000140D13C20
*/

void function SetPassThroughThickness(int)

/*
* @Breif Sets the direction the shot has to come from to pass the ent.
* @Pramas float
* @NativeName: Script_SetPassThroughDirection
* @NativeFunctionAddress 0000000140D13B70
*/

void function SetPassThroughDirection(float)

/*
* @Breif Disables Id lights on this entity
* @Pramas 
* @NativeName: Script_DisableIdLights
* @NativeFunctionAddress 0000000140D13AE0
*/

void function DisableIdLights()

/*
* @Breif Enables Id lights on this entity
* @Pramas 
* @NativeName: Script_EnableIdLights
* @NativeFunctionAddress 0000000140D13A50
*/

void function EnableIdLights()

/*
* @Breif sets the visibility flags on a given entity
* @Pramas int
* @NativeName: Script_SetVisibilityFlags
* @NativeFunctionAddress 0000000140D139B0
*/

void function SetVisibilityFlags(int)

/*
* @Breif 
* @Pramas bool
* @NativeName: Script_SetPreventCrits
* @NativeFunctionAddress 0000000140D13910
*/

void function SetPreventCrits(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetCritsPrevented
* @NativeFunctionAddress 0000000140D138A0
*/

bool function GetCritsPrevented()

/*
* @Breif Prevents this entity from ever hibernating (so it is sent to all clients). Consider using MinimizeHibernation() instead.
* @Pramas 
* @NativeName: Script_DisableHibernation
* @NativeFunctionAddress 0000000140D13830
*/

void function DisableHibernation()

/*
* @Breif Makes this entity only hibernate beyond hibernation_far_dist.
* @Pramas 
* @NativeName: Script_MinimizeHibernation
* @NativeFunctionAddress 0000000140D137C0
*/

void function MinimizeHibernation()

/*
* @Breif Returns this entity to normal hibernation behavior.
* @Pramas 
* @NativeName: Script_EnableHibernation
* @NativeFunctionAddress 0000000140D13740
*/

void function EnableHibernation()

/*
* @Breif Rounds entity origin and angles so they will exactly match on client and server
* @Pramas 
* @NativeName: RoundOriginAndAnglesToNearestNetworkValue
* @NativeFunctionAddress 0000000140D136F0
*/

void function RoundOriginAndAnglesToNearestNetworkValue()

/*
* @Breif Returns spawner that created this entity, if it was created from one.
* @Pramas 
* @NativeName: GetSpawner
* @NativeFunctionAddress 0000000140D13660
*/

entity function GetSpawner()

/*
* @Breif Set this entity to render always
* @Pramas 
* @NativeName: ScriptEnableRenderAlways
* @NativeFunctionAddress 0000000140D13600
*/

void function EnableRenderAlways()

/*
* @Breif Set this entity to not render always
* @Pramas 
* @NativeName: ScriptDisableRenderAlways
* @NativeFunctionAddress 0000000140D13560
*/

void function DisableRenderAlways()

/*
* @Breif Prevents grapple from attaching to this entity
* @Pramas 
* @NativeName: EnableGrappleAttachment
* @NativeFunctionAddress 0000000140D134D0
*/

void function EnableGrappleAttachment()

/*
* @Breif Prevents grapple from attaching to this entity
* @Pramas 
* @NativeName: DisableGrappleAttachment
* @NativeFunctionAddress 0000000140D13440
*/

void function DisableGrappleAttachment()

/*
* @Breif ( linear, angular ) Set damping on the entity's physics object. 0 to infinity.
* @Pramas float, float
* @NativeName: PhysicsSetDamping
* @NativeFunctionAddress 0000000140D13390
*/

void function PhysicsSetDamping(float, float)

/*
* @Breif Set friction on the entity's physics object. 0 to infinity.
* @Pramas float
* @NativeName: PhysicsSetFriction
* @NativeFunctionAddress 0000000140D13300
*/

void function PhysicsSetFriction(float)

/*
* @Breif Sets whether CodeCallback_OnPhysicsAutoDisable() should be called for this entity.
* @Pramas bool
* @NativeName: PhysicsSetAutoDisableNotifications
* @NativeFunctionAddress 0000000140D13280
*/

void function PhysicsSetAutoDisableNotifications(bool)

/*
* @Breif Adds the entity to the realm.
* @Pramas int realmIndex
* @NativeName: ScriptAddToRealm
* @NativeFunctionAddress 0000000140D131E0
*/

void function AddToRealm(int realmIndex)

/*
* @Breif Removes the entity from the realm.
* @Pramas int realmIndex
* @NativeName: ScriptRemoveFromRealm
* @NativeFunctionAddress 0000000140D13140
*/

void function RemoveFromRealm(int realmIndex)

/*
* @Breif Check if the entity belongs to the realm.
* @Pramas int realmIndex
* @NativeName: ScriptIsInRealm
* @NativeFunctionAddress 0000000140D13090
*/

bool function IsInRealm(int realmIndex)

/*
* @Breif Removes the entity from all the realms.
* @Pramas 
* @NativeName: ScriptRemoveFromAllRealms
* @NativeFunctionAddress 0000000140D13030
*/

void function RemoveFromAllRealms()

/*
* @Breif Adds the entity to all the realms.
* @Pramas 
* @NativeName: ScriptAddToAllRealms
* @NativeFunctionAddress 0000000140D12FB0
*/

void function AddToAllRealms()

/*
* @Breif Sets a bool network variable (see RegisterNetworkedVariable)
* @Pramas string, bool
* @NativeName: Script_SetNetBool
* @NativeFunctionAddress 0000000140D12F40
*/

void function SetNetBool(string, bool)

/*
* @Breif Sets an int network variable (see RegisterNetworkedVariable)
* @Pramas string, int
* @NativeName: Script_SetNetInt
* @NativeFunctionAddress 0000000140D12EC0
*/

void function SetNetInt(string, int)

/*
* @Breif Sets a float network variable (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetNetFloat
* @NativeFunctionAddress 0000000140D12E40
*/

void function SetNetFloat(string, float)

/*
* @Breif Changes a float network variable gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)
* @Pramas string, float, float
* @NativeName: Script_SetNetFloatOverTime
* @NativeFunctionAddress 0000000140D12DB0
*/

void function SetNetFloatOverTime(string, float, float)

/*
* @Breif Sets a time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetNetTime
* @NativeFunctionAddress 0000000140D12D30
*/

void function SetNetTime(string, float)

/*
* @Breif Sets an entity network variable (see RegisterNetworkedVariable)
* @Pramas string, entity
* @NativeName: Script_SetNetEnt
* @NativeFunctionAddress 0000000140D12CB0
*/

void function SetNetEnt(string, entity)

/*
* @Breif Gets a bool network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetBool
* @NativeFunctionAddress 0000000140D12C40
*/

bool function GetNetBool(string)

/*
* @Breif Gets an int network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetInt
* @NativeFunctionAddress 0000000140D12B80
*/

int function GetNetInt(string)

/*
* @Breif Gets a float network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetFloat
* @NativeFunctionAddress 0000000140D12AC0
*/

float function GetNetFloat(string)

/*
* @Breif Gets a time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetTime
* @NativeFunctionAddress 0000000140D12A00
*/

float function GetNetTime(string)

/*
* @Breif Gets an entity network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetEnt
* @NativeFunctionAddress 0000000140D12990
*/

entity function GetNetEnt(string)

/*
* @Breif Set Whether a script entity can be meleed - Damage and Lunge
* @Pramas bool
* @NativeName: Script_SetCanBeMeleed
* @NativeFunctionAddress 0000000140D12920
*/

void function SetCanBeMeleed(bool)

/*
* @Breif Get Whether a script entity can be meleed - Damage and Lunge
* @Pramas 
* @NativeName: Script_CanBeMeleed
* @NativeFunctionAddress 0000000140D128C0
*/

bool function CanBeMeleed()

/*
* @Breif Allow ziplines to attach to this mover
* @Pramas 
* @NativeName: AllowZiplines
* @NativeFunctionAddress 0000000140D12830
*/

void function AllowZiplines()

/*
* @Breif Disallow ziplines to attach to this mover
* @Pramas 
* @NativeName: DisallowZiplines
* @NativeFunctionAddress 0000000140D127A0
*/

void function DisallowZiplines()

/*
* @Breif Adds an I/O connection that will call the named function when the specified output fires
* @Pramas string eventName, void functionref( entity self, entity activator, entity caller, var value )
* @NativeName: ConnectOutputToScript
* @NativeFunctionAddress 0000000140D117D0
*/

var function ConnectOutput()

/*
* @Breif Removes a connected script function from an I/O event.
* @Pramas string eventName, void functionref( entity self, entity activator, entity caller, var value )
* @NativeName: DisconnectOutputFromScript
* @NativeFunctionAddress 0000000140D11820
*/

var function DisconnectOutput()

/*
* @Breif Kill the entity. Additional params table can contain: weapon, origin, force, forceKill, scriptType, damageSourceId, attackerClass, meleeAttack, meleeExecution, hitbox
* @Pramas entity attacker = null, entity inflictor = null, table additionalParams = null
* @NativeName: ScriptDie
* @NativeFunctionAddress 0000000140D11970
*/

var function Die()

/*
* @Breif Parents this entity to another entity. maintainOffset defaults to false if an attachment is specified, and defaults to true otherwise.
* @Pramas entity parentEnt, string attachment = "", bool maintainOffset = null, float blendTime = 0
* @NativeName: ScriptSetParent
* @NativeFunctionAddress 0000000140D119C0
*/

var function SetParent()

/*
* @Breif Parents this entity to another entity's hitbox. maintainOffset defaults to false if a hitbox is nonzero, and defaults to true otherwise.
* @Pramas entity parentEnt, int hitboxIdx, bool maintainOffset = false, float blendTime = 0
* @NativeName: ScriptSetParentWithHitbox
* @NativeFunctionAddress 0000000140D11A10
*/

var function SetParentWithHitbox()

/*
* @Breif Creates and returns a script table built from the entity's model's .qc $keyvalues block.
* @Pramas 
* @NativeName: ScriptCreateTableFromModelKeyValues
* @NativeFunctionAddress 0000000140D11A60
*/

table function CreateTableFromModelKeyValues(var)

/*
* @Breif Check if the entity shares a realm with this entity.
* @Pramas entity otherEntity
* @NativeName: ScriptDoesShareRealms
* @NativeFunctionAddress 0000000140D11C30
*/

var function DoesShareRealms()

/*
* @Breif Get list of realms this entity belongs to.
* @Pramas 
* @NativeName: ScriptGetRealms
* @NativeFunctionAddress 0000000140D11C80
*/

var function GetRealms()

/*
* @Breif Get list of realms this entity shares with the other entity.
* @Pramas entity otherEntity
* @NativeName: ScriptGetSharedRealms
* @NativeFunctionAddress 0000000140D11CD0
*/

var function GetSharedRealms()

/*
* @Breif Add this entity to all the realms the other entity belongs to, in addition to the current realms the entity is in
* @Pramas entity otherEntity
* @NativeName: ScriptAddToOtherEntitysRealms
* @NativeFunctionAddress 0000000140D11D20
*/

var function AddToOtherEntitysRealms()

/*
* @Breif Get the named attachment id
* @Pramas string
* @NativeName: ScriptLookupAttachment
* @NativeFunctionAddress 0000000140D24A50
*/

int function LookupAttachment(string)

/*
* @Breif Set this entity to use or not use doomed animations
* @Pramas bool
* @NativeName: ScriptSetUseDoomedAnims
* @NativeFunctionAddress 0000000140D249B0
*/

void function SetUseDoomedAnims(bool)

/*
* @Breif Returns true if this entity is using doomed animations
* @Pramas 
* @NativeName: ScriptIsUsingDoomedAnims
* @NativeFunctionAddress 0000000140D24940
*/

bool function IsUsingDoomedAnims()

/*
* @Breif Get the attachement id's origin vector
* @Pramas int
* @NativeName: ScriptGetAttachmentOrigin
* @NativeFunctionAddress 0000000140D248C0
*/

vector function GetAttachmentOrigin(int)

/*
* @Breif Get the attachement id's angles as a p,y,r vector
* @Pramas int
* @NativeName: ScriptGetAttachmentAngles
* @NativeFunctionAddress 0000000140D247A0
*/

vector function GetAttachmentAngles(int)

/*
* @Breif Get the attachement id's forward vector
* @Pramas int
* @NativeName: ScriptGetAttachmentForward
* @NativeFunctionAddress 0000000140D24720
*/

vector function GetAttachmentForward(int)

/*
* @Breif Get the attachement id's right vector
* @Pramas int
* @NativeName: ScriptGetAttachmentRight
* @NativeFunctionAddress 0000000140D24690
*/

vector function GetAttachmentRight(int)

/*
* @Breif Get the attachement id's up vector
* @Pramas int
* @NativeName: ScriptGetAttachmentUp
* @NativeFunctionAddress 0000000140D24610
*/

vector function GetAttachmentUp(int)

/*
* @Breif Get integer index for sequence string
* @Pramas string
* @NativeName: ScriptLookupSequence
* @NativeFunctionAddress 0000000140D24550
*/

int function LookupSequence(string)

/*
* @Breif Get animation sequence duration in seconds
* @Pramas string
* @NativeName: ScriptGetSequenceDuration
* @NativeFunctionAddress 0000000140D24490
*/

float function GetSequenceDuration(string)

/*
* @Breif Get animation position deltas
* @Pramas int, float, float
* @NativeName: GetAnimDeltas
* @NativeFunctionAddress 0000000140D24370
*/

vector function GetAnimDeltas(int, float, float)

/*
* @Breif Get where animation will end up if played from current position and angles
* @Pramas int, float, float
* @NativeName: Script_GetAnimEndPos
* @NativeFunctionAddress 0000000140D24250
*/

vector function GetAnimEndPos(int, float, float)

/*
* @Breif Given ( groupIndex, modelIndex ), Sets a bodygroup's model by index
* @Pramas int, int
* @NativeName: ScriptSetBodygroupModelByIndex
* @NativeFunctionAddress 0000000140D241D0
*/

void function SetBodygroupModelByIndex(int, int)

/*
* @Breif Given ( groupIndex, modelName ), Sets a bodygroup's model by name
* @Pramas int, string
* @NativeName: ScriptSetBodygroupModelByName
* @NativeFunctionAddress 0000000140D24150
*/

void function SetBodygroupModel(int, string)

/*
* @Breif Ask whether the main sequence is done playing
* @Pramas 
* @NativeName: IsSequenceFinished
* @NativeFunctionAddress 0000000140D240F0
*/

bool function IsSequenceFinished()

/*
* @Breif Sets the entire bodygroup state.
* @Pramas int
* @NativeName: SetFullBodygroup
* @NativeFunctionAddress 0000000140D24050
*/

void function SetFullBodygroup(int)

/*
* @Breif Gets the entire bodygroup state.
* @Pramas 
* @NativeName: GetFullBodygroup
* @NativeFunctionAddress 0000000140D23FA0
*/

int function GetFullBodygroup()

/*
* @Breif Given ( groupName ), finds the index of the bodygroup with the given name. Returns -1 if it doesn't exist
* @Pramas string
* @NativeName: ScriptFindBodygroup
* @NativeFunctionAddress 0000000140D23EB0
*/

int function FindBodygroup(string)

/*
* @Breif Given ( groupIndex, modelName ), finds the bodygroup's model index with the given name. Returns -1 if it doesn't exist
* @Pramas int, string
* @NativeName: ScriptFindBodygroupModelIndex
* @NativeFunctionAddress 0000000140D23DE0
*/

int function FindBodygroupModelIndex(int, string)

/*
* @Breif Given ( groupIndex ), gets the currently active model index of a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModelIndex
* @NativeFunctionAddress 0000000140D23D20
*/

int function GetBodygroupModelIndex(int)

/*
* @Breif Given ( groupIndex ), gets the currently active model name of a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModel
* @NativeFunctionAddress 0000000140D23C80
*/

string function GetBodygroupModel(int)

/*
* @Breif Given ( groupIndex, modelIndex ), gets the name of the bodygroup's model at the given index.
* @Pramas int, int
* @NativeName: ScriptGetBodygroupModelNameForIndex
* @NativeFunctionAddress 0000000140D23BD0
*/

string function GetBodygroupModelNameForIndex(int, int)

/*
* @Breif Given ( groupIndex ), gets the number of models in a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModelCount
* @NativeFunctionAddress 0000000140D23B10
*/

int function GetBodygroupModelCount(int)

/*
* @Breif Given ( groupIndex ), gets the index of the "blank" model, or -1 if none.
* @Pramas int
* @NativeName: ScriptGetBodygroupBlankModelIndex
* @NativeFunctionAddress 0000000140D23A50
*/

int function GetBodygroupBlankModelIndex(int)


/*
* @Breif Set whether this model should do face animations or not
* @Pramas bool
* @NativeName: ScriptSetDoFaceAnimations
* @NativeFunctionAddress 0000000140D238F0
*/

void function SetDoFaceAnimations(bool)

/*
* @Breif Get the specified pose parameter index by name. Returns -1 if not found.
* @Pramas string
* @NativeName: ScriptLookupPoseParameter
* @NativeFunctionAddress 0000000140D23830
*/

int function LookupPoseParameterIndex(string)

/*
* @Breif Set the specified pose parameter to the specified value
* @Pramas int, float
* @NativeName: ScriptSetPoseParameter
* @NativeFunctionAddress 0000000140D237B0
*/

void function SetPoseParameter(int, float)

/*
* @Breif Set the specified pose parameter to the specified value over the given duration
* @Pramas int, float, float
* @NativeName: ScriptSetPoseParameterOverTime
* @NativeFunctionAddress 0000000140D23710
*/

void function SetPoseParameterOverTime(int, float, float)

/*
* @Breif Get the specified pose parameter value
* @Pramas int
* @NativeName: ScriptGetPoseParameter
* @NativeFunctionAddress 0000000140D23650
*/

float function GetPoseParameter(int)

/*
* @Breif Set pose parameters to be the same as the given entity
* @Pramas entity
* @NativeName: SetPoseParametersSameAs
* @NativeFunctionAddress 0000000140D235D0
*/

void function SetPoseParametersSameAs(entity)

/*
* @Breif Initialize the sequence transitioner to blend from the given entity
* @Pramas entity
* @NativeName: SequenceTransitionFromEntity
* @NativeFunctionAddress 0000000140D23550
*/

void function SequenceTransitionFromEntity(entity)

/*
* @Breif Returns bool whether the entity's model has the specified sequence.
* @Pramas string
* @NativeName: Anim_HasSequence
* @NativeFunctionAddress 0000000140D234E0
*/

bool function Anim_HasSequence(string)

/*
* @Breif Returns bool whether the entity's model has the specified activity.
* @Pramas string
* @NativeName: Anim_HasActivity
* @NativeFunctionAddress 0000000140D23470
*/

bool function Anim_HasActivity(string)

/*
* @Breif Returns enum value for the current activity e.g. ACT_***
* @Pramas 
* @NativeName: Anim_GetActivity
* @NativeFunctionAddress 0000000140D233C0
*/

int function Anim_GetActivity()

/*
* @Breif Play an anim without trying to set origin/angles.
* @Pramas string
* @NativeName: Anim_Play
* @NativeFunctionAddress 0000000140D23360
*/

void function Anim_Play(string)

/*
* @Breif Play an anim without trying to set origin/angles (even if parented
* @Pramas string
* @NativeName: Anim_PlayOnly
* @NativeFunctionAddress 0000000140D23300
*/

void function Anim_PlayOnly(string)

/*
* @Breif Just sets the current sequence, without the entity entering a scripted anim mode.
* @Pramas string
* @NativeName: Anim_NonScriptedPlay
* @NativeFunctionAddress 0000000140D23280
*/

void function Anim_NonScriptedPlay(string)

/*
* @Breif Gets the name of the current sequence
* @Pramas 
* @NativeName: Script_GetCurrentSequenceName
* @NativeFunctionAddress 0000000140D231F0
*/

string function GetCurrentSequenceName()

/*
* @Breif Plays an animation with a specific ref point.
* @Pramas string, vector, vector, float
* @NativeName: Anim_PlayWithRefPoint
* @NativeFunctionAddress 0000000140D23160
*/

void function Anim_PlayWithRefPoint(string, vector, vector, float)

/*
* @Breif Disables movement due to animation delta.
* @Pramas 
* @NativeName: Anim_DisableAnimDelta
* @NativeFunctionAddress 0000000140D230D0
*/

void function Anim_DisableAnimDelta()

/*
* @Breif Disables moving the entity around via the animation. In other words, they will just animate in place.
* @Pramas 
* @NativeName: Anim_DisableUpdatePosition
* @NativeFunctionAddress 0000000140D23040
*/

void function Anim_DisableUpdatePosition()

/*
* @Breif Gets position local offset from ref point for an animation.
* @Pramas string
* @NativeName: Anim_GetRefLocalOffset_Script
* @NativeFunctionAddress 0000000140D22F60
*/

vector function Anim_GetRefLocalOffset(string)

/*
* @Breif Enables collision and root motion.
* @Pramas 
* @NativeName: Anim_EnableCollision
* @NativeFunctionAddress 0000000140D22F10
*/

void function Anim_EnableCollision()

/*
* @Breif Enables collision and root motion. Also causes ref to move in Z to keep entity on ground.
* @Pramas 
* @NativeName: Anim_EnablePlanting
* @NativeFunctionAddress 0000000140D22E70
*/

void function Anim_EnablePlanting()

/*
* @Breif By default the REF attachment is checked only the first frame to get the initial offset. Then root motion is added onto that offset. Call this function to position the entity using REF every frame instead of using root motion.
* @Pramas 
* @NativeName: Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion
* @NativeFunctionAddress 0000000140D22E20
*/

void function Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion()

/*
* @Breif Sets the initial time (in seconds) that the given animation will begin playing at
* @Pramas float
* @NativeName: Anim_SetInitialTime
* @NativeFunctionAddress 0000000140D22DB0
*/

void function Anim_SetInitialTime(float)

/*
* @Breif Immediately setup up the animation like as if it had actually already started at the given start time
* @Pramas float
* @NativeName: Anim_SetStartTime
* @NativeFunctionAddress 0000000140D22D40
*/

void function Anim_SetStartTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Anim_GetStartTime
* @NativeFunctionAddress 0000000140D22C90
*/

float function Anim_GetStartTime()

/*
* @Breif Ignore parent rotation when playing relative to a parent attachment. Turns off automatically on Anim_Stop
* @Pramas bool
* @NativeName: Anim_IgnoreParentRotation
* @NativeFunctionAddress 0000000140D22C00
*/

void function Anim_IgnoreParentRotation(bool)

/*
* @Breif Instead of blending into position over time, instantly snap into position. But only if the entity is the local view player (or parented to one)
* @Pramas 
* @NativeName: Anim_SnapForLocalPlayer
* @NativeFunctionAddress 0000000140D22B80
*/

void function Anim_SnapForLocalPlayer()

/*
* @Breif End the moment the animation beginds to fade out rather than waiting until the cycle reaches 1
* @Pramas 
* @NativeName: Anim_EnableFadeOut
* @NativeFunctionAddress 0000000140D22B00
*/

void function Anim_EnableFadeOut()

/*
* @Breif Stops playing the animation when continuing it would hit a pushable object. Resumes automatically.
* @Pramas bool
* @NativeName: Anim_SetSafePushMode
* @NativeFunctionAddress 0000000140D22AA0
*/

void function Anim_SetSafePushMode(bool)

/*
* @Breif Returns true if currently playing an animation from Anim_Play*()
* @Pramas 
* @NativeName: Anim_IsActive
* @NativeFunctionAddress 0000000140D22A40
*/

bool function Anim_IsActive()

/*
* @Breif Stops the current animation started by Anim_Play*() after signaling "ScriptAnimStop"
* @Pramas 
* @NativeName: Script_Anim_Stop
* @NativeFunctionAddress 0000000140D229F0
*/

void function Anim_Stop()

/*
* @Breif Stops the current animation started by Anim_Play*()
* @Pramas 
* @NativeName: Anim_Stop
* @NativeFunctionAddress 0000000140D229A0
*/

void function Code_Anim_Stop()

/*
* @Breif Snaps into the animation straight away rather than blending it in from its previous sequence.
* @Pramas 
* @NativeName: Anim_DisableSequenceTransition
* @NativeFunctionAddress 0000000140D22950
*/

void function Anim_DisableSequenceTransition()

/*
* @Breif Leave prediction on for the player while the animation is playing.
* @Pramas 
* @NativeName: Anim_EnablePrediction
* @NativeFunctionAddress 0000000140D228C0
*/

void function Anim_EnablePrediction()

/*
* @Breif Set the entity's velocity to match the velocity of the animation when it ends.
* @Pramas 
* @NativeName: Anim_SetVelocityOnEnd
* @NativeFunctionAddress 0000000140D22830
*/

void function Anim_SetVelocityOnEnd()

/*
* @Breif Instead of finishing the animation and exiting scripted state, just pause.
* @Pramas 
* @NativeName: Anim_PauseAtEnd
* @NativeFunctionAddress 0000000140D227A0
*/

void function Anim_PauseAtEnd()

/*
* @Breif Sets the decalIndex.
* @Pramas int decalIndex
* @NativeName: Script_SetDecal
* @NativeFunctionAddress 0000000140D1E660
*/

void function SetDecal(int decalIndex)

/*
* @Breif Gets the decalIndex.
* @Pramas 
* @NativeName: GetDecal
* @NativeFunctionAddress 0000000140D221C0
*/

int function GetDecal()

/*
* @Breif Turns the entity into a client-side ragdoll; returns true for success
* @Pramas vector, bool
* @NativeName: ScriptBecomeRagdoll
* @NativeFunctionAddress 0000000140D22150
*/

bool function BecomeRagdoll(vector, bool)

/*
* @Breif When this entity becomes a client ragdoll it will do impact fx according to the passed ImpactTable index (PrecacheImpactEffectTable)
* @Pramas int
* @NativeName: ScriptSetRagdollImpactFX
* @NativeFunctionAddress 0000000140D220E0
*/

void function SetRagdollImpactFX(int)

/*
* @Breif Entity will continue animating on the server after it becomes a ragdoll on the client. This helps the ragdoll keep momentum when the transition occurs.
* @Pramas bool
* @NativeName: ScriptSetContinueAnimatingAfterRagdoll
* @NativeFunctionAddress 0000000140D22080
*/

void function SetContinueAnimatingAfterRagdoll(bool)

/*
* @Breif Gib this entity
* @Pramas vector impulseforce
* @NativeName: Gib
* @NativeFunctionAddress 0000000140D22020
*/

void function Gib(vector impulseforce)

/*
* @Breif Dissolve this entity
* @Pramas int, vector, int
* @NativeName: ScriptDissolve
* @NativeFunctionAddress 0000000140D21F80
*/

void function Dissolve(int, vector, int)

/*
* @Breif Dissolve this entity without killing it.
* @Pramas int, vector, int
* @NativeName: ScriptDissolveNonLethal
* @NativeFunctionAddress 0000000140D21EE0
*/

void function DissolveNonLethal(int, vector, int)

/*
* @Breif If this.IsDissolving(), stop the effect.
* @Pramas 
* @NativeName: ScriptDissolveStop
* @NativeFunctionAddress 0000000140D21E90
*/

void function DissolveStop()

/*
* @Breif True if entity is dissolving.
* @Pramas 
* @NativeName: IsDissolving
* @NativeFunctionAddress 0000000140D21E30
*/

bool function IsDissolving()

/*
* @Breif Returns the cycle for the given event in the given animation sequence. Returns -1 on any errors.
* @Pramas string, string
* @NativeName: ScriptGetAnimEventCycleFrac
* @NativeFunctionAddress 0000000140D21D70
*/

float function GetAnimEventCycleFrac(string, string)

/*
* @Breif Returns the cycle for the given AE_SV/CL_VSCRIPT_CALLBACK event, with the given option name, in the given animation sequence. Returns -1 on any errors.
* @Pramas string, string
* @NativeName: ScriptGetScriptedAnimEventCycleFrac
* @NativeFunctionAddress 0000000140D21CB0
*/

float function GetScriptedAnimEventCycleFrac(string, string)

/*
* @Breif Sets the sky scale for this entity.  Pass in target skyscale and time to lerp to that value.
* @Pramas float, float
* @NativeName: LerpSkyScale
* @NativeFunctionAddress 0000000140D21C20
*/

void function LerpSkyScale(float, float)

/*
* @Breif Sets the playback rate of the recorded animation started with PlayRecordedAnimation().
* @Pramas float
* @NativeName: Script_SetRecordedAnimationPlaybackRate
* @NativeFunctionAddress 0000000140D21BB0
*/

void function SetRecordedAnimationPlaybackRate(float)

/*
* @Breif 
* @Pramas float
* @NativeName: ScriptSetCycle
* @NativeFunctionAddress 0000000140D21B00
*/

void function SetCycle(float)

/*
* @Breif Get how far through the animation is.
* @Pramas 
* @NativeName: GetCycle
* @NativeFunctionAddress 0000000140D21A50
*/

float function GetCycle()

/*
* @Breif Set the playback rate
* @Pramas float
* @NativeName: Anim_SetPlaybackRate
* @NativeFunctionAddress 0000000140D21990
*/

void function Anim_SetPlaybackRate(float)

/*
* @Breif Get the playback rate
* @Pramas 
* @NativeName: Anim_GetPlaybackRate
* @NativeFunctionAddress 0000000140D218E0
*/

float function Anim_GetPlaybackRate()

/*
* @Breif Change the playback rate of an already-playing animation
* @Pramas float
* @NativeName: Anim_ChangePlaybackRate
* @NativeFunctionAddress 0000000140D21810
*/

void function Anim_ChangePlaybackRate(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetSequence
* @NativeFunctionAddress 0000000140D21760
*/

int function GetSequence()

/*
* @Breif Sets the scale for the model for the animating entity.
* @Pramas float scale
* @NativeName: SetModelScale
* @NativeFunctionAddress 0000000140D216B0
*/

void function SetModelScale(float scale)

/*
* @Breif Gets the scale for the model for the animating entity.
* @Pramas 
* @NativeName: GetModelScale
* @NativeFunctionAddress 0000000140D21600
*/

float function GetModelScale()

/*
* @Breif Force sync the animation of the created anim prop entity with the parent entity.
* @Pramas entity parentEntity, float startCycle, float endCycle, string windowName
* @NativeName: Script_AnimSyncScriptProp_Begin
* @NativeFunctionAddress 0000000140D21540
*/

void function AnimSyncScriptProp_Begin(entity parentEntity, float startCycle, float endCycle, string windowName)

/*
* @Breif Force sync the animation of the created anim prop entity with the parent entity.
* @Pramas entity parentEntity
* @NativeName: Script_AnimSyncScriptProp_End
* @NativeFunctionAddress 0000000140D214C0
*/

void function AnimSyncScriptProp_End(entity parentEntity)

/*
* @Breif Gets the starting position for an animation played with a specific ref point.
* @Pramas string animName, vector origin, vector angles
* @NativeName: Anim_GetStartForRefPoint_Script
* @NativeFunctionAddress 0000000140D11060
*/

var function Anim_GetStartForRefPoint()

/*
* @Breif Gets the starting position for an animation played with a parent entity and attachment as a ref point.
* @Pramas string animName, entity ent, string attachment
* @NativeName: Anim_GetStartForRefEntity_Script
* @NativeFunctionAddress 0000000140D110B0
*/

var function Anim_GetStartForRefEntity()

/*
* @Breif Gets the starting position for an animation played with a specific ref point.
* @Pramas animName, referencePosition, referenceAngles
* @NativeName: Anim_GetStartForRefPoint_ScriptOld
* @NativeFunctionAddress 0000000140D11100
*/

table function Anim_GetStartForRefPoint_Old(var, string, vector, vector)

/*
* @Breif Gets the starting position for an animation played with a parent entity and attachment as a ref point.
* @Pramas animName, referenceEntity, referenceAttachment
* @NativeName: Anim_GetStartForRefEntity_ScriptOld
* @NativeFunctionAddress 0000000140D11150
*/

table function Anim_GetStartForRefEntity_Old(var, string, entity, string)

/*
* @Breif Returns the position and angle of an attachment at the given time in the given animation
* @Pramas string animName, string attachName, float time
* @NativeName: Script_GetAttachmentAtTime
* @NativeFunctionAddress 0000000140D11310
*/

var function Anim_GetAttachmentAtTime()

/*
* @Breif Plays an animation recorded via StartRecordingAnimation(). If ref entity is specified, origin and angles should be in its local space.
* @Pramas var recordedAnim, vector origin, vector angles, float blendtime = 0, entity ref = null
* @NativeName: Script_PlayRecordedAnimation
* @NativeFunctionAddress 0000000140D11360
*/

var function PlayRecordedAnimation()

/*
* @Breif Returns the active weapon.
* @Pramas int
* @NativeName: Script_GetActiveWeapon
* @NativeFunctionAddress 0000000140D211E0
*/

entity function GetActiveWeapon(int)

/*
* @Breif Sets the active weapon.
* @Pramas int, string
* @NativeName: Script_SetActiveWeaponByName
* @NativeFunctionAddress 0000000140D21160
*/

void function SetActiveWeaponByName(int, string)

/*
* @Breif Sets the active weapon.
* @Pramas int, int
* @NativeName: Script_SetActiveWeaponBySlot
* @NativeFunctionAddress 0000000140D210E0
*/

void function SetActiveWeaponBySlot(int, int)

/*
* @Breif Returns the anti titan weapon.
* @Pramas 
* @NativeName: Script_GetAntiTitanWeapon
* @NativeFunctionAddress 0000000140D21080
*/

entity function GetAntiTitanWeapon()

/*
* @Breif Returns the active weapon.
* @Pramas 
* @NativeName: Script_GetSidearmWeapon
* @NativeFunctionAddress 0000000140D20F70
*/

entity function GetSidearmWeapon()

/*
* @Breif Returns the last primary weapon used
* @Pramas int
* @NativeName: Script_GetLatestPrimaryWeapon
* @NativeFunctionAddress 0000000140D20EE0
*/

entity function GetLatestPrimaryWeapon(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetLatestPrimaryWeaponForIndexZeroOrOne
* @NativeFunctionAddress 0000000140D20E60
*/

entity function GetLatestPrimaryWeaponForIndexZeroOrOne(int)

/*
* @Breif Returns the selected weapon.
* @Pramas int
* @NativeName: Script_GetSelectedWeapon
* @NativeFunctionAddress 0000000140D20DD0
*/

entity function GetSelectedWeapon(int)

/*
* @Breif Returns true if the weapon slot is disabled
* @Pramas int
* @NativeName: Script_Weapon_IsSlotDisabled
* @NativeFunctionAddress 0000000140D20D40
*/

bool function IsWeaponSlotDisabled(int)

/*
* @Breif Returns the weapon disable flags that are active
* @Pramas 
* @NativeName: Script_Weapon_GetDisableFlags
* @NativeFunctionAddress 0000000140D20C90
*/

int function GetWeaponDisableFlags()

/*
* @Breif Returns true if player is using an offhand weapon in the active slot.
* @Pramas int
* @NativeName: Script_Weapon_IsUsingOffhand
* @NativeFunctionAddress 0000000140D20C00
*/

bool function IsUsingOffhandWeapon(int)

/*
* @Breif Returns position that has been offset relative to the view
* @Pramas vector, vector
* @NativeName: OffsetPositionFromView_Script
* @NativeFunctionAddress 0000000140D20B20
*/

vector function OffsetPositionFromView(vector, vector)

/*
* @Breif Returns angles that has been offset relative to the view
* @Pramas vector
* @NativeName: OffsetFromViewAngles_Script
* @NativeFunctionAddress 0000000140D20A40
*/

vector function OffsetFromViewAngles(vector)

/*
* @Breif Refills ammo for all equipped weapons.
* @Pramas 
* @NativeName: RefillAllAmmo
* @NativeFunctionAddress 0000000140D209F0
*/

void function RefillAllAmmo()

/*
* @Breif Get the amount of currently loaded ammo in the active weapon.
* @Pramas int
* @NativeName: Script_GetActiveWeaponPrimaryAmmoLoaded
* @NativeFunctionAddress 0000000140D20930
*/

int function GetActiveWeaponPrimaryAmmoLoaded(int)

/*
* @Breif Set the total amount of ammo for the active weapon that this character has.
* @Pramas int, int
* @NativeName: Script_SetActiveWeaponPrimaryAmmoTotal
* @NativeFunctionAddress 0000000140D208B0
*/

void function SetActiveWeaponPrimaryAmmoTotal(int, int)

/*
* @Breif Set the amount of currently loaded ammo in the active weapon.
* @Pramas int, int
* @NativeName: Script_SetActiveWeaponPrimaryAmmoLoaded
* @NativeFunctionAddress 0000000140D20830
*/

void function SetActiveWeaponPrimaryAmmoLoaded(int, int)

/*
* @Breif Get the normal weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_GetNormal
* @NativeFunctionAddress 0000000140D207B0
*/

entity function GetNormalWeapon(int)

/*
* @Breif Give an existing weapon to the specified slot
* @Pramas entity, int
* @NativeName: Script_Weapon_GiveExistingOffhand
* @NativeFunctionAddress 0000000140D20720
*/

void function GiveExistingOffhandWeapon(entity, int)

/*
* @Breif Take the offhand weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_TakeOffhand
* @NativeFunctionAddress 0000000140D206B0
*/

void function TakeOffhandWeapon(int)

/*
* @Breif Take the offhand weapon in the specified slot and return the weapon entity
* @Pramas int
* @NativeName: Script_Weapon_TakeOffhand_NoDelete
* @NativeFunctionAddress 0000000140D20630
*/

entity function TakeOffhandWeapon_NoDelete(int)

/*
* @Breif Get the offhand weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_GetOffhand
* @NativeFunctionAddress 0000000140D205B0
*/

entity function GetOffhandWeapon(int)

/*
* @Breif Set the selected offhand weapon.
* @Pramas int, entity
* @NativeName: Script_Weapon_SetSelectedOffhand
* @NativeFunctionAddress 0000000140D20520
*/

void function SetSelectedOffhand(int, entity)

/*
* @Breif Clear offhand weapons
* @Pramas int
* @NativeName: Script_Weapon_ClearOffhand
* @NativeFunctionAddress 0000000140D204B0
*/

void function ClearOffhand(int)

/*
* @Breif Returns true if the player is switching weapons in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_IsSwitching
* @NativeFunctionAddress 0000000140D20400
*/

bool function IsSwitching(int)

/*
* @Breif Take the weapon by name.
* @Pramas string
* @NativeName: Script_TakeWeapon
* @NativeFunctionAddress 0000000140D203A0
*/

void function TakeWeapon(string)

/*
* @Breif Take the weapon by name, skipping any put-the-weapon-away formalities.
* @Pramas string
* @NativeName: Script_TakeWeaponNow
* @NativeFunctionAddress 0000000140D20340
*/

void function TakeWeaponNow(string)

/*
* @Breif Take weapon by entity
* @Pramas entity
* @NativeName: Script_TakeWeaponByEnt
* @NativeFunctionAddress 0000000140D202C0
*/

void function TakeWeaponByEnt(entity)

/*
* @Breif Take weapon by entity, skipping the put away weapon stuff
* @Pramas entity
* @NativeName: Script_TakeWeaponByEntNow
* @NativeFunctionAddress 0000000140D20240
*/

void function TakeWeaponByEntNow(entity)

/*
* @Breif Take weapon by index
* @Pramas int
* @NativeName: Script_TakeNormalWeaponByIndex
* @NativeFunctionAddress 0000000140D201D0
*/

void function TakeNormalWeaponByIndex(int)

/*
* @Breif takes a normal weapon at a specifix slot index
* @Pramas int
* @NativeName: Script_TakeNormalWeaponByIndexNow
* @NativeFunctionAddress 0000000140D20160
*/

void function TakeNormalWeaponByIndexNow(int)

/*
* @Breif Take the weapon by name and returns weapon entity without deleting it.
* @Pramas string
* @NativeName: Script_Weapon_Take_NoDelete
* @NativeFunctionAddress 0000000140D200F0
*/

entity function TakeWeapon_NoDelete(string)

/*
* @Breif Sets whether this entity will generate a callback to CodeCallback_OnInventoryChanged when its inventory changes
* @Pramas bool
* @NativeName: Script_Weapon_SetInventoryChangedCallbackEnabled
* @NativeFunctionAddress 0000000140D20090
*/

void function SetInventoryChangedCallbackEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ResetFirstDeployForAllWeapons
* @NativeFunctionAddress 0000000140D20040
*/

void function ResetFirstDeployForAllWeapons()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ClearFirstDeployForAllWeapons
* @NativeFunctionAddress 0000000140D1FFF0
*/

void function ClearFirstDeployForAllWeapons()

/*
* @Breif Gets the forward view vector of a player or NPC. Prefer GetViewVector or GetNPCViewVector when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewVector
* @NativeFunctionAddress 0000000140D1FF20
*/

vector function GetPlayerOrNPCViewVector()

/*
* @Breif Gets the forward view vector of a player or NPC. Prefer GetViewForward or GetNPCViewForward when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewForward
* @NativeFunctionAddress 0000000140D1FE50
*/

vector function GetPlayerOrNPCViewForward()

/*
* @Breif Gets the up view vector of a player or NPC. Prefer GetViewUp or GetNPCViewUp when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewUp
* @NativeFunctionAddress 0000000140D1FD80
*/

vector function GetPlayerOrNPCViewUp()

/*
* @Breif Gets the right view vector of a player or NPC. Prefer GetViewright or GetNPCViewRight when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewRight
* @NativeFunctionAddress 0000000140D1FCB0
*/

vector function GetPlayerOrNPCViewRight()

/*
* @Breif Set time at which this player or NPC titan will die from being out of bounds (assuming it doesn't move into bounds)
* @Pramas float
* @NativeName: SetOutOfBoundsDeadTime
* @NativeFunctionAddress 0000000140D1FC40
*/

void function SetOutOfBoundsDeadTime(float)

/*
* @Breif Get time at which this player or NPC titan will die from being out of bounds (assuming it doesn't move into bounds)
* @Pramas 
* @NativeName: GetOutOfBoundsDeadTime
* @NativeFunctionAddress 0000000140D1FB90
*/

float function GetOutOfBoundsDeadTime()

/*
* @Breif Give an existing weapon entity to player or AI
* @Pramas entity
* @NativeName: Script_GiveExistingWeapon
* @NativeFunctionAddress 0000000140D1FB10
*/

void function GiveExistingWeapon(entity)

/*
* @Breif Reset health change rate for AI logic
* @Pramas 
* @NativeName: ResetHealthChangeRate
* @NativeFunctionAddress 0000000140D1FAB0
*/

void function ResetHealthChangeRate()

/*
* @Breif Set amount of health per segment
* @Pramas int
* @NativeName: SetHealthPerSegment
* @NativeFunctionAddress 0000000140D1FA40
*/

void function SetHealthPerSegment(int)

/*
* @Breif Get amount of health per segment
* @Pramas 
* @NativeName: GetHealthPerSegment
* @NativeFunctionAddress 0000000140D1F990
*/

int function GetHealthPerSegment()

/*
* @Breif Sets the titanSoul of this entity
* @Pramas entity
* @NativeName: Script_SetTitanSoul
* @NativeFunctionAddress 0000000140D1F910
*/

void function SetTitanSoul(entity)

/*
* @Breif Gets the titanSoul for this entity
* @Pramas 
* @NativeName: Script_GetTitanSoul
* @NativeFunctionAddress 0000000140D1F880
*/

entity function GetTitanSoul()

/*
* @Breif Gets the current accumulated damage amount
* @Pramas 
* @NativeName: Script_GetDamageAccumulator
* @NativeFunctionAddress 0000000140D1F7D0
*/

float function GetDamageAccumulator()

/*
* @Breif Get headshot fx from settings
* @Pramas 
* @NativeName: GetSettingsHeadshotFX
* @NativeFunctionAddress 0000000140D1F740
*/

asset function GetSettingsHeadshotFX()

/*
* @Breif 
* @Pramas float
* @NativeName: SetCloakReactEndTime
* @NativeFunctionAddress 0000000140D1F6D0
*/

void function SetCloakReactEndTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsPhaseShiftedOrPending
* @NativeFunctionAddress 0000000140D1F650
*/

bool function IsPhaseShiftedOrPending()

/*
* @Breif 
* @Pramas float, float
* @NativeName: Script_PhaseShiftBegin
* @NativeFunctionAddress 0000000140D1F5C0
*/

void function PhaseShiftBegin(float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnablePhaseShiftFlags
* @NativeFunctionAddress 0000000140D1F560
*/

void function EnablePhaseShiftFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisablePhaseShiftFlags
* @NativeFunctionAddress 0000000140D1F500
*/

void function DisablePhaseShiftFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PhaseShiftCancel
* @NativeFunctionAddress 0000000140D1F4B0
*/

void function PhaseShiftCancel()

/*
* @Breif Time left in phase shift.
* @Pramas 
* @NativeName: Script_PhaseShiftTimeRemaining
* @NativeFunctionAddress 0000000140D1F3E0
*/

float function PhaseShiftTimeRemaining()

/*
* @Breif 
* @Pramas 
* @NativeName: PhaseShiftTimePassed
* @NativeFunctionAddress 0000000140D1F300
*/

float function PhaseShiftTimePassed()

/*
* @Breif Gets the entity you are about to phase shift into
* @Pramas 
* @NativeName: Script_GetEntityAtPhaseShiftExitPosition
* @NativeFunctionAddress 0000000140D1F2A0
*/

entity function GetEntityAtPhaseShiftExitPosition()

/*
* @Breif Returns whether in the middle of any context action (like melee or leeching)
* @Pramas 
* @NativeName: ContextAction_IsActive
* @NativeFunctionAddress 0000000140D1F230
*/

bool function ContextAction_IsActive()

/*
* @Breif Returns whether in the middle of a busy context action
* @Pramas 
* @NativeName: ContextAction_IsBusy
* @NativeFunctionAddress 0000000140D1F1C0
*/

bool function ContextAction_IsBusy()

/*
* @Breif Returns whether in the middle of a leeching context action
* @Pramas 
* @NativeName: ContextAction_IsLeeching
* @NativeFunctionAddress 0000000140D1F130
*/

bool function ContextAction_IsLeeching()

/*
* @Breif Returns true if the entity is in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecution
* @NativeFunctionAddress 0000000140D1F0C0
*/

bool function ContextAction_IsMeleeExecution()

/*
* @Breif Returns true if the entity is an attacker in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecutionAttacker
* @NativeFunctionAddress 0000000140D1F050
*/

bool function ContextAction_IsMeleeExecutionAttacker()

/*
* @Breif Returns true if the entity is a target in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecutionTarget
* @NativeFunctionAddress 0000000140D1EFE0
*/

bool function ContextAction_IsMeleeExecutionTarget()

/*
* @Breif Returns whether entity is in the middle of a battery requisition context action
* @Pramas 
* @NativeName: ContextAction_IsRequisitionBattery
* @NativeFunctionAddress 0000000140D1EF70
*/

bool function ContextAction_IsRequisitionBattery()

/*
* @Breif Returns whether the player is in a rodeo context action
* @Pramas 
* @NativeName: ContextAction_IsRodeo
* @NativeFunctionAddress 0000000140D1EF00
*/

bool function ContextAction_IsRodeo()

/*
* @Breif Returns whether the player is in a vehicle context action
* @Pramas 
* @NativeName: ContextAction_IsInVehicle
* @NativeFunctionAddress 0000000140D1EE90
*/

bool function ContextAction_IsInVehicle()

/*
* @Breif Returns whether the player is in a zipline context action
* @Pramas 
* @NativeName: ContextAction_IsZipline
* @NativeFunctionAddress 0000000140D1EE20
*/

bool function ContextAction_IsZipline()

/*
* @Breif Returns whether the player is in a fastball context action
* @Pramas 
* @NativeName: ContextAction_IsFastball
* @NativeFunctionAddress 0000000140D1EDB0
*/

bool function ContextAction_IsFastball()

/*
* @Breif Returns whether the player is in a revive context action
* @Pramas 
* @NativeName: ContextAction_IsReviving
* @NativeFunctionAddress 0000000140D1ED40
*/

bool function ContextAction_IsReviving()

/*
* @Breif Returns whether the player is in a being-revived context action
* @Pramas 
* @NativeName: ContextAction_IsBeingRevived
* @NativeFunctionAddress 0000000140D1ECD0
*/

bool function ContextAction_IsBeingRevived()

/*
* @Breif Marks the entity as in the middle of a busy context action (so other things don't interrupt them)
* @Pramas 
* @NativeName: ContextAction_SetBusy
* @NativeFunctionAddress 0000000140D1EC80
*/

void function ContextAction_SetBusy()

/*
* @Breif Marks the entity as no longer doing some kind of context action
* @Pramas 
* @NativeName: ContextAction_ClearBusy
* @NativeFunctionAddress 0000000140D1EC30
*/

void function ContextAction_ClearBusy()

/*
* @Breif Marks the entity as inside a vehicle
* @Pramas 
* @NativeName: ContextAction_SetInVehicle
* @NativeFunctionAddress 0000000140D1EBE0
*/

void function ContextAction_SetInVehicle()

/*
* @Breif Marks the entity as no longer inside a vehicle
* @Pramas 
* @NativeName: ContextAction_ClearInVehicle
* @NativeFunctionAddress 0000000140D1EB90
*/

void function ContextAction_ClearInVehicle()

/*
* @Breif Marks that the entity is executing a fastball
* @Pramas 
* @NativeName: ContextAction_SetFastball
* @NativeFunctionAddress 0000000140D1EB40
*/

void function ContextAction_SetFastball()

/*
* @Breif Marks that the entity as no longer executing a fastball
* @Pramas 
* @NativeName: ContextAction_ClearFastball
* @NativeFunctionAddress 0000000140D1EAF0
*/

void function ContextAction_ClearFastball()

/*
* @Breif Marks the entity as executing a revive
* @Pramas 
* @NativeName: ContextAction_SetReviving
* @NativeFunctionAddress 0000000140D1EAA0
*/

void function ContextAction_SetReviving()

/*
* @Breif Marks the entity as no longer executing a revive
* @Pramas 
* @NativeName: ContextAction_ClearReviving
* @NativeFunctionAddress 0000000140D1EA50
*/

void function ContextAction_ClearReviving()

/*
* @Breif Marks the entity as being revived
* @Pramas 
* @NativeName: ContextAction_SetBeingRevived
* @NativeFunctionAddress 0000000140D1EA00
*/

void function ContextAction_SetBeingRevived()

/*
* @Breif Marks the entity as no longer being revived
* @Pramas 
* @NativeName: ContextAction_ClearBeingRevived
* @NativeFunctionAddress 0000000140D1E9B0
*/

void function ContextAction_ClearBeingRevived()

/*
* @Breif Let script tell code a melee attack has started (for the attacker)
* @Pramas float
* @NativeName: PlayerMelee_ExecutionStartAttacker
* @NativeFunctionAddress 0000000140D1E930
*/

bool function PlayerMelee_ExecutionStartAttacker(float)

/*
* @Breif Let script tell code a melee attack has started (for the target/victim)
* @Pramas entity
* @NativeName: PlayerMelee_ExecutionStartTarget
* @NativeFunctionAddress 0000000140D1E8B0
*/

bool function PlayerMelee_ExecutionStartTarget(entity)

/*
* @Breif Let script tell code a melee attack has ended (for the attacker)
* @Pramas 
* @NativeName: PlayerMelee_ExecutionEndAttacker
* @NativeFunctionAddress 0000000140D1E850
*/

bool function PlayerMelee_ExecutionEndAttacker()

/*
* @Breif Let script tell code a melee attack has ended (for the target/victim)
* @Pramas 
* @NativeName: PlayerMelee_ExecutionEndTarget
* @NativeFunctionAddress 0000000140D1E7F0
*/

bool function PlayerMelee_ExecutionEndTarget()

/*
* @Breif Let script tell code a leech has started
* @Pramas 
* @NativeName: Event_LeechStart
* @NativeFunctionAddress 0000000140D1E7A0
*/

void function Event_LeechStart()

/*
* @Breif Let script tell code a leech has ended
* @Pramas 
* @NativeName: Event_LeechEnd
* @NativeFunctionAddress 0000000140D1E750
*/

void function Event_LeechEnd()

/*
* @Breif Let script tell code battery requisitioning has started
* @Pramas 
* @NativeName: ContextAction_RequisitionBatteryStart
* @NativeFunctionAddress 0000000140D1E700
*/

void function ContextAction_RequisitionBatteryStart()

/*
* @Breif Let script tell code battery requisitioning has ended
* @Pramas 
* @NativeName: ContextAction_RequisitionBatteryEnd
* @NativeFunctionAddress 0000000140D1E6B0
*/

void function ContextAction_RequisitionBatteryEnd()

/*
* @Breif Prints the contents of the weapon inventory to the console
* @Pramas 
* @NativeName: PrintInventory
* @NativeFunctionAddress 0000000140D1E660
*/

void function PrintInventory()

/*
* @Breif Sets NPC enemy selection priority override. Refer to player/AI settings files for values
* @Pramas int
* @NativeName: SetNPCPriorityOverride
* @NativeFunctionAddress 0000000140D1E5C0
*/

void function SetNPCPriorityOverride(int)

/*
* @Breif AI will never naturally choose this entity as their enemy
* @Pramas 
* @NativeName: SetNPCPriorityOverride_NoThreat
* @NativeFunctionAddress 0000000140D1E540
*/

void function SetNPCPriorityOverride_NoThreat()

/*
* @Breif Clears NPC enemy selection priority override
* @Pramas 
* @NativeName: ClearNPCPriorityOverride
* @NativeFunctionAddress 0000000140D1E4E0
*/

void function ClearNPCPriorityOverride()

/*
* @Breif drops a weapon using the default class behavior
* @Pramas entity
* @NativeName: Script_Weapon_Drop
* @NativeFunctionAddress 0000000140D1E460
*/

void function DropWeapon(entity)

/*
* @Breif 
* @Pramas bool alwaysPasses
* @NativeName: Script_SetHudInfoVisibilityTestAlwaysPasses
* @NativeFunctionAddress 0000000140D1E3D0
*/

void function SetHudInfoVisibilityTestAlwaysPasses(bool alwaysPasses)

/*
* @Breif Exposed to client targetinfo RUIs as 'image targetIcon' arg.
* @Pramas asset newIcon
* @NativeName: Script_SetTargetInfoIcon
* @NativeFunctionAddress 0000000140D1E330
*/

void function SetTargetInfoIcon(asset newIcon)

/*
* @Breif Adds a tether to this player or AI. Returns an integer ID
* @Pramas vector
* @NativeName: Script_AddTether
* @NativeFunctionAddress 0000000140D1E280
*/

int function AddTether(vector)

/*
* @Breif Removes a tether from this player or AI. ID should be return value of AddPlayerTether.
* @Pramas int
* @NativeName: Script_RemoveTether
* @NativeFunctionAddress 0000000140D1E210
*/

void function RemoveTether(int)

/*
* @Breif Checks if the tether still exists. ID should be return value of AddPlayerTether.
* @Pramas int
* @NativeName: Script_IsValidTetherID
* @NativeFunctionAddress 0000000140D1E150
*/

bool function IsValidTetherID(int)

/*
* @Breif Transfers all tethers to another entity. Destroys all tethers on the destination entity, if any.
* @Pramas entity
* @NativeName: Script_TransferTethersToEntity
* @NativeFunctionAddress 0000000140D1E0D0
*/

void function TransferTethersToEntity(entity)

/*
* @Breif Returns the last time the entity fired a bullet weapon.
* @Pramas 
* @NativeName: GetLastFiredTime
* @NativeFunctionAddress 0000000140D1E020
*/

float function GetLastFiredTime()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_AddSharedEnergy
* @NativeFunctionAddress 0000000140D1DFB0
*/

void function AddSharedEnergy(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_TakeSharedEnergy
* @NativeFunctionAddress 0000000140D1DF30
*/

void function TakeSharedEnergy(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_CanUseSharedEnergy
* @NativeFunctionAddress 0000000140D1DEA0
*/

bool function CanUseSharedEnergy(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyCount
* @NativeFunctionAddress 0000000140D1DDF0
*/

int function GetSharedEnergyCount()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetSharedEnergyTotal
* @NativeFunctionAddress 0000000140D1DD30
*/

void function SetSharedEnergyTotal(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyTotal
* @NativeFunctionAddress 0000000140D1DC80
*/

int function GetSharedEnergyTotal()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetSharedEnergyRegenRate
* @NativeFunctionAddress 0000000140D1DBD0
*/

void function SetSharedEnergyRegenRate(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyRegenRate
* @NativeFunctionAddress 0000000140D1DB20
*/

float function GetSharedEnergyRegenRate()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetSharedEnergyRegenDelay
* @NativeFunctionAddress 0000000140D1DAB0
*/

void function SetSharedEnergyRegenDelay(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyRegenDelay
* @NativeFunctionAddress 0000000140D1DA00
*/

float function GetSharedEnergyRegenDelay()

/*
* @Breif 
* @Pramas float duration
* @NativeName: Script_SetSharedEnergyPenaltyDuration
* @NativeFunctionAddress 0000000140D1D990
*/

void function SetSharedEnergyPenaltyDuration(float duration)

/*
* @Breif 
* @Pramas int threshold
* @NativeName: Script_SetSharedEnergyLockoutThreshold
* @NativeFunctionAddress 0000000140D1D8C0
*/

void function SetSharedEnergyLockoutThreshold(int threshold)

/*
* @Breif 
* @Pramas 
* @NativeName: EnableTitanStepDamage
* @NativeFunctionAddress 0000000140D1D860
*/

void function EnableTitanStepDamage()

/*
* @Breif 
* @Pramas 
* @NativeName: DisableTitanStepDamage
* @NativeFunctionAddress 0000000140D1D800
*/

void function DisableTitanStepDamage()

/*
* @Breif Returns all active weapons. Array indices will not match active weapon slot values and the array will have no null elements.
* @Pramas 
* @NativeName: Script_GetAllActiveWeapons
* @NativeFunctionAddress 0000000140D113B0
*/

var function GetAllActiveWeapons()

/*
* @Breif Take the current weapon and instantly replace with the new weapon.  This will skip any holster and draw animations.
* @Pramas int activeInventorySlot, string weaponName, array< string > mods = null
* @NativeName: Script_ReplaceActiveWeapon
* @NativeFunctionAddress 0000000140D11400
*/

var function ReplaceActiveWeapon()

/*
* @Breif Get array of the main weapons.
* @Pramas 
* @NativeName: Script_Weapon_GetMainArray
* @NativeFunctionAddress 0000000140D11450
*/

var function GetMainWeapons()

/*
* @Breif Give the offhand weapon in the specified slot, and optionally apply active mods.
* @Pramas string weaponName, int slotIndex, array< string > mods = null
* @NativeName: Script_Weapon_GiveOffhand
* @NativeFunctionAddress 0000000140D114A0
*/

var function GiveOffhandWeapon()

/*
* @Breif Get array of the offhand weapons.
* @Pramas 
* @NativeName: Script_Weapon_GetOffhandArray
* @NativeFunctionAddress 0000000140D11590
*/

var function GetOffhandWeapons()

/*
* @Breif Create a weapon of the given classname, and optionally apply active mods or disable first deploy animation.
* @Pramas string weaponname, int inventorySlot, array< string > mods = null, bool doFirstDeploy = true
* @NativeName: Script_GiveWeapon
* @NativeFunctionAddress 0000000140D115E0
*/

var function GiveWeapon()

/*
* @Breif Return if AI settings have been set
* @Pramas 
* @NativeName: HasAISettings
* @NativeFunctionAddress 0000000140F3DC40
*/

bool function HasAISettings()

/*
* @Breif Sets the AI's settings file
* @Pramas string
* @NativeName: SetAISettings
* @NativeFunctionAddress 0000000140F3DBE0
*/

void function SetAISettings(string)

/*
* @Breif Gets the AI settings name
* @Pramas 
* @NativeName: GetAISettingsName
* @NativeFunctionAddress 0000000140F3DB50
*/

string function GetAISettingsName()

/*
* @Breif Sets the AI's behavior selector
* @Pramas string
* @NativeName: SetBehaviorSelector
* @NativeFunctionAddress 0000000140F3DAF0
*/

void function SetBehaviorSelector(string)

/*
* @Breif Gets the AI's subclass type
* @Pramas 
* @NativeName: GetSubclass
* @NativeFunctionAddress 0000000140F3DA40
*/

int function GetSubclass()

/*
* @Breif Sets the AI's subclass type
* @Pramas int
* @NativeName: SetSubclass
* @NativeFunctionAddress 0000000140F3D9D0
*/

void function SetSubclass(int)

/*
* @Breif Gets the AI Class
* @Pramas 
* @NativeName: Script_GetAIClass
* @NativeFunctionAddress 0000000140F3D920
*/

int function GetAIClass()

/*
* @Breif Gets the AI Class by name
* @Pramas 
* @NativeName: GetAIClassName
* @NativeFunctionAddress 0000000140F3D890
*/

string function GetAIClassName()

/*
* @Breif Gets the AI body type
* @Pramas 
* @NativeName: GetBodyType
* @NativeFunctionAddress 0000000140F3D800
*/

string function GetBodyType()

/*
* @Breif Returns whether the AI is crouching
* @Pramas 
* @NativeName: IsCrouching
* @NativeFunctionAddress 0000000140F3D7A0
*/

bool function IsCrouching()

/*
* @Breif Use animation sequence for bounding box (expensive)
* @Pramas bool
* @NativeName: UseSequenceBounds
* @NativeFunctionAddress 0000000140F3D740
*/

void function UseSequenceBounds(bool)

/*
* @Breif Return default model name for current team
* @Pramas 
* @NativeName: ScriptGetSettingModelName
* @NativeFunctionAddress 0000000140F3D6B0
*/

asset function GetSettingModelName()

/*
* @Breif Return default title for current team
* @Pramas 
* @NativeName: GetSettingTitle
* @NativeFunctionAddress 0000000140F3D620
*/

string function GetSettingTitle()

/*
* @Breif Add this npc to the specified player's fireteam in the specified slot, and set player as this npc's boss.
* @Pramas entity, int
* @NativeName: Script_AddToFireteam
* @NativeFunctionAddress 0000000140F3D590
*/

void function AddToFireteam(entity, int)

/*
* @Breif Remove this npc from any fireteam.
* @Pramas 
* @NativeName: Script_RemoveFromFireteam
* @NativeFunctionAddress 0000000140F3D540
*/

void function RemoveFromFireteam()

/*
* @Breif Enable NPC Behavior by behavior name
* @Pramas string
* @NativeName: ScriptEnableBehavior
* @NativeFunctionAddress 0000000140F3D4E0
*/

void function EnableBehavior(string)

/*
* @Breif Disable NPC Behavior by behavior name
* @Pramas string
* @NativeName: ScriptDisableBehavior
* @NativeFunctionAddress 0000000140F3D480
*/

void function DisableBehavior(string)

/*
* @Breif Setup follow behavior (follow target and formation)
* @Pramas entity, int
* @NativeName: ScriptInitFollowBehavior
* @NativeFunctionAddress 0000000140F3D3F0
*/

void function InitFollowBehavior(entity, int)

/*
* @Breif Set target move tolerance to change follow position when follow target moves
* @Pramas float
* @NativeName: ScriptSetFollowTargetMoveTolerance
* @NativeFunctionAddress 0000000140F3D380
*/

void function SetFollowTargetMoveTolerance(float)

/*
* @Breif Set goal tolerance when not in combat
* @Pramas float
* @NativeName: ScriptSetFollowGoalTolerance
* @NativeFunctionAddress 0000000140F3D310
*/

void function SetFollowGoalTolerance(float)

/*
* @Breif Set goal tolerance when in combat
* @Pramas float
* @NativeName: ScriptSetFollowGoalCombatTolerance
* @NativeFunctionAddress 0000000140F3D2A0
*/

void function SetFollowGoalCombatTolerance(float)

/*
* @Breif Gets the entity the NPC is following
* @Pramas 
* @NativeName: ScriptGetFollowTarget
* @NativeFunctionAddress 0000000140F3D240
*/

entity function GetFollowTarget()

/*
* @Breif Same as AssaultPoint but clamps position to navmesh within extents.
* @Pramas vector, vector
* @NativeName: ScriptAssaultPointClampedExtents
* @NativeFunctionAddress 0000000140F3D1E0
*/

void function AssaultPointClampedExtents(vector, vector)

/*
* @Breif Same as AssaultPoint but clamps position to navmesh.
* @Pramas vector
* @NativeName: ScriptAssaultPointClamped
* @NativeFunctionAddress 0000000140F3D180
*/

void function AssaultPointClamped(vector)

/*
* @Breif Uses assault behavior to reach a given location.
* @Pramas vector
* @NativeName: ScriptAssaultPoint
* @NativeFunctionAddress 0000000140F3D120
*/

void function AssaultPoint(vector)

/*
* @Breif Callback when AI arrives at position to do animation
* @Pramas string
* @NativeName: ScriptAssaultPointToAnimSetCallback
* @NativeFunctionAddress 0000000140F3D0C0
*/

void function AssaultPointToAnimSetCallback(string)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetAssaultPointOrigin
* @NativeFunctionAddress 0000000140F3CFF0
*/

vector function GetAssaultPointOrigin()

/*
* @Breif Get assault fight radius.
* @Pramas 
* @NativeName: ScriptAssaultGetFightRadius
* @NativeFunctionAddress 0000000140F3CF40
*/

float function AssaultGetFightRadius()

/*
* @Breif Get assault goal radius.
* @Pramas 
* @NativeName: ScriptAssaultGetGoalRadius
* @NativeFunctionAddress 0000000140F3CE90
*/

float function AssaultGetGoalRadius()

/*
* @Breif Get assault goal radius.
* @Pramas 
* @NativeName: ScriptAssaultGetGoalHeight
* @NativeFunctionAddress 0000000140F3CDE0
*/

float function AssaultGetGoalHeight()

/*
* @Breif Get the custom assault arrival tolerance.
* @Pramas 
* @NativeName: ScriptAssaultGetArrivalTolerance
* @NativeFunctionAddress 0000000140F3CD30
*/

float function AssaultGetArrivalTolerance()

/*
* @Breif Removes the custom assault arrival tolerance.
* @Pramas 
* @NativeName: ScriptAssaultClearArrivalTolerance
* @NativeFunctionAddress 0000000140F3CCE0
*/

void function AssaultClearArrivalTolerance()

/*
* @Breif Set assault fight radius.
* @Pramas float
* @NativeName: ScriptAssaultSetFightRadius
* @NativeFunctionAddress 0000000140F3CC70
*/

void function AssaultSetFightRadius(float)

/*
* @Breif Set assault goal radius. Sets goal height to radius if it is taller than the radius
* @Pramas float
* @NativeName: ScriptAssaultSetGoalRadius
* @NativeFunctionAddress 0000000140F3CC00
*/

void function AssaultSetGoalRadius(float)

/*
* @Breif Set assault goal height.
* @Pramas float
* @NativeName: ScriptAssaultSetGoalHeight
* @NativeFunctionAddress 0000000140F3CB90
*/

void function AssaultSetGoalHeight(float)

/*
* @Breif Sets a custom assault arrival tolerance.
* @Pramas float
* @NativeName: ScriptAssaultSetArrivalTolerance
* @NativeFunctionAddress 0000000140F3CB20
*/

void function AssaultSetArrivalTolerance(float)

/*
* @Breif Set assault angles and faceAngles.
* @Pramas vector, bool
* @NativeName: ScriptAssaultSetAngles
* @NativeFunctionAddress 0000000140F3CAC0
*/

void function AssaultSetAngles(vector, bool)

/*
* @Breif Set assault final destination flag which allows AI to take up squad assigned positions.
* @Pramas bool
* @NativeName: ScriptAssaultSetFinalDestination
* @NativeFunctionAddress 0000000140F3CA60
*/

void function AssaultSetFinalDestination(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptInitSquadAssaultInterupt
* @NativeFunctionAddress 0000000140F3CA10
*/

void function InitSquadAssaultInterupt()

/*
* @Breif Enables the squad the ai is in to halt from assaulting
* @Pramas 
* @NativeName: ScriptEnableSquadHalting
* @NativeFunctionAddress 0000000140F3C9C0
*/

void function EnableSquadHalting()

/*
* @Breif Disables the squad the ai is in from halting their assault
* @Pramas 
* @NativeName: ScriptDisableSquadHalting
* @NativeFunctionAddress 0000000140F3C970
*/

void function DisableSquadHalting()

/*
* @Breif Get minium goal radius for an AI for current AI setting
* @Pramas 
* @NativeName: ScriptGetMinGoalRadius
* @NativeFunctionAddress 0000000140F3C8C0
*/

float function GetMinGoalRadius()

/*
* @Breif Get weapon name for current dangerous area
* @Pramas 
* @NativeName: GetDangerousAreaWeapon
* @NativeFunctionAddress 0000000140F3C830
*/

string function GetDangerousAreaWeapon()

/*
* @Breif Force check ground entity
* @Pramas 
* @NativeName: ForceCheckGroundEntity
* @NativeFunctionAddress 0000000140F3C7E0
*/

void function ForceCheckGroundEntity()

/*
* @Breif Gets an NPC's velocity.
* @Pramas 
* @NativeName: ScriptGetVelocity
* @NativeFunctionAddress 0000000140F3C710
*/

vector function GetNPCVelocity()

/*
* @Breif Checks if NPC can play an animation from its current position and angles without getting blocked
* @Pramas int, float, float, bool
* @NativeName: ScriptTestAnimPath
* @NativeFunctionAddress 0000000140F3C650
*/

bool function TestAnimPath(int, float, float, bool)

/*
* @Breif Checks if NPC can play an animation from a position and angles without getting blocked
* @Pramas vector, float, int, float, float, bool
* @NativeName: ScriptTestAnimPathFrom
* @NativeFunctionAddress 0000000140F3C570
*/

bool function TestAnimPathFrom(vector, float, int, float, float, bool)

/*
* @Breif Enables or disables activity modifiers on this entity. See ACT_MODIFIER_***
* @Pramas int, bool
* @NativeName: ScriptSetActivityModifier
* @NativeFunctionAddress 0000000140F3C500
*/

void function SetActivityModifier(int, bool)

/*
* @Breif Returns whether or not an activity modifier is active on this entity. See ACT_MODIFIER_***
* @Pramas int
* @NativeName: ScriptIsActivityModifierActive
* @NativeFunctionAddress 0000000140F3C480
*/

bool function IsActivityModifierActive(int)

/*
* @Breif Gets the squad members average origin
* @Pramas 
* @NativeName: ScriptGetSquadCentroid
* @NativeFunctionAddress 0000000140F3C3B0
*/

vector function GetSquadCentroid()

/*
* @Breif Sets NPC's squad. Set to "" to clear
* @Pramas string
* @NativeName: ScriptSetSquad
* @NativeFunctionAddress 0000000140F3C350
*/

void function SetSquad(string)

/*
* @Breif Set NPC to auto managed squad.
* @Pramas 
* @NativeName: SetAutoSquad
* @NativeFunctionAddress 0000000140F3C300
*/

void function SetAutoSquad()

/*
* @Breif Gets the NPC's enemy, if he has one
* @Pramas 
* @NativeName: ScriptGetEnemy
* @NativeFunctionAddress 0000000140F3C2A0
*/

entity function GetEnemy()

/*
* @Breif Return the last known position of the enemy for this NPC
* @Pramas 
* @NativeName: GetEnemyLKP
* @NativeFunctionAddress 0000000140F3C240
*/

vector function GetEnemyLKP()

/*
* @Breif Return the last seen position of the enemy for this NPC
* @Pramas 
* @NativeName: GetEnemyLSP
* @NativeFunctionAddress 0000000140F3C1E0
*/

vector function GetEnemyLSP()

/*
* @Breif Returns the last time this AI saw his enemy. Only valid if GetEnemy() is not null
* @Pramas 
* @NativeName: GetEnemyLastTimeSeen
* @NativeFunctionAddress 0000000140F3C130
*/

float function GetEnemyLastTimeSeen()

/*
* @Breif Return the time that this AI first shot at the enemy after reacquire
* @Pramas 
* @NativeName: GetTimeFirstAttackAfterReacquire
* @NativeFunctionAddress 0000000140F3C080
*/

float function GetTimeFirstAttackAfterReacquire()

/*
* @Breif Gets closest non-cloaked enemy player, even if not visible, within sensing dist
* @Pramas 
* @NativeName: ScriptGetClosestEnemyPlayer
* @NativeFunctionAddress 0000000140F3C020
*/

entity function GetClosestEnemyPlayer()

/*
* @Breif Gets closest non-cloaked enemy NPC, even if not visible, within sensing dist
* @Pramas 
* @NativeName: ScriptGetClosestEnemyNPC
* @NativeFunctionAddress 0000000140F3BFC0
*/

entity function GetClosestEnemyNPC()

/*
* @Breif Gets closest non-cloaked enemy player or NPC, even if not visible, within sensing dist
* @Pramas 
* @NativeName: ScriptGetClosestEnemy
* @NativeFunctionAddress 0000000140F3BF60
*/

entity function GetClosestEnemy()

/*
* @Breif Gets the safe hint entity the AI is currently using
* @Pramas 
* @NativeName: ScriptGetSafeHint
* @NativeFunctionAddress 0000000140F3BF00
*/

entity function GetSafeHint()

/*
* @Breif Gets the NPC's goal entity
* @Pramas 
* @NativeName: GetGoalEnt
* @NativeFunctionAddress 0000000140F3BEA0
*/

entity function GetGoalEnt()

/*
* @Breif Sets the NPC's goal entity
* @Pramas entity
* @NativeName: ScriptSetGoalEnt
* @NativeFunctionAddress 0000000140F3BE20
*/

void function SetGoalEnt(entity)

/*
* @Breif Determines if the given entity is visible to this NPC
* @Pramas entity
* @NativeName: ScriptCanSee
* @NativeFunctionAddress 0000000140F3BDA0
*/

bool function CanSee(entity)

/*
* @Breif 
* @Pramas entity ent
* @NativeName: Script_GetTimeLastAcquired
* @NativeFunctionAddress 0000000140F3BCD0
*/

float function GetTimeLastAcquired(entity ent)

/*
* @Breif Time since this NPC last saw this entity
* @Pramas entity
* @NativeName: ScriptTimeSinceSeen
* @NativeFunctionAddress 0000000140F3BC00
*/

float function TimeSinceSeen(entity)

/*
* @Breif Time since this NPC last knew this entity's position
* @Pramas entity
* @NativeName: ScriptTimeSinceKnown
* @NativeFunctionAddress 0000000140F3BB30
*/

float function TimeSinceKnown(entity)

/*
* @Breif Flat adjustment that should be applied to an NPCs aiming precision value(how well they shoot)
* @Pramas float
* @NativeName: ScriptSetAimingPrecisionAdjustment
* @NativeFunctionAddress 0000000140F3BAC0
*/

void function SetAimingPrecisionAdjustment(float)

/*
* @Breif Gets the nearest visible friendly player
* @Pramas 
* @NativeName: ScriptGetNearestVisibleFriendlyPlayer
* @NativeFunctionAddress 0000000140F3BA60
*/

entity function GetNearestVisibleFriendlyPlayer()

/*
* @Breif Gets the enemy the NPC's squad is focused on
* @Pramas 
* @NativeName: ScriptGetSquadEnemy
* @NativeFunctionAddress 0000000140F3BA00
*/

entity function GetSquadEnemy()

/*
* @Breif Get actual maximum sight dist currently in use
* @Pramas 
* @NativeName: ScriptGetLookDist
* @NativeFunctionAddress 0000000140F3B950
*/

float function GetLookDist()

/*
* @Breif Set maximum sight dist that overrides the aisetting file
* @Pramas float
* @NativeName: ScriptSetLookDistOverride
* @NativeFunctionAddress 0000000140F3B8E0
*/

void function SetLookDistOverride(float)

/*
* @Breif Get the overriden maximum sight dist. It will be -1 if it has not been overriden
* @Pramas 
* @NativeName: ScriptGetLookDistOverride
* @NativeFunctionAddress 0000000140F3B830
*/

float function GetLookDistOverride()

/*
* @Breif Disable the maximum sight dist override and instead use values form the aisetting file
* @Pramas 
* @NativeName: ScriptDisableLookDistOverride
* @NativeFunctionAddress 0000000140F3B7E0
*/

void function DisableLookDistOverride()

/*
* @Breif Set engagement distances vs weak enemy (min vs weak, max vs weak)
* @Pramas float, float
* @NativeName: SetEngagementDistVsWeak
* @NativeFunctionAddress 0000000140F3B750
*/

void function SetEngagementDistVsWeak(float, float)

/*
* @Breif Set engagement distances vs strong enemy (min vs strong, max vs strong)
* @Pramas float, float
* @NativeName: SetEngagementDistVsStrong
* @NativeFunctionAddress 0000000140F3B6C0
*/

void function SetEngagementDistVsStrong(float, float)

/*
* @Breif Get hearing sensitivity (default 1.0)
* @Pramas 
* @NativeName: ScriptGetHearingSensitivity
* @NativeFunctionAddress 0000000140F3B610
*/

float function GetHearingSensitivity()

/*
* @Breif Set hearing sensitivity
* @Pramas float
* @NativeName: ScriptSetHearingSensitivity
* @NativeFunctionAddress 0000000140F3B5A0
*/

void function SetHearingSensitivity(float)

/*
* @Breif Check if npc is allowed to melee
* @Pramas 
* @NativeName: ScriptGetAllowMelee
* @NativeFunctionAddress 0000000140F3B540
*/

bool function GetAllowMelee()

/*
* @Breif Set if npc is allowed to melee
* @Pramas bool
* @NativeName: ScriptSetAllowMelee
* @NativeFunctionAddress 0000000140F3B4E0
*/

void function SetAllowMelee(bool)

/*
* @Breif Sets AI to alert state once. The state might be changed by the AI at some point later when appropriate
* @Pramas 
* @NativeName: ScriptSetStateToAlert
* @NativeFunctionAddress 0000000140F3B490
*/

void function SetAlert()

/*
* @Breif Return the current NPC state
* @Pramas 
* @NativeName: ScriptGetNPCState
* @NativeFunctionAddress 0000000140F3B400
*/

string function GetNPCState()

/*
* @Breif Return the previous NPC state
* @Pramas 
* @NativeName: ScriptGetPrevNPCState
* @NativeFunctionAddress 0000000140F3B370
*/

string function GetPrevNPCState()

/*
* @Breif Returns the reason the AI is reacting surprised. Compare to enum RSR_***
* @Pramas 
* @NativeName: ScriptGetSurprisedReactionReason
* @NativeFunctionAddress 0000000140F3B2C0
*/

int function GetSurprisedReactionReason()

/*
* @Breif Sets the movement animation to use
* @Pramas string
* @NativeName: ScriptSetMoveAnim
* @NativeFunctionAddress 0000000140F3B260
*/

void function SetMoveAnim(string)

/*
* @Breif Clears script override move animation
* @Pramas 
* @NativeName: ScriptClearMoveAnim
* @NativeFunctionAddress 0000000140F3B210
*/

void function ClearMoveAnim()

/*
* @Breif Sets the idle animation to use
* @Pramas string
* @NativeName: ScriptSetIdleAnim
* @NativeFunctionAddress 0000000140F3B1B0
*/

void function SetIdleAnim(string)

/*
* @Breif Clears script override idle animation
* @Pramas 
* @NativeName: ScriptClearIdleAnim
* @NativeFunctionAddress 0000000140F3B160
*/

void function ClearIdleAnim()

/*
* @Breif Sets the attack animation to use
* @Pramas string
* @NativeName: ScriptSetAttackAnim
* @NativeFunctionAddress 0000000140F3B100
*/

void function SetAttackAnim(string)

/*
* @Breif Clears script override attack animation
* @Pramas 
* @NativeName: ScriptClearAttackAnim
* @NativeFunctionAddress 0000000140F3B0B0
*/

void function ClearAttackAnim()

/*
* @Breif Forces a certain death animation
* @Pramas string
* @NativeName: ScriptSetDeathActivity
* @NativeFunctionAddress 0000000140F3B050
*/

void function SetDeathActivity(string)

/*
* @Breif Clears the script overridden death animation
* @Pramas 
* @NativeName: ScriptClearDeathActivity
* @NativeFunctionAddress 0000000140F3B000
*/

void function ClearDeathActivity()

/*
* @Breif For animations that must be synced with non AI. Must be parented to an entity
* @Pramas bool
* @NativeName: ScriptAnimAdvanceCycleEveryFrame
* @NativeFunctionAddress 0000000140F3AFA0
*/

void function Anim_AdvanceCycleEveryFrame(bool)

/*
* @Breif Disable arrival animation once; arriving at goal or new path find will clear this
* @Pramas bool
* @NativeName: ScriptDisableArrivalOnce
* @NativeFunctionAddress 0000000140F3AF40
*/

void function DisableArrivalOnce(bool)

/*
* @Breif Removes npc's current weapon (no drop)
* @Pramas int
* @NativeName: Script_TakeActiveWeapon
* @NativeFunctionAddress 0000000140F3AED0
*/

void function TakeActiveWeapon(int)

/*
* @Breif Sets the npc's hull type: HULL_HUMAN, HULL_SMALL, HULL_MEDIUM, HULL_FLYING_VEHICLE, HULL_TITAN, HULL_PROWLER, HULL_GOLIATH
* @Pramas string
* @NativeName: ScriptSetHullType
* @NativeFunctionAddress 0000000140F3AE70
*/

void function SetHullType(string)

/*
* @Breif Sets the npc's LKP of the enemy to a given position
* @Pramas entity, vector
* @NativeName: ScriptSetEnemyLKP
* @NativeFunctionAddress 0000000140F3ADF0
*/

void function SetEnemyLKP(entity, vector)

/*
* @Breif Sets the npc's enemy
* @Pramas entity
* @NativeName: ScriptSetEnemy
* @NativeFunctionAddress 0000000140F3AD70
*/

void function SetEnemy(entity)

/*
* @Breif Lock's npc's enemy to one entity until it is dead or cleared
* @Pramas entity
* @NativeName: ScriptLockEnemy
* @NativeFunctionAddress 0000000140F3ACF0
*/

void function LockEnemy(entity)

/*
* @Breif Sets the npc's enemy set by SetEnemy
* @Pramas 
* @NativeName: ScriptClearEnemy
* @NativeFunctionAddress 0000000140F3ACA0
*/

void function ClearEnemy()

/*
* @Breif Sets threat position to take cover from
* @Pramas vector
* @NativeName: ScriptSetPotentialThreatPos
* @NativeFunctionAddress 0000000140F3AC40
*/

void function SetPotentialThreatPos(vector)

/*
* @Breif Sets a position to defend from threats coming from all sides
* @Pramas vector
* @NativeName: ScriptSetDefendFromThreatPos
* @NativeFunctionAddress 0000000140F3ABE0
*/

void function SetDefendFromThreatPos(vector)

/*
* @Breif Clears all alternate positions that an AI would consider when taking cover
* @Pramas 
* @NativeName: ScriptClearAlternateThreatPositions
* @NativeFunctionAddress 0000000140F3AB90
*/

void function ClearAlternateThreatPositions()

/*
* @Breif Sets secondary enemy, use for special behaviors only
* @Pramas entity
* @NativeName: SetSecondaryEnemy
* @NativeFunctionAddress 0000000140F3AB10
*/

void function SetSecondaryEnemy(entity)

/*
* @Breif Clears memory about current enemy
* @Pramas 
* @NativeName: ClearEnemyMemory
* @NativeFunctionAddress 0000000140F3AAC0
*/

void function ClearEnemyMemory()

/*
* @Breif Clears memory about all enemies
* @Pramas 
* @NativeName: ClearAllEnemyMemory
* @NativeFunctionAddress 0000000140F3AA70
*/

void function ClearAllEnemyMemory()

/*
* @Breif Request AI to do special attack when possible, resets to off after attack is done
* @Pramas int
* @NativeName: RequestSpecialRangeAttack
* @NativeFunctionAddress 0000000140F3AA00
*/

void function RequestSpecialRangeAttack(int)

/*
* @Breif Sets the callback function when to be used when the NPCs enemy changes
* @Pramas void functionref( entity self )
* @NativeName: ScriptSetEnemyChangeCallback
* @NativeFunctionAddress 0000000140F3A980
*/

void function SetEnemyChangeCallback(void functionref( entity self ))

/*
* @Breif Gets the previous NPC schedule
* @Pramas 
* @NativeName: GetPrevScheduleName
* @NativeFunctionAddress 0000000140F3A8F0
*/

string function GetPrevScheduleName()

/*
* @Breif Gets the current NPC schedule
* @Pramas 
* @NativeName: GetCurScheduleName
* @NativeFunctionAddress 0000000140F3A860
*/

string function GetCurScheduleName()

/*
* @Breif Sets the default schedule to use when there is nothing else to do
* @Pramas string
* @NativeName: ScriptSetDefaultSchedule
* @NativeFunctionAddress 0000000140F3A800
*/

void function SetDefaultSchedule(string)

/*
* @Breif Sets whether this npc should run in efficient mode (less frequent think)
* @Pramas bool
* @NativeName: ScriptSetEfficientMode
* @NativeFunctionAddress 0000000140F3A7A0
*/

void function SetEfficientMode(bool)

/*
* @Breif Sets whether this npc should think every frame. Should only be used briefly to match up animation with non-npc entity
* @Pramas bool
* @NativeName: ScriptSetThinkEveryFrame
* @NativeFunctionAddress 0000000140F3A740
*/

void function SetThinkEveryFrame(bool)

/*
* @Breif Do rodeo attack while attach on enemy
* @Pramas bool
* @NativeName: ScriptDoRodeoAttack
* @NativeFunctionAddress 0000000140F3A6E0
*/

void function DoRodeoAttack(bool)

/*
* @Breif Set if this NPC can be rodeoed
* @Pramas bool
* @NativeName: ScriptSetRodeoAllowed
* @NativeFunctionAddress 0000000140F3A680
*/

void function SetRodeoAllowed(bool)

/*
* @Breif 
* @Pramas bool forcePitchEnabled
* @NativeName: ScriptSetAimAssistForcePullPitchEnabled
* @NativeFunctionAddress 0000000140F3A620
*/

void function SetAimAssistForcePullPitchEnabled(bool forcePitchEnabled)

/*
* @Breif Make this NPC a hologram. It will generate hologram impact effects when hit.
* @Pramas 
* @NativeName: ScriptSetHologram
* @NativeFunctionAddress 0000000140F3A5D0
*/

void function SetHologram()

/*
* @Breif Make this NPC no longer a hologram.
* @Pramas 
* @NativeName: ScriptClearHologram
* @NativeFunctionAddress 0000000140F3A580
*/

void function ClearHologram()

/*
* @Breif Freeze NPC
* @Pramas 
* @NativeName: Freeze
* @NativeFunctionAddress 0000000140F3A530
*/

void function Freeze()

/*
* @Breif Unfreeze NPC
* @Pramas 
* @NativeName: Unfreeze
* @NativeFunctionAddress 0000000140F3A4E0
*/

void function Unfreeze()

/*
* @Breif Returns true if the NPC is currently frozen
* @Pramas 
* @NativeName: IsFrozen
* @NativeFunctionAddress 0000000140F3A480
*/

bool function IsFrozen()

/*
* @Breif Turn off NPC_* flags
* @Pramas int
* @NativeName: ScriptDisableNPCFlag
* @NativeFunctionAddress 0000000140F3A410
*/

void function DisableNPCFlag(int)

/*
* @Breif Turn off NPCMF_* flags
* @Pramas int
* @NativeName: ScriptDisableNPCMoveFlag
* @NativeFunctionAddress 0000000140F3A3A0
*/

void function DisableNPCMoveFlag(int)

/*
* @Breif Turn on NPC_* flags
* @Pramas int
* @NativeName: ScriptEnableNPCFlag
* @NativeFunctionAddress 0000000140F3A330
*/

void function EnableNPCFlag(int)

/*
* @Breif Turn on NPCMF_* flags
* @Pramas int
* @NativeName: ScriptEnableNPCMoveFlag
* @NativeFunctionAddress 0000000140F3A2C0
*/

void function EnableNPCMoveFlag(int)

/*
* @Breif Set NPC_* flags
* @Pramas int, bool
* @NativeName: ScriptSetNPCFlag
* @NativeFunctionAddress 0000000140F3A250
*/

void function SetNPCFlag(int, bool)

/*
* @Breif Set NPCMF_* flags
* @Pramas int, bool
* @NativeName: ScriptSetNPCMoveFlag
* @NativeFunctionAddress 0000000140F3A1E0
*/

void function SetNPCMoveFlag(int, bool)

/*
* @Breif Get NPC_* flags
* @Pramas int
* @NativeName: ScriptGetNPCFlag
* @NativeFunctionAddress 0000000140F3A160
*/

bool function GetNPCFlag(int)

/*
* @Breif Get NPCMF_* flags
* @Pramas int
* @NativeName: ScriptGetNPCMoveFlag
* @NativeFunctionAddress 0000000140F3A0E0
*/

bool function GetNPCMoveFlag(int)

/*
* @Breif Set bits_CAP_* flags
* @Pramas int, bool
* @NativeName: ScriptSetCapabilityFlag
* @NativeFunctionAddress 0000000140F3A070
*/

void function SetCapabilityFlag(int, bool)

/*
* @Breif Get bits_CAP_* flags
* @Pramas int
* @NativeName: ScriptGetCapabilityFlag
* @NativeFunctionAddress 0000000140F39FF0
*/

bool function GetCapabilityFlag(int)

/*
* @Breif 
* @Pramas bool newSetting
* @NativeName: Script_SetChanceToHitEnabled
* @NativeFunctionAddress 0000000140F39F90
*/

void function SetChanceToHitEnabled(bool newSetting)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetChanceToHitEnabled
* @NativeFunctionAddress 0000000140F39F30
*/

bool function GetChanceToHitEnabled()

/*
* @Breif Sets whether this npc is a valid melee execute target
* @Pramas bool
* @NativeName: Script_SetCanBeMeleeExecuted
* @NativeFunctionAddress 0000000140F39ED0
*/

void function SetCanBeMeleeExecuted(bool)

/*
* @Breif Sets whether this npc can be executed on ground
* @Pramas bool
* @NativeName: Script_SetCanBeGroundExecuted
* @NativeFunctionAddress 0000000140F39E70
*/

void function SetCanBeGroundExecuted(bool)

/*
* @Breif Returns if AI is a non-combat AI
* @Pramas 
* @NativeName: IsNonCombatAI
* @NativeFunctionAddress 0000000140F39E10
*/

bool function IsNonCombatAI()

/*
* @Breif Sets whether this npc is a valid melee execute target
* @Pramas 
* @NativeName: CanBeMeleeExecuted
* @NativeFunctionAddress 0000000140F39DB0
*/

bool function CanBeMeleeExecuted()

/*
* @Breif Sets whether this npc is a valid ground execute target
* @Pramas 
* @NativeName: CanBeGroundExecuted
* @NativeFunctionAddress 0000000140F39D50
*/

bool function CanBeGroundExecuted()

/*
* @Breif Sets whether this npc can display a healthbar
* @Pramas bool
* @NativeName: Script_SetValidHealthBarTarget
* @NativeFunctionAddress 0000000140F39CF0
*/

void function SetValidHealthBarTarget(bool)

/*
* @Breif Sets whether this npc can display a healthbar
* @Pramas 
* @NativeName: Script_IsValidHealthBarTarget
* @NativeFunctionAddress 0000000140F39C90
*/

bool function IsValidHealthBarTarget()

/*
* @Breif 
* @Pramas float fireDelay
* @NativeName: Script_ResetAttackRestTimes
* @NativeFunctionAddress 0000000140F39C20
*/

void function ResetAttackRestTimes(float fireDelay)

/*
* @Breif Sets movement speed multiplier
* @Pramas float
* @NativeName: ScriptSetMoveSpeedScale
* @NativeFunctionAddress 0000000140F39BB0
*/

void function SetNPCMoveSpeedScale(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetDangerousAreaRadius
* @NativeFunctionAddress 0000000140F39B40
*/

void function SetDangerousAreaRadius(float)

/*
* @Breif Returns if AI is in a state that can be interrupted
* @Pramas 
* @NativeName: IsInterruptable
* @NativeFunctionAddress 0000000140F39AE0
*/

bool function IsInterruptable()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsAtShootingCoverHint
* @NativeFunctionAddress 0000000140F39A80
*/

bool function IsAtShootingCoverHint()

/*
* @Breif 
* @Pramas float
* @NativeName: ScriptSetDangerousAreaReactionTime
* @NativeFunctionAddress 0000000140F39A10
*/

void function SetDangerousAreaReactionTime(float)

/*
* @Breif If AI is using secondary attack
* @Pramas 
* @NativeName: IsSecondaryAttack
* @NativeFunctionAddress 0000000140F399B0
*/

bool function IsSecondaryAttack()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_BaseHealth
* @NativeFunctionAddress 0000000140F39900
*/

int function AISetting_BaseHealth()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_MaxFlyingSpeed
* @NativeFunctionAddress 0000000140F39850
*/

float function AISetting_MaxFlyingSpeed()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_GetDefaultWeapon
* @NativeFunctionAddress 0000000140F397C0
*/

string function AISetting_GetDefaultWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_GetGrenadeWeapon
* @NativeFunctionAddress 0000000140F39730
*/

string function AISetting_GetGrenadeWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_SummonDrone
* @NativeFunctionAddress 0000000140F396A0
*/

string function AISetting_SummonDrone()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_MeleeChargeSet
* @NativeFunctionAddress 0000000140F39610
*/

string function AISetting_MeleeChargeSet()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechAnimSet
* @NativeFunctionAddress 0000000140F39580
*/

string function AISetting_LeechAnimSet()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechAnimTag
* @NativeFunctionAddress 0000000140F394F0
*/

string function AISetting_LeechAnimTag()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechDataKnifeTag
* @NativeFunctionAddress 0000000140F39460
*/

string function AISetting_LeechDataKnifeTag()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_OnLeechFunc
* @NativeFunctionAddress 0000000140F39400
*/

var function AISetting_OnLeechFunc()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_ShootableByFriendlyPlayer
* @NativeFunctionAddress 0000000140F393A0
*/

bool function AISetting_ShootableByFriendlyPlayer()

/*
* @Breif 
* @Pramas entity
* @NativeName: GetMeleeDamageMaxForTarget
* @NativeFunctionAddress 0000000140F392D0
*/

int function GetMeleeDamageMaxForTarget(entity)

/*
* @Breif Same as Anim_Play but block AI
* @Pramas string
* @NativeName: Anim_ScriptedPlay
* @NativeFunctionAddress 0000000140F39270
*/

void function Anim_ScriptedPlay(string)

/*
* @Breif Same as Anim_PlayWithRefPoint but block AI
* @Pramas string, vector, vector, float
* @NativeName: Anim_ScriptedPlayWithRefPoint
* @NativeFunctionAddress 0000000140F391E0
*/

void function Anim_ScriptedPlayWithRefPoint(string, vector, vector, float)

/*
* @Breif 
* @Pramas string, bool, float
* @NativeName: Anim_ScriptedPlayActivityByName
* @NativeFunctionAddress 0000000140F39160
*/

void function Anim_ScriptedPlayActivityByName(string, bool, float)

/*
* @Breif 
* @Pramas string, vector, vector, float
* @NativeName: Anim_ScriptedPlayActivityByNameWithRefPoint
* @NativeFunctionAddress 0000000140F390D0
*/

void function Anim_ScriptedPlayActivityByNameWithRefPoint(string, vector, vector, float)

/*
* @Breif Play jump animation to position
* @Pramas vector
* @NativeName: Anim_ScriptedJump
* @NativeFunctionAddress 0000000140F39070
*/

void function Anim_ScriptedJump(vector)

/*
* @Breif Play a gesture by sequence name
* @Pramas string, bool
* @NativeName: Anim_ScriptedAddGestureSequence
* @NativeFunctionAddress 0000000140F39000
*/

void function Anim_ScriptedAddGestureSequence(string, bool)

/*
* @Breif Play a gesture by activity and set if it should auto kill on finishing
* @Pramas string, bool
* @NativeName: Anim_ScriptedAddGestureActivity
* @NativeFunctionAddress 0000000140F38F90
*/

void function Anim_ScriptedAddGestureActivity(string, bool)

/*
* @Breif Remove a gesture by activity
* @Pramas string
* @NativeName: Anim_ScriptedRemoveGestureActivity
* @NativeFunctionAddress 0000000140F38F30
*/

void function Anim_ScriptedRemoveGestureActivity(string)

/*
* @Breif Remove all gesture animations
* @Pramas 
* @NativeName: Anim_ScriptedRemoveAllGestures
* @NativeFunctionAddress 0000000140F38EE0
*/

void function Anim_ScriptedRemoveAllGestures()

/*
* @Breif Set allowing special jumps
* @Pramas bool
* @NativeName: SetAllowSpecialJump
* @NativeFunctionAddress 0000000140F38E80
*/

void function SetAllowSpecialJump(bool)

/*
* @Breif Get current aim direction
* @Pramas 
* @NativeName: GetNPCViewVector
* @NativeFunctionAddress 0000000140F38DB0
*/

vector function GetNPCViewVector()

/*
* @Breif Get current aim direction
* @Pramas 
* @NativeName: GetNPCViewVector
* @NativeFunctionAddress 0000000140F38DB0
*/

vector function GetNPCViewForward()

/*
* @Breif Get current aim up
* @Pramas 
* @NativeName: GetNPCViewUp
* @NativeFunctionAddress 0000000140F38CE0
*/

vector function GetNPCViewUp()

/*
* @Breif Get current aim right
* @Pramas 
* @NativeName: GetNPCViewRight
* @NativeFunctionAddress 0000000140F38C10
*/

vector function GetNPCViewRight()

/*
* @Breif Turns on local grav for this ai right now, takes a normal of the surface you're on and a facing dir
* @Pramas vector, vector
* @NativeName: ScriptEnableLocalGrav
* @NativeFunctionAddress 0000000140F38BB0
*/

void function EnableLocalGrav(vector, vector)

/*
* @Breif Disables local grav for this ai
* @Pramas 
* @NativeName: ScriptDisableLocalGrav
* @NativeFunctionAddress 00000001406A8C20
*/

void function DisableLocalGrav()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMaxEnemyDist
* @NativeFunctionAddress 0000000140F38B00
*/

float function GetMaxEnemyDist()

/*
* @Breif 
* @Pramas float
* @NativeName: SetMaxEnemyDistOverride
* @NativeFunctionAddress 0000000140F38A90
*/

void function SetMaxEnemyDistOverride(float)

/*
* @Breif 
* @Pramas 
* @NativeName: DisableMaxEnemyDistOverride
* @NativeFunctionAddress 0000000140F38A40
*/

void function DisableMaxEnemyDistOverride()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMaxEnemyDistHeavyArmor
* @NativeFunctionAddress 0000000140F38990
*/

float function GetMaxEnemyDistHeavyArmor()

/*
* @Breif 
* @Pramas float
* @NativeName: SetMaxEnemyDistHeavyArmorOverride
* @NativeFunctionAddress 0000000140F38920
*/

void function SetMaxEnemyDistHeavyArmorOverride(float)

/*
* @Breif 
* @Pramas 
* @NativeName: DisableMaxEnemyDistHeavyArmorOverride
* @NativeFunctionAddress 0000000140F388D0
*/

void function DisableMaxEnemyDistHeavyArmorOverride()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMaxTurretYaw
* @NativeFunctionAddress 0000000140F38820
*/

float function GetMaxTurretYaw()

/*
* @Breif Get AI setting key field.
* @Pramas string
* @NativeName: Script_GetAISettingByKeyField
* @NativeFunctionAddress 0000000140F38750
*/

var function Dev_GetAISettingByKeyField(string)

/*
* @Breif Get AI setting key field. Assume return type is an asset
* @Pramas string
* @NativeName: Script_GetAISettingAssetByKeyField
* @NativeFunctionAddress 0000000140F386B0
*/

asset function Dev_GetAISettingAssetByKeyField(string)

/*
* @Breif Uses assault behavior to reach a given location, but does not stop at the goal. When approaching the goal, the NPC will ramp its speed to match the beginning speed of the specified sequence.
* @Pramas vector point, vector angles, string animName, bool doArrival, float tolerance
* @NativeName: ScriptAssaultPointToAnim
* @NativeFunctionAddress 0000000140F367E0
*/

var function AssaultPointToAnim()

/*
* @Breif Returns the last known position(LKP) that an AI has for a given enemy
* @Pramas entity enemy
* @NativeName: ScriptLastKnownPosition
* @NativeFunctionAddress 0000000140F36B20
*/

var function LastKnownPosition()

/*
* @Breif Returns the last seen position(LSP) that an AI has for a given enemy
* @Pramas entity enemy
* @NativeName: ScriptLastSeenPosition
* @NativeFunctionAddress 0000000140F36B70
*/

var function LastSeenPosition()

/*
* @Breif Gets the NPC's squad's last known position of their enemy
* @Pramas 
* @NativeName: ScriptGetSquadLastKnownPosition
* @NativeFunctionAddress 0000000140F36BC0
*/

vector function SquadLastKnownPosition(var)

/*
* @Breif Enable the turret
* @Pramas 
* @NativeName: Enable
* @NativeFunctionAddress 000000014103D400
*/

void function EnableTurret()

/*
* @Breif Disable the turret
* @Pramas 
* @NativeName: Disable
* @NativeFunctionAddress 000000014103D3B0
*/

void function DisableTurret()

/*
* @Breif Gets the turret's current state. Enum values under TURRET_***
* @Pramas 
* @NativeName: GetTurretState
* @NativeFunctionAddress 000000014103D300
*/

int function GetTurretState()

/*
* @Breif Sets the control panel for this turret.
* @Pramas entity
* @NativeName: SetControlPanel
* @NativeFunctionAddress 000000014103D280
*/

void function SetControlPanel(entity)

/*
* @Breif Gets the control panel for this turret.
* @Pramas 
* @NativeName: GetControlPanel
* @NativeFunctionAddress 000000014103D220
*/

entity function GetControlPanel()

/*
* @Breif starts the turret searching
* @Pramas 
* @NativeName: StartDeployed
* @NativeFunctionAddress 000000014103D1D0
*/

void function StartDeployed()

/*
* @Breif lets the turrets shoot at glass if a player is behind it
* @Pramas bool
* @NativeName: SetDumbFireMode
* @NativeFunctionAddress 000000014103D170
*/

void function SetDumbFireMode(bool)

/*
* @Breif Force fires a turret weapon given a shot direction
* @Pramas vector
* @NativeName: TurretForceFireWeapon
* @NativeFunctionAddress 000000014103D110
*/

void function TurretForceFireWeapon(vector)

/*
* @Breif Get last rodeo hit time
* @Pramas 
* @NativeName: GetLastRodeoHitTime
* @NativeFunctionAddress 0000000140FE39C0
*/

float function GetLastRodeoHitTime()

/*
* @Breif Set last rodeo hit time
* @Pramas float
* @NativeName: SetLastRodeoHitTime
* @NativeFunctionAddress 0000000141037FC0
*/

void function SetLastRodeoHitTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetStance
* @NativeFunctionAddress 0000000141037F10
*/

int function GetStance()

/*
* @Breif 
* @Pramas int
* @NativeName: SetStance
* @NativeFunctionAddress 0000000141037E70
*/

void function SetStance(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerSettingsName
* @NativeFunctionAddress 0000000141037D90
*/

asset function GetPlayerSettingsName()

/*
* @Breif 
* @Pramas asset
* @NativeName: SetPlayerSettingsName
* @NativeFunctionAddress 0000000141037D30
*/

void function SetPlayerSettingsName(asset)

/*
* @Breif 
* @Pramas 
* @NativeName: EnableDoomed
* @NativeFunctionAddress 0000000141037CA0
*/

void function EnableDoomed()

/*
* @Breif 
* @Pramas 
* @NativeName: DisableDoomed
* @NativeFunctionAddress 0000000141037C10
*/

void function DisableDoomed()

/*
* @Breif 
* @Pramas 
* @NativeName: IsDoomed
* @NativeFunctionAddress 0000000141037BB0
*/

bool function IsDoomed()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetInvalidHealthBarEnt
* @NativeFunctionAddress 0000000141037B20
*/

void function SetInvalidHealthBarEnt(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetInvalidHealthBarEnt
* @NativeFunctionAddress 0000000141037AC0
*/

bool function GetInvalidHealthBarEnt()

/*
* @Breif 
* @Pramas 
* @NativeName: IsEjecting
* @NativeFunctionAddress 0000000141037A60
*/

bool function IsEjecting()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetEjecting
* @NativeFunctionAddress 00000001410379D0
*/

void function SetEjecting(bool)

/*
* @Breif Whether the Titan can be rodeo-ed by players or not
* @Pramas bool
* @NativeName: SetIsValidRodeoTarget
* @NativeFunctionAddress 0000000141037940
*/

void function SetIsValidRodeoTarget(bool)

/*
* @Breif Set active defensive placement information for AI to use
* @Pramas float, float, float, bool, vector, vector
* @NativeName: SetDefensivePlacement
* @NativeFunctionAddress 0000000141037840
*/

void function SetDefensivePlacement(float, float, float, bool, vector, vector)

/*
* @Breif Set active defensive attachment information for AI to use
* @Pramas float, float, float, bool
* @NativeName: SetDefensiveAttachment
* @NativeFunctionAddress 0000000141037710
*/

void function SetDefensiveAttachment(float, float, float, bool)

/*
* @Breif Returns if the titanSoul has a valid titan
* @Pramas 
* @NativeName: Script_HasValidTitan
* @NativeFunctionAddress 00000001410376B0
*/

bool function HasValidTitan()

/*
* @Breif Gets the titan for this titanSoul entity
* @Pramas 
* @NativeName: Script_GetTitan
* @NativeFunctionAddress 0000000141037620
*/

entity function GetTitan()

/*
* @Breif 
* @Pramas 
* @NativeName: GetNextCoreChargeAvailable
* @NativeFunctionAddress 0000000141037570
*/

float function GetNextCoreChargeAvailable()

/*
* @Breif 
* @Pramas float
* @NativeName: SetNextCoreChargeAvailable
* @NativeFunctionAddress 00000001410374C0
*/

void function SetNextCoreChargeAvailable(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreChargeExpireTime
* @NativeFunctionAddress 0000000141037410
*/

float function GetCoreChargeExpireTime()

/*
* @Breif 
* @Pramas float
* @NativeName: SetCoreChargeExpireTime
* @NativeFunctionAddress 0000000141037360
*/

void function SetCoreChargeExpireTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreChargeStartTime
* @NativeFunctionAddress 00000001410372B0
*/

float function GetCoreChargeStartTime()

/*
* @Breif 
* @Pramas float
* @NativeName: SetCoreChargeStartTime
* @NativeFunctionAddress 0000000141037200
*/

void function SetCoreChargeStartTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreUseDuration
* @NativeFunctionAddress 0000000141037150
*/

float function GetCoreUseDuration()

/*
* @Breif 
* @Pramas float
* @NativeName: SetCoreUseDuration
* @NativeFunctionAddress 00000001410370A0
*/

void function SetCoreUseDuration(float)

/*
* @Breif Adds a spawn flag to the titan soul
* @Pramas int
* @NativeName: Script_AddTitanSoulSpawnFlag
* @NativeFunctionAddress 0000000141036FF0
*/

void function AddTitanSoulSpawnFlag(int)

/*
* @Breif Sets a bool network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, bool
* @NativeName: Script_SetTitanSoulNetBool
* @NativeFunctionAddress 0000000141036F80
*/

void function SetTitanSoulNetBool(string, bool)

/*
* @Breif Sets an int network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, int
* @NativeName: Script_SetTitanSoulNetInt
* @NativeFunctionAddress 0000000141036F00
*/

void function SetTitanSoulNetInt(string, int)

/*
* @Breif Sets a float network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetTitanSoulNetFloat
* @NativeFunctionAddress 0000000141036E80
*/

void function SetTitanSoulNetFloat(string, float)

/*
* @Breif Changes a float network variable on the titan soul gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)
* @Pramas string, float, float
* @NativeName: Script_SetTitanSoulNetFloatOverTime
* @NativeFunctionAddress 0000000141036DF0
*/

void function SetTitanSoulNetFloatOverTime(string, float, float)

/*
* @Breif Sets a time (float) network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetTitanSoulNetTime
* @NativeFunctionAddress 0000000141036D70
*/

void function SetTitanSoulNetTime(string, float)

/*
* @Breif Sets an entity network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, entity
* @NativeName: Script_SetTitanSoulNetEnt
* @NativeFunctionAddress 0000000141036CF0
*/

void function SetTitanSoulNetEnt(string, entity)

/*
* @Breif Gets a bool network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetBool
* @NativeFunctionAddress 0000000141036C80
*/

bool function GetTitanSoulNetBool(string)

/*
* @Breif Gets an int network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetInt
* @NativeFunctionAddress 0000000141036BC0
*/

int function GetTitanSoulNetInt(string)

/*
* @Breif Gets a float network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetFloat
* @NativeFunctionAddress 0000000141036B00
*/

float function GetTitanSoulNetFloat(string)

/*
* @Breif Gets a time (float) network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetTime
* @NativeFunctionAddress 0000000141036A40
*/

float function GetTitanSoulNetTime(string)

/*
* @Breif Gets an entity network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetEnt
* @NativeFunctionAddress 00000001410369D0
*/

entity function GetTitanSoulNetEnt(string)

/*
* @Breif Let client know that the titan could stand when checked.
* @Pramas bool
* @NativeName: SetCanStand
* @NativeFunctionAddress 0000000141038140
*/

void function SetCanStand(bool)

/*
* @Breif Is the titan able to stand
* @Pramas 
* @NativeName: GetCanStand
* @NativeFunctionAddress 00000001410380E0
*/

bool function GetCanStand()

/*
* @Breif Launch grapple
* @Pramas vector
* @NativeName: GrappleNPC
* @NativeFunctionAddress 0000000141038070
*/

bool function GrappleNPC(vector)

/*
* @Breif Returns the display name of the weapon
* @Pramas 
* @NativeName: GetPrintName
* @NativeFunctionAddress 0000000141029120
*/

string ornull function GetWeaponPrintName()

/*
* @Breif Returns the description of the weapon
* @Pramas 
* @NativeName: GetWeaponDescription
* @NativeFunctionAddress 0000000141029090
*/

string ornull function GetWeaponDescription()

/*
* @Breif 
* @Pramas asset
* @NativeName: Script_SetDroppedModel
* @NativeFunctionAddress 0000000141029030
*/

void function SetDroppedModel(asset)

/*
* @Breif Constrains a non-carried weapon in place. Similar to parenting a non-carried weapon.
* @Pramas 
* @NativeName: SetWeaponConstrained
* @NativeFunctionAddress 0000000141028FE0
*/

void function SetWeaponConstrained()

/*
* @Breif Returns index for the given attachment on the weapon's world model.
* @Pramas string
* @NativeName: ScriptLookupWorldModelAttachment
* @NativeFunctionAddress 0000000141028F20
*/

int function LookupWorldModelAttachment(string)

/*
* @Breif Returns index for the given attachment on the weapon's view model.
* @Pramas string
* @NativeName: ScriptLookupViewModelAttachment
* @NativeFunctionAddress 0000000141028E60
*/

int function LookupViewModelAttachment(string)

/*
* @Breif Returns entity using the weapon
* @Pramas 
* @NativeName: GetWeaponOwner_Script
* @NativeFunctionAddress 0000000140E65A60
*/

entity function GetWeaponOwner()

/*
* @Breif Returns the position to fire from
* @Pramas 
* @NativeName: GetAttackPosition_Script
* @NativeFunctionAddress 0000000141028D20
*/

vector function GetAttackPosition()

/*
* @Breif Returns the direction to fire from
* @Pramas 
* @NativeName: GetAttackDirection_Script
* @NativeFunctionAddress 0000000141028C50
*/

vector function GetAttackDirection()

/*
* @Breif Sets whether a weapon can be used or not
* @Pramas bool
* @NativeName: AllowUse
* @NativeFunctionAddress 0000000141028BF0
*/

void function AllowUse(bool)

/*
* @Breif Returns if weapon has a silencer
* @Pramas 
* @NativeName: HasSilencer
* @NativeFunctionAddress 0000000141028B90
*/

bool function HasSilencer()

/*
* @Breif Plays appropriate 1p and 3p sounds
* @Pramas string soundName1p, string soundName3p
* @NativeName: Script_EmitWeaponSound_1p3p
* @NativeFunctionAddress 0000000141028B20
*/

void function EmitWeaponSound_1p3p(string soundName1p, string soundName3p)

/*
* @Breif Plays the sound on the weapon
* @Pramas string
* @NativeName: EmitWeaponSound_Script
* @NativeFunctionAddress 0000000141028AA0
*/

void function EmitWeaponSound(string)

/*
* @Breif Stops the sound on the weapon
* @Pramas string
* @NativeName: StopWeaponSound_Script
* @NativeFunctionAddress 0000000141028A20
*/

void function StopWeaponSound(string)

/*
* @Breif Notifies NPCs of weapon sound
* @Pramas float, float
* @NativeName: EmitWeaponNpcSound
* @NativeFunctionAddress 0000000141028990
*/

void function EmitWeaponNpcSound(float, float)

/*
* @Breif Notifies NPCs of weapon sound
* @Pramas float, float
* @NativeName: EmitWeaponNpcSound_DontUpdateLastFiredTime
* @NativeFunctionAddress 0000000141028900
*/

void function EmitWeaponNpcSound_DontUpdateLastFiredTime(float, float)

/*
* @Breif Returns true if this weapon is net optimized *and* net weapon optimizations are enabled ('net_optimize_weapons 1')
* @Pramas 
* @NativeName: IsNetOptimized
* @NativeFunctionAddress 00000001410288A0
*/

bool function IsNetOptimized()

/*
* @Breif Plays the effect on the weapons owner, use this when the weapon does NOT have a world model.
* @Pramas asset, int
* @NativeName: PlayWeaponEffectOnOwner_Script
* @NativeFunctionAddress 00000001410287F0
*/

void function PlayWeaponEffectOnOwner(asset, int)

/*
* @Breif Stops the effect on the weapon
* @Pramas asset, asset
* @NativeName: StopWeaponEffect_Script
* @NativeFunctionAddress 0000000141028780
*/

void function StopWeaponEffect(asset, asset)

/*
* @Breif Set the burst fire count
* @Pramas int
* @NativeName: SetWeaponBurstFireCount_Script
* @NativeFunctionAddress 00000001410286C0
*/

void function SetWeaponBurstFireCount(int)

/*
* @Breif Get the burst fire count
* @Pramas 
* @NativeName: GetWeaponBurstFireCount_Script
* @NativeFunctionAddress 0000000141028610
*/

int function GetWeaponBurstFireCount()

/*
* @Breif Fires a bullet
* @Pramas vector, vector, int, int
* @NativeName: FireWeaponBullet_Script
* @NativeFunctionAddress 0000000141028430
*/

void function FireWeaponBullet(vector, vector, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: DoDryfire
* @NativeFunctionAddress 0000000141021F60
*/

void function DoDryfire()

/*
* @Breif Gets the number of projectiles per shot
* @Pramas 
* @NativeName: GetProjectilesPerShot_Script
* @NativeFunctionAddress 0000000141028380
*/

int function GetProjectilesPerShot()

/*
* @Breif Gets the ammo consumed per shot
* @Pramas 
* @NativeName: GetAmmoPerShot_Script
* @NativeFunctionAddress 00000001410282D0
*/

int function GetAmmoPerShot()

/*
* @Breif Gets the display type of the ammo
* @Pramas 
* @NativeName: GetAmmoDisplay_Script
* @NativeFunctionAddress 0000000141028240
*/

string function GetAmmoDisplay()

/*
* @Breif Returns the max amount of primary ammo that can be in the clip.
* @Pramas 
* @NativeName: GetWeaponPrimaryClipCountMax_Script
* @NativeFunctionAddress 0000000141028190
*/

int function GetWeaponPrimaryClipCountMax()

/*
* @Breif Set the amount of primary ammo in the clip
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCount_Script
* @NativeFunctionAddress 0000000141028120
*/

void function SetWeaponPrimaryClipCount(int)

/*
* @Breif Set the amount of primary ammo in the clip
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCountAbsolute_Script
* @NativeFunctionAddress 00000001410280B0
*/

void function SetWeaponPrimaryClipCountAbsolute(int)

/*
* @Breif Sets primary ammo count, doesn't reset regen
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCountNoRegenReset_Script
* @NativeFunctionAddress 0000000141027FB0
*/

void function SetWeaponPrimaryClipCountNoRegenReset(int)

/*
* @Breif gets whether or not the regen ammo on this weapon is draining or not
* @Pramas 
* @NativeName: IsWeaponRegenDraining_Script
* @NativeFunctionAddress 0000000141027F00
*/

bool function IsWeaponRegenDraining()

/*
* @Breif Returns the amount of primary ammo in the clip.
* @Pramas 
* @NativeName: GetWeaponPrimaryClipCount_Script
* @NativeFunctionAddress 0000000141027E40
*/

int function GetWeaponPrimaryClipCount()

/*
* @Breif True if the weapon uses clips for ammo
* @Pramas 
* @NativeName: UsesClipsForAmmo
* @NativeFunctionAddress 0000000141027DD0
*/

bool function UsesClipsForAmmo()

/*
* @Breif Get the ammo source this weapon is using: AMMOSOURCE_STOCKPILE, AMMOSOURCE_POOL
* @Pramas 
* @NativeName: Script_GetActiveAmmoSource
* @NativeFunctionAddress 0000000141027D20
*/

int function GetActiveAmmoSource()

/*
* @Breif Gets the ammo pool type this weapon uses.
* @Pramas 
* @NativeName: Script_GetAmmoPoolType
* @NativeFunctionAddress 0000000141027C70
*/

int function GetWeaponAmmoPoolType()

/*
* @Breif Get the max ammo that can be available for this weapon to use
* @Pramas int
* @NativeName: Script_GetWeaponPrimaryAmmoCountMax
* @NativeFunctionAddress 0000000141027BB0
*/

int function GetWeaponPrimaryAmmoCountMax(int)

/*
* @Breif Get the amount of ammo available for this weapon to use
* @Pramas int
* @NativeName: Script_GetWeaponPrimaryAmmoCount
* @NativeFunctionAddress 0000000141027AF0
*/

int function GetWeaponPrimaryAmmoCount(int)

/*
* @Breif Set the amount of primary ammo
* @Pramas int, int
* @NativeName: Script_SetWeaponPrimaryAmmoCount
* @NativeFunctionAddress 0000000141027A40
*/

void function SetWeaponPrimaryAmmoCount(int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: ShouldAutoCycleWhenOutOfAmmo
* @NativeFunctionAddress 00000001410279E0
*/

bool function ShouldAutoCycleWhenOutOfAmmo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_RegenerateAmmoReset
* @NativeFunctionAddress 0000000141027990
*/

void function RegenerateAmmoReset()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponShieldScale
* @NativeFunctionAddress 00000001410278E0
*/

float function GetWeaponShieldScale()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetLifetimeShotsRemaining
* @NativeFunctionAddress 0000000141027830
*/

int function GetLifetimeShotsRemaining()

/*
* @Breif 
* @Pramas int newCount
* @NativeName: Script_SetLifetimeShotsRemaining
* @NativeFunctionAddress 0000000141027770
*/

void function SetLifetimeShotsRemaining(int newCount)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetLifetimeShotsRemainingInfinite
* @NativeFunctionAddress 00000001410276C0
*/

void function SetLifetimeShotsRemainingInfinite()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetRechamberMilestone
* @NativeFunctionAddress 00000001410275E0
*/

int function GetRechamberMilestone()

/*
* @Breif 
* @Pramas int newMilestone
* @NativeName: Script_ForceRechamberMilestone
* @NativeFunctionAddress 0000000141027570
*/

void function ForceRechamberMilestone(int newMilestone)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetCooldownMilestone
* @NativeFunctionAddress 0000000141027480
*/

int function GetCooldownMilestone()

/*
* @Breif 
* @Pramas int newMilestone
* @NativeName: Script_ForceCooldownMilestone
* @NativeFunctionAddress 0000000141027410
*/

void function ForceCooldownMilestone(int newMilestone)

/*
* @Breif Get the weapon's utility entity
* @Pramas 
* @NativeName: GetWeaponUtilityEntity
* @NativeFunctionAddress 0000000141027380
*/

entity function GetWeaponUtilityEntity()

/*
* @Breif Returns true if the weapon is reloading
* @Pramas 
* @NativeName: IsReloading
* @NativeFunctionAddress 0000000141027320
*/

bool function IsReloading()

/*
* @Breif Returns true if the weapon is in ADS
* @Pramas 
* @NativeName: IsWeaponInAds
* @NativeFunctionAddress 0000000141027280
*/

bool function IsWeaponInAds()

/*
* @Breif Returns true if the ADS button is pressed, even if the weapon doesn't allow zooming
* @Pramas 
* @NativeName: IsWeaponAdsButtonPressed
* @NativeFunctionAddress 00000001410271E0
*/

bool function IsWeaponAdsButtonPressed()

/*
* @Breif Return weapon type: WT_DEFAULT, WT_SIDEARM, WT_ANTI_TITAN, WT_SHOULDER
* @Pramas 
* @NativeName: GetWeaponType
* @NativeFunctionAddress 0000000141027130
*/

int function GetWeaponType()

/*
* @Breif Returns true if the weapon has a charge ability.
* @Pramas 
* @NativeName: IsChargeWeapon
* @NativeFunctionAddress 00000001410270A0
*/

bool function IsChargeWeapon()

/*
* @Breif Returns true if the weapon is currently charging
* @Pramas 
* @NativeName: IsWeaponCharging_Script
* @NativeFunctionAddress 0000000141026FE0
*/

bool function IsWeaponCharging()

/*
* @Breif Returns how long the weapon has been charging
* @Pramas 
* @NativeName: GetWeaponChargeTime_Script
* @NativeFunctionAddress 0000000141026EF0
*/

float function GetWeaponChargeTime()

/*
* @Breif Returns how long the weapon has left to charge
* @Pramas 
* @NativeName: GetWeaponChargeTimeRemaining_Script
* @NativeFunctionAddress 0000000141026E40
*/

float function GetWeaponChargeTimeRemaining()

/*
* @Breif Returns fraction [0,1] where the charge level is.
* @Pramas 
* @NativeName: GetWeaponChargeFractionClamped
* @NativeFunctionAddress 0000000141026D90
*/

float function GetWeaponChargeFraction()

/*
* @Breif Sets charge of the weapon as a fraction [0,1].
* @Pramas float
* @NativeName: Script_SetWeaponChargeFraction
* @NativeFunctionAddress 0000000141026D20
*/

void function SetWeaponChargeFraction(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetWeaponChargeFractionForced
* @NativeFunctionAddress 0000000141026CB0
*/

void function SetWeaponChargeFractionForced(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponChargeLevel_Script
* @NativeFunctionAddress 0000000141026BD0
*/

int function GetWeaponChargeLevel()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponChargeLevelMax_Script
* @NativeFunctionAddress 0000000141026B20
*/

int function GetWeaponChargeLevelMax()

/*
* @Breif Gets the total charge duration of the weapon.
* @Pramas 
* @NativeName: GetChargeDuration
* @NativeFunctionAddress 0000000141026A70
*/

float function GetChargeDuration()

/*
* @Breif Returns true if the weapon needs to complete an overheat cooldown.
* @Pramas 
* @NativeName: IsOverheated
* @NativeFunctionAddress 00000001410269E0
*/

bool function IsOverheated()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponReadyToFireProgress
* @NativeFunctionAddress 0000000141026930
*/

float function GetWeaponReadyToFireProgress()

/*
* @Breif Returns the weapon's attack spread in degrees from one side of the cone to the other.
* @Pramas 
* @NativeName: GetSpread
* @NativeFunctionAddress 0000000141026880
*/

float function GetAttackSpreadAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponChargeEnergyCost
* @NativeFunctionAddress 00000001410267D0
*/

int function GetWeaponChargeEnergyCost()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetWeaponDefaultEnergyCost
* @NativeFunctionAddress 0000000141026720
*/

int function GetWeaponDefaultEnergyCost(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ResetWeaponToDefaultEnergyCost
* @NativeFunctionAddress 0000000141026690
*/

void function ResetWeaponToDefaultEnergyCost()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponCurrentEnergyCost
* @NativeFunctionAddress 00000001410265E0
*/

int function GetWeaponCurrentEnergyCost()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetWeaponEnergyCost
* @NativeFunctionAddress 0000000141026520
*/

void function SetWeaponEnergyCost(int)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string
* @NativeName: GetWeaponInfoFileKeyField
* @NativeFunctionAddress 00000001410263B0
*/

var function GetWeaponInfoFileKeyField(string)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string key
* @NativeName: GetWeaponInfoFileKeyFieldAsset
* @NativeFunctionAddress 0000000141026310
*/

asset function GetWeaponInfoFileKeyFieldAsset(string key)

/*
* @Breif takes in a player and checks to see if the weapon is disabled
* @Pramas entity
* @NativeName: IsWeaponDisabled_Script
* @NativeFunctionAddress 0000000141026290
*/

bool function CheckWeaponIsDisabled(entity)

/*
* @Breif Gets the activity that the weapon is in.
* @Pramas 
* @NativeName: GetWeaponActivity_Script
* @NativeFunctionAddress 00000001410261E0
*/

int function GetWeaponActivity()

/*
* @Breif Triggers weapon deploy
* @Pramas 
* @NativeName: Script_DeployWeapon
* @NativeFunctionAddress 0000000141026180
*/

bool function Deploy()

/*
* @Breif Triggers weapon deploy
* @Pramas 
* @NativeName: Script_DeployWeaponInstant
* @NativeFunctionAddress 0000000141026120
*/

bool function DeployInstant()

/*
* @Breif Triggers weapon raise (or equip)
* @Pramas 
* @NativeName: Raise
* @NativeFunctionAddress 00000001410260B0
*/

bool function Raise()

/*
* @Breif True if the weapon is being discarded and will be removed from the owner's inventory.
* @Pramas 
* @NativeName: IsDiscarding
* @NativeFunctionAddress 0000000141026040
*/

bool function IsDiscarding()

/*
* @Breif Returns true if it is appropriate to fire predicted projectiles on the client
* @Pramas 
* @NativeName: ShouldPredictProjectiles
* @NativeFunctionAddress 0000000141025FD0
*/

bool function ShouldPredictProjectiles()

/*
* @Breif Returns true if smart ammo tracking is enabled
* @Pramas 
* @NativeName: SmartAmmo_IsEnabled_Script
* @NativeFunctionAddress 0000000141025F70
*/

bool function SmartAmmo_IsEnabled()

/*
* @Breif Let script inform code it started locking on a new target in this tick
* @Pramas 
* @NativeName: SmartAmmo_SetNewTargetTime
* @NativeFunctionAddress 0000000141025ED0
*/

void function SmartAmmo_SetNewTargetTime()

/*
* @Breif Returns the last time a new target was acquired
* @Pramas 
* @NativeName: SmartAmmo_GetNewTargetTime
* @NativeFunctionAddress 0000000141025E20
*/

float function SmartAmmo_GetNewTargetTime()

/*
* @Breif Returns the angle used by the smart ammo cone search
* @Pramas 
* @NativeName: SmartAmmo_GetSearchAngle
* @NativeFunctionAddress 0000000141025D70
*/

float function SmartAmmo_GetSearchAngle()

/*
* @Breif Returns a list of targets currently being tracked by the smart ammo system and their current and previous lock fractions
* @Pramas 
* @NativeName: SmartAmmo_Script_GetTargets
* @NativeFunctionAddress 0000000141025C80
*/

array< SmartAmmoTarget > function SmartAmmo_GetTargets()

/*
* @Breif Appends new smart ammo target if not already in the list
* @Pramas entity, float
* @NativeName: SmartAmmo_Script_SetTarget
* @NativeFunctionAddress 0000000141025BE0
*/

void function SmartAmmo_SetTarget(entity, float)

/*
* @Breif Stores the current list of smart ammo targets for later retrieval
* @Pramas 
* @NativeName: SmartAmmo_Script_StoreTargets
* @NativeFunctionAddress 0000000141025B90
*/

void function SmartAmmo_StoreTargets()

/*
* @Breif Returns the list of targets that was last stored
* @Pramas 
* @NativeName: SmartAmmo_Script_GetStoredTargets
* @NativeFunctionAddress 0000000141025AC0
*/

array< entity > function SmartAmmo_GetStoredTargets()

/*
* @Breif Clears all current smart ammo targets. Pass in true for the first argument to clear stored targets too. Pass in true for the second argument to clear trackers too.
* @Pramas bool, bool
* @NativeName: SmartAmmo_Clear
* @NativeFunctionAddress 0000000141025A50
*/

void function SmartAmmo_Clear(bool, bool)

/*
* @Breif Returns the position to fire at for this target
* @Pramas entity, int
* @NativeName: SmartAmmo_Script_GetFirePosition
* @NativeFunctionAddress 0000000141025930
*/

vector function SmartAmmo_GetFirePosition(entity, int)

/*
* @Breif Marks an entity as trackable by the smart ammo system
* @Pramas entity, float
* @NativeName: SmartAmmo_Script_TrackEntity
* @NativeFunctionAddress 0000000141025890
*/

void function SmartAmmo_TrackEntity(entity, float)

/*
* @Breif Clears an entity as trackable by the smart ammo system
* @Pramas entity
* @NativeName: SmartAmmo_Script_UntrackEntity
* @NativeFunctionAddress 0000000141025800
*/

void function SmartAmmo_UntrackEntity(entity)

/*
* @Breif Returns number of trackers currently on entity
* @Pramas entity
* @NativeName: SmartAmmo_Script_GetNumTrackersOnEntity
* @NativeFunctionAddress 0000000141025720
*/

int function SmartAmmo_GetNumTrackersOnEntity(entity)

/*
* @Breif Returns true if the given target is visible to the weapon
* @Pramas entity
* @NativeName: SmartAmmo_IsVisibleTarget
* @NativeFunctionAddress 00000001410256A0
*/

bool function SmartAmmo_IsVisibleTarget(entity)

/*
* @Breif Returns array of all entities currently tracked by this weapon
* @Pramas 
* @NativeName: SmartAmmo_Script_GetTrackedEntities
* @NativeFunctionAddress 00000001410255D0
*/

array< entity > function SmartAmmo_GetTrackedEntities()

/*
* @Breif Returns true if weapon is ready to fire (based on next allowed attack time)
* @Pramas 
* @NativeName: IsReadyToFire
* @NativeFunctionAddress 0000000141025550
*/

bool function IsReadyToFire()

/*
* @Breif Returns true if a burst fire is in progress
* @Pramas 
* @NativeName: IsBurstFireInProgress
* @NativeFunctionAddress 00000001410254E0
*/

bool function IsBurstFireInProgress()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBurstFireShotsPending
* @NativeFunctionAddress 0000000141025430
*/

int function GetBurstFireShotsPending()

/*
* @Breif Returns time remaining until ready to fire
* @Pramas 
* @NativeName: TimeUntilReadyToFire
* @NativeFunctionAddress 0000000141025380
*/

float function TimeUntilReadyToFire()

/*
* @Breif Returns the class name of the weapon
* @Pramas 
* @NativeName: GetWeaponName
* @NativeFunctionAddress 00000001410252F0
*/

string function GetWeaponClassName()

/*
* @Breif Gets the damage source ID for this weapon
* @Pramas 
* @NativeName: GetDamageSourceID
* @NativeFunctionAddress 0000000141025240
*/

int function GetDamageSourceID()

/*
* @Breif Gets the largest damage far dist for current owner
* @Pramas 
* @NativeName: GetMaxDamageFarDist
* @NativeFunctionAddress 0000000141025190
*/

float function GetMaxDamageFarDist()

/*
* @Breif Forces the offhand weapon to release
* @Pramas 
* @NativeName: ForceRelease
* @NativeFunctionAddress 0000000141025140
*/

void function ForceRelease()

/*
* @Breif Returns true if the offhand weapon was forced to release
* @Pramas 
* @NativeName: IsForceRelease
* @NativeFunctionAddress 00000001410250D0
*/

bool function IsForceRelease()

/*
* @Breif Forces the offhand weapon to release (on server only)
* @Pramas 
* @NativeName: ForceReleaseFromServer
* @NativeFunctionAddress 0000000141025080
*/

void function ForceReleaseFromServer()

/*
* @Breif Returns true if the offhand weapon was forced to release (on server only)
* @Pramas 
* @NativeName: IsForceReleaseFromServer
* @NativeFunctionAddress 0000000141024FF0
*/

bool function IsForceReleaseFromServer()

/*
* @Breif Given (string), returns true if mod is active on this weapon.
* @Pramas string
* @NativeName: HasMod_Script
* @NativeFunctionAddress 0000000141024F80
*/

bool function HasMod(string)

/*
* @Breif Given (string), add the mod from this weapon.
* @Pramas string
* @NativeName: AddMod_Script
* @NativeFunctionAddress 0000000141024F20
*/

void function AddMod(string)

/*
* @Breif Given (string), remove the mod from this weapon.
* @Pramas string
* @NativeName: RemoveMod_Script
* @NativeFunctionAddress 0000000141024EC0
*/

void function RemoveMod(string)

/*
* @Breif Sets mods bit field
* @Pramas int
* @NativeName: SetModBitfield_Script
* @NativeFunctionAddress 0000000141024E50
*/

void function SetModBitField(int)

/*
* @Breif Gets mods bit field
* @Pramas 
* @NativeName: GetModBitfield_Script
* @NativeFunctionAddress 0000000141024DA0
*/

int function GetModBitField()

/*
* @Breif Returns true if the weapon is offhand
* @Pramas 
* @NativeName: IsOffhandWeapon
* @NativeFunctionAddress 0000000141024D30
*/

bool function IsWeaponOffhand()

/*
* @Breif Returns true if this is a melee weapon
* @Pramas 
* @NativeName: IsOffhandMeleeWeapon
* @NativeFunctionAddress 0000000141024CC0
*/

bool function IsWeaponMelee()

/*
* @Breif Returns true if this is a toss weapon
* @Pramas 
* @NativeName: IsTossWeapon
* @NativeFunctionAddress 0000000141024C50
*/

bool function IsTossWeapon()

/*
* @Breif Gets the viewmodel for the weapon. Viewmodels are only valid for active player weapons.
* @Pramas 
* @NativeName: GetWeaponViewmodel_Script
* @NativeFunctionAddress 0000000141024BF0
*/

entity function GetWeaponViewmodel()

/*
* @Breif Given (activityName, WeaponActivityFlags), Plays the given activity on the weapon viewmodel
* @Pramas string, int
* @NativeName: StartCustomActivity_Script
* @NativeFunctionAddress 0000000141024B70
*/

bool function StartCustomActivity(string, int)

/*
* @Breif Stops any custom activities currently playing on the weapon viewmodel
* @Pramas 
* @NativeName: StopCustomActivity_Script
* @NativeFunctionAddress 0000000141024B10
*/

void function StopCustomActivity()

/*
* @Breif Queries whether the weapon viewmodel is currently playing a custom activity
* @Pramas 
* @NativeName: IsInCustomActivity
* @NativeFunctionAddress 0000000141024AA0
*/

bool function IsInCustomActivity()

/*
* @Breif Returns the fraction of the current custom weapon activity that is complete.
* @Pramas 
* @NativeName: GetCustomActivityFraction_Script
* @NativeFunctionAddress 0000000141024940
*/

float function GetCustomActivityFraction()

/*
* @Breif Returns the duration of the current custom weapon activity.
* @Pramas 
* @NativeName: GetCustomActivityDuration_Script
* @NativeFunctionAddress 0000000141024870
*/

float function GetCustomActivityDuration()

/*
* @Breif Specifies a model to be attached to the viewmodel during the current custom activity, as well as an attachment index.
* @Pramas string, string
* @NativeName: CustomActivityAttachModel_Script
* @NativeFunctionAddress 0000000141024770
*/

void function CustomActivityAttachModel(string, string)

/*
* @Breif Clears the attached custom activity model.
* @Pramas 
* @NativeName: CustomActivityClearAttachedModel_Script
* @NativeFunctionAddress 0000000141024700
*/

void function CustomActivityClearAttachedModel()

/*
* @Breif Get this weapon's internal when-can-I-shoot-next time.
* @Pramas 
* @NativeName: GetNextAttackAllowedTime_Script
* @NativeFunctionAddress 0000000141024640
*/

float function GetNextAttackAllowedTime()

/*
* @Breif Get this weapon's internal when-can-I-shoot-next time, ignoring the "ready" timer
* @Pramas 
* @NativeName: GetNextAttackAllowedTimeRaw_Script
* @NativeFunctionAddress 0000000141024590
*/

float function GetNextAttackAllowedTimeRaw()

/*
* @Breif Set this weapon's internal when-can-I-shoot-next time.
* @Pramas float
* @NativeName: SetNextAttackAllowedTime_Script
* @NativeFunctionAddress 00000001410244E0
*/

void function SetNextAttackAllowedTime(float)

/*
* @Breif 
* @Pramas float
* @NativeName: OverrideNextAttackTime_Script
* @NativeFunctionAddress 0000000141024470
*/

void function OverrideNextAttackTime(float)

/*
* @Breif Get the damage amount this weapon should do to a titan that the player is rodeoing.
* @Pramas 
* @NativeName: GetRodeoDamage_Script
* @NativeFunctionAddress 00000001410243C0
*/

int function GetRodeoDamage()

/*
* @Breif 
* @Pramas 
* @NativeName: GetShotCount_Script
* @NativeFunctionAddress 0000000141024310
*/

int function GetShotCount()

/*
* @Breif Gets the string specified in the weapon's .txt file for 'weaponClass'.
* @Pramas 
* @NativeName: GetWeaponClass
* @NativeFunctionAddress 0000000141024270
*/

string function GetWeaponClass()

/*
* @Breif Returns true if weapon is in a cooldown state.
* @Pramas 
* @NativeName: IsInCooldown
* @NativeFunctionAddress 0000000141024200
*/

bool function IsInCooldown()

/*
* @Breif Returns true if weapon is has a cooldown state pending.
* @Pramas 
* @NativeName: IsCooldownPending
* @NativeFunctionAddress 0000000141024160
*/

bool function IsCooldownPending()

/*
* @Breif Get Weapon Type Flags
* @Pramas 
* @NativeName: GetWeaponTypeFlags
* @NativeFunctionAddress 00000001410240B0
*/

int function GetWeaponTypeFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponDamageFlags
* @NativeFunctionAddress 0000000141024000
*/

int function GetWeaponDamageFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponExplosionDamageFlags
* @NativeFunctionAddress 0000000141023F50
*/

int function GetWeaponExplosionDamageFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetImpactTableIndex
* @NativeFunctionAddress 0000000141023EA0
*/

int function GetImpactTableIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetNPCMissFastPlayer
* @NativeFunctionAddress 0000000141023E40
*/

bool function GetNPCMissFastPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeLungeTargetRange
* @NativeFunctionAddress 0000000141023D90
*/

float function GetMeleeLungeTargetRange()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeLungeTargetAngle
* @NativeFunctionAddress 0000000141023CE0
*/

float function GetMeleeLungeTargetAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeCanHitHumanSized
* @NativeFunctionAddress 0000000141023C80
*/

bool function GetMeleeCanHitHumanSized()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeCanHitTitans
* @NativeFunctionAddress 0000000141023C20
*/

bool function GetMeleeCanHitTitans()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetDamageAmountForArmorType
* @NativeFunctionAddress 0000000141023B30
*/

int function GetDamageAmountForArmorType(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAttackRange
* @NativeFunctionAddress 0000000141023A80
*/

float function GetMeleeAttackRange()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAttackAngle
* @NativeFunctionAddress 00000001410239D0
*/

float function GetMeleeAttackAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAnim3p
* @NativeFunctionAddress 0000000141023940
*/

string function GetMeleeAnim3p()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponReadyMsg
* @NativeFunctionAddress 00000001410238B0
*/

string function GetWeaponReadyMsg()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponReadyHint
* @NativeFunctionAddress 0000000141023820
*/

string function GetWeaponReadyHint()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrenadeFuseTime
* @NativeFunctionAddress 0000000141023770
*/

float function GetGrenadeFuseTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrenadeIgnitionTime
* @NativeFunctionAddress 00000001410236C0
*/

float function GetGrenadeIgnitionTime()

/*
* @Breif 
* @Pramas 
* @NativeName: ZiplineGrenadeHasValidSpot
* @NativeFunctionAddress 0000000141023660
*/

bool function ZiplineGrenadeHasValidSpot()

/*
* @Breif Returns the exact origin the begin station should be placed at for the zipline grenade/gun
* @Pramas entity
* @NativeName: Script_GetBeginStationOriginForZiplineGrenade
* @NativeFunctionAddress 0000000141023520
*/

vector function GetBeginStationOriginForZiplineGrenade(entity)

/*
* @Breif Returns the exact angle the begin station should be placed at for the zipline grenade/gun
* @Pramas entity
* @NativeName: Script_GetBeginStationAnglesForZiplineGrenade
* @NativeFunctionAddress 0000000141023430
*/

vector function GetBeginStationAnglesForZiplineGrenade(entity)

/*
* @Breif Does this weapon allow for headshot damage
* @Pramas 
* @NativeName: Script_GetAllowHeadShots
* @NativeFunctionAddress 00000001410233D0
*/

bool function GetAllowHeadShots()

/*
* @Breif Gets the index for the next shot to be fired
* @Pramas 
* @NativeName: Script_GetCurrentAltFireIndex
* @NativeFunctionAddress 0000000141023320
*/

int function GetCurrentAltFireIndex()

/*
* @Breif Gets the current zoom FOV of the weapon
* @Pramas 
* @NativeName: Script_GetWeaponZoomFOV
* @NativeFunctionAddress 0000000141023270
*/

float function GetWeaponZoomFOV()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetReloadMilestoneIndex
* @NativeFunctionAddress 00000001410231C0
*/

int function GetReloadMilestoneIndex()

/*
* @Breif Forces the player to ads
* @Pramas 
* @NativeName: Script_SetForcedADS
* @NativeFunctionAddress 0000000141023130
*/

void function SetForcedADS()

/*
* @Breif Lets the player choose whether or not to ads
* @Pramas 
* @NativeName: Script_ClearForcedADS
* @NativeFunctionAddress 00000001410230A0
*/

void function ClearForcedADS()

/*
* @Breif Gets whether or not the player is forced into ads
* @Pramas 
* @NativeName: Script_GetForcedADS
* @NativeFunctionAddress 0000000141022FF0
*/

int function GetForcedADS()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetInventoryIndex
* @NativeFunctionAddress 0000000141022F40
*/

int function GetInventoryIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetChargeAnimIndex
* @NativeFunctionAddress 0000000141022E90
*/

int function GetChargeAnimIndex()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetChargeAnimIndex
* @NativeFunctionAddress 0000000141022DD0
*/

void function SetChargeAnimIndex(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponDamageForce
* @NativeFunctionAddress 0000000141022D20
*/

float function GetWeaponDamageForce()

/*
* @Breif Forcibly ends a sustained discharge. Does nothing if no sustained discharge is occurring.
* @Pramas 
* @NativeName: SustainedDischargeEnd
* @NativeFunctionAddress 0000000141022CB0
*/

void function ForceSustainedDischargeEnd()

/*
* @Breif Forcibly ends charging, without an attack. Does nothing if no charging is occurring.
* @Pramas 
* @NativeName: Script_ForceChargeEndNoAttack
* @NativeFunctionAddress 0000000141022C30
*/

void function ForceChargeEndNoAttack()

/*
* @Breif Gets the core duration
* @Pramas 
* @NativeName: GetCoreDuration
* @NativeFunctionAddress 0000000141022B80
*/

float function GetCoreDuration()

/*
* @Breif Indicates if this is a sustained discharge weapon.
* @Pramas 
* @NativeName: IsSustainedDischargeWeapon
* @NativeFunctionAddress 0000000141022B10
*/

bool function IsSustainedDischargeWeapon()

/*
* @Breif Indicates if the weapon is currently performing a sustained discharge
* @Pramas 
* @NativeName: IsDischarging
* @NativeFunctionAddress 0000000141022A80
*/

bool function IsDischarging()

/*
* @Breif Gets the total duration of a sustained discharge.
* @Pramas 
* @NativeName: GetSustainedDischargeDuration
* @NativeFunctionAddress 00000001410229D0
*/

float function GetSustainedDischargeDuration()

/*
* @Breif Gets the time remaining for the current sustained discharge between.
* @Pramas 
* @NativeName: GetSustainedDischargeRemainder
* @NativeFunctionAddress 00000001410228F0
*/

float function GetSustainedDischargeRemainder()

/*
* @Breif Gets the fraction of completion for the current sustained discharge between [0, 1].
* @Pramas 
* @NativeName: GetSustainedDischargeFraction
* @NativeFunctionAddress 0000000141022840
*/

float function GetSustainedDischargeFraction()

/*
* @Breif Gets the frequency at which pulse callbacks are dispatched if enabled. Also controls frequency of sustained laser damage.
* @Pramas 
* @NativeName: GetSustainedDischargePulseFrequency
* @NativeFunctionAddress 0000000141022790
*/

float function GetSustainedDischargePulseFrequency()

/*
* @Breif Forces the discharge to be at a certain fraction
* @Pramas float
* @NativeName: SetSustainedDischargeFractionForced
* @NativeFunctionAddress 0000000141022720
*/

void function SetSustainedDischargeFractionForced(float)

/*
* @Breif Indicates if this is a sustained laser weapon.
* @Pramas 
* @NativeName: IsSustainedLaserWeapon
* @NativeFunctionAddress 0000000141022690
*/

bool function IsSustainedLaserWeapon()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_DoMeleeHitConfirmation
* @NativeFunctionAddress 0000000141022620
*/

void function DoMeleeHitConfirmation(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetScriptTime0
* @NativeFunctionAddress 0000000141022570
*/

void function SetScriptTime0(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptTime0
* @NativeFunctionAddress 00000001410224C0
*/

float function GetScriptTime0()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetScriptFlags0
* @NativeFunctionAddress 0000000141022420
*/

void function SetScriptFlags0(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptFlags0
* @NativeFunctionAddress 0000000141022370
*/

int function GetScriptFlags0()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetScriptInt0
* @NativeFunctionAddress 00000001410222D0
*/

void function SetScriptInt0(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptInt0
* @NativeFunctionAddress 0000000141022220
*/

int function GetScriptInt0()

/*
* @Breif Duplicate this weapon and throw it.
* @Pramas vector, vector, vector, vector
* @NativeName: ThrowWeapon_Script
* @NativeFunctionAddress 0000000141022180
*/

entity function ThrowWeapon(vector, vector, vector, vector)

/*
* @Breif Set the weapon's utility entity
* @Pramas entity
* @NativeName: SetWeaponUtilityEntity_Script
* @NativeFunctionAddress 0000000141022090
*/

void function SetWeaponUtilityEntity(entity)

/*
* @Breif Makes the weapon play ACT_VM_DRAWCATCH next time it is deployed to a player.
* @Pramas 
* @NativeName: Script_EnableCatchAnimation
* @NativeFunctionAddress 0000000141022040
*/

void function EnableCatchAnimation()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_MarkAsLoadoutPickup
* @NativeFunctionAddress 0000000141021FB0
*/

void function MarkAsLoadoutPickup()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ForceDryfireEvent
* @NativeFunctionAddress 0000000141021F60
*/

void function ForceDryfireEvent()

/*
* @Breif 
* @Pramas entity proScreenOwner
* @NativeName: Script_SetProScreenOwner
* @NativeFunctionAddress 0000000141021EE0
*/

void function SetProScreenOwner(entity proScreenOwner)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetProScreenOwner
* @NativeFunctionAddress 0000000141021E50
*/

entity function GetProScreenOwner()

/*
* @Breif 
* @Pramas int index, int val
* @NativeName: Script_SetProScreenIntValForIndex
* @NativeFunctionAddress 0000000141021DD0
*/

void function SetProScreenIntValForIndex(int index, int val)

/*
* @Breif 
* @Pramas int index, float val
* @NativeName: Script_SetProScreenFloatValForIndex
* @NativeFunctionAddress 0000000141021D50
*/

void function SetProScreenFloatValForIndex(int index, float val)

/*
* @Breif 
* @Pramas bool isPlayerDropped
* @NativeName: Script_ManuallyAddToWeaponDropManager
* @NativeFunctionAddress 0000000141021CF0
*/

void function ManuallyAddToWeaponDropManager(bool isPlayerDropped)

/*
* @Breif Adds a mod in realtime.
* @Pramas string
* @NativeName: Script_RealtimeMod_Add
* @NativeFunctionAddress 0000000141021C90
*/

void function RealtimeMod_Add(string)

/*
* @Breif Set the override to be used for the optic appearance for this weapon entity. Use -1 to clear the override for an optic appearance.
* @Pramas string opticAppearanceName, int overrideIndex
* @NativeName: Script_SetOpticAppearanceOverride
* @NativeFunctionAddress 0000000141021C10
*/

void function SetOpticAppearanceOverride(string opticAppearanceName, int overrideIndex)

/*
* @Breif Removes a mod in realtime.
* @Pramas string
* @NativeName: Script_RealtimeMod_Remove
* @NativeFunctionAddress 0000000141021BB0
*/

void function RealtimeMod_Remove(string)

/*
* @Breif 
* @Pramas 
* @NativeName: IsLoadoutPickup
* @NativeFunctionAddress 0000000141021B50
*/

bool function IsLoadoutPickup()

/*
* @Breif Get weapon charm model name for the weapon.
* @Pramas 
* @NativeName: Script_GetCharmModelName
* @NativeFunctionAddress 0000000141021AB0
*/

string function GetCharmModelName()

/*
* @Breif Set the legendary weapon model index for this instance of the weapon. The weapon will use the dafault model from weapon info if a negative index is set.
* @Pramas int legendaryIndex
* @NativeName: Script_SetLegendaryModelIndex
* @NativeFunctionAddress 0000000141021A40
*/

void function SetLegendaryModelIndex(int legendaryIndex)

/*
* @Breif Set weapon charm for the model. This spawns an entity with the provided model and attach it to the CHARM attachment on the weapon.
* @Pramas asset weaponCharmModel, string attachmentName
* @NativeName: Script_SetWeaponCharm
* @NativeFunctionAddress 00000001410219D0
*/

void function SetWeaponCharm(asset weaponCharmModel, string attachmentName)

/*
* @Breif Set script index for weapon charm.
* @Pramas int charmScriptIndex
* @NativeName: Script_SetWeaponCharmIndex
* @NativeFunctionAddress 0000000141021930
*/

void function SetWeaponCharmIndex(int charmScriptIndex)

/*
* @Breif Get script index for the weapon charm.
* @Pramas 
* @NativeName: Script_GetWeaponCharmIndex
* @NativeFunctionAddress 0000000141021880
*/

int function GetWeaponCharmIndex()

/*
* @Breif Clear the wepaon charm entity for the current weapon.
* @Pramas 
* @NativeName: ClearWeaponCharm
* @NativeFunctionAddress 00000001410217E0
*/

void function ClearWeaponCharm()

/*
* @Breif Plays the effect on the weapon, always spawn even if out of view
* @Pramas asset, asset, string, bool persistent = false
* @NativeName: PlayWeaponEffectNoCull_Script
* @NativeFunctionAddress 0000000141020F00
*/

var function PlayWeaponEffectNoCull()

/*
* @Breif Plays the effect on the weapon
* @Pramas asset, asset, string, bool persistent = false
* @NativeName: PlayWeaponEffect_Script
* @NativeFunctionAddress 0000000141020F00
*/

var function PlayWeaponEffect()

/*
* @Breif Fires a bullet, can set to skip lag compensation, have zero spread, dryfire, or only cause a whizby sound.
* @Pramas WeaponFireBulletSpecialParams
* @NativeName: FireWeaponBulletSpecial_Script
* @NativeFunctionAddress 0000000141020F50
*/

var function FireWeaponBullet_Special()

/*
* @Breif Fires a bolt projectile
* @Pramas WeaponFireBoltParams
* @NativeName: FireWeaponBolt_Script
* @NativeFunctionAddress 0000000141020FA0
*/

var function FireWeaponBolt()

/*
* @Breif Fires a bolt projectile and returns the entity to script
* @Pramas WeaponFireBoltParams
* @NativeName: FireWeaponBoltAndReturnEntity_Script
* @NativeFunctionAddress 0000000141020FF0
*/

var function FireWeaponBoltAndReturnEntity()

/*
* @Breif Fires the weapon once as per weaponsettings, in a scaled blast pattern (if one is specified).
* @Pramas vector pos, vector dir, float speed, float patternScale, bool ignoreSpread
* @NativeName: FireWeapon_Default_Script
* @NativeFunctionAddress 0000000141021040
*/

var function FireWeapon_Default()

/*
* @Breif Fires a grenade projectile
* @Pramas WeaponFireGrenadeParams
* @NativeName: FireWeaponGrenade_Script
* @NativeFunctionAddress 0000000141021090
*/

var function FireWeaponGrenade()

/*
* @Breif Fires a missile projectile
* @Pramas WeaponFireMissileParams
* @NativeName: FireWeaponMissile_Script
* @NativeFunctionAddress 00000001410210E0
*/

var function FireWeaponMissile()

/*
* @Breif Get an array of mods active on this weapon.
* @Pramas 
* @NativeName: GetMods_Script
* @NativeFunctionAddress 0000000141021130
*/

var function GetMods()

/*
* @Breif Get an array of mods active or queued on this weapon.
* @Pramas 
* @NativeName: GetMods_WithQueued_Script
* @NativeFunctionAddress 0000000141021180
*/

var function GetMods_WithQueued()

/*
* @Breif Reset and apply active mods on a weapon.
* @Pramas array< string > mods
* @NativeName: SetMods_Script
* @NativeFunctionAddress 00000001410211D0
*/

var function SetMods()

/*
* @Breif Get all pending realtime mod commands. +mod_name/-mod_name for add/remove.
* @Pramas 
* @NativeName: Script_RealtimeMod_GetPendingCommands
* @NativeFunctionAddress 0000000141021220
*/

var function RealtimeMod_GetPendingCommands()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingInt
* @NativeFunctionAddress 0000000141021270
*/

var function GetWeaponSettingInt()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar, table enumType
* @NativeName: Script_GetWeaponSettingEnum
* @NativeFunctionAddress 0000000141021320
*/

var function GetWeaponSettingEnum()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingFloat
* @NativeFunctionAddress 0000000141021370
*/

var function GetWeaponSettingFloat()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingBool
* @NativeFunctionAddress 0000000141021420
*/

var function GetWeaponSettingBool()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingVector
* @NativeFunctionAddress 00000001410214D0
*/

var function GetWeaponSettingVector()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingString
* @NativeFunctionAddress 0000000141021580
*/

var function GetWeaponSettingString()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingAsset
* @NativeFunctionAddress 0000000141021630
*/

var function GetWeaponSettingAsset()

/*
* @Breif Detach the end of the zipline (so it becomes a vine)
* @Pramas 
* @NativeName: Zipline_DetachEnd
* @NativeFunctionAddress 0000000140FE0810
*/

void function Zipline_DetachEnd()

/*
* @Breif Whether the zipline is usable
* @Pramas 
* @NativeName: Zipline_IsEnabled
* @NativeFunctionAddress 0000000140FE07B0
*/

bool function Zipline_IsEnabled()

/*
* @Breif Whether the end of the zipline is detached (or will be if used)
* @Pramas 
* @NativeName: Zipline_IsEndDetachedScript
* @NativeFunctionAddress 0000000140FE0720
*/

bool function Zipline_IsEndDetached()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_IsVertical
* @NativeFunctionAddress 0000000140FE06B0
*/

bool function Zipline_IsVertical()

/*
* @Breif Make zipline unusable
* @Pramas 
* @NativeName: Zipline_Enable
* @NativeFunctionAddress 0000000140FE0630
*/

void function Zipline_Enable()

/*
* @Breif Make zipline usable
* @Pramas 
* @NativeName: Zipline_Disable
* @NativeFunctionAddress 0000000140FE05B0
*/

void function Zipline_Disable()

/*
* @Breif Allow using the initial rest positions (_zipline_rest_point_*)
* @Pramas 
* @NativeName: Zipline_EnableResting
* @NativeFunctionAddress 0000000140FE0550
*/

void function Zipline_EnableResting()

/*
* @Breif Disallow using the initial rest positions (_zipline_rest_point_*)
* @Pramas 
* @NativeName: Zipline_DisableResting
* @NativeFunctionAddress 0000000140FE04F0
*/

void function Zipline_DisableResting()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_WakeUp
* @NativeFunctionAddress 0000000140FE0480
*/

void function Zipline_WakeUp()

/*
* @Breif Gets the weapon classname that fired this projectile.
* @Pramas 
* @NativeName: ProjectileGetWeaponClassName_Script
* @NativeFunctionAddress 0000000140FE30D0
*/

string function ProjectileGetWeaponClassName()

/*
* @Breif Sets whether the projectile has been refired from the vortex; affects which script is run.
* @Pramas bool
* @NativeName: SetVortexRefired
* @NativeFunctionAddress 0000000140FE3070
*/

void function SetVortexRefired(bool)

/*
* @Breif Set whether projectile should do damage to alive entities only
* @Pramas bool
* @NativeName: DamageAliveOnly
* @NativeFunctionAddress 0000000140FE3010
*/

void function DamageAliveOnly(bool)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string
* @NativeName: Script_ProjectileGetWeaponInfoFileKeyField
* @NativeFunctionAddress 0000000140FE2EA0
*/

var function ProjectileGetWeaponInfoFileKeyField(string)

/*
* @Breif Resolves a string key to its asset in this weapons info file.
* @Pramas string
* @NativeName: ProjectileGetWeaponInfoFileKeyFieldAsset
* @NativeFunctionAddress 0000000140FE2E00
*/

asset function ProjectileGetWeaponInfoFileKeyFieldAsset(string)

/*
* @Breif Gets a weapons charge level returns 0 if not a charge weapon or has 0 charge
* @Pramas 
* @NativeName: ProjectileGetWeaponChargeLevel
* @NativeFunctionAddress 0000000140FE2D50
*/

int function ProjectileGetWeaponChargeLevel()

/*
* @Breif Get the damage amount this projectile's weapon should do to a titan that the player is rodeoing.
* @Pramas 
* @NativeName: ProjectileGetRodeoDamage_Script
* @NativeFunctionAddress 0000000140FE2C90
*/

int function ProjectileGetRodeoDamage()

/*
* @Breif Force projectile to act as if the 'adjust_to_gun_barrel' weapon setting had been set to false.
* @Pramas bool
* @NativeName: ForceAdjustToGunBarrelDisabled_Script
* @NativeFunctionAddress 0000000140FE2C00
*/

void function ForceAdjustToGunBarrelDisabled(bool)

/*
* @Breif Returns the time the projectile was created by the player
* @Pramas 
* @NativeName: GetProjectileCreationTime
* @NativeFunctionAddress 0000000140FE2B50
*/

float function GetProjectileCreationTime()

/*
* @Breif Return the time the projectile was created on the server
* @Pramas 
* @NativeName: GetProjectileCreationTimeServer
* @NativeFunctionAddress 0000000140FE2AA0
*/

float function GetProjectileCreationTimeServer()

/*
* @Breif Specify which of the weapon's "projectile_trail_effect_#" settings this projectile should use.
* @Pramas int
* @NativeName: SetProjectilTrailEffectIndex_Script
* @NativeFunctionAddress 0000000140FE29E0
*/

void function SetProjectilTrailEffectIndex(int)

/*
* @Breif Sets how long the projectile is alive for 0 is infinite or until it collides
* @Pramas float
* @NativeName: SetProjectileLifetime_Script
* @NativeFunctionAddress 0000000140FE2860
*/

void function SetProjectileLifetime(float)

/*
* @Breif Sets how far the projectile can travel for 0 is infinite or until it collides
* @Pramas float
* @NativeName: SetProjectileDestructionDistance_Script
* @NativeFunctionAddress 0000000140FE27B0
*/

void function SetProjectileDestructionDistance(float)

/*
* @Breif Gets how long before the lifetime of the projectile is up.
* @Pramas 
* @NativeName: GetTimeToProjectileDeath_Script
* @NativeFunctionAddress 0000000140FE26F0
*/

float function GetTimeToProjectileDeath()

/*
* @Breif Gets whether or not this projectile allows headshots
* @Pramas 
* @NativeName: Script_GetAllowHeadShots
* @NativeFunctionAddress 0000000140FE2690
*/

bool function GetProjectileAllowHeadShots()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetReducedEffects
* @NativeFunctionAddress 0000000140FE2640
*/

void function SetReducedEffects()

/*
* @Breif Set the impact FX table to use for collisions.
* @Pramas int
* @NativeName: SetImpactEffectTable_Script
* @NativeFunctionAddress 0000000140FE2580
*/

void function SetImpactEffectTable(int)

/*
* @Breif Set projectile's speed
* @Pramas float
* @NativeName: SetProjectileSpeed
* @NativeFunctionAddress 0000000140FE2510
*/

void function SetProjectileSpeed(float)

/*
* @Breif Get projectile's speed
* @Pramas 
* @NativeName: GetProjectileSpeed
* @NativeFunctionAddress 0000000140FE2460
*/

float function GetProjectileSpeed()

/*
* @Breif Returns reference to the weapon that fired this projectile
* @Pramas 
* @NativeName: GetWeaponSource
* @NativeFunctionAddress 0000000140FE23D0
*/

entity function GetWeaponSource()

/*
* @Breif 
* @Pramas float damage
* @NativeName: Script_SetProjectileImpactDamageOverride
* @NativeFunctionAddress 0000000140FE2360
*/

void function SetProjectileImpactDamageOverride(float damage)

/*
* @Breif Set the weapon classname that this projectile will report.
* @Pramas string
* @NativeName: SetWeaponClassName_Script
* @NativeFunctionAddress 0000000140FE22F0
*/

bool function SetWeaponClassName(string)

/*
* @Breif Get the damagesourceID set on this projectile.
* @Pramas 
* @NativeName: ProjectileGetDamageSourceID_Script
* @NativeFunctionAddress 0000000140FE2240
*/

int function ProjectileGetDamageSourceID()

/*
* @Breif Set the damagesourceID set on this projectile.
* @Pramas int
* @NativeName: ProjectileSetDamageSourceID_Script
* @NativeFunctionAddress 0000000140FE21D0
*/

void function ProjectileSetDamageSourceID(int)

/*
* @Breif Given (string), returns true if mod is active on this weapon.
* @Pramas string
* @NativeName: HasMod_Script
* @NativeFunctionAddress 0000000140FE2160
*/

bool function HasWeaponMod(string)

/*
* @Breif Get an array of mods active on the weapon that shot this projectile.
* @Pramas 
* @NativeName: ProjectileGetMods_Script
* @NativeFunctionAddress 0000000140FDFC40
*/

var function ProjectileGetMods()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingInt
* @NativeFunctionAddress 0000000140FDFC90
*/

var function GetProjectileWeaponSettingInt()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingFloat
* @NativeFunctionAddress 0000000140FDFCE0
*/

var function GetProjectileWeaponSettingFloat()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingBool
* @NativeFunctionAddress 0000000140FDFD30
*/

var function GetProjectileWeaponSettingBool()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingVector
* @NativeFunctionAddress 0000000140FDFD80
*/

var function GetProjectileWeaponSettingVector()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingString
* @NativeFunctionAddress 0000000140FDFDD0
*/

var function GetProjectileWeaponSettingString()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingAsset
* @NativeFunctionAddress 0000000140FDFE20
*/

var function GetProjectileWeaponSettingAsset()

/*
* @Breif Set missile's damage
* @Pramas float
* @NativeName: SetDamage
* @NativeFunctionAddress 0000000140FE1370
*/

void function SetDamage(float)

/*
* @Breif Set missile's inner and outer explosion radius
* @Pramas float, float
* @NativeName: SetExplosionRadius
* @NativeFunctionAddress 0000000140FE12E0
*/

void function SetExplosionRadius(float, float)

/*
* @Breif Set missile's homing speed
* @Pramas float, float
* @NativeName: SetHomingSpeeds
* @NativeFunctionAddress 0000000140FE1250
*/

void function SetHomingSpeeds(float, float)

/*
* @Breif Get missile's homing speed
* @Pramas 
* @NativeName: GetHomingSpeed
* @NativeFunctionAddress 0000000140BCA010
*/

float function GetHomingSpeed()

/*
* @Breif Get missile's homing speed -vs- dodging players.
* @Pramas 
* @NativeName: GetHomingSpeedAtDodgingPlayer
* @NativeFunctionAddress 0000000140FE11A0
*/

float function GetHomingSpeedAtDodgingPlayer()

/*
* @Breif Set missile's homing target. If the missile's target position is set that will be used instead.
* @Pramas entity, vector
* @NativeName: SetTarget_Script
* @NativeFunctionAddress 0000000140FE1020
*/

void function SetMissileTarget(entity, vector)

/*
* @Breif Get missile's homing target
* @Pramas 
* @NativeName: GetMissileTarget
* @NativeFunctionAddress 0000000140FE0F90
*/

entity function GetMissileTarget()

/*
* @Breif Sets the missile's target homing position. This will override any target entity.
* @Pramas vector
* @NativeName: SetTargetPosition
* @NativeFunctionAddress 0000000140FE0F30
*/

void function SetMissileTargetPosition(vector)

/*
* @Breif Gets the missile's target homing position. This may be garbage if not at first set.
* @Pramas 
* @NativeName: GetTargetPosition
* @NativeFunctionAddress 0000000140FE0ED0
*/

vector function GetMissileTargetPosition()

/*
* @Breif Clears the missile's target homing position.
* @Pramas 
* @NativeName: ClearTargetPosition
* @NativeFunctionAddress 0000000140FE0E40
*/

void function ClearMissileTargetPosition()

/*
* @Breif Self-destruct.
* @Pramas 
* @NativeName: MissileExplode_Script
* @NativeFunctionAddress 0000000140FE0DE0
*/

void function MissileExplode()

/*
* @Breif Init missile drift settings from weapon settings
* @Pramas vector, vector
* @NativeName: InitMissileForRandomDriftFromWeaponSettings
* @NativeFunctionAddress 0000000140FE0D80
*/

void function InitMissileForRandomDriftFromWeaponSettings(vector, vector)

/*
* @Breif Init missile drift with custom settings
* @Pramas vector, vector, float, float, float, float, float, float, float
* @NativeName: InitMissileForRandomDrift
* @NativeFunctionAddress 0000000140FE0BA0
*/

void function InitMissileForRandomDrift(vector, vector, float, float, float, float, float, float, float)

/*
* @Breif Init missile path expand contract settings
* @Pramas vector, vector, float, float, float, float, vector, bool
* @NativeName: InitMissileExpandContract
* @NativeFunctionAddress 0000000140FE0AB0
*/

void function InitMissileExpandContract(vector, vector, float, float, float, float, vector, bool)

/*
* @Breif Apply missile drift to velocity
* @Pramas float, float
* @NativeName: ApplyMissileControlledDrift
* @NativeFunctionAddress 0000000140FE0940
*/

vector function ApplyMissileControlledDrift(float, float)

/*
* @Breif Init spiralling missile
* @Pramas vector, vector, int, bool, bool
* @NativeName: InitMissileSpiral
* @NativeFunctionAddress 0000000140FE08B0
*/

void function InitMissileSpiral(vector, vector, int, bool, bool)

/*
* @Breif Sets max number of ricochet's a bolt can do
* @Pramas int
* @NativeName: Script_SetRicochetMaxCount
* @NativeFunctionAddress 0000000140FE13E0
*/

void function SetRicochetMaxCount(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetBulletAbsorbedCount
* @NativeFunctionAddress 0000000140FE1AB0
*/

int function GetBulletAbsorbedCount()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetProjectileAbsorbedCount
* @NativeFunctionAddress 0000000140FE1A00
*/

int function GetProjectileAbsorbedCount()

/*
* @Breif Set the weapon entity that owns this vortex sphere.
* @Pramas entity
* @NativeName: SetOwnerWeapon_Script
* @NativeFunctionAddress 0000000140FE1980
*/

void function SetOwnerWeapon(entity)

/*
* @Breif sets the particle effect of the vortex sphere.
* @Pramas entity
* @NativeName: SetVortexEffect_Script
* @NativeFunctionAddress 0000000140FE1880
*/

void function SetVortexEffect(entity)

/*
* @Breif sets local angles on the effect of the vortex
* @Pramas vector
* @NativeName: SetLocalVortexAngles_Script
* @NativeFunctionAddress 0000000140FE17A0
*/

void function SetLocalVortexAngles(vector)

/*
* @Breif sets the attachment for the gun
* @Pramas string
* @NativeName: SetGunVortexAttachment_Script
* @NativeFunctionAddress 0000000140FE1740
*/

void function SetGunVortexAttachment(string)

/*
* @Breif Get the weapon entity that owns this vortex sphere.
* @Pramas 
* @NativeName: GetOwnerWeapon_Script
* @NativeFunctionAddress 0000000140FE16B0
*/

entity function GetOwnerWeapon()

/*
* @Breif Add a single bullet to the sphere
* @Pramas 
* @NativeName: AddBulletToSphere_Script
* @NativeFunctionAddress 0000000140FE1660
*/

void function AddBulletToSphere()

/*
* @Breif Add a single projectile to the sphere.
* @Pramas 
* @NativeName: AddProjectileToSphere
* @NativeFunctionAddress 0000000140FE1610
*/

void function AddProjectileToSphere()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ClearAllBulletsFromSphere
* @NativeFunctionAddress 0000000140FE1580
*/

void function ClearAllBulletsFromSphere()

/*
* @Breif Allows npc's to target behind vortex sphere
* @Pramas 
* @NativeName: Script_DisableVortexBlockLOS
* @NativeFunctionAddress 0000000140FE14F0
*/

void function DisableVortexBlockLOS()

/*
* @Breif Remove a single bullet from the sphere.
* @Pramas 
* @NativeName: RemoveBulletFromSphere
* @NativeFunctionAddress 0000000140FE14A0
*/

void function RemoveBulletFromSphere()

/*
* @Breif Remove a single projectile from the sphere.
* @Pramas 
* @NativeName: RemoveProjectileFromSphere
* @NativeFunctionAddress 0000000140FE1450
*/

void function RemoveProjectileFromSphere()

/*
* @Breif Sets the aim direction of the turret (while there is no player controlling)
* @Pramas float, float
* @NativeName: ScriptAimTurret
* @NativeFunctionAddress 0000000140FE1C70
*/

void function AimTurret(float, float)

/*
* @Breif Set the collision volume to a sphere shape.
* @Pramas float
* @NativeName: ScriptSetSphere
* @NativeFunctionAddress 0000000140FE20F0
*/

void function SetSphere(float)

/*
* @Breif Set the collision volume to an obb shape.
* @Pramas vector, vector
* @NativeName: ScriptSetBox
* @NativeFunctionAddress 0000000140FE2090
*/

void function SetBox(vector, vector)

/*
* @Breif Gets the forward direction of the window
* @Pramas 
* @NativeName: GetNormal
* @NativeFunctionAddress 0000000140FE3BF0
*/

vector function GetNormal()

/*
* @Breif Gets the sideways direction of the window
* @Pramas 
* @NativeName: GetRight
* @NativeFunctionAddress 0000000140FE3B20
*/

vector function GetRight()

/*
* @Breif Gets half the width of the window
* @Pramas 
* @NativeName: GetHalfWidth
* @NativeFunctionAddress 0000000140FE3A70
*/

float function GetHalfWidth()

/*
* @Breif Gets half the height of the window
* @Pramas 
* @NativeName: GetHalfHeight
* @NativeFunctionAddress 0000000140FE39C0
*/

float function GetHalfHeight()

/*
* @Breif 
* @Pramas 
* @NativeName: Hide
* @NativeFunctionAddress 0000000140FE3D10
*/

void function HideFirstPersonProxy()

/*
* @Breif 
* @Pramas 
* @NativeName: Show
* @NativeFunctionAddress 0000000140FE3CC0
*/

void function ShowFirstPersonProxy()

/*
* @Breif Gets the type of the hint, such as "window" or "door"
* @Pramas 
* @NativeName: ScriptGetHintType
* @NativeFunctionAddress 0000000140F383E0
*/

string function GetHintType()

/*
* @Breif Gets the Generic Hint for "generic" hint types
* @Pramas 
* @NativeName: ScriptGetHintGenericType
* @NativeFunctionAddress 0000000140F38350
*/

string function GetHintGenericType()

/*
* @Breif Sets whether or not any AI can use this hint
* @Pramas bool
* @NativeName: ScriptSetHintDisabled
* @NativeFunctionAddress 0000000140F382F0
*/

void function SetHintDisabled(bool)

/*
* @Breif Will also activate the vehicle
* @Pramas entity
* @NativeName: Script_VehicleSetDriver
* @NativeFunctionAddress 0000000140E65D00
*/

void function VehicleSetDriver(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: VehicleRemoveDriver
* @NativeFunctionAddress 0000000140E65CB0
*/

void function VehicleRemoveDriver()

/*
* @Breif 
* @Pramas entity
* @NativeName: VehicleIsDriver
* @NativeFunctionAddress 0000000140E65BF0
*/

bool function VehicleIsDriver(entity)

/*
* @Breif Will also activate the vehicle
* @Pramas entity
* @NativeName: Script_VehicleAddPassenger
* @NativeFunctionAddress 0000000140E65B70
*/

void function VehicleAddPassenger(entity)

/*
* @Breif Returns true if removed passenger successfully
* @Pramas entity
* @NativeName: Script_VehicleRemovePassenger
* @NativeFunctionAddress 0000000140E65AF0
*/

bool function VehicleRemovePassenger(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_VehicleGetDriver
* @NativeFunctionAddress 0000000140E65A60
*/

entity function VehicleGetDriver()

/*
* @Breif Checks driver and passengers
* @Pramas entity
* @NativeName: Script_IsPlayerInVehicle
* @NativeFunctionAddress 0000000140E659E0
*/

bool function IsPlayerInVehicle(entity)

/*
* @Breif Does not include driver
* @Pramas 
* @NativeName: VehicleGetPlayerCount
* @NativeFunctionAddress 0000000140E65930
*/

int function VehicleGetPlayerCount()

/*
* @Breif Determines whether driver can launch the drop pod in aiming mode
* @Pramas 
* @NativeName: VehicleGetLaunchable
* @NativeFunctionAddress 0000000140E658D0
*/

bool function VehicleGetLaunchable()

/*
* @Breif Determines whether driver can launch the drop pod in aiming mode
* @Pramas bool
* @NativeName: VehicleSetLaunchable
* @NativeFunctionAddress 0000000140E65830
*/

void function VehicleSetLaunchable(bool)

/*
* @Breif Sets the vehicle to be script controlled and have no predicted controls
* @Pramas bool
* @NativeName: VehicleSetScriptControlled
* @NativeFunctionAddress 0000000140E65790
*/

void function VehicleSetScriptControlled(bool)

/*
* @Breif Sets the type of vehicle this is for movement
* @Pramas int
* @NativeName: VehicleSetType
* @NativeFunctionAddress 0000000140E656F0
*/

void function VehicleSetType(int)

/*
* @Breif Plays a sound on a given entity for all players in the vehicle. Unreliable (may be dropped if network traffit is too high).
* @Pramas entity, string
* @NativeName: Script_VehiclePlaySoundOnEntityForOccupants
* @NativeFunctionAddress 0000000140E65670
*/

void function VehiclePlaySoundOnEntityForOccupants(entity, string)

/*
* @Breif Plays a sound on a given entity for all players in the vehicle. Reliable (will keep sending sound command until client receives it).
* @Pramas entity, string
* @NativeName: Script_VehiclePlayReliableSoundOnEntityForOccupants
* @NativeFunctionAddress 0000000140E655F0
*/

void function VehiclePlayReliableSoundOnEntityForOccupants(entity, string)

/*
* @Breif Plays a sound on a given entity for all players not in the vehicle
* @Pramas entity, string
* @NativeName: VehiclePlaySoundOnEntityForNonOccupants
* @NativeFunctionAddress 0000000140E65570
*/

void function VehiclePlaySoundOnEntityForNonOccupants(entity, string)

/*
* @Breif Plays particle effect on the vehicle for all players in the vehicle. Unreliable (may be dropped if network traffit is too high).
* @Pramas int, int, int
* @NativeName: Script_VehiclePlayParticleEffectForOccupants
* @NativeFunctionAddress 0000000140E654D0
*/

void function VehiclePlayParticleEffectForOccupants(int, int, int)

/*
* @Breif Plays particle effect on the vehicle for all players in the vehicle. Reliable (will keep sending command until client receives it).
* @Pramas int, int, int
* @NativeName: Script_VehiclePlayReliableParticleEffectForOccupants
* @NativeFunctionAddress 0000000140E65430
*/

void function VehiclePlayReliableParticleEffectForOccupants(int, int, int)

/*
* @Breif Plays particle effect on the vehicle for all players not in the vehicle
* @Pramas int, int, int
* @NativeName: VehiclePlayParticleEffectForNonOccupants
* @NativeFunctionAddress 0000000140E65390
*/

void function VehiclePlayParticleEffectForNonOccupants(int, int, int)

/*
* @Breif Removes all players (driver AND passengers)
* @Pramas 
* @NativeName: VehicleRemoveAllPlayers
* @NativeFunctionAddress 0000000140E65340
*/

void function VehicleRemoveAllPlayers()

/*
* @Breif Sets the view offset vector from camera to vehicle
* @Pramas vector
* @NativeName: Script_VehicleSetViewOffset
* @NativeFunctionAddress 0000000140E65240
*/

void function VehicleSetViewOffset(vector)

/*
* @Breif Stops the vehicle from updating (stops movement, aiming, etc)
* @Pramas 
* @NativeName: Script_VehicleDeactivate
* @NativeFunctionAddress 0000000140E651B0
*/

void function VehicleDeactivate()

/*
* @Breif Forces the vehicle to be launched. MUST have driver to call this
* @Pramas 
* @NativeName: Script_VehicleForceLaunch
* @NativeFunctionAddress 0000000140E65160
*/

void function VehicleForceLaunch()

/*
* @Breif Returns true if the vehicle has been launched
* @Pramas 
* @NativeName: Script_VehicleHasLaunched
* @NativeFunctionAddress 0000000140E650D0
*/

bool function VehicleHasLaunched()

/*
* @Breif Sets the local eye angles of a vehicle
* @Pramas vector
* @NativeName: Script_Vehicle_SetEyeAngles
* @NativeFunctionAddress 0000000140E65070
*/

void function Vehicle_SetEyeAngles(vector)

/*
* @Breif Gets the internal speed of the vehicle
* @Pramas 
* @NativeName: Script_GetVehicleVelocity
* @NativeFunctionAddress 0000000140E64FA0
*/

vector function GetVehicleVelocity()

/*
* @Breif Get array of all players in this vehicle
* @Pramas 
* @NativeName: Script_VehicleGetPlayerArray
* @NativeFunctionAddress 0000000140E5DBE0
*/

var function VehicleGetPlayerArray()

/*
* @Breif Tests if the trigger contains a given point.
* @Pramas vector
* @NativeName: ScriptContainsPoint
* @NativeFunctionAddress 0000000140E66C20
*/

bool function ContainsPoint(vector)

/*
* @Breif Tests if the trigger contains a given bounding hull.
* @Pramas vector, vector, vector
* @NativeName: ScriptContainsHull
* @NativeFunctionAddress 0000000140E66BB0
*/

bool function ContainsHull(vector, vector, vector)

/*
* @Breif Tests if the trigger contains a given entity.
* @Pramas entity
* @NativeName: ScriptIsTouching
* @NativeFunctionAddress 0000000140E66B00
*/

bool function IsTouching(entity)

/*
* @Breif Tests if the trigger is being touched by any entity that can trigger it.
* @Pramas 
* @NativeName: ScriptIsTouched
* @NativeFunctionAddress 0000000140E66A90
*/

bool function IsTouched()

/*
* @Breif Sets whether or not phase shifted players can touch this trigger.
* @Pramas bool
* @NativeName: ScriptSetPhaseShiftCanTouch
* @NativeFunctionAddress 0000000140E669F0
*/

void function SetPhaseShiftCanTouch(bool)

/*
* @Breif Sets whether or not non phase shifted players can touch this trigger.
* @Pramas bool
* @NativeName: ScriptSetNonPhaseShiftCanTouch
* @NativeFunctionAddress 0000000140E66950
*/

void function SetNonPhaseShiftCanTouch(bool)

/*
* @Breif Enable the trigger
* @Pramas 
* @NativeName: Enable
* @NativeFunctionAddress 0000000140E66900
*/

void function Enable()

/*
* @Breif Disable the trigger
* @Pramas 
* @NativeName: Disable
* @NativeFunctionAddress 0000000140E668B0
*/

void function Disable()

/*
* @Breif Returns true if the trigger is enabled
* @Pramas 
* @NativeName: IsEnabled
* @NativeFunctionAddress 0000000140E66840
*/

bool function IsEnabled()

/*
* @Breif Force trigger to search for entities touching it. Needed when spawning in a new trigger.
* @Pramas 
* @NativeName: SearchForNewTouchingEntity
* @NativeFunctionAddress 0000000140E667F0
*/

void function SearchForNewTouchingEntity()

/*
* @Breif Get array of touching entities
* @Pramas 
* @NativeName: ScriptGetTouchingEntities
* @NativeFunctionAddress 0000000140E5DAF0
*/

var function GetTouchingEntities()

/*
* @Breif Sets a function to be called when an entity enters the trigger.
* @Pramas void functionref( entity trig, entity ent )
* @NativeName: Script_SetEnterCallback
* @NativeFunctionAddress 0000000140E5DB40
*/

var function SetEnterCallback()

/*
* @Breif Sets a function to be called when an entity leaves the trigger.
* @Pramas void functionref( entity trig, entity ent )
* @NativeName: Script_SetLeaveCallback
* @NativeFunctionAddress 0000000140E5DB90
*/

var function SetLeaveCallback()

/*
* @Breif Get the cylinder's radius
* @Pramas 
* @NativeName: GetRadius
* @NativeFunctionAddress 0000000140E66740
*/

float function GetRadius()

/*
* @Breif Set the cylinder's radius
* @Pramas float
* @NativeName: SetRadius
* @NativeFunctionAddress 0000000140E666D0
*/

void function SetRadius(float)

/*
* @Breif Get the cylinder's height above its origin
* @Pramas 
* @NativeName: GetAboveHeight
* @NativeFunctionAddress 0000000140E66620
*/

float function GetAboveHeight()

/*
* @Breif Set the cylinder's height extending upward from its origin.
* @Pramas float
* @NativeName: SetAboveHeight
* @NativeFunctionAddress 0000000140E665B0
*/

void function SetAboveHeight(float)

/*
* @Breif Get the cylinder's height below its origin
* @Pramas 
* @NativeName: GetBelowHeight
* @NativeFunctionAddress 0000000140E66500
*/

float function GetBelowHeight()

/*
* @Breif Set the cylinder's height extending downward from its origin.
* @Pramas float
* @NativeName: SetBelowHeight
* @NativeFunctionAddress 0000000140E66490
*/

void function SetBelowHeight(float)

/*
* @Breif Checks for a line of sight to touching entities and signals "TouchVisible" if one succeeds
* @Pramas 
* @NativeName: CheckForLOS
* @NativeFunctionAddress 0000000140E66420
*/

void function CheckForLOS()

/*
* @Breif Set gravity parameters. (pull inner radius, pull outer radius, reduce speed inner radius, reduce speed outer radius, pull accel, pull speed)
* @Pramas float, float, float, float, float, float
* @NativeName: SetParams
* @NativeFunctionAddress 0000000140E65D80
*/

void function SetParams(float, float, float, float, float, float)

/*
* @Breif Set the cylinder's launch values
* @Pramas float, float
* @NativeName: SetLaunchScaleValues
* @NativeFunctionAddress 0000000140E66390
*/

void function SetLaunchScaleValues(float, float)

/*
* @Breif Set the cylinder's punch values for launching players
* @Pramas float, float, float
* @NativeName: SetViewPunchValues
* @NativeFunctionAddress 0000000140E662F0
*/

void function SetViewPunchValues(float, float, float)

/*
* @Breif Sets the launch dir of a jump pad
* @Pramas vector
* @NativeName: SetLaunchDir
* @NativeFunctionAddress 0000000140E66210
*/

void function SetLaunchDir(vector)

/*
* @Breif Sets the type of trigger this is
* @Pramas int
* @NativeName: SetTriggerType
* @NativeFunctionAddress 0000000140E66170
*/

void function SetTriggerType(int)

/*
* @Breif Sets the start and end of a tesla trap
* @Pramas entity, entity, vector, float
* @NativeName: SetTeslaLink
* @NativeFunctionAddress 0000000140E660B0
*/

void function SetTeslaLink(entity, entity, vector, float)

/*
* @Breif Sets the custom vertical override used for a variety of things
* @Pramas float
* @NativeName: SetVertOverride
* @NativeFunctionAddress 0000000140E66000
*/

void function SetVertOverride(float)

/*
* @Breif Sets how long the tesla trap is obstructed for
* @Pramas float
* @NativeName: SetObstructedEndTime
* @NativeFunctionAddress 0000000140E65F90
*/

void function SetObstructedEndTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetObstructedEndTime
* @NativeFunctionAddress 0000000140E65EE0
*/

float function GetObstructedEndTime()

/*
* @Breif Sets trigger to use point collision for detection
* @Pramas 
* @NativeName: UsePointCollision
* @NativeFunctionAddress 0000000140E65E80
*/

void function UsePointCollision()

/*
* @Breif Determines whether the spawnpoint is visible to any enemy players of the given team
* @Pramas int
* @NativeName: ScriptIsVisibleToEnemies
* @NativeFunctionAddress 0000000140E67300
*/

bool function IsVisibleToEnemies(int)

/*
* @Breif Returns the nearby enemies scored by distance using spawnpoint_near_dist and spawnpoint_far_dist
* @Pramas int, string
* @NativeName: ScriptNearbyEnemyScore
* @NativeFunctionAddress 0000000140E67230
*/

float function NearbyEnemyScore(int, string)

/*
* @Breif Returns the distance of the nearest enemy
* @Pramas int, string
* @NativeName: ScriptNearestEnemyDistance
* @NativeFunctionAddress 0000000140E67160
*/

float function NearbyEnemyDistance(int, string)

/*
* @Breif Returns the nearby allies scored by distance using spawnpoint_near_dist and spawnpoint_far_dist
* @Pramas int, string
* @NativeName: ScriptNearbyAllyScore
* @NativeFunctionAddress 0000000140E67090
*/

float function NearbyAllyScore(int, string)

/*
* @Breif Returns the distance of the nearest ally
* @Pramas int, string
* @NativeName: ScriptNearestAllyDistance
* @NativeFunctionAddress 0000000140E66FC0
*/

float function NearbyAllyDistance(int, string)

/*
* @Breif Calculate the final rating and with additional value from script
* @Pramas int, int, float, float
* @NativeName: CalculateRating
* @NativeFunctionAddress 0000000140E66EB0
*/

float function CalculateRating(int, int, float, float)

/*
* @Breif Calculate the final rating, but don't use or modify saved state from earlier calls this frame
* @Pramas int, int, float, float
* @NativeName: CalculateRatingDontCache
* @NativeFunctionAddress 0000000140E66DA0
*/

float function CalculateRatingDontCache(int, int, float, float)

/*
* @Breif Calculate frontline rating
* @Pramas 
* @NativeName: CalculateFrontlineRating
* @NativeFunctionAddress 0000000140E66CF0
*/

float function CalculateFrontlineRating()

/*
* @Breif Determines whether any entities are inside of this spawnpoint
* @Pramas 
* @NativeName: ScriptIsOccupied
* @NativeFunctionAddress 0000000140E66C90
*/

bool function IsOccupied()

/*
* @Breif Returns table of spawn point rating data
* @Pramas 
* @NativeName: ScriptGetRatingData
* @NativeFunctionAddress 0000000140E5D410
*/

table function GetRatingData(var)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetHardpointState
* @NativeFunctionAddress 0000000140E67EA0
*/

void function SetHardpointState(int)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetHardpointEstimatedCaptureTime
* @NativeFunctionAddress 0000000140E67DF0
*/

void function SetHardpointEstimatedCaptureTime(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetHardpointProgressRefPoint
* @NativeFunctionAddress 0000000140E67D40
*/

void function SetHardpointProgressRefPoint(float)

/*
* @Breif 
* @Pramas int, int
* @NativeName: Script_SetHardpointAICount
* @NativeFunctionAddress 0000000140E67CC0
*/

void function SetHardpointAICount(int, int)

/*
* @Breif 
* @Pramas int, int
* @NativeName: Script_SetHardpointPlayerCount
* @NativeFunctionAddress 0000000140E67C40
*/

void function SetHardpointPlayerCount(int, int)

/*
* @Breif 
* @Pramas int, int
* @NativeName: Script_SetHardpointPlayerTitanCount
* @NativeFunctionAddress 0000000140E67BC0
*/

void function SetHardpointPlayerTitanCount(int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointState
* @NativeFunctionAddress 0000000140C8B040
*/

int function GetHardpointState()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointEstimatedCaptureTime
* @NativeFunctionAddress 0000000140E67B10
*/

float function GetHardpointEstimatedCaptureTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointProgressRefPoint
* @NativeFunctionAddress 0000000140E67A60
*/

float function GetHardpointProgressRefPoint()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointAICount
* @NativeFunctionAddress 0000000140E67970
*/

int function GetHardpointAICount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointPlayerCount
* @NativeFunctionAddress 0000000140E67880
*/

int function GetHardpointPlayerCount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointPlayerTitanCount
* @NativeFunctionAddress 0000000140E67790
*/

int function GetHardpointPlayerTitanCount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetHardpointID
* @NativeFunctionAddress 0000000140D24050
*/

void function SetHardpointID(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetHardpointID
* @NativeFunctionAddress 0000000140D23FA0
*/

int function GetHardpointID()

/*
* @Breif 
* @Pramas entity
* @NativeName: SetTerminal
* @NativeFunctionAddress 0000000140E67690
*/

void function SetTerminal(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTerminal
* @NativeFunctionAddress 0000000140E67600
*/

entity function GetTerminal()

/*
* @Breif Spawn the entity associated with this spawner
* @Pramas 
* @NativeName: SpawnEntity
* @NativeFunctionAddress 0000000140E68220
*/

entity function SpawnEntity()

/*
* @Breif Return the number of times SpawnEntity() has been called
* @Pramas 
* @NativeName: GetSpawnCount
* @NativeFunctionAddress 0000000140C8B040
*/

int function GetSpawnCount()

/*
* @Breif Set a script callback that will be called each time this spawner spawns something
* @Pramas void functionref( entity spawned ) spawnCallback
* @NativeName: SetSpawnCallback
* @NativeFunctionAddress 0000000140E681A0
*/

void function SetSpawnCallback(void functionref( entity spawned ) spawnCallback)

/*
* @Breif Return the class name of the entity that will be spawned by this spawner
* @Pramas 
* @NativeName: GetSpawnEntityClassName
* @NativeFunctionAddress 0000000140E68100
*/

string function GetSpawnEntityClassName()

/*
* @Breif Return a table of the key-values that will be applied to the spawned entity
* @Pramas 
* @NativeName: GetSpawnEntityKeyValues
* @NativeFunctionAddress 0000000140E68030
*/

table function GetSpawnEntityKeyValues()

/*
* @Breif Return the model key as an asset.
* @Pramas 
* @NativeName: GetSpawnerModelName
* @NativeFunctionAddress 0000000140E67FA0
*/

asset function GetSpawnerModelName()

/*
* @Breif Makes the rope wiggle, straightening as it reaches a max length or max time, to simulate fast motion. maxlen, magnitude, speed, duration, fadeDuration. Wiggle fades as length reaches maxlen and within fadeDuration seconds of duration. Magnitude scales with rope length.
* @Pramas float, float, float, float, float
* @NativeName: RopeWiggle
* @NativeFunctionAddress 0000000140E68E70
*/

void function RopeWiggle(float, float, float, float, float)

/*
* @Breif Allows the zipline to be used
* @Pramas 
* @NativeName: RopeZipline_Enable
* @NativeFunctionAddress 0000000140E68DE0
*/

void function RopeZipline_Enable()

/*
* @Breif Disallow using the zipline
* @Pramas 
* @NativeName: RopeZipline_Disable
* @NativeFunctionAddress 0000000140E68D50
*/

void function RopeZipline_Disable()

/*
* @Breif Enables/Disable automatic resting state for ropes. Can be used to disable resting for entities that will constantly move.
* @Pramas bool
* @NativeName: Script_SetCanEnterRestingState
* @NativeFunctionAddress 0000000140E68CB0
*/

void function Rope_SetCanEnterRestingState(bool)

/*
* @Breif Sets the falloff length for the directional constraint for endpoint attachments.
* @Pramas int
* @NativeName: Script_SetDirectionConstraintFalloff
* @NativeFunctionAddress 0000000140E68C10
*/

void function Rope_SetDirectionConstraintFalloff(int)

/*
* @Breif Sets the directional constraint strength for endpoint attachments. [0, 1] Higher values will keep the rope endpoints aligned with the start/end attachments.
* @Pramas float
* @NativeName: Script_SetDirectionConstraintStrength
* @NativeFunctionAddress 0000000140E68BA0
*/

void function Rope_SetDirectionConstraintStrength(float)

/*
* @Breif Sets the dampening factor applied to rope node velocities during physics simulation. [0,1] Lower values will make the rope seem more floaty/weightless.
* @Pramas float
* @NativeName: Script_SetPhysicsDampening
* @NativeFunctionAddress 0000000140E68B30
*/

void function Rope_SetPhysicsDampening(float)

/*
* @Breif Sets the tension of the rope. (default is 3)
* @Pramas float
* @NativeName: Script_SetTension
* @NativeFunctionAddress 0000000140E68AC0
*/

void function Rope_SetTension(float)

/*
* @Breif Sets the amount of slack the rope is given.
* @Pramas int
* @NativeName: Script_SetSlack
* @NativeFunctionAddress 0000000140E68A20
*/

void function Rope_SetSlack(int)

/*
* @Breif Sets the subdivision slice count, around its' circumference, for the rope mesh. This will increase the roundness of the rope when not using a billboarded material. (default is 4) 
* @Pramas int
* @NativeName: Script_SetSubdivisionSliceCount
* @NativeFunctionAddress 0000000140E689B0
*/

void function Rope_SetSubdivisionSliceCount(int)

/*
* @Breif Sets the subdivision stack count, along the length of the rope. This will increase the smoothness along the rope segments. (default is6 ) 
* @Pramas int
* @NativeName: Script_SetSubdivisionStackCount
* @NativeFunctionAddress 0000000140E68940
*/

void function Rope_SetSubdivisionStackCount(int)

/*
* @Breif Activates/Deactivates directional constraints for the start point based on the attachment. This will make the rope start point align with the attachment.
* @Pramas bool
* @NativeName: ActivateStartDirectionConstraints
* @NativeFunctionAddress 0000000140E688A0
*/

void function Rope_ActivateStartDirectionConstraints(bool)

/*
* @Breif Activates/Deactivates directional constraints for the end point based on the attachment. This will make the rope end point align with the attachment.
* @Pramas bool
* @NativeName: ActivateEndDirectionConstraints
* @NativeFunctionAddress 0000000140E68800
*/

void function Rope_ActivateEndDirectionConstraints(bool)

/*
* @Breif Attaches the rope to the set attachment. 0: Start point 1: End point
* @Pramas int
* @NativeName: AttachPoint
* @NativeFunctionAddress 0000000140E68750
*/

void function Rope_AttachPoint(int)

/*
* @Breif Detaches the rope to the set attachment. 0: Start point 1: End point
* @Pramas int
* @NativeName: DetachPoint
* @NativeFunctionAddress 0000000140E686A0
*/

void function Rope_DetachPoint(int)

/*
* @Breif Enables/Disables collision on the rope. Only collides with the world and static props.
* @Pramas bool
* @NativeName: SetCollisionEnabled
* @NativeFunctionAddress 0000000140E68600
*/

void function Rope_SetCollisionEnabled(bool)

/*
* @Breif Enables/Disables rope gravity.
* @Pramas bool
* @NativeName: SetGravityEnabled
* @NativeFunctionAddress 0000000140E68560
*/

void function Rope_SetGravityEnabled(bool)

/*
* @Breif Sets the length of the rope.
* @Pramas float
* @NativeName: SetLength
* @NativeFunctionAddress 0000000140E684B0
*/

void function Rope_SetLength(float)

/*
* @Breif Gets the length of the rope.
* @Pramas 
* @NativeName: GetLength
* @NativeFunctionAddress 0000000140E68400
*/

int function Rope_GetLength()

/*
* @Breif 
* @Pramas string
* @NativeName: GetBoneFollowerForBone
* @NativeFunctionAddress 0000000140E69D60
*/

entity function GetBoneFollowerForBone(string)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetBoneFollowersSolid
* @NativeFunctionAddress 0000000140E69D00
*/

void function SetBoneFollowersSolid(bool)

/*
* @Breif Remove ourselves if we move more than one unit from our current position
* @Pramas 
* @NativeName: RemoveOnMovement
* @NativeFunctionAddress 0000000140E69CB0
*/

void function RemoveOnMovement()

/*
* @Breif Lets the prop be highlighted by threat scopes
* @Pramas 
* @NativeName: EnablePropScopeHighlight
* @NativeFunctionAddress 0000000140E69C60
*/

void function EnablePropScopeHighlight()

/*
* @Breif Disables the threat scope highlight on a prop
* @Pramas 
* @NativeName: DisablePropScopeHighlight
* @NativeFunctionAddress 0000000140E69C10
*/

void function DisablePropScopeHighlight()

/*
* @Breif Gets an array of all of this prop's bone followers
* @Pramas 
* @NativeName: GetBoneFollowers
* @NativeFunctionAddress 0000000140E5CE60
*/

var function GetBoneFollowers()

/*
* @Breif 
* @Pramas 
* @NativeName: GetImpactEffectColorID
* @NativeFunctionAddress 0000000140E68F50
*/

int function GetImpactEffectColorID()

/*
* @Breif 
* @Pramas string
* @NativeName: SetCustomOwnerName
* @NativeFunctionAddress 0000000140E69090
*/

void function SetCustomOwnerName(string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCustomOwnerName
* @NativeFunctionAddress 0000000140E69000
*/

string function GetCustomOwnerName()

/*
* @Breif 
* @Pramas int
* @NativeName: SetArmorType
* @NativeFunctionAddress 0000000140E69390
*/

void function SetArmorType(int)

/*
* @Breif Set custom footstep type to use
* @Pramas string
* @NativeName: SetFootstepType
* @NativeFunctionAddress 0000000140E69330
*/

void function SetFootstepType(string)

/*
* @Breif 
* @Pramas int flags
* @NativeName: Script_SetScriptPropFlags
* @NativeFunctionAddress 0000000140E692C0
*/

void function SetScriptPropFlags(int flags)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptPropFlags
* @NativeFunctionAddress 0000000140E69210
*/

int function GetScriptPropFlags()

/*
* @Breif Sets the type of custom smart ammo target this is
* @Pramas int
* @NativeName: Script_SetSmartAmmoLockType
* @NativeFunctionAddress 0000000140E691A0
*/

void function SetSmartAmmoLockType(int)

/*
* @Breif Gets the type of custom smart ammo target this is
* @Pramas 
* @NativeName: Script_GetSmartAmmoLockType
* @NativeFunctionAddress 0000000140E690F0
*/

int function GetSmartAmmoLockType()

/*
* @Breif Sets the custom int script can put on survival props
* @Pramas int
* @NativeName: Script_SetSurvivalInt
* @NativeFunctionAddress 0000000140E69A50
*/

void function SetSurvivalInt(int)

/*
* @Breif Gets the custom int script can put on survival props
* @Pramas 
* @NativeName: Script_GetSurvivalInt
* @NativeFunctionAddress 0000000140E699A0
*/

int function GetSurvivalInt()

/*
* @Breif Sets whether this survival prop can be culled for network transmit. See sv_distanceCull
* @Pramas bool
* @NativeName: Script_SetNetworkDistanceCull
* @NativeFunctionAddress 0000000140E69910
*/

void function SetNetworkDistanceCull(bool)

/*
* @Breif Gets the weapon name for a survival pickup
* @Pramas 
* @NativeName: GetWeaponName
* @NativeFunctionAddress 0000000140E69850
*/

string function GetWeaponName()

/*
* @Breif Sets the weapon name for a survival pickup
* @Pramas string
* @NativeName: SetWeaponName
* @NativeFunctionAddress 0000000140E697F0
*/

void function SetWeaponName(string)

/*
* @Breif Gets the clip count for a survival weapon pickup
* @Pramas 
* @NativeName: GetClipCount
* @NativeFunctionAddress 0000000140E69740
*/

int function GetClipCount()

/*
* @Breif Sets the clip count for a survival weapon pickup
* @Pramas int
* @NativeName: SetClipCount
* @NativeFunctionAddress 0000000140E696A0
*/

void function SetClipCount(int)

/*
* @Breif Sets mods bit field
* @Pramas int
* @NativeName: Script_SetModBitField
* @NativeFunctionAddress 0000000140E69600
*/

void function SetWeaponModBitField(int)

/*
* @Breif Gets mods bit field
* @Pramas 
* @NativeName: Script_GetModBitField
* @NativeFunctionAddress 0000000140E69550
*/

int function GetWeaponModBitField()

/*
* @Breif Gets the integer that represents this survival pickup's custom property
* @Pramas 
* @NativeName: GetSurvivalProperty
* @NativeFunctionAddress 0000000140E694A0
*/

int function GetSurvivalProperty()

/*
* @Breif Sets the integer that represents this survival pickup's custom property
* @Pramas int
* @NativeName: SetSurvivalProperty
* @NativeFunctionAddress 0000000140E69400
*/

void function SetSurvivalProperty(int)

/*
* @Breif Get an array of mods on this weapon pickup
* @Pramas 
* @NativeName: Script_GetMods
* @NativeFunctionAddress 0000000140E5CEB0
*/

var function GetWeaponMods()

/*
* @Breif Set an array of mods on this weapon pickup
* @Pramas array< string > mods
* @NativeName: Script_SetMods
* @NativeFunctionAddress 0000000140E5CF00
*/

var function SetWeaponMods()

/*
* @Breif Does this prop physics ignores players or not
* @Pramas 
* @NativeName: IgnoresPlayers
* @NativeFunctionAddress 0000000140E69BB0
*/

bool function IgnoresPlayers()

/*
* @Breif Sets whether this prop physics ignores players or not
* @Pramas bool
* @NativeName: SetIgnorePlayers
* @NativeFunctionAddress 0000000140E69B50
*/

void function SetIgnorePlayers(bool)

/*
* @Breif Sets the name of the sound to play when this physics prop rolls
* @Pramas string
* @NativeName: SetRollSoundName
* @NativeFunctionAddress 0000000140E69AF0
*/

void function SetRollSoundName(string)

/*
* @Breif Returns the view model entity.
* @Pramas 
* @NativeName: GetViewModelEntity_Script
* @NativeFunctionAddress 0000000140E7C880
*/

entity function GetViewModelEntity()

/*
* @Breif Returns true if the player is in noclip mode.
* @Pramas 
* @NativeName: ScriptIsPlayerNoclipping
* @NativeFunctionAddress 0000000140E7C810
*/

bool function IsNoclipping()

/*
* @Breif Returns true if the player will not be stuck if teleported to given position.
* @Pramas vector
* @NativeName: Script_IsFreeSpace
* @NativeFunctionAddress 0000000140E7C7A0
*/

bool function IsFreeSpace(vector)

/*
* @Breif Get the player's first person proxy
* @Pramas 
* @NativeName: ScriptGetFirstPersonProxy
* @NativeFunctionAddress 0000000140E7C710
*/

entity function GetFirstPersonProxy()

/*
* @Breif Get the player's predicted first person proxy
* @Pramas 
* @NativeName: ScriptGetPredictedFirstPersonProxy
* @NativeFunctionAddress 0000000140E7C680
*/

entity function GetPredictedFirstPersonProxy()

/*
* @Breif Sets an entity to be viewed by this player in third person.
* @Pramas entity
* @NativeName: ScriptSetThirdPersonEntity
* @NativeFunctionAddress 0000000140E7C600
*/

void function SetTrackEntity(entity)

/*
* @Breif Gets the current entity to be viewed by this player in third person.
* @Pramas 
* @NativeName: GetThirdPersonEntity
* @NativeFunctionAddress 0000000140E7C570
*/

entity function GetTrackEntity()

/*
* @Breif Sets the blend times used for blending to a tracked ent (or third-person ent).
* @Pramas float, float, float
* @NativeName: SetTrackEntityBlendTimes
* @NativeFunctionAddress 0000000140E7C4D0
*/

void function SetTrackEntityBlendTimes(float, float, float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetTrackEntityOffsetDistance
* @NativeFunctionAddress 0000000140E7C420
*/

void function SetTrackEntityOffsetDistance(float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetTrackEntityOffsetHeight
* @NativeFunctionAddress 0000000140E7C370
*/

void function SetTrackEntityOffsetHeight(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTrackEntityOffsetDistance
* @NativeFunctionAddress 0000000140E7C2C0
*/

float function GetTrackEntityOffsetDistance()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTrackEntityOffsetHeight
* @NativeFunctionAddress 0000000140E7C210
*/

float function GetTrackEntityOffsetHeight()

/*
* @Breif Sets what the pitch axis does. "orbit": right stick orbits around the entity. "freelook": right stick rotates the camera in place
* @Pramas string
* @NativeName: SetTrackEntityPitchLookMode
* @NativeFunctionAddress 0000000140E7C1B0
*/

void function SetTrackEntityPitchLookMode(string)

/*
* @Breif Gets what the pitch axis does. "orbit": right stick orbits around the entity. "freelook": right stick rotates the camera in place
* @Pramas 
* @NativeName: GetTrackEntityPitchLookMode
* @NativeFunctionAddress 0000000140E7C110
*/

string function GetTrackEntityPitchLookMode()

/*
* @Breif If set to true, when we have a third person track entity, camera angles are clamped based off of the third person entity's angles
* @Pramas bool
* @NativeName: SetTrackEntityShouldViewAnglesFollowTrackedEntity
* @NativeFunctionAddress 0000000140E7C080
*/

void function SetTrackEntityShouldViewAnglesFollowTrackedEntity(bool)

/*
* @Breif If set to true, when we have a third person track entity, camera angles are clamped based off of the third person entity's angles
* @Pramas 
* @NativeName: GetTrackEntityShouldViewAnglesFollowTrackedEntity
* @NativeFunctionAddress 0000000140E7C020
*/

bool function GetTrackEntityShouldViewAnglesFollowTrackedEntity()

/*
* @Breif Sets what the yaw axis does. "orbit": right stick orbits around the entity. "freelook": right stick rotates the camera in place
* @Pramas string
* @NativeName: SetTrackEntityYawLookMode
* @NativeFunctionAddress 0000000140E7BFC0
*/

void function SetTrackEntityYawLookMode(string)

/*
* @Breif Gets what the yaw axis does. "orbit": right stick orbits around the entity. "freelook": right stick rotates the camera in place
* @Pramas 
* @NativeName: GetTrackEntityYawLookMode
* @NativeFunctionAddress 0000000140E7BF20
*/

string function GetTrackEntityYawLookMode()

/*
* @Breif "scriptOffset", "scriptOffsetClientOnly" or "convar". Selects whether it uses the old method: distance set by convars c_maxdistance and cam_idealdist, or uses the new offset set by SetTrackEntityOffset.
* @Pramas string
* @NativeName: SetTrackEntityDistanceMode
* @NativeFunctionAddress 0000000140E7BEC0
*/

void function SetTrackEntityDistanceMode(string)

/*
* @Breif "scriptOffset", "scriptOffsetClientOnly" or "convar". Returns whether it uses the old method: distance set by convars c_maxdistance and cam_idealdist, or uses the new offset set by SetTrackEntityOffset.
* @Pramas 
* @NativeName: GetTrackEntityDistanceMode
* @NativeFunctionAddress 0000000140E7BE10
*/

string function GetTrackEntityDistanceMode()

/*
* @Breif Sets camera min yaw when tracking entity.
* @Pramas float
* @NativeName: SetTrackEntityMinYaw
* @NativeFunctionAddress 0000000140E7BD60
*/

void function SetTrackEntityMinYaw(float)

/*
* @Breif Sets camera max yaw when tracking entity.
* @Pramas float
* @NativeName: SetTrackEntityMaxYaw
* @NativeFunctionAddress 0000000140E7BCB0
*/

void function SetTrackEntityMaxYaw(float)

/*
* @Breif Sets camera min pitch when tracking entity.
* @Pramas float
* @NativeName: SetTrackEntityMinPitch
* @NativeFunctionAddress 0000000140E7BC00
*/

void function SetTrackEntityMinPitch(float)

/*
* @Breif Sets camera max pitch when tracking entity.
* @Pramas float
* @NativeName: SetTrackEntityMaxPitch
* @NativeFunctionAddress 0000000140E7BB50
*/

void function SetTrackEntityMaxPitch(float)

/*
* @Breif Gets camera min yaw when tracking entity.
* @Pramas 
* @NativeName: GetTrackEntityMinYaw
* @NativeFunctionAddress 0000000140E7BAA0
*/

float function GetTrackEntityMinYaw()

/*
* @Breif Gets camera max yaw when tracking entity.
* @Pramas 
* @NativeName: GetTrackEntityMaxYaw
* @NativeFunctionAddress 0000000140E7B9F0
*/

float function GetTrackEntityMaxYaw()

/*
* @Breif Gets camera min pitch when tracking entity.
* @Pramas 
* @NativeName: GetTrackEntityMinPitch
* @NativeFunctionAddress 0000000140E7B940
*/

float function GetTrackEntityMinPitch()

/*
* @Breif Gets camera max pitch when tracking entity.
* @Pramas 
* @NativeName: GetTrackEntityMaxPitch
* @NativeFunctionAddress 0000000140E7B890
*/

float function GetTrackEntityMaxPitch()

/*
* @Breif Resets track entity settings to the defaults.
* @Pramas 
* @NativeName: ClearTrackEntitySettings
* @NativeFunctionAddress 0000000140E7B840
*/

void function ClearTrackEntitySettings()

/*
* @Breif Sets rate at which the camera rotates back to center when player isn't looking around.
* @Pramas float
* @NativeName: SetTrackEntitySpringViewToCenterRate
* @NativeFunctionAddress 0000000140E7B790
*/

void function SetTrackEntitySpringViewToCenterRate(float)

/*
* @Breif Gets rate at which the camera rotates back to center when player isn't looking around.
* @Pramas 
* @NativeName: GetTrackEntitySpringViewToCenterRate
* @NativeFunctionAddress 0000000140E7B6E0
*/

float function GetTrackEntitySpringViewToCenterRate()

/*
* @Breif The tracked ent speed above which the camera begins to look ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadLowerEntSpeed
* @NativeFunctionAddress 0000000140E7B630
*/

void function SetTrackEntityLookaheadLowerEntSpeed(float)

/*
* @Breif The tracked ent speed at which the camera has maximum look ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadUpperEntSpeed
* @NativeFunctionAddress 0000000140E7B580
*/

void function SetTrackEntityLookaheadUpperEntSpeed(float)

/*
* @Breif The maximum angle the camera can turn to look ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadMaxAngle
* @NativeFunctionAddress 0000000140E7B4D0
*/

void function SetTrackEntityLookaheadMaxAngle(float)

/*
* @Breif To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning to look ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadLerpAheadRate
* @NativeFunctionAddress 0000000140E7B420
*/

void function SetTrackEntityLookaheadLerpAheadRate(float)

/*
* @Breif To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning back toward center from looking ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadLerpToCenterRate
* @NativeFunctionAddress 0000000140E7B370
*/

void function SetTrackEntityLookaheadLerpToCenterRate(float)

/*
* @Breif The tracked ent speed above which the camera begins to look ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadLowerEntSpeed
* @NativeFunctionAddress 0000000140E7B2C0
*/

float function GetTrackEntityLookaheadLowerEntSpeed()

/*
* @Breif The tracked ent speed at which the camera has maximum look ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadUpperEntSpeed
* @NativeFunctionAddress 0000000140E7B210
*/

float function GetTrackEntityLookaheadUpperEntSpeed()

/*
* @Breif The maximum angle the camera can turn to look ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadMaxAngle
* @NativeFunctionAddress 0000000140E7B160
*/

float function GetTrackEntityLookaheadMaxAngle()

/*
* @Breif To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning to look ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadLerpAheadRate
* @NativeFunctionAddress 0000000140E7B0B0
*/

float function GetTrackEntityLookaheadLerpAheadRate()

/*
* @Breif To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning back toward center from looking ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadLerpToCenterRate
* @NativeFunctionAddress 0000000140E7B000
*/

float function GetTrackEntityLookaheadLerpToCenterRate()

/*
* @Breif If true, the camera tries to back up from the entity until it hits geo or reaches its desired position. If false, geo is ignored. Enabled by default.
* @Pramas bool
* @NativeName: SetTrackEntityPushedInByGeo
* @NativeFunctionAddress 0000000140E7AF70
*/

void function SetTrackEntityPushedInByGeo(bool)

/*
* @Breif Inform clients that they've damaged another player or entity.
* @Pramas entity, int, vector, int, float, int, int, entity, float
* @NativeName: ScriptNotifyDidDamage
* @NativeFunctionAddress 0000000140E7ADE0
*/

void function NotifyDidDamage(entity, int, vector, int, float, int, int, entity, float)

/*
* @Breif Start disembarking from cockpit.
* @Pramas 
* @NativeName: CockpitStartDisembark
* @NativeFunctionAddress 0000000140E7AD90
*/

void function CockpitStartDisembark()

/*
* @Breif Start ejecting from cockpit.
* @Pramas 
* @NativeName: CockpitStartEject
* @NativeFunctionAddress 0000000140E7AD40
*/

void function CockpitStartEject()

/*
* @Breif Start cockpit boot up.
* @Pramas 
* @NativeName: CockpitStartBoot
* @NativeFunctionAddress 0000000140E7ACF0
*/

void function CockpitStartBoot()

/*
* @Breif Time in seconds until hot drop impact.
* @Pramas float
* @NativeName: SetHotDropImpactDelay
* @NativeFunctionAddress 0000000140E7AC30
*/

void function SetHotDropImpactDelay(float)

/*
* @Breif Clear out the active hot drop impact.
* @Pramas 
* @NativeName: ClearHotDropImpactTime
* @NativeFunctionAddress 0000000140E7AB90
*/

void function ClearHotDropImpactTime()

/*
* @Breif Sets the player's value for the given game stat. Stat indices start with PGS, such as PGS_KILLS.
* @Pramas int, int
* @NativeName: Script_SetPlayerGameStat
* @NativeFunctionAddress 0000000140E7AB10
*/

void function SetPlayerGameStat(int, int)

/*
* @Breif Adds to the player's value for the given game stat. Stat indices start with PGS, such as PGS_KILLS.
* @Pramas int, int
* @NativeName: Script_AddToPlayerGameStat
* @NativeFunctionAddress 0000000140E7AA90
*/

void function AddToPlayerGameStat(int, int)

/*
* @Breif Gets the player's value for the given game stat. Stat indices start with PGS, such as PGS_KILLS. Call with -1 for list of valid values. (stat index)
* @Pramas int
* @NativeName: Script_GetPlayerGameStat
* @NativeFunctionAddress 0000000140E7A9B0
*/

int function GetPlayerGameStat(int)

/*
* @Breif Check if player has an entitlement
* @Pramas int
* @NativeName: HasEntitlement
* @NativeFunctionAddress 0000000140E7A930
*/

bool function HasEntitlement(int)

/*
* @Breif Sets whether this player should use "fast" viewmodel animations
* @Pramas bool
* @NativeName: Script_SetHighSpeedViewmodelAnims
* @NativeFunctionAddress 0000000140E7A8A0
*/

void function Script_SetHighSpeedViewmodelAnims(bool)

/*
* @Breif Sets whether this player is using "fast" viewmodel animations
* @Pramas bool
* @NativeName: Script_GetHighSpeedViewmodelAnims
* @NativeFunctionAddress 0000000140E7A840
*/

bool function Script_GetHighSpeedViewmodelAnims(bool)

/*
* @Breif Get current camera position
* @Pramas 
* @NativeName: CameraPosition
* @NativeFunctionAddress 0000000140E7A7E0
*/

vector function CameraPosition()

/*
* @Breif Get current camera angles
* @Pramas 
* @NativeName: CameraAngles
* @NativeFunctionAddress 0000000140E7A780
*/

vector function CameraAngles()

/*
* @Breif pass in ent you want to get player eye position for
* @Pramas entity
* @NativeName: UseableEyePosition
* @NativeFunctionAddress 0000000140E7A660
*/

vector function UseableEyePosition(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_HasThirdPersonAttackFocus
* @NativeFunctionAddress 0000000140E7A5D0
*/

bool function HasThirdPersonAttackFocus()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetThirdPersonAttackFocus
* @NativeFunctionAddress 0000000140E7A570
*/

vector function GetThirdPersonAttackFocus()

/*
* @Breif Snaps the player's eye angles to the given angles
* @Pramas vector
* @NativeName: Script_SnapEyeAngles
* @NativeFunctionAddress 0000000140E7A4F0
*/

void function SnapEyeAngles(vector)

/*
* @Breif Snaps the player's feet to the direction they are looking
* @Pramas 
* @NativeName: SnapFeetToEyes
* @NativeFunctionAddress 0000000140E7A460
*/

void function SnapFeetToEyes()

/*
* @Breif Snaps the player's eyes to the direction of their feet
* @Pramas 
* @NativeName: SnapEyesToFeet
* @NativeFunctionAddress 0000000140E7A3D0
*/

void function SnapEyesToFeet()

/*
* @Breif Smoothly sets the player's feet to the given angles (without affecting the player's view angle)
* @Pramas vector
* @NativeName: Script_SetFeetAngles
* @NativeFunctionAddress 0000000140E7A370
*/

void function SetFeetAngles(vector)

/*
* @Breif Snaps the player's feet to the given angles (without affecting the player's view angle)
* @Pramas vector
* @NativeName: Script_SnapFeetAngles
* @NativeFunctionAddress 0000000140E7A310
*/

void function SnapFeetAngles(vector)

/*
* @Breif Get the players pet titan
* @Pramas 
* @NativeName: Script_GetPetTitan
* @NativeFunctionAddress 0000000140E7A280
*/

entity function GetPetTitan()

/*
* @Breif Get the players pet titan
* @Pramas entity
* @NativeName: Script_SetPetTitan
* @NativeFunctionAddress 0000000140E7A200
*/

void function SetPetTitan(entity)

/*
* @Breif Get the players pet titan mode
* @Pramas 
* @NativeName: Script_GetPetTitanMode
* @NativeFunctionAddress 0000000140E7A150
*/

int function GetPetTitanMode()

/*
* @Breif Get the players pet titan mode
* @Pramas int
* @NativeName: Script_SetPetTitanMode
* @NativeFunctionAddress 0000000140E7A0B0
*/

void function SetPetTitanMode(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlayerModHealthPerSegment
* @NativeFunctionAddress 0000000140E79FF0
*/

float function GetPlayerModHealthPerSegment()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlayerModHealth
* @NativeFunctionAddress 0000000140E79F30
*/

float function GetPlayerModHealth()

/*
* @Breif 
* @Pramas entity
* @NativeName: IgnoreEntityForMovementUntilNotTouching
* @NativeFunctionAddress 0000000140E79E40
*/

void function IgnoreEntityForMovementUntilNotTouching(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetNextTitanRespawnAvailable
* @NativeFunctionAddress 0000000140E79D90
*/

float function GetNextTitanRespawnAvailable()

/*
* @Breif 
* @Pramas float
* @NativeName: SetNextTitanRespawnAvailable
* @NativeFunctionAddress 0000000140E79D20
*/

void function SetNextTitanRespawnAvailable(float)

/*
* @Breif Get the players hardpoint entity
* @Pramas 
* @NativeName: Script_GetHardpointEntity
* @NativeFunctionAddress 0000000140E79C90
*/

entity function GetHardpointEntity()

/*
* @Breif Get the players hardpoint entity
* @Pramas entity
* @NativeName: Script_SetHardpointEntity
* @NativeFunctionAddress 0000000140E79BA0
*/

void function SetHardpointEntity(entity)

/*
* @Breif Get the ammo count of the ammo pool
* @Pramas int
* @NativeName: Script_AmmoPool_GetCount
* @NativeFunctionAddress 0000000140E79AC0
*/

int function AmmoPool_GetCount(int)

/*
* @Breif Set the ammo count of the ammo pool
* @Pramas int, int
* @NativeName: Script_AmmoPool_SetCount
* @NativeFunctionAddress 0000000140E79A40
*/

void function AmmoPool_SetCount(int, int)

/*
* @Breif Get the capacity of the ammo pool
* @Pramas 
* @NativeName: Script_AmmoPool_GetCapacity
* @NativeFunctionAddress 0000000140E79990
*/

int function AmmoPool_GetCapacity()

/*
* @Breif Set the capacity of the ammo pool
* @Pramas int
* @NativeName: Script_AmmoPool_SetCapacity
* @NativeFunctionAddress 0000000140E79920
*/

void function AmmoPool_SetCapacity(int)

/*
* @Breif Disable the player's weapon
* @Pramas 
* @NativeName: Weapon_Disable_Script
* @NativeFunctionAddress 0000000140E797E0
*/

void function DisableWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_DisableWithSlowHolster_Script
* @NativeFunctionAddress 0000000140E796A0
*/

void function DisableWeaponWithSlowHolster()

/*
* @Breif Enable the player's weapon
* @Pramas 
* @NativeName: Weapon_Enable_Script
* @NativeFunctionAddress 0000000140E79550
*/

void function EnableWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_EnableWithSlowDeploy_Script
* @NativeFunctionAddress 0000000140E79400
*/

void function EnableWeaponWithSlowDeploy()

/*
* @Breif 
* @Pramas float
* @NativeName: Weapon_DelayEnableWithSlowDeploy_Script
* @NativeFunctionAddress 0000000140E79390
*/

void function DelayEnableWeaponWithSlowDeploy(float)

/*
* @Breif Holster player's weapon with slower holster animation
* @Pramas 
* @NativeName: Weapon_Holster_Script
* @NativeFunctionAddress 0000000140E79270
*/

void function HolsterWeapon()

/*
* @Breif Pull out the player's weapon using slow deploy animation
* @Pramas 
* @NativeName: Weapon_Deploy_Script
* @NativeFunctionAddress 0000000140E79140
*/

void function DeployWeapon()

/*
* @Breif Disable the player's weapon viewmodel
* @Pramas 
* @NativeName: Weapon_DisableViewModel
* @NativeFunctionAddress 0000000140E790A0
*/

void function DisableWeaponViewModel()

/*
* @Breif Enable the player's weapon viewmodel
* @Pramas 
* @NativeName: Weapon_EnableViewModel
* @NativeFunctionAddress 0000000140E78FF0
*/

void function EnableWeaponViewModel()

/*
* @Breif Remove all the player's items
* @Pramas 
* @NativeName: RemoveAllItems
* @NativeFunctionAddress 0000000140E78FA0
*/

void function RemoveAllItems()

/*
* @Breif Is player in god mode.
* @Pramas 
* @NativeName: ScriptIsGodMode
* @NativeFunctionAddress 0000000140E78F30
*/

bool function IsGodMode()

/*
* @Breif Is player in Buddha mode.
* @Pramas 
* @NativeName: ScriptIsBuddhaMode
* @NativeFunctionAddress 0000000140E78EC0
*/

bool function IsBuddhaMode()

/*
* @Breif Adds a mod item to the inventory. Use empty weapon name for universal mods.
* @Pramas string, string, int
* @NativeName: Script_ModInventory_Add
* @NativeFunctionAddress 0000000140E78E40
*/

void function ModInventory_Add(string, string, int)

/*
* @Breif Removes a mod item in a slot of the inventory.
* @Pramas int, int
* @NativeName: Script_ModInventory_Remove
* @NativeFunctionAddress 0000000140E78DC0
*/

void function ModInventory_Remove(int, int)

/*
* @Breif Get the number of filled slots in the mod inventory.
* @Pramas 
* @NativeName: Script_ModInventory_GetCount
* @NativeFunctionAddress 0000000140E78CF0
*/

int function ModInventory_GetCount()

/*
* @Breif Adds a consumable item to the inventory.
* @Pramas int, int
* @NativeName: Script_ConsumableInventory_Add
* @NativeFunctionAddress 0000000140E78C70
*/

void function ConsumableInventory_Add(int, int)

/*
* @Breif Removes a consumable item in a slot of the inventory.
* @Pramas int, int
* @NativeName: Script_ConsumableInventory_Remove
* @NativeFunctionAddress 0000000140E78BF0
*/

void function ConsumableInventory_Remove(int, int)

/*
* @Breif Get the number of filled slots in the consumable inventory.
* @Pramas 
* @NativeName: Script_ConsumableInventory_GetCount
* @NativeFunctionAddress 0000000140E78B20
*/

int function ConsumableInventory_GetCount()

/*
* @Breif Tell code the player's inventory screen was opened
* @Pramas 
* @NativeName: SetInventoryIsOpen
* @NativeFunctionAddress 0000000140E78A90
*/

void function SetInventoryIsOpen()

/*
* @Breif Tell code the player's inventory screen was closed
* @Pramas 
* @NativeName: ClearInventoryIsOpen
* @NativeFunctionAddress 0000000140E78A00
*/

void function ClearInventoryIsOpen()

/*
* @Breif Returns true if code thinks the player's inventory screen is open
* @Pramas 
* @NativeName: IsInventoryOpen
* @NativeFunctionAddress 0000000140E789A0
*/

bool function IsInventoryOpen()

/*
* @Breif Gets the use entity that would be found if the player tried to use something this frame
* @Pramas 
* @NativeName: Script_GetUseEntity
* @NativeFunctionAddress 0000000140E78910
*/

entity function GetUseEntity()

/*
* @Breif Forces a user to use an entity. Does not do any validity check
* @Pramas entity, int
* @NativeName: ScriptForceUseEntity
* @NativeFunctionAddress 0000000140E78880
*/

void function ForceUseEntity(entity, int)

/*
* @Breif Disable the player view-limiting cone.
* @Pramas 
* @NativeName: Script_PlayerCone_Disable
* @NativeFunctionAddress 0000000140E787B0
*/

void function PlayerCone_Disable()

/*
* @Breif Player view-limiting cone provided by scriptanim.
* @Pramas 
* @NativeName: Script_PlayerCone_FromAnim
* @NativeFunctionAddress 0000000140E78740
*/

void function PlayerCone_FromAnim()

/*
* @Breif Directly specify center of view-limiting cone.
* @Pramas vector
* @NativeName: Script_PlayerCone_SetSpecific
* @NativeFunctionAddress 0000000140E786A0
*/

void function PlayerCone_SetSpecific(vector)

/*
* @Breif Set the number of seconds to lerp out a 180 degree error into the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetLerpTime
* @NativeFunctionAddress 0000000140E78630
*/

void function PlayerCone_SetLerpTime(float)

/*
* @Breif Set the minimum yaw of the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetMinYaw
* @NativeFunctionAddress 0000000140E785B0
*/

void function PlayerCone_SetMinYaw(float)

/*
* @Breif Set the maximum yaw of the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetMaxYaw
* @NativeFunctionAddress 0000000140E78530
*/

void function PlayerCone_SetMaxYaw(float)

/*
* @Breif Set the minimum pitch of the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetMinPitch
* @NativeFunctionAddress 0000000140E784B0
*/

void function PlayerCone_SetMinPitch(float)

/*
* @Breif Set the maximum pitch of the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetMaxPitch
* @NativeFunctionAddress 0000000140E78430
*/

void function PlayerCone_SetMaxPitch(float)

/*
* @Breif Hides the player.
* @Pramas 
* @NativeName: ScriptHidePlayer
* @NativeFunctionAddress 0000000140E783E0
*/

void function HidePlayer()

/*
* @Breif Undoes the effects of .HidePlayer()
* @Pramas 
* @NativeName: ScriptUnhidePlayer
* @NativeFunctionAddress 0000000140E78390
*/

void function UnhidePlayer()

/*
* @Breif Set view offset entity for first-person animation.
* @Pramas entity
* @NativeName: Script_ViewOffsetEntity_SetEntity
* @NativeFunctionAddress 0000000140E78310
*/

void function ViewOffsetEntity_SetEntity(entity)

/*
* @Breif Clear view offset entity for first-person animation.
* @Pramas 
* @NativeName: ViewOffsetEntity_Clear
* @NativeFunctionAddress 0000000140E782C0
*/

void function ViewOffsetEntity_Clear()

/*
* @Breif Sets the lerp-in duration for the view offset entity. Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: ViewOffsetEntity_SetLerpInTime
* @NativeFunctionAddress 0000000140E78210
*/

void function ViewOffsetEntity_SetLerpInTime(float)

/*
* @Breif Sets the lerp-out duration for the view offset entity. Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: ViewOffsetEntity_SetLerpOutTime
* @NativeFunctionAddress 0000000140E78160
*/

void function ViewOffsetEntity_SetLerpOutTime(float)

/*
* @Breif Set view entity for first-person animation.
* @Pramas entity
* @NativeName: Script_AnimViewEntity_SetEntity
* @NativeFunctionAddress 0000000140E780B0
*/

void function AnimViewEntity_SetEntity(entity)

/*
* @Breif Clear view entity for first-person animation.
* @Pramas 
* @NativeName: AnimViewEntity_Clear
* @NativeFunctionAddress 0000000140E78060
*/

void function AnimViewEntity_Clear()

/*
* @Breif Make the third person camera try to slide around collision rather than going right through it. And also change camera attachments to get a better view.
* @Pramas 
* @NativeName: AnimViewEntity_EnableThirdPersonCameraVisibilityChecks
* @NativeFunctionAddress 0000000140E77FE0
*/

void function AnimViewEntity_EnableThirdPersonCameraVisibilityChecks()

/*
* @Breif 
* @Pramas 
* @NativeName: AnimViewEntity_DrawPlayer
* @NativeFunctionAddress 0000000140E77F60
*/

void function AnimViewEntity_DrawPlayer()

/*
* @Breif Sets the lerp-in duration for the anim view entity. Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: AnimViewEntity_SetLerpInTime
* @NativeFunctionAddress 0000000140E77EF0
*/

void function AnimViewEntity_SetLerpInTime(float)

/*
* @Breif Sets the lerp-out duration for the anim view entity. Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: AnimViewEntity_SetLerpOutTime
* @NativeFunctionAddress 0000000140E77E40
*/

void function AnimViewEntity_SetLerpOutTime(float)

/*
* @Breif Gets the raw dodge power of the suit
* @Pramas 
* @NativeName: Script_GetDodgePower
* @NativeFunctionAddress 0000000140E77D90
*/

float function GetDodgePower()

/*
* @Breif Sets the power of the suit to whatever value you want (100 = max).
* @Pramas float
* @NativeName: Script_SetDodgePower
* @NativeFunctionAddress 0000000140E77B80
*/

void function Server_SetDodgePower(float)

/*
* @Breif Gets the percentage of "suit power" remaining (used for sprint, etc) (100 = max)
* @Pramas 
* @NativeName: Script_GetSuitPower
* @NativeFunctionAddress 0000000140E77D90
*/

float function GetSuitPower()

/*
* @Breif Gets the percentage of "suit jump power" remaining (used for double jump) (100 = max)
* @Pramas 
* @NativeName: Script_GetSuitJumpPower
* @NativeFunctionAddress 0000000140E77CE0
*/

float function GetSuitJumpPower()

/*
* @Breif Gets the percentage of "grapple power" remaining (100 = max)
* @Pramas 
* @NativeName: Script_GetSuitGrapplePower
* @NativeFunctionAddress 0000000140E77C30
*/

float function GetSuitGrapplePower()

/*
* @Breif Sets the percentage of "suit power" remaining (used for sprint, etc) (100 = max)
* @Pramas float
* @NativeName: Script_SetSuitPower
* @NativeFunctionAddress 0000000140E77B80
*/

void function SetSuitPower(float)

/*
* @Breif Sets the percentage of "suit jump power" remaining (used for double jump) (100 = max)
* @Pramas float
* @NativeName: Script_SetSuitJumpPower
* @NativeFunctionAddress 0000000140E77AD0
*/

void function SetSuitJumpPower(float)

/*
* @Breif Sets the percentage of "grapple power" remaining (100 = max)
* @Pramas float
* @NativeName: Script_SetSuitGrapplePower
* @NativeFunctionAddress 0000000140E77A20
*/

void function SetSuitGrapplePower(float)

/*
* @Breif Creates a decoy of this player
* @Pramas asset settingsName, asset modelName, int reserve, int camo, float stickPercentToRun, bool hasMovement
* @NativeName: Script_CreatePlayerDecoy
* @NativeFunctionAddress 0000000140E77940
*/

entity function CreatePlayerDecoy(asset settingsName, asset modelName, int reserve, int camo, float stickPercentToRun, bool hasMovement)

/*
* @Breif Creates a decoy that plays an animation
* @Pramas string
* @NativeName: Script_CreateAnimatedPlayerDecoy
* @NativeFunctionAddress 0000000140E778D0
*/

entity function CreateAnimatedPlayerDecoy(string)

/*
* @Breif Creates a decoy that moves to a location
* @Pramas vector targetPos, asset settingsName, asset modelName, int reserve, int camo
* @NativeName: Script_CreateTargetedPlayerDecoy
* @NativeFunctionAddress 0000000140E77810
*/

entity function CreateTargetedPlayerDecoy(vector targetPos, asset settingsName, asset modelName, int reserve, int camo)

/*
* @Breif Creates a decoy that mimics the player's movement, offset in yaw by the specified degrees
* @Pramas float yawOffset
* @NativeName: Script_CreateMimicPlayerDecoy
* @NativeFunctionAddress 0000000140E776A0
*/

entity function CreateMimicPlayerDecoy(float yawOffset)

/*
* @Breif Returns whether the player is wallrunning
* @Pramas 
* @NativeName: IsWallRunning
* @NativeFunctionAddress 0000000140E775F0
*/

bool function IsWallRunning()

/*
* @Breif Returns whether the player is wall-hanging.
* @Pramas 
* @NativeName: IsWallHanging
* @NativeFunctionAddress 0000000140E77590
*/

bool function IsWallHanging()

/*
* @Breif Returns whether the player is sprinting
* @Pramas 
* @NativeName: IsSprinting
* @NativeFunctionAddress 0000000140E77530
*/

bool function IsSprinting()

/*
* @Breif Returns whether the player is in the middle of a double-jump.
* @Pramas 
* @NativeName: IsDoubleJumping
* @NativeFunctionAddress 0000000140E774C0
*/

bool function IsDoubleJumping()

/*
* @Breif Returns whether the player is dodging.
* @Pramas 
* @NativeName: IsDodging
* @NativeFunctionAddress 0000000140E77460
*/

bool function IsDodging()

/*
* @Breif Returns whether the player is traversing (i.e. mantle or window anims).
* @Pramas 
* @NativeName: IsTraversing
* @NativeFunctionAddress 0000000140E773F0
*/

bool function IsTraversing()

/*
* @Breif Returns whether the player is mantling.
* @Pramas 
* @NativeName: IsMantling
* @NativeFunctionAddress 0000000140E77360
*/

bool function IsMantling()

/*
* @Breif Returns the position the player is going to finish mantling.
* @Pramas 
* @NativeName: GetMantlingEndPosition
* @NativeFunctionAddress 0000000140E772D0
*/

vector function GetMantlingEndPosition()

/*
* @Breif Returns whether this player has prediction enabled.
* @Pramas 
* @NativeName: IsPredicting
* @NativeFunctionAddress 0000000140E77270
*/

bool function IsPredicting()

/*
* @Breif Returns whether this player has grapple available in general.
* @Pramas 
* @NativeName: HasGrapple
* @NativeFunctionAddress 0000000140E77210
*/

bool function HasGrapple()

/*
* @Breif Returns whether this player can grapple the surface they're looking at.
* @Pramas 
* @NativeName: MayGrapple
* @NativeFunctionAddress 0000000140E771B0
*/

bool function MayGrapple()

/*
* @Breif Returns whether the player is sliding
* @Pramas 
* @NativeName: IsSliding
* @NativeFunctionAddress 0000000140E77150
*/

bool function IsSliding()

/*
* @Breif Begin freefalling
* @Pramas vector
* @NativeName: Player_BeginFreefall
* @NativeFunctionAddress 0000000140E770F0
*/

void function Player_BeginFreefall(vector)

/*
* @Breif End freefalling
* @Pramas 
* @NativeName: Player_EndFreefall
* @NativeFunctionAddress 0000000140E770A0
*/

void function Player_EndFreefall()

/*
* @Breif Return time freefall started
* @Pramas 
* @NativeName: Player_GetFreefallStartTime
* @NativeFunctionAddress 0000000140E76FF0
*/

float function Player_GetFreefallStartTime()

/*
* @Breif Return time freefall started
* @Pramas 
* @NativeName: Player_GetFreefallEndTime
* @NativeFunctionAddress 0000000140E76F40
*/

float function Player_GetFreefallEndTime()

/*
* @Breif Begin anticipating freefalling
* @Pramas 
* @NativeName: Player_BeginFreefallAnticipate
* @NativeFunctionAddress 0000000140E76EF0
*/

void function Player_BeginFreefallAnticipate()

/*
* @Breif End anticipating freefalling
* @Pramas 
* @NativeName: Player_EndFreefallAnticipate
* @NativeFunctionAddress 0000000140E76EA0
*/

void function Player_EndFreefallAnticipate()

/*
* @Breif Returns true if the player is freefalling
* @Pramas 
* @NativeName: Player_IsFreefalling
* @NativeFunctionAddress 0000000140E76E30
*/

bool function Player_IsFreefalling()

/*
* @Breif Returns true if the player is freefalling and about to land
* @Pramas 
* @NativeName: Player_IsFreefallAnticipating
* @NativeFunctionAddress 0000000140E76DC0
*/

bool function Player_IsFreefallAnticipating()

/*
* @Breif 
* @Pramas 
* @NativeName: Player_GetFreefallDistanceToLand
* @NativeFunctionAddress 0000000140E76D10
*/

float function Player_GetFreefallDistanceToLand()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetStrafeAngle
* @NativeFunctionAddress 0000000140E76C60
*/

float function Skydive_GetStrafeAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetSpeed
* @NativeFunctionAddress 0000000140E76BB0
*/

float function Skydive_GetSpeed()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetDiveAngle
* @NativeFunctionAddress 0000000140E76B00
*/

float function Skydive_GetDiveAngle()

/*
* @Breif 
* @Pramas bool
* @NativeName: Skydive_SetFreelookMode
* @NativeFunctionAddress 0000000140E76AA0
*/

void function Skydive_SetFreelookMode(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_IsFreelooking
* @NativeFunctionAddress 0000000140E76A40
*/

bool function Skydive_IsFreelooking()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetFreelookLockedAngle
* @NativeFunctionAddress 0000000140E76970
*/

vector function Skydive_GetFreelookLockedAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_IsFollowing
* @NativeFunctionAddress 0000000140E76900
*/

bool function Skydive_IsFollowing()

/*
* @Breif 
* @Pramas entity
* @NativeName: Skydive_FollowPlayer
* @NativeFunctionAddress 0000000140E76880
*/

void function Skydive_FollowPlayer(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_StopFollowing
* @NativeFunctionAddress 0000000140E76830
*/

void function Skydive_StopFollowing()

/*
* @Breif Ends traversals such as mantle. Moves the player to the nearest nonsolid location.
* @Pramas 
* @NativeName: Script_ClearTraverse
* @NativeFunctionAddress 0000000140E767D0
*/

void function ClearTraverse()

/*
* @Breif Returns the player's origin, or, if the player is traversing / mantling, returns a safe nearby position that is not in solid.
* @Pramas 
* @NativeName: Script_GetOriginOutOfTraversal
* @NativeFunctionAddress 0000000140E766C0
*/

vector function GetOriginOutOfTraversal()

/*
* @Breif Get the forward view vector of the player
* @Pramas 
* @NativeName: GetViewVector
* @NativeFunctionAddress 0000000140E765E0
*/

vector function GetViewVector()

/*
* @Breif Get the forward view vector of the player
* @Pramas 
* @NativeName: GetViewVector
* @NativeFunctionAddress 0000000140E765E0
*/

vector function GetViewForward()

/*
* @Breif Get the right view vector of the player
* @Pramas 
* @NativeName: GetViewRight
* @NativeFunctionAddress 0000000140E76500
*/

vector function GetViewRight()

/*
* @Breif Get the up view vector of the player
* @Pramas 
* @NativeName: GetViewUp
* @NativeFunctionAddress 0000000140E76420
*/

vector function GetViewUp()

/*
* @Breif Returns the size of the party this player was in when they connected
* @Pramas 
* @NativeName: GetPartySize
* @NativeFunctionAddress 0000000140E6AE70
*/

int function GetPartySize()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPartyLeaderClientIndex
* @NativeFunctionAddress 0000000140E76360
*/

int function GetPartyLeaderClientIndex()

/*
* @Breif Gets the code name of this player's party
* @Pramas 
* @NativeName: GetPartyRoomName
* @NativeFunctionAddress 0000000140E762C0
*/

string function GetPartyRoomName()

/*
* @Breif Get the players current viewpunch amount, squared
* @Pramas 
* @NativeName: Script_GetViewPunchSqrd
* @NativeFunctionAddress 0000000140E76200
*/

float function GetViewPunchSqrd()

/*
* @Breif Punch the players view from the specified origin. Takes arguments: origin, softAmount, hardAmount, randomBoost
* @Pramas vector, float, float, float
* @NativeName: Script_ViewPunch
* @NativeFunctionAddress 0000000140E76150
*/

void function ViewPunch(vector, float, float, float)

/*
* @Breif Track that this player relinquished jumpmaster (non-cumulative)
* @Pramas 
* @NativeName: TrackPlayerRelinquished
* @NativeFunctionAddress 0000000140E760F0
*/

void function TrackPlayerRelinquished()

/*
* @Breif Track that this player hot dropped (non-cumulative)
* @Pramas 
* @NativeName: TrackPlayerHotDropped
* @NativeFunctionAddress 0000000140E76090
*/

void function TrackPlayerHotDropped()

/*
* @Breif Track which character they picked
* @Pramas int, string
* @NativeName: TrackPlayerCharacter
* @NativeFunctionAddress 0000000140E75FF0
*/

void function TrackPlayerCharacter(int, string)

/*
* @Breif Track that player just pinged something
* @Pramas 
* @NativeName: TrackPlayerPing
* @NativeFunctionAddress 0000000140E75F90
*/

void function TrackPlayerPing()

/*
* @Breif Track that player just pinged an enemy
* @Pramas 
* @NativeName: TrackPlayerEnemyPing
* @NativeFunctionAddress 0000000140E75F30
*/

void function TrackPlayerEnemyPing()

/*
* @Breif Track that player just pinged a location
* @Pramas 
* @NativeName: TrackPlayerLocationPing
* @NativeFunctionAddress 0000000140E75ED0
*/

void function TrackPlayerLocationPing()

/*
* @Breif Track shots fired and hits
* @Pramas int, int
* @NativeName: TrackPlayerShots
* @NativeFunctionAddress 0000000140E75E40
*/

void function TrackPlayerShots(int, int)

/*
* @Breif Track what level the player is
* @Pramas int
* @NativeName: TrackPlayerLevel
* @NativeFunctionAddress 0000000140E75DD0
*/

void function TrackPlayerLevel(int)

/*
* @Breif Track matches for this player
* @Pramas int, int, int, int, int
* @NativeName: TrackPlayerMatches
* @NativeFunctionAddress 0000000140E75CF0
*/

void function TrackPlayerMatches(int, int, int, int, int)

/*
* @Breif Track kills for this player
* @Pramas int, int
* @NativeName: TrackPlayerKills
* @NativeFunctionAddress 0000000140E75C60
*/

void function TrackPlayerKills(int, int)

/*
* @Breif Track damage for this player
* @Pramas int, int
* @NativeName: TrackPlayerDamage
* @NativeFunctionAddress 0000000140E75BD0
*/

void function TrackPlayerDamage(int, int)

/*
* @Breif Track how many times this player has revived an ally
* @Pramas int
* @NativeName: TrackPlayerAllyRevives
* @NativeFunctionAddress 0000000140E75B60
*/

void function TrackPlayerAllyRevives(int)

/*
* @Breif Track the player's current rank score
* @Pramas string, int
* @NativeName: TrackRankScore
* @NativeFunctionAddress 0000000140E75AC0
*/

void function TrackRankScore(string, int)

/*
* @Breif Sets the current player class
* @Pramas string
* @NativeName: SetClass_Script
* @NativeFunctionAddress 0000000140E75A60
*/

void function Code_SetPlayerSettings(string)

/*
* @Breif Given (string), returns true if mod is active on this player
* @Pramas string
* @NativeName: HasClassMod_Script
* @NativeFunctionAddress 0000000140E759F0
*/

bool function HasClassMod(string)

/*
* @Breif Given (string), returns true if given mod is available to use for this player
* @Pramas string, string
* @NativeName: IsClassModAvailableForPlayerSetting_Script
* @NativeFunctionAddress 00000001406A3B40
*/

bool function IsClassModAvailableForPlayerSetting(string, string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetClassPosCount_Script
* @NativeFunctionAddress 0000000140E75950
*/

int function GetClassPosCount()

/*
* @Breif Sets the requested player class
* @Pramas asset requestedClass
* @NativeName: SetRequestedClass
* @NativeFunctionAddress 0000000140E758F0
*/

void function SetPlayerRequestedSettings(asset requestedClass)

/*
* @Breif What class has the player requested
* @Pramas 
* @NativeName: ScriptGetPlayerRequestedClassName
* @NativeFunctionAddress 0000000140E757F0
*/

asset function GetPlayerRequestedClass()

/*
* @Breif What class is the player
* @Pramas 
* @NativeName: GetPlayerClassName
* @NativeFunctionAddress 0000000140E75760
*/

asset function GetPlayerSettings()

/*
* @Breif What class has the player requested
* @Pramas 
* @NativeName: GetPlayerRequestedClassName
* @NativeFunctionAddress 0000000140E75670
*/

asset function GetPlayerRequestedSettings()

/*
* @Breif What general class is the player (pilot/titan)
* @Pramas 
* @NativeName: GetPlayerGeneralClassName
* @NativeFunctionAddress 0000000140E755C0
*/

string function GetPlayerClass()

/*
* @Breif What general subclass is the player (wallrun/boost)
* @Pramas 
* @NativeName: GetPlayerSubClassName
* @NativeFunctionAddress 0000000140E75530
*/

string function GetPlayerSubClass()

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingBool
* @NativeFunctionAddress 0000000140E754B0
*/

bool function GetPlayerSettingBool(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingInt
* @NativeFunctionAddress 0000000140E753E0
*/

int function GetPlayerSettingInt(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingFloat
* @NativeFunctionAddress 0000000140E75310
*/

float function GetPlayerSettingFloat(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingVector
* @NativeFunctionAddress 0000000140E75230
*/

vector function GetPlayerSettingVector(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingString
* @NativeFunctionAddress 0000000140E75190
*/

string function GetPlayerSettingString(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingAsset
* @NativeFunctionAddress 0000000140E750F0
*/

asset function GetPlayerSettingAsset(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingStringAsAsset
* @NativeFunctionAddress 0000000140E75050
*/

asset function GetPlayerSettingStringAsAsset(string)

/*
* @Breif Set player's view entity.
* @Pramas entity, bool
* @NativeName: ScriptSetViewEntity
* @NativeFunctionAddress 0000000140E74FD0
*/

void function SetViewEntity(entity, bool)

/*
* @Breif Clear view entity.
* @Pramas 
* @NativeName: ScriptClearViewEntity
* @NativeFunctionAddress 0000000140E74F70
*/

void function ClearViewEntity()

/*
* @Breif Set the view entity to index from GetViewIndexForEntity.
* @Pramas int
* @NativeName: SetViewIndex
* @NativeFunctionAddress 0000000140E74F00
*/

void function SetViewIndex(int)

/*
* @Breif Return player's index number (which is entindex() -1 )
* @Pramas 
* @NativeName: GetPlayerIndex
* @NativeFunctionAddress 0000000140E74E50
*/

int function GetPlayerIndex()

/*
* @Breif Makes player controls not affect movement, etc.
* @Pramas 
* @NativeName: ScriptFreezeControlsOnServer
* @NativeFunctionAddress 0000000140E74DD0
*/

void function FreezeControlsOnServer()

/*
* @Breif Makes player controls not affect movement, etc.
* @Pramas 
* @NativeName: ScriptUnfreezeControlsOnServer
* @NativeFunctionAddress 0000000140E74D50
*/

void function UnfreezeControlsOnServer()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptSetThirdPersonModeOn
* @NativeFunctionAddress 0000000140E74D00
*/

void function SetThirdPersonModeOn()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptSetThirdPersonModeOff
* @NativeFunctionAddress 0000000140E74C80
*/

void function SetThirdPersonModeOff()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptSetThirdPersonShoulderModeOn
* @NativeFunctionAddress 0000000140E74C30
*/

void function SetThirdPersonShoulderModeOn()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptSetThirdPersonShoulderModeOff
* @NativeFunctionAddress 0000000140E74BE0
*/

void function SetThirdPersonShoulderModeOff()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsThirdPersonShoulderModeOn
* @NativeFunctionAddress 0000000140E74B80
*/

bool function IsThirdPersonShoulderModeOn()

/*
* @Breif Makes the Black and white screen on low health enabled
* @Pramas 
* @NativeName: ScriptTurnLowHealthEffectsOff
* @NativeFunctionAddress 0000000140E74B00
*/

void function TurnLowHealthEffectsOff()

/*
* @Breif Stops the Black and white screen on low health from happening
* @Pramas 
* @NativeName: ScriptTurnLowHealthEffectsOn
* @NativeFunctionAddress 0000000140E74A80
*/

void function TurnLowHealthEffectsOn()

/*
* @Breif 
* @Pramas int
* @NativeName: ScriptSetBleedoutState
* @NativeFunctionAddress 0000000140E74A10
*/

void function SetBleedoutState(int)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetBleedoutState
* @NativeFunctionAddress 0000000140E74960
*/

int function GetBleedoutState()

/*
* @Breif stops the player from auto reloading on no ammo
* @Pramas 
* @NativeName: ScriptDisableAutoReloadNoAmmo
* @NativeFunctionAddress 0000000140E748E0
*/

void function DisableAutoReloadNoAmmo()

/*
* @Breif lets the player auto reload on no ammo
* @Pramas 
* @NativeName: ScriptEnableAutoReloadNoAmmo
* @NativeFunctionAddress 0000000140E74860
*/

void function EnableAutoReloadNoAmmo()

/*
* @Breif Disallows weapon changes.
* @Pramas 
* @NativeName: ScriptLockWeaponChange
* @NativeFunctionAddress 0000000140E747E0
*/

void function LockWeaponChange()

/*
* @Breif Allows weapon changes.
* @Pramas 
* @NativeName: ScriptUnlockWeaponChange
* @NativeFunctionAddress 0000000140E74760
*/

void function UnlockWeaponChange()

/*
* @Breif Query the weapon change allowed state.
* @Pramas 
* @NativeName: ScriptIsWeaponChangeLocked
* @NativeFunctionAddress 0000000140E746F0
*/

bool function IsWeaponChangeLocked()

/*
* @Breif Enable player movement
* @Pramas 
* @NativeName: MovementEnable
* @NativeFunctionAddress 0000000140E74660
*/

void function MovementEnable()

/*
* @Breif Disable player movement
* @Pramas 
* @NativeName: MovementDisable
* @NativeFunctionAddress 0000000140E745D0
*/

void function MovementDisable()

/*
* @Breif Invalidate a player's lag compensation records to ensure client's aren't shooting the player's past.
* @Pramas 
* @NativeName: Script_InvalidateLagCompensationRecords
* @NativeFunctionAddress 0000000140E74570
*/

void function Server_InvalidateLagCompensationRecords()

/*
* @Breif Turns the disable offhand weapons flag on.
* @Pramas 
* @NativeName: Script_TurnOffhandWeaponsDisabledOn
* @NativeFunctionAddress 0000000140E744F0
*/

void function Server_TurnOffhandWeaponsDisabledOn()

/*
* @Breif Turns the disable offhand weapons flag off.
* @Pramas 
* @NativeName: Script_TurnOffhandWeaponsDisabledOff
* @NativeFunctionAddress 0000000140E74470
*/

void function Server_TurnOffhandWeaponsDisabledOff()

/*
* @Breif Returns true if the disable offhand weapons flag is on.
* @Pramas 
* @NativeName: Script_IsOffhandWeaponsDisabled
* @NativeFunctionAddress 0000000140E74400
*/

bool function Server_IsOffhandWeaponsDisabled()

/*
* @Breif Turns on the disable abilities weapons flag
* @Pramas 
* @NativeName: Script_DisableAbilities
* @NativeFunctionAddress 0000000140E74380
*/

void function Server_DisableAbilities()

/*
* @Breif Turns off the disable abilities weapons flag
* @Pramas 
* @NativeName: Script_EnableAbilities
* @NativeFunctionAddress 0000000140E74300
*/

void function Server_EnableAbilities()

/*
* @Breif Returns true if the disable abilities flag is on.
* @Pramas 
* @NativeName: Script_IsAbilitiesDisabled
* @NativeFunctionAddress 0000000140E74290
*/

bool function Server_IsAbilitiesDisabled()

/*
* @Breif Enter Shadow Form
* @Pramas 
* @NativeName: Script_EnterShadowForm
* @NativeFunctionAddress 0000000140E74210
*/

void function EnterShadowForm()

/*
* @Breif Leave Shadow Form
* @Pramas 
* @NativeName: Script_LeaveShadowForm
* @NativeFunctionAddress 0000000140E74190
*/

void function LeaveShadowForm()

/*
* @Breif Is the player in Shadow Form?
* @Pramas 
* @NativeName: Script_IsShadowForm
* @NativeFunctionAddress 0000000140E74120
*/

bool function IsShadowForm()

/*
* @Breif Turns the disable dodge flag on.
* @Pramas 
* @NativeName: Script_TurnDodgeDisabledOn
* @NativeFunctionAddress 0000000140E740A0
*/

void function Server_TurnDodgeDisabledOn()

/*
* @Breif Turns the diable dodge flag off.
* @Pramas 
* @NativeName: Script_TurnDodgeDisabledOff
* @NativeFunctionAddress 0000000140E74020
*/

void function Server_TurnDodgeDisabledOff()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ForceMPAimassist
* @NativeFunctionAddress 0000000140E73FA0
*/

void function ForceMPAimassist()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PreventWeaponDestroyNoAmmo
* @NativeFunctionAddress 0000000140E73F20
*/

void function PreventWeaponDestroyNoAmmo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableWeaponDestroyNoAmmo
* @NativeFunctionAddress 0000000140E73EA0
*/

void function EnableWeaponDestroyNoAmmo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableAllIDLightsFriendly
* @NativeFunctionAddress 0000000140E73E20
*/

void function EnableAllIDLightsFriendly()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableAllIDLightsFriendly
* @NativeFunctionAddress 0000000140E73DA0
*/

void function DisableAllIDLightsFriendly()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableMantle
* @NativeFunctionAddress 0000000140E73D20
*/

void function DisableMantle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableMantle
* @NativeFunctionAddress 0000000140E73CA0
*/

void function EnableMantle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableVelocityShakeAlwaysOn
* @NativeFunctionAddress 0000000140E73C20
*/

void function EnableVelocityShakeAlwaysOn()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableVelocityShakeAlwaysOn
* @NativeFunctionAddress 0000000140E73BA0
*/

void function DisableVelocityShakeAlwaysOn()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_TargetInfoDisableOn
* @NativeFunctionAddress 0000000140E73B20
*/

void function TargetInfoDisableOn()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_TargetInfoDisableOff
* @NativeFunctionAddress 0000000140E73AA0
*/

void function TargetInfoDisableOff()

/*
* @Breif Respawns the player.
* @Pramas entity
* @NativeName: ScriptRespawnPlayer
* @NativeFunctionAddress 0000000140E73A20
*/

void function Code_RespawnPlayer(entity)

/*
* @Breif Reserves a spawn point for a player.
* @Pramas entity
* @NativeName: ScriptReserveSpawnPoint
* @NativeFunctionAddress 0000000140E739A0
*/

void function ReserveSpawnPoint(entity)

/*
* @Breif Clears a spawn point reservation.
* @Pramas 
* @NativeName: ScriptClearSpawnPoint
* @NativeFunctionAddress 0000000140E73940
*/

void function ClearSpawnPoint()

/*
* @Breif Sets the last spawn point used by the player.
* @Pramas entity
* @NativeName: ScriptSetLastSpawnPoint
* @NativeFunctionAddress 0000000140E738C0
*/

void function SetLastSpawnPoint(entity)

/*
* @Breif Returns if player is a fake player for replays
* @Pramas 
* @NativeName: IsReplay
* @NativeFunctionAddress 0000000140E73860
*/

bool function IsReplay()

/*
* @Breif Returns whether the player is in an observer mode
* @Pramas 
* @NativeName: IsObserver
* @NativeFunctionAddress 0000000140E737F0
*/

bool function IsObserver()

/*
* @Breif Returns the player's observer mode. OBS_MODE_NONE if they are not observing
* @Pramas 
* @NativeName: GetObserverMode
* @NativeFunctionAddress 0000000140E73740
*/

int function GetObserverMode()

/*
* @Breif Put player into the given observer mode
* @Pramas int
* @NativeName: ScriptStartObserverMode
* @NativeFunctionAddress 0000000140E736D0
*/

void function StartObserverMode(int)

/*
* @Breif Clears observer mode to OBS_MODE_NONE.
* @Pramas 
* @NativeName: ScriptStopObserverMode
* @NativeFunctionAddress 0000000140E73680
*/

void function StopObserverMode()

/*
* @Breif Set target entity for player's observer mode
* @Pramas entity
* @NativeName: ScriptSetObserverTarget
* @NativeFunctionAddress 0000000140E73600
*/

void function SetObserverTarget(entity)

/*
* @Breif Gets the target entity for player's observer mode
* @Pramas 
* @NativeName: ScriptGetObserverTarget
* @NativeFunctionAddress 0000000140E73570
*/

entity function GetObserverTarget()

/*
* @Breif Gets the first target entity in the cycle for player's observer mode
* @Pramas 
* @NativeName: ScriptGetFirstObserverTarget
* @NativeFunctionAddress 0000000140E73510
*/

entity function GetFirstObserverTarget()

/*
* @Breif Sets the position that this player will use when they are in OBS_MODE_STATIC or OBS_MODE_STATIC_LOCKED
* @Pramas vector
* @NativeName: ScriptSetObserverModeStaticPosition
* @NativeFunctionAddress 0000000140E734B0
*/

void function SetObserverModeStaticPosition(vector)

/*
* @Breif Sets the angles that this player will use when they are in OBS_MODE_STATIC or OBS_MODE_STATIC_LOCKED
* @Pramas vector
* @NativeName: ScriptSetObserverModeStaticAngles
* @NativeFunctionAddress 0000000140E73450
*/

void function SetObserverModeStaticAngles(vector)

/*
* @Breif Sets the fov that this player will use when they are in OBS_MODE_STATIC or OBS_MODE_STATIC_LOCKED. Set to 0.0 to disable.
* @Pramas float
* @NativeName: ScriptSetObserverModeStaticFOVOverride
* @NativeFunctionAddress 0000000140E733E0
*/

void function SetObserverModeStaticFOVOverride(float)

/*
* @Breif Sets whether this player is a valid observer target for other players who are using OBS_MODE_CHASE
* @Pramas bool
* @NativeName: ScriptSetIsValidChaseObserverTarget
* @NativeFunctionAddress 0000000140E73380
*/

void function SetIsValidChaseObserverTarget(bool)

/*
* @Breif Set true to allow player to switch between first and third person. False to disallow.
* @Pramas bool
* @NativeName: SetPlayerCanToggleObserverMode
* @NativeFunctionAddress 0000000140E73320
*/

void function SetPlayerCanToggleObserverMode(bool)

/*
* @Breif Start using another player for you first person view.
* @Pramas entity
* @NativeName: StartObservingPlayerInFirstPerson
* @NativeFunctionAddress 0000000140E732A0
*/

void function StartObservingPlayerInFirstPerson(entity)

/*
* @Breif Stop observing another player in first person.
* @Pramas 
* @NativeName: StopObservingPlayerInFirstPerson
* @NativeFunctionAddress 0000000140E73240
*/

void function StopObservingPlayerInFirstPerson()

/*
* @Breif Get how zoomed-in a player is. Result is between (0.0, 1.0).
* @Pramas 
* @NativeName: GetZoomFrac
* @NativeFunctionAddress 0000000140E73190
*/

float function GetZoomFrac()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDamagedByOtherPlayer
* @NativeFunctionAddress 0000000140E730E0
*/

float function GetLastTimeDamagedByOtherPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDamagedByNPC
* @NativeFunctionAddress 0000000140E73030
*/

float function GetLastTimeDamagedByNPC()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDidDamageToOtherPlayer
* @NativeFunctionAddress 0000000140E72F80
*/

float function GetLastTimeDidDamageToOtherPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDidDamageToNPC
* @NativeFunctionAddress 0000000140E72ED0
*/

float function GetLastTimeDidDamageToNPC()

/*
* @Breif Returns player's minimum bounds
* @Pramas 
* @NativeName: GetPlayerMins
* @NativeFunctionAddress 0000000140E72E30
*/

vector function GetPlayerMins()

/*
* @Breif Returns player's maximum bounds
* @Pramas 
* @NativeName: GetPlayerMaxs
* @NativeFunctionAddress 0000000140E72D90
*/

vector function GetPlayerMaxs()

/*
* @Breif Returns whether player has use button pressed
* @Pramas 
* @NativeName: UseButtonPressed
* @NativeFunctionAddress 0000000140E72D20
*/

bool function UseButtonPressed()

/*
* @Breif Get the player's name.
* @Pramas 
* @NativeName: GetPlayerName
* @NativeFunctionAddress 0000000140E72C90
*/

string function GetPlayerName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerNameOriginal
* @NativeFunctionAddress 0000000140E72BF0
*/

string function GetPlayerNameOriginal()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerMachineName
* @NativeFunctionAddress 0000000140E72B50
*/

string function GetPlayerMachineName()

/*
* @Breif Get the player's platform name.
* @Pramas 
* @NativeName: GetPlayerPlatformName
* @NativeFunctionAddress 0000000140E72AB0
*/

string function GetPlayerPlatformName()

/*
* @Breif Let code know a melee attack has started
* @Pramas int
* @NativeName: PlayerMelee_StartAttack
* @NativeFunctionAddress 0000000140E72A40
*/

void function PlayerMelee_StartAttack(int)

/*
* @Breif Let code know a melee attack has ended
* @Pramas 
* @NativeName: PlayerMelee_EndAttack
* @NativeFunctionAddress 0000000140E729F0
*/

void function PlayerMelee_EndAttack()

/*
* @Breif Let script query whether a melee attack is currently in progress
* @Pramas 
* @NativeName: PlayerMelee_IsAttackActive
* @NativeFunctionAddress 0000000140E72990
*/

bool function PlayerMelee_IsAttackActive()

/*
* @Breif Returns true if currently doing a melee attack and the attack was started while sprinting
* @Pramas 
* @NativeName: PlayerMelee_IsSprintAttack
* @NativeFunctionAddress 0000000140E72920
*/

bool function PlayerMelee_IsSprintAttack()

/*
* @Breif Let code know the melee attack hit something (so code will stop the lunge movement)
* @Pramas entity
* @NativeName: PlayerMelee_SetAttackHitEntity
* @NativeFunctionAddress 0000000140E728A0
*/

void function PlayerMelee_SetAttackHitEntity(entity)

/*
* @Breif 
* @Pramas bool
* @NativeName: PlayerMelee_SetAttackRecoveryShouldBeQuick
* @NativeFunctionAddress 0000000140E72810
*/

void function PlayerMelee_SetAttackRecoveryShouldBeQuick(bool)

/*
* @Breif Let script query whether the melee attack hit flag has been set
* @Pramas 
* @NativeName: PlayerMelee_GetAttackHitEntity
* @NativeFunctionAddress 0000000140E727B0
*/

entity function PlayerMelee_GetAttackHitEntity()

/*
* @Breif Sets scripted melee state (arbitrary integer)
* @Pramas int
* @NativeName: PlayerMelee_Script_SetState
* @NativeFunctionAddress 0000000140E726F0
*/

void function PlayerMelee_SetState(int)

/*
* @Breif Gets scripted melee state (arbitrary integer)
* @Pramas 
* @NativeName: PlayerMelee_Script_GetState
* @NativeFunctionAddress 0000000140E72640
*/

int function PlayerMelee_GetState()

/*
* @Breif Increments disabled melee counter
* @Pramas 
* @NativeName: Script_SetMeleeDisabled
* @NativeFunctionAddress 0000000140E725B0
*/

void function SetMeleeDisabled()

/*
* @Breif Decrements disabled melee counter
* @Pramas 
* @NativeName: Script_ClearMeleeDisabled
* @NativeFunctionAddress 0000000140E72520
*/

void function ClearMeleeDisabled()

/*
* @Breif Gets the disabled melee counter
* @Pramas 
* @NativeName: Script_GetMeleeDisabled
* @NativeFunctionAddress 0000000140E72470
*/

int function GetMeleeDisabled()

/*
* @Breif Queue a melee attack (useful for dev)
* @Pramas 
* @NativeName: QueueMeleeAttack
* @NativeFunctionAddress 0000000140E72420
*/

void function QueueMeleeAttack()

/*
* @Breif Have the player lerp towards the given target as they wind up for their attack
* @Pramas entity
* @NativeName: Lunge_SetTargetEntity
* @NativeFunctionAddress 0000000140E723A0
*/

bool function Lunge_SetTargetEntity(entity)

/*
* @Breif Get the current lunge target
* @Pramas 
* @NativeName: Lunge_GetTargetEntity
* @NativeFunctionAddress 0000000140E72340
*/

entity function Lunge_GetTargetEntity()

/*
* @Breif Make the player lerp towards the given position
* @Pramas vector
* @NativeName: Lunge_SetTargetPosition
* @NativeFunctionAddress 0000000140E722E0
*/

void function Lunge_SetTargetPosition(vector)

/*
* @Breif Get the position the player is lunging towards
* @Pramas 
* @NativeName: Lunge_GetTargetPosition
* @NativeFunctionAddress 0000000140E721B0
*/

vector function Lunge_GetTargetPosition()

/*
* @Breif 
* @Pramas vector
* @NativeName: Lunge_SetEndPositionOffset
* @NativeFunctionAddress 0000000140E720D0
*/

void function Lunge_SetEndPositionOffset(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: Lunge_GetEndPositionOffset
* @NativeFunctionAddress 0000000140E72000
*/

vector function Lunge_GetEndPositionOffset()

/*
* @Breif Clears any lunging currently going on
* @Pramas 
* @NativeName: Lunge_ClearTarget
* @NativeFunctionAddress 0000000140E71FB0
*/

void function Lunge_ClearTarget()

/*
* @Breif Allow the lunge to fly into the air, if it needs to
* @Pramas 
* @NativeName: Lunge_EnableFlying
* @NativeFunctionAddress 0000000140E71F60
*/

void function Lunge_EnableFlying()

/*
* @Breif Whether lunging to adjust the player's view pitch
* @Pramas bool
* @NativeName: Lunge_LockPitch
* @NativeFunctionAddress 0000000140E71F00
*/

void function Lunge_LockPitch(bool)

/*
* @Breif Sets how long it takes to lunge to the target. Default is 0.5 seconds.
* @Pramas float
* @NativeName: Lunge_SetSmoothTime
* @NativeFunctionAddress 0000000140E71E90
*/

void function Lunge_SetSmoothTime(float)

/*
* @Breif Sets maximum time for how long a lunge will go on for
* @Pramas float
* @NativeName: Lunge_SetMaxTime
* @NativeFunctionAddress 0000000140E71E20
*/

void function Lunge_SetMaxTime(float)

/*
* @Breif Sets the maximum speed the player can end lunging with. Defaults to 0.
* @Pramas float
* @NativeName: Lunge_SetMaxEndSpeed
* @NativeFunctionAddress 0000000140E71DB0
*/

void function Lunge_SetMaxEndSpeed(float)

/*
* @Breif Is the player lunging.
* @Pramas 
* @NativeName: Lunge_IsActive
* @NativeFunctionAddress 0000000140E71D50
*/

bool function Lunge_IsActive()

/*
* @Breif Is the player lunging towards an entity
* @Pramas 
* @NativeName: Lunge_IsLungingToEntity
* @NativeFunctionAddress 0000000140E71CD0
*/

bool function Lunge_IsLungingToEntity()

/*
* @Breif Is the player lunging towards a position
* @Pramas 
* @NativeName: Lunge_IsLungingToPosition
* @NativeFunctionAddress 0000000140E71C50
*/

bool function Lunge_IsLungingToPosition()

/*
* @Breif Is the player lunging to ground execute
* @Pramas 
* @NativeName: Lunge_IsGroundExecute
* @NativeFunctionAddress 0000000140E71BF0
*/

bool function Lunge_IsGroundExecute()

/*
* @Breif Returns the initial relative position of the player from the lunge target
* @Pramas 
* @NativeName: Lunge_GetStartPositionOffset
* @NativeFunctionAddress 0000000140E71AC0
*/

vector function Lunge_GetStartPositionOffset()

/*
* @Breif Plays a controller rumble on the current player. Takes three parameters: rumble index (the wave pattern of the vibration or 0 to stop all rumbles), rumble data (optional data for the rumble flags parameter that follows), and rumble flags (additional flags for the rumble). See rumble_shared.h for further details.
* @Pramas int, int, int
* @NativeName: Script_RumbleEffect
* @NativeFunctionAddress 0000000140E71A20
*/

void function RumbleEffect(int, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableSlowMo
* @NativeFunctionAddress 0000000140E71990
*/

void function EnableSlowMo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableSlowMo
* @NativeFunctionAddress 0000000140E71900
*/

void function DisableSlowMo()

/*
* @Breif Force things (like superjump and wallrunning) to reset as if the player touched ground.
* @Pramas 
* @NativeName: TouchGround
* @NativeFunctionAddress 0000000140E718B0
*/

void function TouchGround()

/*
* @Breif Makes the player unable to double jump until they touch the ground again.
* @Pramas 
* @NativeName: ConsumeDoubleJump
* @NativeFunctionAddress 0000000140E71810
*/

void function ConsumeDoubleJump()

/*
* @Breif Set this entity to use staggered walk and run animations
* @Pramas 
* @NativeName: ScriptSetStaggering
* @NativeFunctionAddress 0000000140E717B0
*/

void function SetStaggering()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGPTrustFailsRspn
* @NativeFunctionAddress 0000000140E71700
*/

int function GetGPTrustFailsRspn()

/*
* @Breif Sets the near Z to use when playing scripted animations
* @Pramas float
* @NativeName: Script_SetAnimNearZ
* @NativeFunctionAddress 0000000140E71690
*/

void function SetAnimNearZ(float)

/*
* @Breif Resets the near Z to default when playing scripted animations
* @Pramas 
* @NativeName: Script_ClearAnimNearZ
* @NativeFunctionAddress 0000000140E715F0
*/

void function ClearAnimNearZ()

/*
* @Breif Scales the movement speed of the player
* @Pramas float
* @NativeName: Script_SetMoveSpeedScale
* @NativeFunctionAddress 0000000140E71540
*/

void function SetMoveSpeedScale(float)

/*
* @Breif Scales the movement acceleration of the player
* @Pramas float
* @NativeName: Script_SetAccelerationScale
* @NativeFunctionAddress 0000000140E71490
*/

void function SetAccelerationScale(float)

/*
* @Breif Scales the power regen rate of the player (e.g. for dodge use)
* @Pramas float
* @NativeName: Script_SetPowerRegenRateScale
* @NativeFunctionAddress 0000000140E713E0
*/

void function SetPowerRegenRateScale(float)

/*
* @Breif Scales the dodge power delay of the player
* @Pramas float
* @NativeName: Script_SetDodgePowerDelayScale
* @NativeFunctionAddress 0000000140E71330
*/

void function SetDodgePowerDelayScale(float)

/*
* @Breif Returns true if the player wants to be actively matchmaking
* @Pramas 
* @NativeName: Script_DoesPlayerWantToMatchmake
* @NativeFunctionAddress 0000000140E712A0
*/

bool function WantsMatchmaking()

/*
* @Breif Kills the player (without leaving a corpse)
* @Pramas 
* @NativeName: Despawn
* @NativeFunctionAddress 0000000140E71250
*/

void function Despawn()

/*
* @Breif Returns true if the player is ziplining (in either direction)
* @Pramas 
* @NativeName: Zipline_IsZiplining
* @NativeFunctionAddress 0000000140E711B0
*/

bool function IsZiplining()

/*
* @Breif Returns true if the player is ziplining in reverse
* @Pramas 
* @NativeName: Zipline_IsZipliningInReverse
* @NativeFunctionAddress 0000000140E71110
*/

bool function IsZipliningInReverse()

/*
* @Breif Returns true if the player is ziplining vertically
* @Pramas 
* @NativeName: Zipline_IsZipliningVertically
* @NativeFunctionAddress 0000000140E710B0
*/

bool function Zipline_IsZipliningVertically()

/*
* @Breif Returns true if the player is mounting a zipline
* @Pramas 
* @NativeName: Zipline_IsMountingZipline
* @NativeFunctionAddress 0000000140E71000
*/

bool function IsMountingZipline()

/*
* @Breif Try use the closest zipline, if there is one available. Returns true on success.
* @Pramas 
* @NativeName: Zipline_TryUse
* @NativeFunctionAddress 0000000140E70FA0
*/

bool function Zipline_TryUse()

/*
* @Breif Forces the player to detach from their zipline
* @Pramas 
* @NativeName: Zipline_Stop
* @NativeFunctionAddress 0000000140E70F50
*/

void function Zipline_Stop()

/*
* @Breif Get the zipline entity the player is currently using
* @Pramas 
* @NativeName: Zipline_GetActiveZipline
* @NativeFunctionAddress 0000000140E70EC0
*/

entity function Zipline_GetActiveZipline()

/*
* @Breif Get the zipline entity the player was last using
* @Pramas 
* @NativeName: Zipline_GetLastZipline
* @NativeFunctionAddress 0000000140E70E30
*/

entity function Zipline_GetLastZipline()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_Allow
* @NativeFunctionAddress 0000000140E70DB0
*/

void function Zipline_Allow()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_Disallow
* @NativeFunctionAddress 0000000140E70D30
*/

void function Zipline_Disallow()

/*
* @Breif Returns the highest fraction value a smart-ammo-enabled weapon has locked onto this entity right now
* @Pramas 
* @NativeName: SmartAmmo_GetHighestLockOnMeFraction
* @NativeFunctionAddress 0000000140E70C80
*/

float function SmartAmmo_GetHighestLockOnMeFraction()

/*
* @Breif Returns the previous highest fraction value
* @Pramas 
* @NativeName: SmartAmmo_GetPreviousHighestLockOnMeFraction
* @NativeFunctionAddress 0000000140E70BD0
*/

float function SmartAmmo_GetPreviousHighestLockOnMeFraction()

/*
* @Breif Returns an array of the weapon entities with the highest fraction/locks on us
* @Pramas 
* @NativeName: SmartAmmo_Script_GetHighestLocksOnMeEntities
* @NativeFunctionAddress 0000000140E70B00
*/

array< entity > function SmartAmmo_GetHighestLocksOnMeEntities()

/*
* @Breif Enable one-handed weapon anims.
* @Pramas 
* @NativeName: Script_SetOneHandedWeaponUsageOn
* @NativeFunctionAddress 0000000140E70AB0
*/

void function SetOneHandedWeaponUsageOn()

/*
* @Breif Disable one-handed weapon anims.
* @Pramas 
* @NativeName: Script_SetOneHandedWeaponUsageOff
* @NativeFunctionAddress 0000000140E70A60
*/

void function SetOneHandedWeaponUsageOff()

/*
* @Breif Set the skycamera entity that this player should use.
* @Pramas entity
* @NativeName: Script_SetSkyCamera
* @NativeFunctionAddress 0000000140E709E0
*/

void function SetSkyCamera(entity)

/*
* @Breif Set if boost should be activated
* @Pramas bool
* @NativeName: Script_SetActivateBoost
* @NativeFunctionAddress 0000000140E70950
*/

void function SetActivateBoost(bool)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetBoostMeter
* @NativeFunctionAddress 0000000140E708E0
*/

void function SetBoostMeter(float)

/*
* @Breif 
* @Pramas vector
* @NativeName: Script_CanUseJetpack
* @NativeFunctionAddress 0000000140E70870
*/

bool function CanUseJetpack(vector)

/*
* @Breif Set if jetpack should be activated
* @Pramas bool
* @NativeName: Script_SetActivateJetpack
* @NativeFunctionAddress 0000000140E707E0
*/

void function SetActivateJetpack(bool)

/*
* @Breif Sets an entity that should be time-aligned with the player
* @Pramas entity
* @NativeName: Script_SetSyncedEntity
* @NativeFunctionAddress 0000000140E70760
*/

void function SetSyncedEntity(entity)

/*
* @Breif Gets the entity that should be time-aligned with the player
* @Pramas 
* @NativeName: Script_GetSyncedEntity
* @NativeFunctionAddress 0000000140E706D0
*/

entity function GetSyncedEntity()

/*
* @Breif Gets the player's replay delay
* @Pramas 
* @NativeName: GetReplayDelay
* @NativeFunctionAddress 0000000140E70600
*/

float function GetReplayDelay()

/*
* @Breif Returns true if the local client is watching a kill replay.
* @Pramas 
* @NativeName: IsWatchingKillReplay
* @NativeFunctionAddress 0000000140E705A0
*/

bool function IsWatchingKillReplay()

/*
* @Breif Returns true if the local client is watching a spectator replay.
* @Pramas 
* @NativeName: IsWatchingSpecReplay
* @NativeFunctionAddress 0000000140E70540
*/

bool function IsWatchingSpecReplay()

/*
* @Breif Sets the player's delay for kill replay (starts/ends kill replay)
* @Pramas float delay, bool forceThirdPerson
* @NativeName: SetKillReplayDelay
* @NativeFunctionAddress 0000000140E704C0
*/

void function SetKillReplayDelay(float delay, bool forceThirdPerson)

/*
* @Breif Sets the player's delay for 1st person spectator (starts/ends spectator replay)
* @Pramas float
* @NativeName: SetSpecReplayDelay
* @NativeFunctionAddress 0000000140E70450
*/

void function SetSpecReplayDelay(float)

/*
* @Breif Clear's the player's delay for replay, whether kill or spectator
* @Pramas 
* @NativeName: ClearReplayDelay
* @NativeFunctionAddress 0000000140E703F0
*/

void function ClearReplayDelay()

/*
* @Breif Who was killed. Used for non-player killers, to aim the camera toward the victim. It is cleared automatically by code when a replay ends (when replay delay is set to 0).
* @Pramas entity
* @NativeName: SetKillReplayVictim
* @NativeFunctionAddress 0000000140E70330
*/

void function SetKillReplayVictim(entity)

/*
* @Breif 
* @Pramas int encodedEHandle
* @NativeName: Script_SetKillReplayInflictorEHandle
* @NativeFunctionAddress 0000000140E702B0
*/

void function SetKillReplayInflictorEHandle(int encodedEHandle)

/*
* @Breif Sets a bool that is sent to the client. Call after calling SetKillReplayDelay(). The value clears to false on start/end of any replay. Read on the client with IsReplayRoundWinning(). 
* @Pramas bool
* @NativeName: SetIsReplayRoundWinning
* @NativeFunctionAddress 0000000140E70250
*/

void function SetIsReplayRoundWinning(bool)

/*
* @Breif Allow enabling and disable prediction...useful for death cam.
* @Pramas bool
* @NativeName: SetPredictionEnabled
* @NativeFunctionAddress 0000000140E701C0
*/

void function SetPredictionEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetUID
* @NativeFunctionAddress 0000000140E70120
*/

string function GetUID()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlatformUID
* @NativeFunctionAddress 0000000140E6FFF0
*/

string function GetPlatformUID()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardware
* @NativeFunctionAddress 0000000140E6FF60
*/

string function GetHardware()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSkill
* @NativeFunctionAddress 0000000140E6FEB0
*/

float function GetSkill()

/*
* @Breif Get debug flags that clients have set on themselves.
* @Pramas 
* @NativeName: Script_GetMMDbgFlags
* @NativeFunctionAddress 0000000140E6FDF0
*/

int function GetMMDbgFlags()

/*
* @Breif Gets the duration of the most recent network round trip to the player
* @Pramas 
* @NativeName: Script_GetLatency
* @NativeFunctionAddress 0000000140E6FD20
*/

float function GetLatency()

/*
* @Breif Gets the average latency of the player's connection
* @Pramas 
* @NativeName: Script_GetGameAverageLatency
* @NativeFunctionAddress 0000000140E6FC40
*/

float function GetGameAverageLatency()

/*
* @Breif Gets the maximum latency of the player's connection
* @Pramas 
* @NativeName: Script_GetGameMaxLatency
* @NativeFunctionAddress 0000000140E6FB60
*/

float function GetGameMaxLatency()

/*
* @Breif Gets the fraction of packets the player has dropped
* @Pramas 
* @NativeName: Script_GetGamePacketLoss
* @NativeFunctionAddress 0000000140E6FA90
*/

float function GetGamePacketLoss()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanBuildTime
* @NativeFunctionAddress 0000000140E6F9E0
*/

float function GetTitanBuildTime()

/*
* @Breif 
* @Pramas float
* @NativeName: SetTitanBuildTime
* @NativeFunctionAddress 0000000140E6F930
*/

void function SetTitanBuildTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanBubbleShieldTime
* @NativeFunctionAddress 0000000140E6F880
*/

float function GetTitanBubbleShieldTime()

/*
* @Breif 
* @Pramas float
* @NativeName: SetTitanBubbleShieldTime
* @NativeFunctionAddress 0000000140E6F7D0
*/

void function SetTitanBubbleShieldTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCinematicEventFlags
* @NativeFunctionAddress 0000000140E6F720
*/

int function GetCinematicEventFlags()

/*
* @Breif 
* @Pramas int
* @NativeName: SetCinematicEventFlags
* @NativeFunctionAddress 0000000140E6F680
*/

void function SetCinematicEventFlags(int)

/*
* @Breif 
* @Pramas int
* @NativeName: GivePassive
* @NativeFunctionAddress 0000000140E6F610
*/

void function GivePassive(int)

/*
* @Breif 
* @Pramas int
* @NativeName: RemovePassive
* @NativeFunctionAddress 0000000140E6F5A0
*/

void function RemovePassive(int)

/*
* @Breif 
* @Pramas int
* @NativeName: HasPassive
* @NativeFunctionAddress 0000000140E6F4E0
*/

bool function HasPassive(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetForcedDialogueOnly
* @NativeFunctionAddress 0000000140E6F480
*/

bool function GetForcedDialogueOnly()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetForcedDialogueOnly
* @NativeFunctionAddress 0000000140E6F3F0
*/

void function SetForcedDialogueOnly(bool)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetTitanEmbarkEnabled
* @NativeFunctionAddress 0000000140E6F360
*/

void function SetTitanEmbarkEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanEmbarkEnabled
* @NativeFunctionAddress 0000000140E6F300
*/

bool function GetTitanEmbarkEnabled()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetTitanDisembarkEnabled
* @NativeFunctionAddress 0000000140E6F270
*/

void function SetTitanDisembarkEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanDisembarkEnabled
* @NativeFunctionAddress 0000000140E6F210
*/

bool function GetTitanDisembarkEnabled()

/*
* @Breif Set index that client script can use for objective info
* @Pramas int
* @NativeName: SetObjectiveIndex
* @NativeFunctionAddress 0000000140E6F170
*/

void function SetObjectiveIndex(int)

/*
* @Breif Set entity that client script can use for objectives
* @Pramas entity
* @NativeName: SetObjectiveEntity
* @NativeFunctionAddress 0000000140E6F0F0
*/

void function SetObjectiveEntity(entity)

/*
* @Breif Set time when the object will expire
* @Pramas float
* @NativeName: SetObjectiveEndTime
* @NativeFunctionAddress 0000000140E6F040
*/

void function SetObjectiveEndTime(float)

/*
* @Breif Get index that client script can use for objective info
* @Pramas 
* @NativeName: GetObjectiveIndex
* @NativeFunctionAddress 0000000140E6EF90
*/

int function GetObjectiveIndex()

/*
* @Breif Get entity that client script can use for objectives
* @Pramas 
* @NativeName: GetObjectiveEntity
* @NativeFunctionAddress 0000000140E6EF00
*/

entity function GetObjectiveEntity()

/*
* @Breif Get time when the object will expire
* @Pramas 
* @NativeName: GetObjectiveEndTime
* @NativeFunctionAddress 0000000140E6EE50
*/

float function GetObjectiveEndTime()

/*
* @Breif Set index that client script can use for voice pack info
* @Pramas int
* @NativeName: SetVoicePackIndex
* @NativeFunctionAddress 0000000140E6EDB0
*/

void function SetVoicePackIndex(int)

/*
* @Breif Get index that client script can use for voice pack info
* @Pramas 
* @NativeName: GetVoicePackIndex
* @NativeFunctionAddress 0000000140E6ED00
*/

int function GetVoicePackIndex()

/*
* @Breif Call when XP changes to refresh code XP value
* @Pramas 
* @NativeName: Script_XPChanged
* @NativeFunctionAddress 0000000140E6ECB0
*/

void function XPChanged()

/*
* @Breif Call when generation changes to refresh code GEN value
* @Pramas 
* @NativeName: Script_GenChanged
* @NativeFunctionAddress 0000000140E6EC10
*/

void function GenChanged()

/*
* @Breif Call when rank-related persistence variables are changed
* @Pramas 
* @NativeName: Script_RankedChanged
* @NativeFunctionAddress 0000000140E6EBC0
*/

void function RankedChanged()

/*
* @Breif Gets the player's XP rate
* @Pramas 
* @NativeName: GetXPRate
* @NativeFunctionAddress 0000000140E6EB10
*/

float function GetXPRate()

/*
* @Breif Adds XP to player
* @Pramas int, int
* @NativeName: AddXP
* @NativeFunctionAddress 0000000140E6EA90
*/

void function AddXP(int, int)

/*
* @Breif Gets the player's XP
* @Pramas 
* @NativeName: GetXP
* @NativeFunctionAddress 0000000140E6E9E0
*/

int function GetXP()

/*
* @Breif Gets the player's Level
* @Pramas 
* @NativeName: GetLevel
* @NativeFunctionAddress 0000000140E6E930
*/

int function GetLevel()

/*
* @Breif Gets the player's generation
* @Pramas 
* @NativeName: GetGen
* @NativeFunctionAddress 0000000140E6E880
*/

int function GetGen()

/*
* @Breif Gets the player's rank
* @Pramas 
* @NativeName: GetRank
* @NativeFunctionAddress 0000000140E6E7D0
*/

int function GetRank()

/*
* @Breif Find out if the player is playing in ranked mode
* @Pramas 
* @NativeName: IsPlayingRanked
* @NativeFunctionAddress 0000000140E6E770
*/

bool function IsPlayingRanked()

/*
* @Breif Gets the player's current community name
* @Pramas 
* @NativeName: GetCommunityName
* @NativeFunctionAddress 0000000140E6E6E0
*/

string function GetCommunityName()

/*
* @Breif Gets the player's current community clan tag
* @Pramas 
* @NativeName: GetCommunityClanTag
* @NativeFunctionAddress 0000000140E6E650
*/

string function GetCommunityClanTag()

/*
* @Breif Gets the player's current community id
* @Pramas 
* @NativeName: GetCommunityId
* @NativeFunctionAddress 0000000140E6E5A0
*/

int function GetCommunityId()

/*
* @Breif Gets the player's faction
* @Pramas 
* @NativeName: GetFaction
* @NativeFunctionAddress 0000000140E6E510
*/

string function GetFaction()

/*
* @Breif Marks the player as active to prevent being kicked for no activity
* @Pramas 
* @NativeName: ResetIdleTimer
* @NativeFunctionAddress 0000000140E6E4A0
*/

void function ResetIdleTimer()

/*
* @Breif Returns true if this player has a bad reputation
* @Pramas 
* @NativeName: HasBadReputation
* @NativeFunctionAddress 0000000140E6E440
*/

bool function HasBadReputation()

/*
* @Breif Returns true if this player has a Twitch Prime reward
* @Pramas string
* @NativeName: DoesUserHaveTwitchPrimeReward
* @NativeFunctionAddress 0000000140E6E3B0
*/

bool function DoesUserHaveTwitchPrimeReward(string)

/*
* @Breif Go tell Twitch that this user has received their reward
* @Pramas string
* @NativeName: UserWasGivenTwitchPrimeReward
* @NativeFunctionAddress 0000000140D1E660
*/

void function UserWasGivenTwitchPrimeReward(string)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_TrueTeamSwitch
* @NativeFunctionAddress 0000000140E6E330
*/

void function TrueTeamSwitch()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetIdleTime
* @NativeFunctionAddress 0000000140E6E270
*/

float function GetIdleTime()

/*
* @Breif Gets the time since we first heard from this player this game. Real time; not affected by timescale.
* @Pramas 
* @NativeName: Script_GetTimeSinceLoadStart
* @NativeFunctionAddress 0000000140E6E180
*/

float function GetTimeSinceLoadStart()

/*
* @Breif Returns the view height when standing
* @Pramas 
* @NativeName: GetStandingViewHeight
* @NativeFunctionAddress 0000000140E6E0C0
*/

float function GetStandingViewHeight()

/*
* @Breif Returns the view height when crouching
* @Pramas 
* @NativeName: GetCrouchingViewHeight
* @NativeFunctionAddress 0000000140E6E000
*/

float function GetCrouchingViewHeight()

/*
* @Breif Returns the min hull vector when standing
* @Pramas 
* @NativeName: GetStandingHullMin
* @NativeFunctionAddress 0000000140E6DFA0
*/

vector function GetStandingHullMin()

/*
* @Breif Returns the max hull vector when standing
* @Pramas 
* @NativeName: GetStandingHullMax
* @NativeFunctionAddress 0000000140E6DF40
*/

vector function GetStandingHullMax()

/*
* @Breif Returns the min hull vector when crouching
* @Pramas 
* @NativeName: GetCrouchingHullMin
* @NativeFunctionAddress 0000000140E6DEE0
*/

vector function GetCrouchingHullMin()

/*
* @Breif Returns the max hull vector when crouching
* @Pramas 
* @NativeName: GetCrouchingHullMax
* @NativeFunctionAddress 0000000140E6DE80
*/

vector function GetCrouchingHullMax()

/*
* @Breif Forces the player to crouch
* @Pramas 
* @NativeName: ForceCrouch
* @NativeFunctionAddress 0000000140E6DE00
*/

void function ForceCrouch()

/*
* @Breif Lets the player stand again
* @Pramas 
* @NativeName: UnforceCrouch
* @NativeFunctionAddress 0000000140E6DD70
*/

void function UnforceCrouch()

/*
* @Breif Forces the player to crouch and slide
* @Pramas 
* @NativeName: ForceSlide
* @NativeFunctionAddress 0000000140E6DCF0
*/

void function ForceSlide()

/*
* @Breif Lets the player stand again
* @Pramas 
* @NativeName: UnforceSlide
* @NativeFunctionAddress 0000000140E6DC60
*/

void function UnforceSlide()

/*
* @Breif Blocks the player from crouching
* @Pramas 
* @NativeName: ForceStand
* @NativeFunctionAddress 0000000140E6DBE0
*/

void function ForceStand()

/*
* @Breif Lets the player crouch again
* @Pramas 
* @NativeName: UnforceStand
* @NativeFunctionAddress 0000000140E6DB50
*/

void function UnforceStand()

/*
* @Breif Returns if the player is standing.
* @Pramas 
* @NativeName: IsStanding
* @NativeFunctionAddress 0000000140E6DAE0
*/

bool function IsStanding()

/*
* @Breif Returns if the player is crouched.
* @Pramas 
* @NativeName: IsCrouched
* @NativeFunctionAddress 0000000140E6DA70
*/

bool function IsCrouched()

/*
* @Breif Returns true if the player is already standing or has space to stand
* @Pramas 
* @NativeName: CanStand
* @NativeFunctionAddress 0000000140E6D9E0
*/

bool function CanStand()

/*
* @Breif Returns true if this player is a bot
* @Pramas 
* @NativeName: IsBot
* @NativeFunctionAddress 0000000140E6D970
*/

bool function IsBot()

/*
* @Breif Returns true if this player is a a bot created to play back a recording from 'bot_record'
* @Pramas 
* @NativeName: IsPlayback
* @NativeFunctionAddress 0000000140E6D900
*/

bool function IsPlayback()

/*
* @Breif Plays the named activity animation as a gesture
* @Pramas string, float, float, float
* @NativeName: Anim_PlayGesture
* @NativeFunctionAddress 0000000140E6D850
*/

void function Anim_PlayGesture(string, float, float, float)

/*
* @Breif Stop gesture from playing
* @Pramas float
* @NativeName: Anim_StopGesture
* @NativeFunctionAddress 0000000140E6D7D0
*/

void function Anim_StopGesture(float)

/*
* @Breif Toggles grapple
* @Pramas vector
* @NativeName: Grapple
* @NativeFunctionAddress 0000000140E6D760
*/

bool function Grapple(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: GrappleDetach
* @NativeFunctionAddress 0000000140E6D710
*/

void function GrappleDetach()

/*
* @Breif Checks if grapple hook is deployed (not necesssarily attached).
* @Pramas 
* @NativeName: IsGrappleActive
* @NativeFunctionAddress 0000000140E6D6B0
*/

bool function IsGrappleActive()

/*
* @Breif Checks if grapple hook is attached (not necessarily pulling yet).
* @Pramas 
* @NativeName: IsGrappleAttached
* @NativeFunctionAddress 0000000140E6D620
*/

bool function IsGrappleAttached()

/*
* @Breif Checks if grapple hook is pulling the player.
* @Pramas 
* @NativeName: IsGrapplePulling
* @NativeFunctionAddress 0000000140E6D590
*/

bool function IsGrapplePulling()

/*
* @Breif 
* @Pramas 
* @NativeName: IsGrapplingZipline
* @NativeFunctionAddress 0000000140E6D530
*/

bool function IsGrapplingZipline()

/*
* @Breif Gets the grapple hook entity for this player.
* @Pramas 
* @NativeName: Script_GetGrappleHook
* @NativeFunctionAddress 0000000140E6D4A0
*/

entity function GetGrappleHook()

/*
* @Breif Make grapple seek out this target when it is fired
* @Pramas entity
* @NativeName: SetGrappleAutoAimTarget
* @NativeFunctionAddress 0000000140E6D420
*/

void function SetGrappleAutoAimTarget(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetGrappleAutoAimTarget
* @NativeFunctionAddress 0000000140E6D390
*/

entity function GetGrappleAutoAimTarget()

/*
* @Breif Get the players pilot class index.
* @Pramas 
* @NativeName: GetPilotClassIndex
* @NativeFunctionAddress 0000000140E6D2E0
*/

int function GetPilotClassIndex()

/*
* @Breif Set the players pilot class index.
* @Pramas int
* @NativeName: SetPilotClassIndex
* @NativeFunctionAddress 0000000140E6D240
*/

void function SetPilotClassIndex(int)

/*
* @Breif Returns true if the player is currently boosting
* @Pramas 
* @NativeName: IsBoosting
* @NativeFunctionAddress 0000000140E6D1E0
*/

bool function IsBoosting()

/*
* @Breif Returns true if the player is currently using the jetpack
* @Pramas 
* @NativeName: IsJetpack
* @NativeFunctionAddress 0000000140E6D180
*/

bool function IsJetpack()

/*
* @Breif Returns true if the player is currently gliding
* @Pramas 
* @NativeName: IsGliding
* @NativeFunctionAddress 0000000140E6D120
*/

bool function IsGliding()

/*
* @Breif Returns current glide meter value
* @Pramas 
* @NativeName: GetGlideMeter
* @NativeFunctionAddress 0000000140E6D070
*/

float function GetGlideMeter()

/*
* @Breif Returns true if the player is currently hovering
* @Pramas 
* @NativeName: IsHovering
* @NativeFunctionAddress 0000000140E6D010
*/

bool function IsHovering()

/*
* @Breif Returns true if the player can hover
* @Pramas 
* @NativeName: IsHoverEnabled
* @NativeFunctionAddress 0000000140E6CFA0
*/

bool function IsHoverEnabled()

/*
* @Breif Returns true if the player is in air slowmo
* @Pramas 
* @NativeName: IsInAirSlowMo
* @NativeFunctionAddress 0000000140E6CF30
*/

bool function IsInAirSlowMo()

/*
* @Breif Get a titan available for smart targetting type uses.
* @Pramas bool, float, float
* @NativeName: Script_GetTitanTarget
* @NativeFunctionAddress 0000000140E6CE90
*/

entity function GetTitanTarget(bool, float, float)

/*
* @Breif Returns if movement callbacks are being dispatched for the player.
* @Pramas 
* @NativeName: GetSendMovementCallbacks
* @NativeFunctionAddress 0000000140E6CE30
*/

bool function GetSendMovementCallbacks()

/*
* @Breif Sets if movement callbacks are being dispatched for the player.
* @Pramas bool
* @NativeName: SetSendMovementCallbacks
* @NativeFunctionAddress 0000000140E6CDD0
*/

void function SetSendMovementCallbacks(bool)

/*
* @Breif Returns if input callbacks are being dispatched for the player.
* @Pramas 
* @NativeName: GetSendInputCallbacks
* @NativeFunctionAddress 0000000140E6CD70
*/

bool function GetSendInputCallbacks()

/*
* @Breif Sets if input callbacks are being dispatched for the player.
* @Pramas bool
* @NativeName: SetSendInputCallbacks
* @NativeFunctionAddress 0000000140E6CD10
*/

void function SetSendInputCallbacks(bool)

/*
* @Breif Indicates if the specified input command is being pressed. May be inaccurate as the server does not update as often as the client.
* @Pramas int
* @NativeName: IsInputCommandHeld
* @NativeFunctionAddress 0000000140E6CC90
*/

bool function IsInputCommandHeld(int)

/*
* @Breif Indicates if the specified input command was pressed this frame. May be inaccurate as the server does not update as often as the client.
* @Pramas int
* @NativeName: IsInputCommandPressed
* @NativeFunctionAddress 0000000140E6CC10
*/

bool function IsInputCommandPressed(int)

/*
* @Breif Indicates if the specified input command was released this frame. May be inaccurate as the server does not update as often as the client.
* @Pramas int
* @NativeName: IsInputCommandReleased
* @NativeFunctionAddress 0000000140E6CB90
*/

bool function IsInputCommandReleased(int)

/*
* @Breif Gets the amount the left stick or WASD keys are pressed forward between -1 to 1.
* @Pramas 
* @NativeName: ScriptGetInputAxisForward
* @NativeFunctionAddress 0000000140E6CAC0
*/

float function GetInputAxisForward()

/*
* @Breif Gets the amount the left stick or WASD keys are pressed right between -1 to 1.
* @Pramas 
* @NativeName: ScriptGetInputAxisRight
* @NativeFunctionAddress 0000000140E6C9F0
*/

float function GetInputAxisRight()

/*
* @Breif Begins recording the player's animation for playback later.
* @Pramas vector, vector
* @NativeName: Script_StartRecordingAnimation
* @NativeFunctionAddress 0000000140E6C940
*/

void function StartRecordingAnimation(vector, vector)

/*
* @Breif Gets the ground friction scale for the player.
* @Pramas 
* @NativeName: GetGroundFrictionScale
* @NativeFunctionAddress 0000000140E6C890
*/

float function GetGroundFrictionScale()

/*
* @Breif Sets the ground friction scale for the player. Default is 1.0.
* @Pramas float
* @NativeName: SetGroundFrictionScale
* @NativeFunctionAddress 0000000140E6C7E0
*/

void function SetGroundFrictionScale(float)

/*
* @Breif Gets the wallrun friction scale for the player.
* @Pramas 
* @NativeName: GetWallrunFrictionScale
* @NativeFunctionAddress 0000000140E6C730
*/

float function GetWallrunFrictionScale()

/*
* @Breif Sets the wallrun friction scale for the player. Default is 1.0.
* @Pramas float
* @NativeName: SetWallrunFrictionScale
* @NativeFunctionAddress 0000000140E6C680
*/

void function SetWallrunFrictionScale(float)

/*
* @Breif Player eye angles remain independent of their move parent's angles.
* @Pramas 
* @NativeName: EnableWorldSpacePlayerEyeAngles
* @NativeFunctionAddress 0000000140E6C630
*/

void function EnableWorldSpacePlayerEyeAngles()

/*
* @Breif Player eye angles are based off their move parent's angles.
* @Pramas 
* @NativeName: DisableWorldSpacePlayerEyeAngles
* @NativeFunctionAddress 0000000140E6C5E0
*/

void function DisableWorldSpacePlayerEyeAngles()

/*
* @Breif Returns true if the player eye angles are independent of their move parent's angles.
* @Pramas 
* @NativeName: IsWorldSpacePlayerEyeAngles
* @NativeFunctionAddress 0000000140E6C580
*/

bool function IsWorldSpacePlayerEyeAngles()

/*
* @Breif Sets the calling card of the current player on stryder
* @Pramas int
* @NativeName: SetCallingCard
* @NativeFunctionAddress 0000000140E6C4E0
*/

void function SetCallingCard(int)

/*
* @Breif Sets the calling card of the current player on stryder
* @Pramas int
* @NativeName: SetCallSign
* @NativeFunctionAddress 0000000140E6C440
*/

void function SetCallSign(int)

/*
* @Breif Sets the calling card of the current player on stryder
* @Pramas int
* @NativeName: SetCallSignStyle
* @NativeFunctionAddress 0000000140E6C3A0
*/

void function SetCallSignStyle(int)

/*
* @Breif Sets a bool network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, bool
* @NativeName: Script_SetPlayerNetBool
* @NativeFunctionAddress 0000000140E6C330
*/

void function SetPlayerNetBool(string, bool)

/*
* @Breif Sets an int network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, int
* @NativeName: Script_SetPlayerNetInt
* @NativeFunctionAddress 0000000140E6C2B0
*/

void function SetPlayerNetInt(string, int)

/*
* @Breif Sets a float network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetPlayerNetFloat
* @NativeFunctionAddress 0000000140E6C230
*/

void function SetPlayerNetFloat(string, float)

/*
* @Breif Changes a float network variable on the player gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)
* @Pramas string, float, float
* @NativeName: Script_SetPlayerNetFloatOverTime
* @NativeFunctionAddress 0000000140E6C1A0
*/

void function SetPlayerNetFloatOverTime(string, float, float)

/*
* @Breif Sets a time (float) network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetPlayerNetTime
* @NativeFunctionAddress 0000000140E6C120
*/

void function SetPlayerNetTime(string, float)

/*
* @Breif Sets an entity network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, entity
* @NativeName: Script_SetPlayerNetEnt
* @NativeFunctionAddress 0000000140E6C0A0
*/

void function SetPlayerNetEnt(string, entity)

/*
* @Breif Gets a bool network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetBool
* @NativeFunctionAddress 0000000140E6C030
*/

bool function GetPlayerNetBool(string)

/*
* @Breif Gets an int network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetInt
* @NativeFunctionAddress 0000000140E6BF70
*/

int function GetPlayerNetInt(string)

/*
* @Breif Gets a float network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetFloat
* @NativeFunctionAddress 0000000140E6BEB0
*/

float function GetPlayerNetFloat(string)

/*
* @Breif Gets a time (float) network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetTime
* @NativeFunctionAddress 0000000140E6BDF0
*/

float function GetPlayerNetTime(string)

/*
* @Breif Gets an entity network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetEnt
* @NativeFunctionAddress 0000000140E6BD80
*/

entity function GetPlayerNetEnt(string)

/*
* @Breif ( duration ). Requests CodeCallback_PlayerHasBeenConnectedForDuration() to be called once duration has elapsed since fully connected, or immediately if that amount of time has already elapsed. If there was a previous request that had not yet called the callback, this call will cancel the previous request and set up a new one.
* @Pramas float
* @NativeName: RequestCallbackWhenPlayerHasBeenConnectedForDuration
* @NativeFunctionAddress 0000000140E6BD00
*/

void function RequestCallbackWhenPlayerHasBeenConnectedForDuration(float)

/*
* @Breif Returns eye direction of the 3p player
* @Pramas 
* @NativeName: Player_GetWorldViewAngles
* @NativeFunctionAddress 0000000140E6BC30
*/

vector function Player_GetWorldViewAngles()

/*
* @Breif Forces the autosprint setting to "on"
* @Pramas 
* @NativeName: ForceAutoSprintOn
* @NativeFunctionAddress 0000000140E6BBA0
*/

void function ForceAutoSprintOn()

/*
* @Breif Forces the autosprint setting to "off"
* @Pramas 
* @NativeName: ForceAutoSprintOff
* @NativeFunctionAddress 0000000140E6BB10
*/

void function ForceAutoSprintOff()

/*
* @Breif Returns to user-specified autosprint setting
* @Pramas 
* @NativeName: UnforceAutoSprint
* @NativeFunctionAddress 0000000140E6BA80
*/

void function UnforceAutoSprint()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINNucleusId
* @NativeFunctionAddress 0000000140E6B9D0
*/

string function GetPINNucleusId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINNucleusPid
* @NativeFunctionAddress 0000000140E6B920
*/

string function GetPINNucleusPid()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINSessionId
* @NativeFunctionAddress 0000000140E6B870
*/

string function GetPINSessionId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINPlatformId
* @NativeFunctionAddress 0000000140E6B7C0
*/

string function GetPINPlatformId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerPINPlatformName
* @NativeFunctionAddress 0000000140E6B6E0
*/

string function GetPlayerPINPlatformName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerPINTitleId
* @NativeFunctionAddress 0000000140E6B600
*/

string function GetPlayerPINTitleId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMinDatacenterPacketLoss
* @NativeFunctionAddress 0000000140E6B550
*/

string function GetMinDatacenterPacketLoss()

/*
* @Breif 
* @Pramas 
* @NativeName: IsConnectionWiFi
* @NativeFunctionAddress 0000000140E6B4A0
*/

int function IsConnectionWiFi()

/*
* @Breif Gets the player's IP address as a string
* @Pramas 
* @NativeName: Script_GetIPString
* @NativeFunctionAddress 0000000140E6B3F0
*/

string function GetIPString()

/*
* @Breif Gets the player's ideal data center according to ping tests
* @Pramas 
* @NativeName: Script_GetIdealDataCenter
* @NativeFunctionAddress 0000000140E6B340
*/

string function GetIdealDataCenter()

/*
* @Breif Gets the player's prefered data center
* @Pramas 
* @NativeName: Script_GetPreferredDataCenter
* @NativeFunctionAddress 0000000140E6B290
*/

string function GetPreferredDataCenter()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPDifficulty
* @NativeFunctionAddress 0000000140E6B1B0
*/

int function GetSPDifficulty()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPStartPoint
* @NativeFunctionAddress 0000000140E6B0D0
*/

int function GetSPStartPoint()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPLastMission
* @NativeFunctionAddress 0000000140E6AFF0
*/

int function GetSPLastMission()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPUnlockedMission
* @NativeFunctionAddress 0000000140E6AF10
*/

int function GetSPUnlockedMission()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPHighestDifficultyCompleted
* @NativeFunctionAddress 0000000140E6AE70
*/

int function GetSPHighestDifficultyCompleted()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPTitanLoadoutsUsed
* @NativeFunctionAddress 0000000140E6AD90
*/

int function GetSPTitanLoadoutsUsed()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPTitanLoadoutsSelected
* @NativeFunctionAddress 0000000140E6ACB0
*/

int function GetSPTitanLoadoutsSelected()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPTitanLoadoutCurrent
* @NativeFunctionAddress 0000000140E6ABD0
*/

int function GetSPTitanLoadoutCurrent()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalGravityDirection
* @NativeFunctionAddress 0000000140E6AB20
*/

vector function GetLocalGravityDirection()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalGravityStrength
* @NativeFunctionAddress 0000000140E6AA70
*/

float function GetLocalGravityStrength()

/*
* @Breif Gets the scale of the minimap (for this player only)
* @Pramas 
* @NativeName: Script_GetMinimapZoomScale
* @NativeFunctionAddress 0000000140E6A9C0
*/

float function GetMinimapZoomScale()

/*
* @Breif Takes target scale and amount of time to lerp between old scale and new scale. Pass 0 as lerp time to instantly snap minimap zoom
* @Pramas float, float
* @NativeName: Script_SetMinimapZoomScale
* @NativeFunctionAddress 0000000140E6A930
*/

void function SetMinimapZoomScale(float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrappleWeapon
* @NativeFunctionAddress 0000000140E6A8D0
*/

entity function GetGrappleWeapon()

/*
* @Breif Gets the armor type
* @Pramas 
* @NativeName: Script_GetSurvivalArmorType
* @NativeFunctionAddress 0000000140E6A820
*/

int function GetSurvivalArmorType()

/*
* @Breif Gets the helmet type
* @Pramas 
* @NativeName: Script_GetSurvivalHelmetType
* @NativeFunctionAddress 0000000140E6A770
*/

int function GetSurvivalHelmetType()

/*
* @Breif Sets the armor type
* @Pramas int
* @NativeName: Script_SetSurvivalArmorType
* @NativeFunctionAddress 0000000140E6A6D0
*/

void function SetSurvivalArmorType(int)

/*
* @Breif Sets the helmet type
* @Pramas int
* @NativeName: Script_SetSurvivalHelmetType
* @NativeFunctionAddress 0000000140E6A630
*/

void function SetSurvivalHelmetType(int)

/*
* @Breif Force reload of the currently equipped weapon.
* @Pramas 
* @NativeName: Script_ForceWeaponReload
* @NativeFunctionAddress 0000000140E6A5D0
*/

void function ForceWeaponReload()

/*
* @Breif Returns the last main weapon slot that the player had cycled to.
* @Pramas 
* @NativeName: Script_GetLastCycleSlot
* @NativeFunctionAddress 0000000140E6A520
*/

int function GetLastCycleSlot()

/*
* @Breif 
* @Pramas vector, float
* @NativeName: KnockBack
* @NativeFunctionAddress 0000000140E6A4B0
*/

void function KnockBack(vector, float)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptEnablePrediction
* @NativeFunctionAddress 0000000140E6A420
*/

void function EnablePrediction()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptDisablePrediction
* @NativeFunctionAddress 0000000140E6A390
*/

void function DisablePrediction()

/*
* @Breif 
* @Pramas entity, int
* @NativeName: Zipline_SetBeginStation
* @NativeFunctionAddress 0000000140E6A300
*/

void function Zipline_SetBeginStation(entity, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_GetBeginStation
* @NativeFunctionAddress 0000000140E6A270
*/

entity function Zipline_GetBeginStation()

/*
* @Breif  Set override for player arms model to be used instead of the value from player settings. Set to "" to use the model from player settings. 
* @Pramas asset armsModel
* @NativeName: SetArmsModelOverride
* @NativeFunctionAddress 0000000140E6A210
*/

void function SetArmsModelOverride(asset armsModel)

/*
* @Breif  Set override for player body model to be used instead of the value from player settings. Set to "" to use the model from player settings. 
* @Pramas asset bodyModel
* @NativeName: SetBodyModelOverride
* @NativeFunctionAddress 0000000140E6A1B0
*/

void function SetBodyModelOverride(asset bodyModel)

/*
* @Breif Forces a bot player to activate an input (such as IN_ATTACK).
* @Pramas int
* @NativeName: Script_BotButtonPress
* @NativeFunctionAddress 0000000140D1E660
*/

void function BotButtonPress(int)

/*
* @Breif Deactivates a forced bot input (such as IN_ATTACK).
* @Pramas int
* @NativeName: Script_BotButtonRelease
* @NativeFunctionAddress 0000000140D1E660
*/

void function BotButtonRelease(int)

/*
* @Breif Create a weapon of the given classname, and optionally apply active mods or disable first deploy animation.
* @Pramas string weaponname, int inventorySlot, array< string > mods = null, bool doFirstDeploy = true
* @NativeName: Script_GiveWeapon_NoDeploy
* @NativeFunctionAddress 0000000140E5C120
*/

var function GiveWeapon_NoDeploy()

/*
* @Breif Get the mod inventory.
* @Pramas 
* @NativeName: Script_ModInventory_Get
* @NativeFunctionAddress 0000000140E5C270
*/

var function ModInventory_Get()

/*
* @Breif Sets the mod inventory.
* @Pramas array< ModInventoryItem >
* @NativeName: Script_ModInventory_Set
* @NativeFunctionAddress 0000000140E5C2C0
*/

var function ModInventory_Set()

/*
* @Breif Get the consumable inventory.
* @Pramas 
* @NativeName: Script_ConsumableInventory_Get
* @NativeFunctionAddress 0000000140E5C310
*/

var function ConsumableInventory_Get()

/*
* @Breif Sets the consumable inventory.
* @Pramas array< ConsumableInventoryItem >
* @NativeName: Script_ConsumableInventory_Set
* @NativeFunctionAddress 0000000140E5C360
*/

var function ConsumableInventory_Set()

/*
* @Breif Sets the name of the attachment the camera will follow instead of the default ("CAMERA")
* @Pramas array < string >
* @NativeName: Script_AnimViewEntity_SetThirdPersonCameraAttachments
* @NativeFunctionAddress 0000000140E5C3B0
*/

var function AnimViewEntity_SetThirdPersonCameraAttachments()

/*
* @Breif Sets the current player's character and char data so that it is visible to others
* @Pramas int, array< int >
* @NativeName: SetPlayerCharData
* @NativeFunctionAddress 0000000140E5C6E0
*/

var function SetPlayerCharData()

/*
* @Breif Sets the class of the player with given mods applied
* @Pramas asset settingsAsset, array< string > mods
* @NativeName: SetPlayerSettingsWithMods_Script
* @NativeFunctionAddress 0000000140E5C730
*/

var function SetPlayerSettingsWithMods()

/*
* @Breif Get an array of mods active on this player
* @Pramas 
* @NativeName: GetPlayerSettingsMods_Script
* @NativeFunctionAddress 0000000140E5C780
*/

var function GetPlayerSettingsMods()

/*
* @Breif Gets the player's player settings as a settings block for calls into GetSettingsBlockInt/Float/etc
* @Pramas 
* @NativeName: GetPlayerSettingsBlock
* @NativeFunctionAddress 0000000140E5C7D0
*/

var function GetPlayerSettingsBlock()

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: GetPersistentVar
* @NativeFunctionAddress 0000000140E5C8D0
*/

var function GetPersistentVar(var, string)

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: GetPersistentVarAsInt
* @NativeFunctionAddress 0000000140E5C930
*/

int function GetPersistentVarAsInt(var, string)

/*
* @Breif 
* @Pramas "variableName", newVal
* @NativeName: SetPersistentVar
* @NativeFunctionAddress 0000000140E5C980
*/

void function SetPersistentVar(var, string, var)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetExtraWeaponMods
* @NativeFunctionAddress 0000000140E5C9E0
*/

array function GetExtraWeaponMods(var)

/*
* @Breif 
* @Pramas ["modName4", "modname1", ...]
* @NativeName: ScriptSetExtraWeaponMods
* @NativeFunctionAddress 0000000140E5CA30
*/

void function SetExtraWeaponMods(var, array)

/*
* @Breif Ends recording the player's animation for playback later.
* @Pramas 
* @NativeName: Script_StopRecordingAnimation
* @NativeFunctionAddress 0000000140E5CA80
*/

var function StopRecordingAnimation()

/*
* @Breif Gets a table of additional telemetry data sent by code functions for a player.
* @Pramas 
* @NativeName: Script_GetPINAdditionalData
* @NativeFunctionAddress 0000000140E5CAD0
*/

var function GetPINAdditionalData()

/*
* @Breif Gets a table of time and distance stats for different player states
* @Pramas 
* @NativeName: Script_GetPlayerStateStats
* @NativeFunctionAddress 0000000140E5CB20
*/

var function GetPlayerStateStats()

/*
* @Breif Prevent the fx to be re-created on restore
* @Pramas 
* @NativeName: ScriptDoNotCreateFXOnRestore
* @NativeFunctionAddress 0000000140D86730
*/

void function DoNotCreateFXOnRestore()

/*
* @Breif Set this entity to render always
* @Pramas 
* @NativeName: ScriptEnableRenderAlways
* @NativeFunctionAddress 0000000140D866E0
*/

void function FXEnableRenderAlways()

/*
* @Breif Set this entity to not render always
* @Pramas 
* @NativeName: ScriptDisableRenderAlways
* @NativeFunctionAddress 0000000140D86690
*/

void function FXDisableRenderAlways()

/*
* @Breif Determines how the effect will end if you destroy the entity. Options are: "normal" (stops emission); "destroyImmediately" (stops emission and kills existing particles immediately); "playEndcap" (stops emission and play endcap). (default is "playEndcap".)
* @Pramas string
* @NativeName: SetStopType
* @NativeFunctionAddress 0000000140D86630
*/

void function SetStopType(string)

/*
* @Breif Assign the given ent to the given control point index.
* @Pramas int, entity
* @NativeName: ScriptSetControlPointEnt
* @NativeFunctionAddress 0000000140D865A0
*/

void function SetControlPointEnt(int, entity)

/*
* @Breif Fly forward along the path starting with the specified node.
* @Pramas entity
* @NativeName: FlyPath
* @NativeFunctionAddress 0000000140D26410
*/

void function FlyPath(entity)

/*
* @Breif Fly along the path nodes in reverse order, starting with the specified node.
* @Pramas entity
* @NativeName: FlyPathBackward
* @NativeFunctionAddress 0000000140D26390
*/

void function FlyPathBackward(entity)

/*
* @Breif Fly to a node, flying along the path, starting with the node closest to the vehicle's current position.
* @Pramas entity
* @NativeName: FlyToNodeViaPath
* @NativeFunctionAddress 0000000140D26310
*/

void function FlyToNodeViaPath(entity)

/*
* @Breif Fly straight to a node, don't slow to a stop, but maintain the node speed all the way to the node.
* @Pramas entity
* @NativeName: FlyToNodeUseNodeSpeed
* @NativeFunctionAddress 0000000140D26290
*/

void function FlyToNodeUseNodeSpeed(entity)

/*
* @Breif Path to track node, but does not stop at the goal. When approaching the goal, the entity will ramp its speed to match the beginning speed of the specified animation sequence.
* @Pramas vector, string
* @NativeName: FlyToPointToAnim
* @NativeFunctionAddress 0000000140D26230
*/

void function FlyToPointToAnim(vector, string)

/*
* @Breif Fly to a position in space.
* @Pramas vector
* @NativeName: FlyToPoint
* @NativeFunctionAddress 0000000140D261D0
*/

void function FlyToPoint(vector)

/*
* @Breif Set the current and desired speed immediately
* @Pramas float
* @NativeName: SetSpeedImmediate
* @NativeFunctionAddress 0000000140D87190
*/

void function SetSpeedImmediate(float)

/*
* @Breif Set the entity to look at. Set to null to clear.
* @Pramas entity
* @NativeName: SetFacingEntity
* @NativeFunctionAddress 0000000140D87110
*/

void function SetFacingEntity(entity)

/*
* @Breif Clear override. Resume normal desired yaw.
* @Pramas 
* @NativeName: ClearFacingEntity
* @NativeFunctionAddress 0000000140D870C0
*/

void function ClearFacingEntity()

/*
* @Breif Turn off engine sounds and effects.
* @Pramas 
* @NativeName: EngineEffectsDisable
* @NativeFunctionAddress 0000000140D87070
*/

void function EngineEffectsDisable()

/*
* @Breif Turn engine sounds and effects back on.
* @Pramas 
* @NativeName: EngineEffectsEnable
* @NativeFunctionAddress 0000000140D87020
*/

void function EngineEffectsEnable()

/*
* @Breif IsJetWakeFXEnabled
* @Pramas 
* @NativeName: IsJetWakeFXEnabled
* @NativeFunctionAddress 0000000140D867E0
*/

bool function IsJetWakeFXEnabled()

/*
* @Breif SetJetWakeFXEnabled
* @Pramas bool
* @NativeName: SetJetWakeFXEnabled
* @NativeFunctionAddress 0000000140D86780
*/

void function SetJetWakeFXEnabled(bool)

/*
* @Breif Set whether or not to ttack targets
* @Pramas bool
* @NativeName: SetAttackMode
* @NativeFunctionAddress 0000000140D86840
*/

void function SetAttackMode(bool)

/*
* @Breif Play movie (and show it if visibility is true).
* @Pramas 
* @NativeName: Enable
* @NativeFunctionAddress 0000000140D86CE0
*/

void function EnableMovie()

/*
* @Breif Stop movie (and hide it).
* @Pramas 
* @NativeName: Disable
* @NativeFunctionAddress 0000000140D86C90
*/

void function DisableMovie()

/*
* @Breif Toggle between enabled and disabled states.
* @Pramas 
* @NativeName: ToggleEnabled
* @NativeFunctionAddress 0000000140D86C40
*/

void function ToggleMovieEnabled()

/*
* @Breif When set true, makes movie visible (if the movie is enabled).
* @Pramas bool
* @NativeName: ScreenVisible
* @NativeFunctionAddress 0000000140D86BE0
*/

void function SetMovieVisibility(bool)

/*
* @Breif Toggle between visibility states.
* @Pramas 
* @NativeName: ToggleVisibility
* @NativeFunctionAddress 0000000140D86B90
*/

void function ToggleMovieVisibility()

/*
* @Breif Sets the movie to display.
* @Pramas string
* @NativeName: SetMovie
* @NativeFunctionAddress 0000000140D86B30
*/

void function SetMovie(string)

/*
* @Breif Sets the movie and external audio to play.
* @Pramas string, string
* @NativeName: SetMovieAndExternalAudio
* @NativeFunctionAddress 0000000140D86AC0
*/

void function SetMovieAndExternalAudio(string, string)

/*
* @Breif Use custom UVs.
* @Pramas bool
* @NativeName: SetUseCustomUVs
* @NativeFunctionAddress 0000000140D86A60
*/

void function SetUseCustomUVs(bool)

/*
* @Breif Set the minimum U.
* @Pramas float
* @NativeName: SetUMin
* @NativeFunctionAddress 0000000140D869F0
*/

void function SetUMin(float)

/*
* @Breif Set the minimum V.
* @Pramas float
* @NativeName: SetVMin
* @NativeFunctionAddress 0000000140D86980
*/

void function SetVMin(float)

/*
* @Breif Set the maximum U.
* @Pramas float
* @NativeName: SetUMax
* @NativeFunctionAddress 0000000140D86910
*/

void function SetUMax(float)

/*
* @Breif Set the maximum V.
* @Pramas float
* @NativeName: SetVMax
* @NativeFunctionAddress 0000000140D868A0
*/

void function SetVMax(float)

/*
* @Breif Destroys glass in a radius.
* @Pramas vector, float
* @NativeName: BreakSphere
* @NativeFunctionAddress 0000000140D86D30
*/

void function BreakSphere(vector, float)

/*
* @Breif Set whether this ambientgeneric is enabled.
* @Pramas bool
* @NativeName: ScriptSetEnabled
* @NativeFunctionAddress 0000000140D24CD0
*/

void function SetEnabled(bool)

/*
* @Breif Set the sound event name for this ambientgeneric.
* @Pramas string
* @NativeName: ScriptSetSoundName
* @NativeFunctionAddress 0000000140D24C70
*/

void function SetSoundName(string)

/*
* @Breif Set the endpoints for the line segment along which this ambientgeneric will play.
* @Pramas vector, vector
* @NativeName: ScriptSetSegmentEndpoints
* @NativeFunctionAddress 0000000140D24C10
*/

void function SetSegmentEndpoints(vector, vector)

/*
* @Breif Remove the line segment along which this ambientgeneric played.
* @Pramas 
* @NativeName: ScriptRemoveSegmentEndpoints
* @NativeFunctionAddress 0000000140D24B80
*/

void function RemoveSegmentEndpoints()

/*
* @Breif Set the radius (in world units) within which this AmbientGeneric should be audible.
* @Pramas float
* @NativeName: ScriptSetRadius
* @NativeFunctionAddress 0000000140D24B10
*/

void function SetAudibleRadius(float)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetReserved
* @NativeFunctionAddress 0000000140D26170
*/

void function SetReserved(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: IsReserved
* @NativeFunctionAddress 0000000140D26110
*/

bool function IsReserved()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_RegenerateSmoothPoints
* @NativeFunctionAddress 0000000140C87C00
*/

void function RegenerateSmoothPoints()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTotalSmoothDistance
* @NativeFunctionAddress 0000000140C87B40
*/

float function GetTotalSmoothDistance()

/*
* @Breif Returns the 3D position at the given distance along the path from the node.
* @Pramas float
* @NativeName: GetSmoothPositionAtDistance_Script
* @NativeFunctionAddress 0000000140C87A60
*/

vector function GetSmoothPositionAtDistance(float)

/*
* @Breif Returns the next train node in the path.
* @Pramas 
* @NativeName: GetNextTrainNode
* @NativeFunctionAddress 0000000140C87A00
*/

entity function GetNextTrainNode()

/*
* @Breif Returns the previous train node in the path.
* @Pramas 
* @NativeName: GetPreviousTrainNode
* @NativeFunctionAddress 0000000140C879A0
*/

entity function GetPreviousTrainNode()

/*
* @Breif Set desired ground position toward which we will move and stop at, handling moving ground. If the ground entity is changed, the set position will be ignored.
* @Pramas vector, entity
* @NativeName: SetMoveToPositionGround
* @NativeFunctionAddress 0000000140C89AE0
*/

void function SetMoveToPositionGround(vector, entity)

/*
* @Breif Set desired position toward which we will move and stop at.
* @Pramas vector
* @NativeName: SetMoveToPositionWorld
* @NativeFunctionAddress 0000000140C89A80
*/

void function SetMoveToPositionWorld(vector)

/*
* @Breif Get desired position toward which we will move and stop at.
* @Pramas 
* @NativeName: GetMoveToPositionWorld
* @NativeFunctionAddress 0000000140C899B0
*/

vector function GetMoveToPositionWorld()

/*
* @Breif Set max/cruising speed for moving to a desired position.
* @Pramas float
* @NativeName: SetMaxSpeed
* @NativeFunctionAddress 0000000140C89940
*/

void function SetMaxSpeed(float)

/*
* @Breif Get max/cruising speed for moving to a desired position.
* @Pramas 
* @NativeName: GetMaxSpeed
* @NativeFunctionAddress 0000000140C89890
*/

float function GetMaxSpeed()

/*
* @Breif Set the drone's desired velocity.
* @Pramas vector
* @NativeName: SetDesiredVelocityHorizontal
* @NativeFunctionAddress 0000000140C89830
*/

void function SetDesiredVelocityHorizontal(vector)

/*
* @Breif Set the drone's desired velocity.
* @Pramas vector
* @NativeName: SetDesiredVelocity3D
* @NativeFunctionAddress 0000000140C897D0
*/

void function SetDesiredVelocity3D(vector)

/*
* @Breif Get the drone's desired velocity.
* @Pramas 
* @NativeName: GetDesiredVelocity
* @NativeFunctionAddress 0000000140C89770
*/

vector function GetDesiredVelocity()

/*
* @Breif Set drone's desired height.
* @Pramas float
* @NativeName: SetDesiredHeight
* @NativeFunctionAddress 0000000140C89700
*/

void function SetDesiredHeight(float)

/*
* @Breif Get drone's desired height.
* @Pramas 
* @NativeName: GetDesiredHeight
* @NativeFunctionAddress 0000000140C89650
*/

float function GetDesiredHeight()

/*
* @Breif Overrides the direction to face.
* @Pramas float
* @NativeName: SetDesiredYaw
* @NativeFunctionAddress 0000000140C895E0
*/

void function SetDesiredYaw(float)

/*
* @Breif Switches back to code controll of yaw.
* @Pramas 
* @NativeName: ClearDesiredYaw
* @NativeFunctionAddress 0000000140C89590
*/

void function ClearDesiredYaw()

/*
* @Breif Get yaw override.
* @Pramas 
* @NativeName: GetDesiredYaw
* @NativeFunctionAddress 0000000140C894E0
*/

float function GetDesiredYaw()

/*
* @Breif Set the yaw rate.
* @Pramas float
* @NativeName: SetYawRate
* @NativeFunctionAddress 0000000140C89470
*/

void function SetYawRate(float)

/*
* @Breif Get the yaw rate.
* @Pramas 
* @NativeName: GetYawRate
* @NativeFunctionAddress 0000000140C893C0
*/

float function GetYawRate()

/*
* @Breif Set the amplitude of the random bobbing. Zero is no bobbing.
* @Pramas float
* @NativeName: SetBobScale
* @NativeFunctionAddress 0000000140C89350
*/

void function SetBobScale(float)

/*
* @Breif Sets the rate of the random bobbing.
* @Pramas float
* @NativeName: SetBobFrequency
* @NativeFunctionAddress 0000000140C892E0
*/

void function SetBobFrequency(float)

/*
* @Breif Get the amplitude of the random bobbing. Zero is no bobbing.
* @Pramas 
* @NativeName: GetBobScale
* @NativeFunctionAddress 0000000140C89230
*/

float function GetBobScale()

/*
* @Breif Gets the rate of the random bobbing.
* @Pramas 
* @NativeName: GetBobFrequency
* @NativeFunctionAddress 0000000140C89180
*/

float function GetBobFrequency()

/*
* @Breif When you have a desired velocity set, this controls how fast we accelerate to the desired velocity.
* @Pramas float
* @NativeName: SetAccelScale
* @NativeFunctionAddress 0000000140C89110
*/

void function SetAccelScale(float)

/*
* @Breif When you have a desired velocity set, this controls how fast we accelerate to the desired velocity.
* @Pramas 
* @NativeName: GetAccelScale
* @NativeFunctionAddress 0000000140C89060
*/

float function GetAccelScale()

/*
* @Breif Sets an absolute minimal height. Additional velocity will be applied to ensure the mover never goes below this height.
* @Pramas float, float
* @NativeName: SetMinimalHeightWorld
* @NativeFunctionAddress 0000000140C88FD0
*/

void function SetMinimalHeightWorld(float, float)

/*
* @Breif Sets an minimal height above the ground. Additional velocity will be applied to ensure the mover never goes below this height.
* @Pramas float, float
* @NativeName: SetMinimalHeightGround
* @NativeFunctionAddress 0000000140C88F40
*/

void function SetMinimalHeightGround(float, float)

/*
* @Breif Clears any absolute minimal height previously set.
* @Pramas 
* @NativeName: ClearMinimalHeight
* @NativeFunctionAddress 0000000140C88EF0
*/

void function ClearMinimalHeight()

/*
* @Breif Applies a force that makes the entity spin around its forward axis.
* @Pramas float
* @NativeName: SetRollTorque
* @NativeFunctionAddress 0000000140C88E80
*/

void function SetRollTorque(float)

/*
* @Breif Gets the force that makes the entity spin around its forward axis.
* @Pramas 
* @NativeName: GetRollTorque
* @NativeFunctionAddress 0000000140C88DD0
*/

float function GetRollTorque()

/*
* @Breif Applies a force to the entity's left. Combined with SetRollTorque() can create a wobbly trajectory.
* @Pramas float
* @NativeName: SetSideForce
* @NativeFunctionAddress 0000000140C88D60
*/

void function SetSideForce(float)

/*
* @Breif The force to the entity's left. Combined with SetRollTorque() can create a wobbly trajectory.
* @Pramas 
* @NativeName: GetSideForce
* @NativeFunctionAddress 0000000140C88CB0
*/

float function GetSideForce()

/*
* @Breif Sets if this script mover and child entities can be a ground entity for NPCs
* @Pramas bool
* @NativeName: AllowNPCGroundEnt
* @NativeFunctionAddress 0000000140C88C50
*/

void function AllowNPCGroundEnt(bool)

/*
* @Breif Connect/disconnect NPC paths for child entities attached to this, when this moves
* @Pramas bool
* @NativeName: ChangeNPCPathsOnMove
* @NativeFunctionAddress 0000000140C88BF0
*/

void function ChangeNPCPathsOnMove(bool)

/*
* @Breif Move along a train node at a given speed and acceleration
* @Pramas entity, float, float
* @NativeName: Script_Train_MoveToTrainNode
* @NativeFunctionAddress 0000000140C88B40
*/

void function Train_MoveToTrainNode(entity, float, float)

/*
* @Breif Move to the given train node at the given speed.
* @Pramas entity, float, float, float, float
* @NativeName: Script_Train_MoveToTrainNodeEx
* @NativeFunctionAddress 0000000140C88A50
*/

void function Train_MoveToTrainNodeEx(entity, float, float, float, float)

/*
* @Breif Stop train smoothly
* @Pramas 
* @NativeName: Train_StopSmoothly
* @NativeFunctionAddress 0000000140C88A00
*/

void function Train_StopSmoothly()

/*
* @Breif Stop train immediately
* @Pramas 
* @NativeName: Train_StopImmediately
* @NativeFunctionAddress 0000000140C889B0
*/

void function Train_StopImmediately()

/*
* @Breif Follow a mover from a given distance away.
* @Pramas entity, float
* @NativeName: Script_Train_Follow
* @NativeFunctionAddress 0000000140C88920
*/

void function Train_Follow(entity, float)

/*
* @Breif Stop at the given train node
* @Pramas entity
* @NativeName: Script_Train_SetStopNode
* @NativeFunctionAddress 0000000140C888A0
*/

void function Train_SetStopNode(entity)

/*
* @Breif Clear breadcrumb history on the train
* @Pramas 
* @NativeName: Train_ClearBreadcrumbs
* @NativeFunctionAddress 0000000140C88850
*/

void function Train_ClearBreadcrumbs()

/*
* @Breif Clear breadcrumb history on the train
* @Pramas float, float, float
* @NativeName: Train_AutoRoll
* @NativeFunctionAddress 0000000140C887B0
*/

void function Train_AutoRoll(float, float, float)

/*
* @Breif Get node the train is currently set to stop at
* @Pramas 
* @NativeName: Script_Train_GetStopNode
* @NativeFunctionAddress 0000000140C88750
*/

entity function Train_GetStopNode()

/*
* @Breif Returns true if the train is currently moving to a train node
* @Pramas 
* @NativeName: Train_IsMovingToTrainNode
* @NativeFunctionAddress 0000000140C886F0
*/

bool function Train_IsMovingToTrainNode()

/*
* @Breif Stop all movement/rotation immediately
* @Pramas 
* @NativeName: Script_NonPhysicsStop
* @NativeFunctionAddress 0000000140C886A0
*/

void function NonPhysicsStop()

/*
* @Breif Move to a given point over time. Specify total travel time, acceleration time, and deceleration time.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsMoveTo
* @NativeFunctionAddress 0000000140C885F0
*/

void function NonPhysicsMoveTo(vector, float, float, float)

/*
* @Breif Move to a given point over time. The point is specified in the local space (i.e. relative to our parent), but the movement is linear in world space.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsMoveInWorldSpaceToLocalPos
* @NativeFunctionAddress 0000000140C88540
*/

void function NonPhysicsMoveInWorldSpaceToLocalPos(vector, float, float, float)

/*
* @Breif Move with a given starting velocity and apply the given gravity over time
* @Pramas vector, vector
* @NativeName: Script_NonPhysicsMoveWithGravity
* @NativeFunctionAddress 0000000140C884E0
*/

void function NonPhysicsMoveWithGravity(vector, vector)

/*
* @Breif Rotate to given angles over time. Specify total travel time.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsRotateTo
* @NativeFunctionAddress 0000000140C88430
*/

void function NonPhysicsRotateTo(vector, float, float, float)

/*
* @Breif Rotate around the given axis with the given speed. Use an axis or speed of 0 to stop.
* @Pramas vector, float
* @NativeName: Script_NonPhysicsRotate
* @NativeFunctionAddress 0000000140C883C0
*/

void function NonPhysicsRotate(vector, float)

/*
* @Breif When set true, will use local positions.
* @Pramas bool
* @NativeName: Script_NonPhysicsSetMoveModeLocal
* @NativeFunctionAddress 0000000140C88360
*/

void function NonPhysicsSetMoveModeLocal(bool)

/*
* @Breif When set true, will use local rotation.
* @Pramas bool
* @NativeName: Script_NonPhysicsSetRotateModeLocal
* @NativeFunctionAddress 0000000140C88300
*/

void function NonPhysicsSetRotateModeLocal(bool)

/*
* @Breif Get speed train is trying to go at.
* @Pramas 
* @NativeName: Script_Train_GetGoalSpeed
* @NativeFunctionAddress 0000000140C88250
*/

float function Train_GetGoalSpeed()

/*
* @Breif Get time until the train reaches its goal speed.
* @Pramas 
* @NativeName: Script_Train_GetTotalTimeToGoalSpeed
* @NativeFunctionAddress 0000000140C881A0
*/

float function Train_GetTotalTimeToGoalSpeed()

/*
* @Breif Get current speed moving to train node.
* @Pramas 
* @NativeName: Train_GetCurrentSpeed
* @NativeFunctionAddress 0000000140C880F0
*/

float function Train_GetCurrentSpeed()

/*
* @Breif Get the script_mover_train_node the train was traveling on before it stopped.
* @Pramas 
* @NativeName: Script_Train_GetLastNode
* @NativeFunctionAddress 0000000140C88090
*/

entity function Train_GetLastNode()

/*
* @Breif Get the distance the train was at before it stopped.
* @Pramas 
* @NativeName: Script_Train_GetLastDistance
* @NativeFunctionAddress 0000000140C87FE0
*/

float function Train_GetLastDistance()

/*
* @Breif Get the speed the train was moving at before it stopped.
* @Pramas 
* @NativeName: Train_GetLastSpeed
* @NativeFunctionAddress 0000000140C87F30
*/

float function Train_GetLastSpeed()

/*
* @Breif Gets door flags. Really just a networked int.
* @Pramas 
* @NativeName: GetDoorFlags
* @NativeFunctionAddress 0000000140C87E20
*/

int function GetDoorFlags()

/*
* @Breif Sets door flags. Really just a networked int.
* @Pramas int
* @NativeName: SetDoorFlags
* @NativeFunctionAddress 0000000140C87DB0
*/

void function SetDoorFlags(int)

/*
* @Breif Adds door flags. Really just a networked int.
* @Pramas int
* @NativeName: AddDoorFlags
* @NativeFunctionAddress 0000000140C87D40
*/

void function AddDoorFlags(int)

/*
* @Breif Removes door flags. Really just a networked int.
* @Pramas int
* @NativeName: RemoveDoorFlags
* @NativeFunctionAddress 0000000140C87CD0
*/

void function RemoveDoorFlags(int)

/*
* @Breif Clears all door flags. Really just a networked int.
* @Pramas 
* @NativeName: ClearAllDoorFlags
* @NativeFunctionAddress 0000000140C87C80
*/

void function ClearAllDoorFlags()

/*
* @Breif Instead of interpolating between two origins and angles, calculate what the origin and angle should be based on the movement parameters originally given
* @Pramas bool
* @NativeName: EnableNonPhysicsMoveInterpolation
* @NativeFunctionAddress 0000000140C87ED0
*/

void function EnableNonPhysicsMoveInterpolation(bool)

/*
* @Breif 
* @Pramas int teamNum
* @NativeName: SetOnlyTransmitToSingleTeam
* @NativeFunctionAddress 0000000140C8B840
*/

void function SetOnlyTransmitToSingleTeam(int teamNum)

/*
* @Breif 
* @Pramas entity player
* @NativeName: SetOnlyTransmitToOnePlayer
* @NativeFunctionAddress 0000000140C8B790
*/

void function SetOnlyTransmitToOnePlayer(entity player)

/*
* @Breif 
* @Pramas int bitfield
* @NativeName: SetWaypointBitfield
* @NativeFunctionAddress 0000000140C8B6F0
*/

void function SetWaypointBitfield(int bitfield)

/*
* @Breif 
* @Pramas string customType
* @NativeName: SetWaypointCustomType
* @NativeFunctionAddress 0000000140C8B650
*/

void function SetWaypointCustomType(string customType)

/*
* @Breif 
* @Pramas int index, entity ent
* @NativeName: SetWaypointEntity
* @NativeFunctionAddress 0000000140C8B5C0
*/

void function SetWaypointEntity(int index, entity ent)

/*
* @Breif 
* @Pramas int index, vector vec
* @NativeName: SetWaypointVector
* @NativeFunctionAddress 0000000140C8B550
*/

void function SetWaypointVector(int index, vector vec)

/*
* @Breif 
* @Pramas int index, float gametimeVal
* @NativeName: SetWaypointGametime
* @NativeFunctionAddress 0000000140C8B4D0
*/

void function SetWaypointGametime(int index, float gametimeVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetWaypointInt
* @NativeFunctionAddress 0000000140C8B450
*/

void function SetWaypointInt(int index, int intVal)

/*
* @Breif 
* @Pramas int index, float floatVal
* @NativeName: SetWaypointFloat
* @NativeFunctionAddress 0000000140C8B3D0
*/

void function SetWaypointFloat(int index, float floatVal)

/*
* @Breif 
* @Pramas int index, string stringVal
* @NativeName: SetWaypointString
* @NativeFunctionAddress 0000000140C8B350
*/

void function SetWaypointString(int index, string stringVal)

/*
* @Breif 
* @Pramas int index, asset assetVal
* @NativeName: SetWaypointAsset
* @NativeFunctionAddress 0000000140C8B2D0
*/

void function SetWaypointAsset(int index, asset assetVal)

/*
* @Breif 
* @Pramas int packedVal
* @NativeName: SetWaypointObjectivePackedInt
* @NativeFunctionAddress 0000000140C8B230
*/

void function SetWaypointObjectivePackedInt(int packedVal)

/*
* @Breif 
* @Pramas string groupName
* @NativeName: SetWaypointGroupName
* @NativeFunctionAddress 0000000140C8B190
*/

void function SetWaypointGroupName(string groupName)

/*
* @Breif 
* @Pramas int flags
* @NativeName: SetWaypointGroupFlags
* @NativeFunctionAddress 0000000140C8B0F0
*/

void function SetWaypointGroupFlags(int flags)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointType
* @NativeFunctionAddress 0000000140C8B040
*/

int function GetWaypointType()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointBitfield
* @NativeFunctionAddress 0000000140C8AF90
*/

int function GetWaypointBitfield()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointCustomType
* @NativeFunctionAddress 0000000140C8AF00
*/

string function GetWaypointCustomType()

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointEntity
* @NativeFunctionAddress 0000000140C8AE40
*/

entity function GetWaypointEntity(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointVector
* @NativeFunctionAddress 0000000140C8AD20
*/

vector function GetWaypointVector(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointGametime
* @NativeFunctionAddress 0000000140C8AC30
*/

float function GetWaypointGametime(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointInt
* @NativeFunctionAddress 0000000140C8AB50
*/

int function GetWaypointInt(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointFloat
* @NativeFunctionAddress 0000000140C8AA60
*/

float function GetWaypointFloat(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointString
* @NativeFunctionAddress 0000000140C8A990
*/

string function GetWaypointString(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointAsset
* @NativeFunctionAddress 0000000140C8A8C0
*/

asset function GetWaypointAsset(int index)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointObjectivePackedInt
* @NativeFunctionAddress 0000000140C8A810
*/

int function GetWaypointObjectivePackedInt()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointGroupName
* @NativeFunctionAddress 0000000140C8A780
*/

string function GetWaypointGroupName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointGroupFlags
* @NativeFunctionAddress 0000000140C8A6D0
*/

int function GetWaypointGroupFlags()

/*
* @Breif 
* @Pramas int teamNum
* @NativeName: SetTasklistOnlyTransmitToSingleTeam
* @NativeFunctionAddress 0000000140C8C7C0
*/

void function SetTasklistOnlyTransmitToSingleTeam(int teamNum)

/*
* @Breif 
* @Pramas 
* @NativeName: ClearAll
* @NativeFunctionAddress 0000000140C8C770
*/

void function ClearAll()

/*
* @Breif 
* @Pramas 
* @NativeName: SetNotifyTimeUpdate
* @NativeFunctionAddress 0000000140C8C6D0
*/

void function SetNotifyTimeUpdate()

/*
* @Breif 
* @Pramas int intVal
* @NativeName: SetTasklistCustomInt
* @NativeFunctionAddress 0000000140C8B6F0
*/

void function SetTasklistCustomInt(int intVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistStatus
* @NativeFunctionAddress 0000000140C8C650
*/

void function SetTasklistStatus(int index, int intVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistType
* @NativeFunctionAddress 0000000140C8C5D0
*/

void function SetTasklistType(int index, int intVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistCountGoal
* @NativeFunctionAddress 0000000140C8C550
*/

void function SetTasklistCountGoal(int index, int intVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistCountNow
* @NativeFunctionAddress 0000000140C8C4D0
*/

void function SetTasklistCountNow(int index, int intVal)

/*
* @Breif 
* @Pramas int index, int flags
* @NativeName: SetTasklistFlags
* @NativeFunctionAddress 0000000140C8C450
*/

void function SetTasklistFlags(int index, int flags)

/*
* @Breif 
* @Pramas int index, float gametimeVal
* @NativeName: SetTasklistGameTime
* @NativeFunctionAddress 0000000140C8C3D0
*/

void function SetTasklistGameTime(int index, float gametimeVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistInt
* @NativeFunctionAddress 0000000140C8C350
*/

void function SetTasklistInt(int index, int intVal)

/*
* @Breif 
* @Pramas int index, float floatVal
* @NativeName: SetTasklistFloat
* @NativeFunctionAddress 0000000140C8C2D0
*/

void function SetTasklistFloat(int index, float floatVal)

/*
* @Breif 
* @Pramas int index, entity ent
* @NativeName: SetTasklistEntity
* @NativeFunctionAddress 0000000140C8C240
*/

void function SetTasklistEntity(int index, entity ent)

/*
* @Breif 
* @Pramas int index, string stringVal
* @NativeName: SetTasklistString
* @NativeFunctionAddress 0000000140C8C180
*/

void function SetTasklistString(int index, string stringVal)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTasklistCustomInt
* @NativeFunctionAddress 0000000140C8AF90
*/

int function GetTasklistCustomInt()

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistStatus
* @NativeFunctionAddress 0000000140C8C0A0
*/

int function GetTasklistStatus(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistType
* @NativeFunctionAddress 0000000140C8BFC0
*/

int function GetTasklistType(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistCountGoal
* @NativeFunctionAddress 0000000140C8BEE0
*/

int function GetTasklistCountGoal(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistCountNow
* @NativeFunctionAddress 0000000140C8BE00
*/

int function GetTasklistCountNow(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistFlags
* @NativeFunctionAddress 0000000140C8BD20
*/

int function GetTasklistFlags(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistGameTime
* @NativeFunctionAddress 0000000140C8BC30
*/

float function GetTasklistGameTime(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistInt
* @NativeFunctionAddress 0000000140C8BB50
*/

int function GetTasklistInt(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistFloat
* @NativeFunctionAddress 0000000140C8BA60
*/

float function GetTasklistFloat(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistEntity
* @NativeFunctionAddress 0000000140C8B9A0
*/

entity function GetTasklistEntity(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistString
* @NativeFunctionAddress 0000000140C8B900
*/

string function GetTasklistString(int index)

/*
* @Breif Kill the player decoy and dissolve at the same time.
* @Pramas 
* @NativeName: Die
* @NativeFunctionAddress 0000000140C8D6E0
*/

void function Decoy_Die()

/*
* @Breif Dissolve out the player decoy without killing it.
* @Pramas 
* @NativeName: Dissolve
* @NativeFunctionAddress 0000000140C8D690
*/

void function Decoy_Dissolve()

/*
* @Breif Sets whether friendly fire is enabled or disabled for this player decoy (default enabled).
* @Pramas bool
* @NativeName: SetFriendlyFire
* @NativeFunctionAddress 0000000140C8D5F0
*/

void function SetFriendlyFire(bool)

/*
* @Breif Returns true if friendly fire is enabled for this player decoy
* @Pramas 
* @NativeName: GetFriendlyFire
* @NativeFunctionAddress 0000000140C8D580
*/

bool function GetFriendlyFire()

/*
* @Breif Sets whether splashes out when it lands from airborne state (default disabled).
* @Pramas bool
* @NativeName: SetLandSplash
* @NativeFunctionAddress 0000000140C8D4E0
*/

void function SetLandSplash(bool)

/*
* @Breif Returns true if land splash is enabled for this player decoy
* @Pramas 
* @NativeName: GetLandSplash
* @NativeFunctionAddress 0000000140C8D480
*/

bool function GetLandSplash()

/*
* @Breif Set timeout in seconds. When timeout finishes the decoy dies. Default is -1 (no timeout)
* @Pramas float
* @NativeName: SetTimeout
* @NativeFunctionAddress 0000000140C8D3F0
*/

void function SetTimeout(float)

/*
* @Breif Sets the delay for when the decoy jumps after created in air
* @Pramas float
* @NativeName: SetJumpDelay
* @NativeFunctionAddress 0000000140C8D340
*/

void function SetJumpDelay(float)

/*
* @Breif Sets the rate at which the decoy flickers after created
* @Pramas float
* @NativeName: SetFlickerRate
* @NativeFunctionAddress 0000000140C8D2C0
*/

void function SetFlickerRate(float)

/*
* @Breif Lets the decoy land in slide or sprint
* @Pramas bool
* @NativeName: SetEnableRandomLanding
* @NativeFunctionAddress 0000000140C8D220
*/

void function SetEnableRandomLanding(bool)

/*
* @Breif Sets whether or not the decoy dies on collisions
* @Pramas bool
* @NativeName: SetKillOnCollision
* @NativeFunctionAddress 0000000140C8D180
*/

void function SetKillOnCollision(bool)

/*
* @Breif Sets whether or not the decoy is killed in 1 shot by a player
* @Pramas bool
* @NativeName: SetPlayerOneHits
* @NativeFunctionAddress 0000000140C8D0E0
*/

void function SetPlayerOneHits(bool)

/*
* @Breif Sets max rate the decoy can pulse at. Randomly pulses at around this rate on the minimap
* @Pramas float
* @NativeName: SetDecoyRandomPulseRateMax
* @NativeFunctionAddress 0000000140C8D070
*/

void function SetDecoyRandomPulseRateMax(float)

/*
* @Breif 
* @Pramas entity activatorOrNull
* @NativeName: Script_OpenDoor
* @NativeFunctionAddress 0000000140BC9990
*/

void function OpenDoor(entity activatorOrNull)

/*
* @Breif 
* @Pramas entity activatorOrNull
* @NativeName: Script_CloseDoor
* @NativeFunctionAddress 0000000140BC9910
*/

void function CloseDoor(entity activatorOrNull)

/*
* @Breif 
* @Pramas bool state
* @NativeName: Script_SetDoorLocked
* @NativeFunctionAddress 0000000140BC98B0
*/

void function SetDoorLocked(bool state)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetDoorIsLocked
* @NativeFunctionAddress 0000000140BC9850
*/

bool function GetDoorIsLocked()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsDoorOpen
* @NativeFunctionAddress 0000000140BC97F0
*/

bool function IsDoorOpen()

/*
* @Breif Get the attached door on a double door
* @Pramas 
* @NativeName: Script_GetOppositeDoor
* @NativeFunctionAddress 0000000140BC9790
*/

entity function GetOppositeDoor()

/*
* @Breif Forces the grenade to ignite immediately.
* @Pramas 
* @NativeName: Script_GrenadeIgnite
* @NativeFunctionAddress 0000000140BCA410
*/

void function GrenadeIgnite()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GrenadeHasIgnited
* @NativeFunctionAddress 0000000140BCA3B0
*/

bool function GrenadeHasIgnited()

/*
* @Breif Forces the grenade to explode immediately.
* @Pramas vector
* @NativeName: Script_GrenadeExplode
* @NativeFunctionAddress 0000000140BCA350
*/

void function GrenadeExplode(vector)

/*
* @Breif Forces the grenade to explode immediately.
* @Pramas vector
* @NativeName: Script_GrenadeExplodeForCollisionCallback
* @NativeFunctionAddress 0000000140BCA2F0
*/

void function ExplodeForCollisionCallback(vector)

/*
* @Breif Gets the damage radius
* @Pramas 
* @NativeName: Script_GetDamageRadius
* @NativeFunctionAddress 0000000140BCA240
*/

float function GetDamageRadius()

/*
* @Breif Gets the explosion radius
* @Pramas 
* @NativeName: Script_GetExplosionRadius
* @NativeFunctionAddress 0000000140BCA180
*/

float function GetExplosionRadius()

/*
* @Breif Gets the maximum damage amount
* @Pramas int
* @NativeName: Script_GetDamageAmount
* @NativeFunctionAddress 0000000140BCA0C0
*/

float function GetDamageAmount(int)

/*
* @Breif Gets the time this grenade was created.
* @Pramas 
* @NativeName: Script_GetCreationTime
* @NativeFunctionAddress 0000000140BCA010
*/

float function GetCreationTime()

/*
* @Breif Gets the fuse time of the grenade
* @Pramas 
* @NativeName: Script_GetFuseTime
* @NativeFunctionAddress 0000000140BC9F60
*/

float function GetFuseTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_MarkAsAttached
* @NativeFunctionAddress 0000000140BC9ED0
*/

void function MarkAsAttached()

/*
* @Breif Gets who through the grenade.
* @Pramas 
* @NativeName: Script_GetThrower
* @NativeFunctionAddress 0000000140BC9E70
*/

entity function GetThrower()

/*
* @Breif Sets whether or not the grenade explodes
* @Pramas bool
* @NativeName: Script_SetDoesExplode
* @NativeFunctionAddress 0000000140BC9DE0
*/

void function SetDoesExplode(bool)

/*
* @Breif Init magnetic grenade parameters
* @Pramas float, string
* @NativeName: InitMagnetic
* @NativeFunctionAddress 0000000140BC9D30
*/

void function InitMagnetic(float, string)

/*
* @Breif 
* @Pramas entity
* @NativeName: Script_SetLauncherOwner
* @NativeFunctionAddress 0000000140BC9CA0
*/

void function SetLauncherOwner(entity)

/*
* @Breif 
* @Pramas float
* @NativeName: SetGrenadeTimer
* @NativeFunctionAddress 0000000140BC9C00
*/

void function SetGrenadeTimer(float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetGrenadeIgnitionDuration
* @NativeFunctionAddress 0000000140BC9B90
*/

void function SetGrenadeIgnitionDuration(float)

/*
* @Breif Tells the file system that a file at the exact path provided must exist in the currently loading VPK.
* @Pramas string
* @NativeName: VPKNotifyFile
* @NativeFunctionAddress 00000001407AEC60
*/

void function VPKNotifyFile(string)

/*
* @Breif Generate a random floating point number in [0, A)
* @Pramas float
* @NativeName: SHARED_SCRIPT( Script_RandomFloat )
* @NativeFunctionAddress 0000000140C80BA0
*/

float function RandomFloat(var, number)

/*
* @Breif Generate a random floating point number in [A, B)
* @Pramas float, float
* @NativeName: SHARED_SCRIPT( Script_RandomFloatRange )
* @NativeFunctionAddress 0000000140C80C70
*/

float function RandomFloatRange(var, number, number)

/*
* @Breif Generate a random integer in [0, A)
* @Pramas int
* @NativeName: SHARED_SCRIPT( Script_RandomInt )
* @NativeFunctionAddress 0000000140C80D70
*/

int function RandomInt(var, number)

/*
* @Breif Generate a random integer in [A, B)
* @Pramas int, int
* @NativeName: SHARED_SCRIPT( Script_RandomIntRange )
* @NativeFunctionAddress 0000000140C80E20
*/

int function RandomIntRange(var, number, number)

/*
* @Breif Generate a random integer in [A, B]
* @Pramas int, int
* @NativeName: SHARED_SCRIPT( Script_RandomIntRangeInclusive )
* @NativeFunctionAddress 0000000140C80F00
*/

int function RandomIntRangeInclusive(var, number, number)

/*
* @Breif Returns true if this is server script
* @Pramas 
* @NativeName: IsServer
* @NativeFunctionAddress 0000000140C83DB0
*/

bool function IsServer()

/*
* @Breif Returns true if this is client script
* @Pramas 
* @NativeName: IsClient
* @NativeFunctionAddress 00000001407AD660
*/

bool function IsClient()

/*
* @Breif Returns true if this is UI script
* @Pramas 
* @NativeName: IsUI
* @NativeFunctionAddress 00000001407AD660
*/

bool function IsUI()

/*
* @Breif Returns true if the game was launched with "-tools".
* @Pramas 
* @NativeName: IsToolsMode
* @NativeFunctionAddress 0000000140C83D60
*/

bool function IsToolsMode()

/*
* @Breif Returns true if the game was launched with "-fnf".
* @Pramas 
* @NativeName: IsFNF
* @NativeFunctionAddress 0000000140C83D10
*/

bool function IsFNF()

/*
* @Breif Returns true if the game was launched with "-qa".
* @Pramas 
* @NativeName: IsQA
* @NativeFunctionAddress 0000000140C83CC0
*/

bool function IsQA()

/*
* @Breif Returns true if the game was launched with the specified parameter.
* @Pramas string
* @NativeName: Dev_CommandLineHasParm
* @NativeFunctionAddress 00000001408F7AF0
*/

bool function Dev_CommandLineHasParm(string)

/*
* @Breif Returns the string following the parameter if it exists.
* @Pramas string
* @NativeName: Dev_CommandLineParmValue
* @NativeFunctionAddress 00000001408F7A70
*/

string function Dev_CommandLineParmValue(string)

/*
* @Breif Removes parameter from the command line. Useful if you want a command line parameter to only be effective once.
* @Pramas string
* @NativeName: Dev_CommandLineRemoveParm
* @NativeFunctionAddress 00000001408F7A00
*/

void function Dev_CommandLineRemoveParm(string)

/*
* @Breif Adds parameter to the command line. Useful to change code/scrip the command line. Pass in the key and value.
* @Pramas string, string
* @NativeName: Dev_CommandLineAddParm
* @NativeFunctionAddress 00000001408F7980
*/

void function Dev_CommandLineAddParm(string, string)

/*
* @Breif empty function: takes int, bool, float, returns 1
* @Pramas int, bool, float
* @NativeName: NativeFuncTest
* @NativeFunctionAddress 00000001408F78F0
*/

int function NativeFuncTest(int, bool, float)

/*
* @Breif Gets the level of 'developer'
* @Pramas 
* @NativeName: GetDeveloperLevel
* @NativeFunctionAddress 00000001408F7850
*/

int function GetDeveloperLevel()

/*
* @Breif Gets the integer value of the 'bug_reproNum' convar
* @Pramas 
* @NativeName: GetBugReproNum
* @NativeFunctionAddress 00000001408F77B0
*/

int function GetBugReproNum()

/*
* @Breif 
* @Pramas string flagName
* @NativeName: WhenBuildFlag
* @NativeFunctionAddress 00000001407AD660
*/

bool function WhenBuildFlag(string flagName)

/*
* @Breif Wraps given angle to [-180, 180] range
* @Pramas float
* @NativeName: Script_AngleNormalize
* @NativeFunctionAddress 00000001408F76D0
*/

float function AngleNormalize(float)

/*
* @Breif Given an absolute angle and absolute direction vector, returns a local direction vector; one that is relative to the absolute angle's axes
* @Pramas vector, vector
* @NativeName: Script_CalcRelativeVector
* @NativeFunctionAddress 00000001408F7610
*/

vector function CalcRelativeVector(vector, vector)

/*
* @Breif Given an angle and vector, returns the angular difference needed to face from the given angle to the given vector
* @Pramas vector, vector
* @NativeName: Script_CalcRelativeAngles
* @NativeFunctionAddress 00000001408F7540
*/

vector function CalcRelativeAngles(vector, vector)

/*
* @Breif Given an absolute origin, return the origin relative to the given entity
* @Pramas entity, vector
* @NativeName: Script_CalcOriginRelativeToEntity
* @NativeFunctionAddress 0000000140C83BE0
*/

vector function CalcOriginRelativeToEntity(entity, vector)

/*
* @Breif Given some absolute angles, return the angles relative to the given entity
* @Pramas entity, vector
* @NativeName: Script_CalcAnglesRelativeToEntity
* @NativeFunctionAddress 0000000140C83B00
*/

vector function CalcAnglesRelativeToEntity(entity, vector)

/*
* @Breif Given an absolute origin, return the origin relative to the given absolute origin and angles
* @Pramas vector, vector, vector
* @NativeName: Script_CalcOriginRelativeToAbsOriginAngles
* @NativeFunctionAddress 00000001408F72B0
*/

vector function CalcOriginRelativeToAbsOriginAngles(vector, vector, vector)

/*
* @Breif Given some absolute angles, return the angles relative to the given absolute origin and angles
* @Pramas vector, vector, vector
* @NativeName: Script_CalcAnglesRelativeToAbsOriginAngles
* @NativeFunctionAddress 00000001408F71E0
*/

vector function CalcAnglesRelativeToAbsOriginAngles(vector, vector, vector)

/*
* @Breif Given some angles, an axis of rotation vector, and degree angle offset: Returns the angles rotated about the axis by the offset
* @Pramas vector, vector, float
* @NativeName: Script_RotateAnglesAboutAxis
* @NativeFunctionAddress 00000001408F7100
*/

vector function RotateAnglesAboutAxis(vector, vector, float)

/*
* @Breif Given a vector, an axis of rotation vector, and degree angle offset: Returns the vector rotated about the axis by the offset
* @Pramas vector, vector, float
* @NativeName: Script_VectorRotateAxis
* @NativeFunctionAddress 00000001408F7020
*/

vector function VectorRotateAxis(vector, vector, float)

/*
* @Breif Given an angle and vector, returns the angular difference needed to face from the given angle to the given vector
* @Pramas vector, vector, vector, vector
* @NativeName: Script_IsBoxIntersectingBox
* @NativeFunctionAddress 00000001408F6F90
*/

bool function BoxIntersectsBox(vector, vector, vector, vector)

/*
* @Breif For debugging
* @Pramas 
* @NativeName: Script_TriggerBreakpoint
* @NativeFunctionAddress 00000001407AEC60
*/

void function TriggerBreakpoint()

/*
* @Breif Prints to the game's spam logfile (usually stored in DevNet).
* @Pramas ( string )
* @NativeName: SHARED_SCRIPT( ScriptPrintToSpamLog )
* @NativeFunctionAddress 00000001407AEC60
*/

void function SpamLog(var, string)

/*
* @Breif Initialize profile entry with name.
* @Pramas int, string
* @NativeName: Script_PerfInitLabel
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfInitLabel(int, string)

/*
* @Breif Start timer for profile entry.
* @Pramas int
* @NativeName: Script_PerfStart
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfStart(int)

/*
* @Breif End the timer for profile entry.
* @Pramas int
* @NativeName: Script_PerfEnd
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfEnd(int)

/*
* @Breif Clear all data
* @Pramas 
* @NativeName: Script_PerfClearAll
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfClearAll()

/*
* @Breif Reset just the timing data, keep labels.
* @Pramas 
* @NativeName: Script_PerfReset_ScriptCmd
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfReset()

/*
* @Breif Print profile data.
* @Pramas 
* @NativeName: Script_PerfDump_ScriptCmd
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfDump()

/*
* @Breif Start rpof timer for index.
* @Pramas int, string
* @NativeName: Script_RProfStart
* @NativeFunctionAddress 00000001407AEC60
*/

void function RProfStart(int, string)

/*
* @Breif End rpof timer for index.
* @Pramas int
* @NativeName: Script_RProfEnd
* @NativeFunctionAddress 00000001407AEC60
*/

void function RProfEnd(int)

/*
* @Breif Start a timer.  Use TimerEnd to get the elapsed time.  Only one Timer can be active at a time.
* @Pramas 
* @NativeName: Script_TimerStart
* @NativeFunctionAddress 0000000140C83A90
*/

void function TimerStart()

/*
* @Breif End the timer started with TimerStart.  Return milliseconds since TimerStart was called.  Only one Timer can be active at a time.
* @Pramas 
* @NativeName: Script_TimerEnd
* @NativeFunctionAddress 0000000140C839F0
*/

float function TimerEnd()

/*
* @Breif Returns first parameter clamped between first and second parameter.
* @Pramas float, float, float
* @NativeName: Script_Clamp
* @NativeFunctionAddress 00000001408F6D80
*/

float function clamp(float, float, float)

/*
* @Breif Interpolate with cubic hermite during ease-in and ease-out times
* @Pramas startTime, moveTime, easeIn, easeOut
* @NativeName: SHARED_SCRIPT( Script_Interpolate )
* @NativeFunctionAddress 0000000140C80FE0
*/

float function Interpolate(var, number, number, number, number)

/*
* @Breif Linearly interpolate between two vectors
* @Pramas vecFrom, vecTo, percent
* @NativeName: SHARED_SCRIPT( Script_LerpVector )
* @NativeFunctionAddress 00000001408F1EC0
*/

vector function LerpVector(var, vector, vector, number)

/*
* @Breif Spherically linear interpolate between two vectors
* @Pramas vecFrom, vecTo, percent
* @NativeName: SHARED_SCRIPT( Script_SlerpVector )
* @NativeFunctionAddress 00000001408F1FF0
*/

vector function SlerpVector(var, vector, vector, number)

/*
* @Breif Get a random 2d point in a circle, as a 3d point, with optional 3d base
* @Pramas radius, base3D_or_null
* @NativeName: SHARED_SCRIPT( Script_GetRandom3DPointIn2DCircle )
* @NativeFunctionAddress 0000000140C81020
*/

vector function GetRandom3DPointIn2DCircle(var, number, var)

/*
* @Breif Map a value V from C to D. Linier interpolate between A and B mapped to C and D
* @Pramas float, float, float, float, float
* @NativeName: Script_Graph
* @NativeFunctionAddress 00000001408F6C60
*/

float function Graph(float, float, float, float, float)

/*
* @Breif Map a value V from C to D. If V <= A, result = C. If V >= B, result = D. Otherwise linearly interpolate between A and B mapped to C and D
* @Pramas float, float, float, float, float
* @NativeName: Script_GraphCapped
* @NativeFunctionAddress 00000001408F6B10
*/

float function GraphCapped(float, float, float, float, float)

/*
* @Breif Map a value V from Vector C to Vector D. If V <= A, result = C. If V >= B, result = D. Otherwise linearly interpolate between A and B mapped to C and D
* @Pramas float, float, float, vector, vector
* @NativeName: Script_GraphCappedVector
* @NativeFunctionAddress 00000001408F6A00
*/

vector function GraphCappedVector(float, float, float, vector, vector)

/*
* @Breif Remap [0,1] to a cosine curved [0,1]
* @Pramas float
* @NativeName: Script_Smooth01
* @NativeFunctionAddress 00000001408F6860
*/

float function Smooth01(float)

/*
* @Breif Interpolate between values, preserving velocity (so it is smooth)
* @Pramas float, float, float, float, float
* @NativeName: Script_SmoothCD
* @NativeFunctionAddress 0000000140C838B0
*/

var function SmoothCD(float, float, float, float, float)

/*
* @Breif Interpolate between values, preserving velocity (so it is smooth)
* @Pramas vector, vector, vector, float, float
* @NativeName: Script_SmoothCDVector
* @NativeFunctionAddress 0000000140C837B0
*/

var function SmoothCDVector(vector, vector, vector, float, float)

/*
* @Breif 
* @Pramas float, float, float
* @NativeName: Script_ApproachAngle
* @NativeFunctionAddress 00000001408F6500
*/

float function ApproachAngle(float, float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: Script_ExponentialDeltaAngle
* @NativeFunctionAddress 00000001408F6400
*/

float function ExponentialDeltaAngle(float, float, float, float)

/*
* @Breif Call before reloading scripts
* @Pramas 
* @NativeName: Script_ReloadingScriptsBegin
* @NativeFunctionAddress 00000001407AEC60
*/

void function ReloadingScriptsBegin()

/*
* @Breif Call after reloading scripts
* @Pramas 
* @NativeName: Script_ReloadingScriptsEnd
* @NativeFunctionAddress 00000001407AEC60
*/

void function ReloadingScriptsEnd()

/*
* @Breif Given a settings asset name, returns an object that represents the (unmodded) block of data for calls into GetSettingsBlockInt/Float/etc.
* @Pramas asset settingsAssetName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockForAsset )
* @NativeFunctionAddress 00000001408F27E0
*/

var function GetSettingsBlockForAsset()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockBool )
* @NativeFunctionAddress 0000000140C81160
*/

var function GetSettingsBlockBool()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockInt )
* @NativeFunctionAddress 0000000140C81250
*/

var function GetSettingsBlockInt()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockFloat )
* @NativeFunctionAddress 0000000140C81390
*/

var function GetSettingsBlockFloat()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockVector )
* @NativeFunctionAddress 0000000140C814D0
*/

var function GetSettingsBlockVector()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockString )
* @NativeFunctionAddress 0000000140C81600
*/

var function GetSettingsBlockString()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockAsset )
* @NativeFunctionAddress 0000000140C81710
*/

var function GetSettingsBlockAsset()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockStringAsAsset )
* @NativeFunctionAddress 0000000140C81830
*/

var function GetSettingsBlockStringAsAsset()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its array in that setting block, and returns an object representing the array. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockArray )
* @NativeFunctionAddress 00000001408F30D0
*/

var function GetSettingsBlockArray()

/*
* @Breif Given a settings array (from GetSettingsBlockArray), returns the number of elements in the array.
* @Pramas var settingsArray
* @NativeName: SHARED_SCRIPT( Script_GetSettingsArraySize )
* @NativeFunctionAddress 00000001408F3240
*/

var function GetSettingsArraySize()

/*
* @Breif Given a settings array (from GetSettingsBlockArray), returns the requested element of the array as a settings block.
* @Pramas var settingsArray, int index
* @NativeName: SHARED_SCRIPT( Script_GetSettingsArrayElem )
* @NativeFunctionAddress 00000001408F32A0
*/

var function GetSettingsArrayElem()

/*
* @Breif Given a settings asset name, returns the 31-bit "unique ID" that was generated for it in Bakery.
* @Pramas asset settingsAssetName
* @NativeName: Script_GetUniqueIdForSettingsAsset
* @NativeFunctionAddress 00000001408F6360
*/

int function GetUniqueIdForSettingsAsset(asset settingsAssetName)

/*
* @Breif Given a 31-bit unique ID for a settings asset, returns the settings asset name.
* @Pramas int uniqueId
* @NativeName: Script_GetSettingsAssetForUniqueId
* @NativeFunctionAddress 0000000140C83740
*/

asset function GetSettingsAssetForUniqueId(int uniqueId)

/*
* @Breif Given a settings asset name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Script_GetGlobalSettingsBool
* @NativeFunctionAddress 0000000140C836E0
*/

bool function GetGlobalSettingsBool(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Script_GetGlobalSettingsInt
* @NativeFunctionAddress 0000000140C83630
*/

int function GetGlobalSettingsInt(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Script_GetGlobalSettingsFloat
* @NativeFunctionAddress 0000000140C83580
*/

float function GetGlobalSettingsFloat(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Script_GetGlobalSettingsVector
* @NativeFunctionAddress 0000000140C834A0
*/

vector function GetGlobalSettingsVector(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Script_GetGlobalSettingsString
* @NativeFunctionAddress 0000000140C83310
*/

string function GetGlobalSettingsString(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Script_GetGlobalSettingsAsset
* @NativeFunctionAddress 0000000140C832A0
*/

asset function GetGlobalSettingsAsset(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Script_GetGlobalSettingsStringAsAsset
* @NativeFunctionAddress 0000000140C83230
*/

asset function GetGlobalSettingsStringAsAsset(asset, string)

/*
* @Breif Slow dev ONLY. Given a player setting name and key, resolves a string key to its value in that setting info file
* @Pramas string, string
* @NativeName: Script_GetAISettingByKeyField_Global
* @NativeFunctionAddress 0000000140C83170
*/

var function Dev_GetAISettingByKeyField_Global(string, string)

/*
* @Breif Slow dev ONLY. Given a player setting name and key, resolves a string key to its asset value in that setting info file
* @Pramas string, string
* @NativeName: Script_GetAISettingAssetByKeyField_Global
* @NativeFunctionAddress 0000000140C83100
*/

asset function Dev_GetAISettingAssetByKeyField_Global(string, string)

/*
* @Breif Given a weapon name and key, resolves a string key to its value in that weapons info file. Assumes no mods set.
* @Pramas string, string
* @NativeName: GetWeaponInfoFileKeyField_Global
* @NativeFunctionAddress 0000000140C83030
*/

var function GetWeaponInfoFileKeyField_Global(string, string)

/*
* @Breif Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.
* @Pramas string weaponName, array< string > modArray, string key
* @NativeName: GetWeaponInfoFileKeyField_WithMods_Global
* @NativeFunctionAddress 0000000140C82F50
*/

var function GetWeaponInfoFileKeyField_WithMods_Global(string weaponName, array< string > modArray, string key)

/*
* @Breif Given a weapon name, returns a list of the mods available on that weapon
* @Pramas string weaponName
* @NativeName: GetWeaponMods_Global
* @NativeFunctionAddress 0000000140C82E90
*/

array< string > function GetWeaponMods_Global(string weaponName)

/*
* @Breif 
* @Pramas entity ent, string weaponName, array< string > modArray
* @NativeName: Script_SetBodyGroupsForWeaponConfig
* @NativeFunctionAddress 0000000140C82E00
*/

void function SetBodyGroupsForWeaponConfig(entity ent, string weaponName, array< string > modArray)

/*
* @Breif Given a weapon name and key, resolves a string key to its value in that weapons info file. Assumes no mods set.
* @Pramas string weaponname, string key
* @NativeName: GetWeaponInfoFileKeyFieldAsset_Global
* @NativeFunctionAddress 0000000140C82D30
*/

asset function GetWeaponInfoFileKeyFieldAsset_Global(string weaponname, string key)

/*
* @Breif Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.
* @Pramas string weaponName, array< string > modArray, string key
* @NativeName: GetWeaponInfoFileKeyFieldAsset_WithMods_Global
* @NativeFunctionAddress 0000000140C82C50
*/

asset function GetWeaponInfoFileKeyFieldAsset_WithMods_Global(string weaponName, array< string > modArray, string key)

/*
* @Breif Given ( entity, hitboxIndex ) - returns the hitgroup for the hitbox on that entity
* @Pramas var, int
* @NativeName: GetHitgroupForHitboxOnEntity
* @NativeFunctionAddress 0000000140C82B90
*/

int function GetHitgroupForHitboxOnEntity(var, int)

/*
* @Breif Check out file from P4
* @Pramas string
* @NativeName: ScriptDevP4Checkout
* @NativeFunctionAddress 00000001407AEC60
*/

void function DevP4Checkout(string)

/*
* @Breif Add or edit a file to P4
* @Pramas string
* @NativeName: ScriptDevP4Add
* @NativeFunctionAddress 00000001407AEC60
*/

void function DevP4Add(string)

/*
* @Breif Append string to a temp buffer. Dev only.
* @Pramas string
* @NativeName: ScriptDevTextBufferWrite
* @NativeFunctionAddress 0000000140C82B40
*/

void function DevTextBufferWrite(string)

/*
* @Breif Append string to a temp buffer. Dev only.
* @Pramas 
* @NativeName: ScriptDevTextBufferClear
* @NativeFunctionAddress 0000000140C82A70
*/

void function DevTextBufferClear()

/*
* @Breif Dump temp buffer out to specified path/filename.
* @Pramas string
* @NativeName: ScriptDevTextBufferDumpToFile
* @NativeFunctionAddress 0000000140C82A10
*/

bool function DevTextBufferDumpToFile(string)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetPersistentDataDefScriptVersion
* @NativeFunctionAddress 0000000140C82940
*/

int function GetPersistentDataDefScriptVersion()

/*
* @Breif Get a count of how many distinct values the given enum has.
* @Pramas string
* @NativeName: ScriptPersistenceGetEnumCount
* @NativeFunctionAddress 0000000140C828A0
*/

int function PersistenceGetEnumCount(string)

/*
* @Breif Get a count of how many distinct values the given enum has.
* @Pramas string, string
* @NativeName: ScriptPersistenceGetEnumIndexForItemName
* @NativeFunctionAddress 0000000140C827F0
*/

int function PersistenceGetEnumIndexForItemName(string, string)

/*
* @Breif Get a count of how many distinct values the given enum has.
* @Pramas string, int
* @NativeName: ScriptPersistenceGetEnumItemNameForIndex
* @NativeFunctionAddress 0000000140C82780
*/

string function PersistenceGetEnumItemNameForIndex(string, int)

/*
* @Breif Returns true if the given enum value contains the given value.
* @Pramas string, string
* @NativeName: ScriptPersistenceEnumValueIsValid
* @NativeFunctionAddress 0000000140C82720
*/

bool function PersistenceEnumValueIsValid(string, string)

/*
* @Breif Get a count of how many elements the given item has.
* @Pramas string
* @NativeName: ScriptPersistenceGetArrayCount
* @NativeFunctionAddress 0000000140C82680
*/

int function PersistenceGetArrayCount(string)

/*
* @Breif Sets the XP required for a player to get to a certain level
* @Pramas int, int
* @NativeName: Script_SetXPForLevel
* @NativeFunctionAddress 00000001408F5110
*/

void function SetXPForLevel(int, int)

/*
* @Breif Gets level for a player with a given amount of XP
* @Pramas int
* @NativeName: Script_GetLevelForXP
* @NativeFunctionAddress 00000001408F5060
*/

int function GetLevelForXP(int)

/*
* @Breif Gets the value of a convar as a string
* @Pramas string
* @NativeName: Script_GetConVarString
* @NativeFunctionAddress 00000001408F5000
*/

string function GetConVarString(string)

/*
* @Breif Gets the value of a convar as an integer
* @Pramas string
* @NativeName: Script_GetConVarInt
* @NativeFunctionAddress 00000001408F4F60
*/

int function GetConVarInt(string)

/*
* @Breif Gets the value of a convar as a float
* @Pramas string
* @NativeName: Script_GetConVarFloat
* @NativeFunctionAddress 00000001408F4EC0
*/

float function GetConVarFloat(string)

/*
* @Breif Gets the value of a convar as a boolean
* @Pramas string
* @NativeName: Script_GetConVarBool
* @NativeFunctionAddress 00000001408F4E60
*/

bool function GetConVarBool(string)

/*
* @Breif Sets the value of a convar with a string
* @Pramas string, string
* @NativeName: Script_SetConVarString
* @NativeFunctionAddress 0000000140C82620
*/

void function SetConVarString(string, string)

/*
* @Breif Sets the value of a convar with an integer
* @Pramas string, int
* @NativeName: Script_SetConVarInt
* @NativeFunctionAddress 0000000140C825C0
*/

void function SetConVarInt(string, int)

/*
* @Breif Sets the value of a convar with a float
* @Pramas string, float
* @NativeName: Script_SetConVarFloat
* @NativeFunctionAddress 0000000140C82550
*/

void function SetConVarFloat(string, float)

/*
* @Breif Sets the value of a convar with a boolean
* @Pramas string, bool
* @NativeName: Script_SetConVarBool
* @NativeFunctionAddress 0000000140C82500
*/

void function SetConVarBool(string, bool)

/*
* @Breif Sets the value of a convar to its internal default value
* @Pramas string
* @NativeName: Script_SetConVarToDefault
* @NativeFunctionAddress 0000000140C824B0
*/

void function SetConVarToDefault(string)

/*
* @Breif Returns if an entity is a magnetic target
* @Pramas entity
* @NativeName: Script_IsMagneticTarget
* @NativeFunctionAddress 0000000140C82440
*/

bool function IsMagneticTarget(entity)

/*
* @Breif Is entity a turret
* @Pramas entity
* @NativeName: Script_IsTurret
* @NativeFunctionAddress 0000000140C82380
*/

bool function IsTurret(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EverythingUnlockedConVarEnabled
* @NativeFunctionAddress 0000000140C82330
*/

bool function EverythingUnlockedConVarEnabled()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetUnixTimestamp
* @NativeFunctionAddress 0000000140C822A0
*/

int function GetUnixTimestamp()

/*
* @Breif Gets the given datatable asset
* @Pramas asset datatablepath
* @NativeName: SHARED_SCRIPT( Script_GetDatatable )
* @NativeFunctionAddress 0000000140841FF0
*/

var function GetDataTable()

/*
* @Breif Finds the column in the datatable with the given name. -1 if none
* @Pramas var datatable, string columnName
* @NativeName: SHARED_SCRIPT( Script_GetDatatableColumnByName )
* @NativeFunctionAddress 0000000140BC29F0
*/

var function GetDataTableColumnByName()

/*
* @Breif Returns the number of rows in the datatable.
* @Pramas var datatable
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowCount )
* @NativeFunctionAddress 0000000140BC2A30
*/

var function GetDatatableRowCount()

/*
* @Breif Gets a bool from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableBool )
* @NativeFunctionAddress 0000000140BC2A90
*/

var function GetDataTableBool()

/*
* @Breif Gets an int from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableInt )
* @NativeFunctionAddress 0000000140BC2AF0
*/

var function GetDataTableInt()

/*
* @Breif Gets a float from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableFloat )
* @NativeFunctionAddress 0000000140BC2B60
*/

var function GetDataTableFloat()

/*
* @Breif Gets a vector from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableVector )
* @NativeFunctionAddress 0000000140BC2BC0
*/

var function GetDataTableVector()

/*
* @Breif Gets a string from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableString )
* @NativeFunctionAddress 0000000140BC2C20
*/

var function GetDataTableString()

/*
* @Breif Gets an asset from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableAsset )
* @NativeFunctionAddress 0000000140BC2C80
*/

var function GetDataTableAsset()

/*
* @Breif Finds and returns the first row of the datatable for which the bool in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, bool value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingBoolValue )
* @NativeFunctionAddress 0000000140BC2CE0
*/

var function GetDataTableRowMatchingBoolValue()

/*
* @Breif Finds and returns the first row of the datatable for which the int in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, int value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingIntValue )
* @NativeFunctionAddress 0000000140BC2DE0
*/

var function GetDataTableRowMatchingIntValue()

/*
* @Breif Finds and returns the first row of the datatable for which the int in the given column is less than or equal to the given value. -1 if none
* @Pramas var datatable, int column, int value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowLessThanOrEqualToIntValue )
* @NativeFunctionAddress 0000000140BC2EF0
*/

var function GetDataTableRowLessThanOrEqualToIntValue()

/*
* @Breif Finds and returns the first row of the datatable for which the int in the given column is greater than or equal to the given value. -1 if none
* @Pramas var datatable, int column, int value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowGreaterThanOrEqualToIntValue )
* @NativeFunctionAddress 0000000140BC3000
*/

var function GetDataTableRowGreaterThanOrEqualToIntValue()

/*
* @Breif Finds and returns the first row of the datatable for which the float in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, float value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingFloatValue )
* @NativeFunctionAddress 0000000140BC3110
*/

var function GetDataTableRowMatchingFloatValue()

/*
* @Breif Finds and returns the first row of the datatable for which the float in the given column is less than or equal to the given value. -1 if none
* @Pramas var datatable, int column, float value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowLessThanOrEqualToFloatValue )
* @NativeFunctionAddress 0000000140BC3230
*/

var function GetDataTableRowLessThanOrEqualToFloatValue()

/*
* @Breif Finds and returns the first row of the datatable for which the float in the given column is greater than or equal to the given value. -1 if none
* @Pramas var datatable, int column, float value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowGreaterThanOrEqualToFloatValue )
* @NativeFunctionAddress 0000000140BC3340
*/

var function GetDataTableRowGreaterThanOrEqualToFloatValue()

/*
* @Breif Finds and returns the first row of the datatable for which the vector in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, vector value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingVectorValue )
* @NativeFunctionAddress 0000000140BC3450
*/

var function GetDataTableRowMatchingVectorValue()

/*
* @Breif Finds and returns the first row of the datatable for which the string in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, string value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingStringValue )
* @NativeFunctionAddress 0000000140BC3570
*/

var function GetDataTableRowMatchingStringValue()

/*
* @Breif Finds and returns the first row of the datatable for which the asset in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, asset value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingAssetValue )
* @NativeFunctionAddress 0000000140BC3640
*/

var function GetDataTableRowMatchingAssetValue()

/*
* @Breif Gets the color ID for the specified colorName.
* @Pramas string colorName
* @NativeName: SHARED_SCRIPT( Script_ColorPalette_GetIDFromString )
* @NativeFunctionAddress 00000001408F3E50
*/

var function ColorPalette_GetIDFromString()

/*
* @Breif 
* @Pramas int versionMajor, int versionMinor, table keyValuePairs
* @NativeName: SHARED_SCRIPT( Script_CreatePINTelemetryHeader )
* @NativeFunctionAddress 0000000140C81940
*/

var function CreatePINTelemetryHeader()

/*
* @Breif 
* @Pramas string eventName, table headerKeyValuePairs, table bodyKeyValuePairs
* @NativeName: SHARED_SCRIPT( Script_AddPINTelemetryEvent )
* @NativeFunctionAddress 0000000140C81980
*/

var function AddPINTelemetryEvent()

/*
* @Breif Gets the platform name the way PIN likes it
* @Pramas 
* @NativeName: Script_GetPINPlatformName
* @NativeFunctionAddress 0000000140C82240
*/

string function GetPINPlatformName()

/*
* @Breif Gets the title ID for PIN
* @Pramas 
* @NativeName: Script_GetPINTitleId
* @NativeFunctionAddress 0000000140C821E0
*/

string function GetPINTitleId()

/*
* @Breif Setup an optic appearance override for this weapon type.
* @Pramas string weaponName, string oaName, int overrideIndex, OpticAppearanceOverride oao
* @NativeName: SHARED_SCRIPT( Script_SetupOpticAppearanceOverride )
* @NativeFunctionAddress 0000000140C819C0
*/

var function SetupOpticAppearanceOverride()

/*
* @Breif 
* @Pramas string itemAlias, int GRX_ITEMFLAVORMODE_
* @NativeName: SHARED_SCRIPT( Script_MTX_RegisterItem )
* @NativeFunctionAddress 00000001408F4260
*/

var function GRX_RegisterItem()

/*
* @Breif Returns true if the full game is installed. You can't start mp or any sp map but sp_training and sp_crashsite if this is false.
* @Pramas 
* @NativeName: IsGameFullyInstalled
* @NativeFunctionAddress 0000000140BC7500
*/

bool function IsGameFullyInstalled()

/*
* @Breif Returns true if the game is partially installed. You can't start sp training this is false.
* @Pramas 
* @NativeName: IsGamePartiallyInstalled
* @NativeFunctionAddress 0000000140BC74A0
*/

bool function IsGamePartiallyInstalled()

/*
* @Breif Returns fraction 0.0 to 1.0 of downloading of full game progress.
* @Pramas 
* @NativeName: GetGameFullyInstalledProgress
* @NativeFunctionAddress 0000000140BC7400
*/

float function GetGameFullyInstalledProgress()

/*
* @Breif Returns whether there are assets loaded from before the game was fully instaled--i.e., we need to restart or reload rpaks.
* @Pramas 
* @NativeName: HasNonFullyInstalledAssetsLoaded
* @NativeFunctionAddress 0000000140847750
*/

bool function HasNonFullyInstalledAssetsLoaded()

/*
* @Breif Check if two OBBs intersect
* @Pramas vector, vector, vector, vector, vector, vector, float
* @NativeName: ScriptAABBIntersectsAABB
* @NativeFunctionAddress 00000001408FA340
*/

bool function AABBIntersectsAABB(vector, vector, vector, vector, vector, vector, float)

/*
* @Breif Check if two OBBs intersect
* @Pramas vector, vector, vector, vector, vector, vector, vector, vector, float
* @NativeName: ScriptOBBIntersectsOBB
* @NativeFunctionAddress 00000001408FA280
*/

bool function OBBIntersectsOBB(vector, vector, vector, vector, vector, vector, vector, vector, float)

/*
* @Breif Do multiple LOS checks, early out if any return true. Runs on multiple threads
* @Pramas starts array, ends array, ent ignoreEntity, TRACE_MASK_* mask, TRACE_COLLISION_GROUP_* group
* @NativeName: SHARED_SCRIPT( ScriptTraceLOSMultiple )
* @NativeFunctionAddress 0000000140C7D800
*/

bool function TraceLOSMultiple(var, var, var, var, int, int)

/*
* @Breif Does a trace and returns struct of result values.
* @Pramas vector startPos, vector endPos, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceLine )
* @NativeFunctionAddress 0000000140C7D840
*/

var function TraceLine()

/*
* @Breif Does a high-detail (per poly on static models) trace and returns struct of result values.
* @Pramas vector startPos, vector endPos, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceLineHighDetail )
* @NativeFunctionAddress 0000000140C7D880
*/

var function TraceLineHighDetail()

/*
* @Breif Does a hull trace and returns table of result values. Default value of up is <0,0,1>
* @Pramas vector startPos, vector endPos, vector hullMins, vector hullMaxs, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0, vector upDir = null, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceHull )
* @NativeFunctionAddress 0000000140C7D8C0
*/

var function TraceHull()

/*
* @Breif Does a hull trace and returns table of result values. Default value of up is <0,0,1>
* @Pramas vector startPos, vector endPos, vector hullMins, vector hullMaxs, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0, vector upDir = null, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceHullEntsOnly )
* @NativeFunctionAddress 0000000140C7D900
*/

var function TraceHullEntsOnly()

/*
* @Breif Does a trace and returns table of result values.
* @Pramas vector startPos, vector endPos, int traceMask = 0
* @NativeName: SHARED_SCRIPT( ScriptTraceLineNoEnts )
* @NativeFunctionAddress 0000000140C7D940
*/

var function TraceLineNoEnts()

/*
* @Breif Does a trace for the ping using the given trace mask and collision group none. Team is for friendly team checks that the ping ignores.
* @Pramas entity player, float traceDist, int traceMask, int collGroup
* @NativeName: SHARED_SCRIPT( ScriptPingTraceForPlayer )
* @NativeFunctionAddress 0000000140C7DA60
*/

var function PingTraceForPlayer()

/*
* @Breif 
* @Pramas vector startPos, vector endPos, entity ignore, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceLineSimple )
* @NativeFunctionAddress 0000000140C7DAA0
*/

var function TraceLineSimple()

/*
* @Breif 
* @Pramas vector startPos, vector endPos, vector hullMin, vector hullMax, entity ignore, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceHullSimple )
* @NativeFunctionAddress 0000000140C7DC70
*/

var function TraceHullSimple()

/*
* @Breif Enable/Disable coordinate check on trace start/end positions
* @Pramas bool
* @NativeName: ScriptDoTraceCoordCheck
* @NativeFunctionAddress 00000001407AEC60
*/

void function DoTraceCoordCheck(bool)

/*
* @Breif Does a trace a returns all ents along a line
* @Pramas vector startPos, vector endPos, int traceMask = 0, int collisionGroup = 0, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceGetEntsAlongLine )
* @NativeFunctionAddress 0000000140C7DCB0
*/

var function TraceGetEntsAlongLine()

/*
* @Breif 
* @Pramas entity, vector, vector
* @NativeName: Script_CheckPassThroughDir
* @NativeFunctionAddress 0000000140C86790
*/

bool function CheckPassThroughDir(entity, vector, vector)

/*
* @Breif Check if point is in front of line defined by point and direction
* @Pramas vector, vector, vector
* @NativeName: IsPointInFrontofLine
* @NativeFunctionAddress 00000001408FA170
*/

bool function IsPointInFrontofLine(vector, vector, vector)

/*
* @Breif Gets the distance in units of point p along path points
* @Pramas array< vector > points, vector pos
* @NativeName: SHARED_SCRIPT( ScriptGetDistanceAlongPath )
* @NativeFunctionAddress 00000001408ED9D0
*/

var function GetDistanceAlongPath()

/*
* @Breif Returns a position that is the specified distance along path points
* @Pramas array< vector > points, float dist
* @NativeName: SHARED_SCRIPT( ScriptGetPointAtDistanceAlongPath )
* @NativeFunctionAddress 00000001408EDA10
*/

var function GetPointAtDistanceAlongPath()

/*
* @Breif Returns the total length between path points
* @Pramas array< vector > points
* @NativeName: SHARED_SCRIPT( ScriptGetPathLength )
* @NativeFunctionAddress 00000001408EDA50
*/

var function GetPathLength()

/*
* @Breif Returns an array of entities that are inside of a cone and visible to the apex
* @Pramas vector coneApex, vector coneAxis, float coneHeight, float coneAngleToAxis, array< entity > ignoredEntities, int traceMask, int flags, entity antilagPlayer, entity weapon = null
* @NativeName: SHARED_SCRIPT( FindVisibleEntitiesInCone_Script )
* @NativeFunctionAddress 0000000140C7DCF0
*/

var function FindVisibleEntitiesInCone()

/*
* @Breif Check for vortexSphere collisions between two points
* @Pramas entity attacker, vector startPos, vector endPos
* @NativeName: SHARED_SCRIPT( ScriptVortexBulletHitCheck )
* @NativeFunctionAddress 0000000140C7DD30
*/

var function VortexBulletHitCheck()

/*
* @Breif Precache an effect and returns the particleSystemIndex associated with it.
* @Pramas asset
* @NativeName: Script_PrecacheParticleSystem
* @NativeFunctionAddress 0000000140BC96E0
*/

int function PrecacheParticleSystem(asset)

/*
* @Breif Returns an associated particleSystemIndex, or 0 if none exists.
* @Pramas asset
* @NativeName: Script_GetParticleSystemIndex
* @NativeFunctionAddress 0000000140BC9620
*/

int function GetParticleSystemIndex(asset)

/*
* @Breif For development/debugging. Given ( particleSystemIndex ), returns the name of the given particle system, or an empty string if none exists.
* @Pramas int
* @NativeName: Script_GetParticleSystemName
* @NativeFunctionAddress 0000000140BC9580
*/

asset function GetParticleSystemName(int)

/*
* @Breif Given ( particleSystemIndex, origin, angles ), creates a new effect in the world at the given position/orientation. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call.
* @Pramas int, vector, vector
* @NativeName: Script_Server_StartParticleEffectInWorld
* @NativeFunctionAddress 0000000140BC9520
*/

void function StartParticleEffectInWorld(int, vector, vector)

/*
* @Breif Given ( particleSystemIndex, origin, angles, controlpoint ), creates a new effect in the world at the given position/orientation, and sets control point 1 to the given location. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call.
* @Pramas int, vector, vector, vector
* @NativeName: Script_Server_StartParticleEffectInWorldWithControlPoint
* @NativeFunctionAddress 0000000140BC94C0
*/

void function StartParticleEffectInWorldWithControlPoint(int, vector, vector, vector)

/*
* @Breif Given ( particleSystemIndex, origin, angles ), creates a new effect in the world at the given position/orientation, and returns an info_particle_system entity. This is more expensive but ensures the effect shows for players joining late and in kill replay. You must destroy the returned entity when you are done with it.
* @Pramas int, vector, vector
* @NativeName: Script_Server_StartParticleEffectInWorld_ReturnEntity
* @NativeFunctionAddress 0000000140BC9450
*/

entity function StartParticleEffectInWorld_ReturnEntity(int, vector, vector)

/*
* @Breif Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex ), creates a new effect owned by the given entity. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call.
* @Pramas entity, int, int, int
* @NativeName: Script_Server_StartParticleEffectOnEntity
* @NativeFunctionAddress 0000000140BC9390
*/

void function StartParticleEffectOnEntity(entity, int, int, int)

/*
* @Breif Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex, FX_PATTACH_ controlPointAttachType, controlPointAttachmentIndex ), creates a new effect owned by the given entity and sets control point 1. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call.
* @Pramas entity, int, int, int, int, int
* @NativeName: Script_Server_StartParticleEffectOnEntityWithControlPoint
* @NativeFunctionAddress 0000000140BC92A0
*/

void function StartParticleEffectOnEntityWithControlPoint(entity, int, int, int, int, int)

/*
* @Breif Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex, position, angles ), creates a new effect owned by the given entity. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call.
* @Pramas entity, int, int, int, vector, vector
* @NativeName: Script_Server_StartParticleEffectOnEntityWithPos
* @NativeFunctionAddress 0000000140BC91C0
*/

void function StartParticleEffectOnEntityWithPos(entity, int, int, int, vector, vector)

/*
* @Breif Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex, position, angles, FX_PATTACH_ controlPointAttachType, controlPointAttachmentIndex ), creates a new effect owned by the given entity and sets control point 1. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call.
* @Pramas entity, int, int, int, vector, vector, int, int
* @NativeName: Script_Server_StartParticleEffectOnEntityWithPosWithControlPoint
* @NativeFunctionAddress 0000000140BC90A0
*/

void function StartParticleEffectOnEntityWithPosWithControlPoint(entity, int, int, int, vector, vector, int, int)

/*
* @Breif Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex ), creates a new effect owned by the given entity, and returns an info_particle_system entity. This is more expensive but ensures the effect shows for players joining late and in kill replay. You must destroy the returned entity when you are done with it.
* @Pramas entity, int, int, int
* @NativeName: Script_Server_StartParticleEffectOnEntity_ReturnEntity
* @NativeFunctionAddress 0000000140BC8FE0
*/

entity function StartParticleEffectOnEntity_ReturnEntity(entity, int, int, int)

/*
* @Breif Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex, position, angles ), creates a new effect owned by the given entity, and returns an info_particle_system entity. This is more expensive but ensures the effect shows for players joining late and in kill replay. You must destroy the returned entity when you are done with it.
* @Pramas entity, int, int, int, vector, vector
* @NativeName: Script_Server_StartParticleEffectOnEntityWithPos_ReturnEntity
* @NativeFunctionAddress 0000000140BC8EF0
*/

entity function StartParticleEffectOnEntityWithPos_ReturnEntity(entity, int, int, int, vector, vector)

/*
* @Breif Given ( effect entity ), kills an effect, playing the endcap. (Deletes the entity.)
* @Pramas entity
* @NativeName: Script_Server_EffectStop
* @NativeFunctionAddress 0000000140BC8E50
*/

void function EffectStop(entity)

/*
* @Breif Given ( effect entity ), force an effect to hibernate.
* @Pramas entity
* @NativeName: Script_Server_EffectSleep
* @NativeFunctionAddress 0000000140BC8DB0
*/

void function EffectSleep(entity)

/*
* @Breif Given ( effect entity ), resume an effect that was previously put to sleep.
* @Pramas entity
* @NativeName: Script_Server_EffectWake
* @NativeFunctionAddress 0000000140BC8D10
*/

void function EffectWake(entity)

/*
* @Breif Given ( effect, controlPointIndex, vector ), sets the xyz of an effect's control point.
* @Pramas entity, int, vector
* @NativeName: Script_Server_EffectSetControlPointVector
* @NativeFunctionAddress 0000000140BC8C90
*/

void function EffectSetControlPointVector(entity, int, vector)

/*
* @Breif Given ( effect, controlPointIndex, angles ), sets the orientation of an effect's control point.
* @Pramas entity, int, vector
* @NativeName: Script_Server_EffectSetControlPointAngles
* @NativeFunctionAddress 0000000140BC8C10
*/

void function EffectSetControlPointAngles(entity, int, vector)

/*
* @Breif Given ( effect, controlPointIndex, entity ), sets the entity assigned to an effect's control point.
* @Pramas entity, int, entity
* @NativeName: Script_Server_EffectSetControlPointEntity
* @NativeFunctionAddress 0000000140BC8B70
*/

void function EffectSetControlPointEntity(entity, int, entity)

/*
* @Breif Given ( effect, controlPointIndex, colorId ), sets the colorId that defines the xyz of an effect's control point. Overrides any vector value set manually.
* @Pramas entity, int, int
* @NativeName: Script_Server_EffectSetControlPointColorById
* @NativeFunctionAddress 0000000140BC8AE0
*/

void function EffectSetControlPointColorById(entity, int, int)

/*
* @Breif Given ( effect, controlPointIndex, otherEntity, FX_PATTACH_ attachType, attachmentIndex ), adds automatic updating of an effect's control point. Effect must have been created on an entity.
* @Pramas entity, int, entity, int, int
* @NativeName: Script_Server_EffectAddTrackingForControlPoint
* @NativeFunctionAddress 0000000140BC89F0
*/

void function EffectAddTrackingForControlPoint(entity, int, entity, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptMover_UseNewTrain
* @NativeFunctionAddress 00000001407AD660
*/

bool function ScriptMover_UseNewTrain()

/*
* @Breif Mark the entity as able to be leeched
* @Pramas entity
* @NativeName: Leech_IsLeechable_Script
* @NativeFunctionAddress 0000000140FE34B0
*/

bool function Leech_IsLeechable(entity)

/*
* @Breif Mark the entity as able to be leeched
* @Pramas entity
* @NativeName: Leech_SetLeechable_Script
* @NativeFunctionAddress 0000000140FE3450
*/

void function Leech_SetLeechable(entity)

/*
* @Breif Clear the flag that makes this entity leechable
* @Pramas entity
* @NativeName: Leech_ClearLeechable_Script
* @NativeFunctionAddress 0000000140FE33F0
*/

void function Leech_ClearLeechable(entity)

/*
* @Breif Do a lunge cone trace returning the target closest to center of screen
* @Pramas entity player, entity meleeWeapon, int callback
* @NativeName: PlayerMelee_LungeConeTrace
* @NativeFunctionAddress 0000000140FE3340
*/

entity function PlayerMelee_LungeConeTrace(entity player, entity meleeWeapon, int callback)

/*
* @Breif Returns an array of entities that are inside a cone and visible to the player
* @Pramas entity playerTitan, entity meleeWeapon
* @NativeName: SHARED_SCRIPT( PlayerMelee_FindVisibleEntitiesInCone )
* @NativeFunctionAddress 0000000140FDFBC0
*/

var function PlayerMelee_FindVisibleEntitiesInCone()

/*
* @Breif Do a trace for potential melee targets in front of player. Returns a table with keys 'entity' and 'position', which is the hit entity and position
* @Pramas entity player, float range, bool functionref( entity attacker, entity target ) isValidTargetFunc
* @NativeName: SHARED_SCRIPT( Script_PlayerMelee_AttackTrace )
* @NativeFunctionAddress 0000000140FDFC00
*/

var function PlayerMelee_AttackTrace()

/*
* @Breif Casts a slightly smaller version of the player's bounding box to see if they can reach target
* @Pramas entity, entity, float
* @NativeName: Script_PlayerMelee_IsExecutionReachable
* @NativeFunctionAddress 0000000140FE3290
*/

bool function PlayerMelee_IsExecutionReachable(entity, entity, float)

/*
* @Breif Start lag compensation for a specific target only
* @Pramas entity, entity
* @NativeName: PlayerMelee_StartLagCompensateTarget
* @NativeFunctionAddress 0000000140FE3200
*/

void function PlayerMelee_StartLagCompensateTarget(entity, entity)

/*
* @Breif End lag compensatation
* @Pramas entity
* @NativeName: PlayerMelee_FinishLagCompensateTarget
* @NativeFunctionAddress 0000000140FE3170
*/

void function PlayerMelee_FinishLagCompensateTarget(entity)

/*
* @Breif Returns maximum bursts to fire on a single target
* @Pramas entity
* @NativeName: SmartAmmo_GetMaxTargetedBurst_Script
* @NativeFunctionAddress 0000000140FE1FE0
*/

int function SmartAmmo_GetMaxTargetedBurst(entity)

/*
* @Breif Returns time it will take to lock onto given target
* @Pramas entity, entity
* @NativeName: SmartAmmo_GetTargetingTime_Script
* @NativeFunctionAddress 0000000140FE1F00
*/

float function SmartAmmo_GetTargetingTime(entity, entity)

/*
* @Breif Returns maximum value the lock "fraction" can have
* @Pramas entity, entity
* @NativeName: SmartAmmo_GetTargetMaxLocks_Script
* @NativeFunctionAddress 0000000140FE1E20
*/

float function SmartAmmo_GetTargetMaxLocks(entity, entity)

/*
* @Breif Returns whether the given weapon is tracking the given entity
* @Pramas entity, entity
* @NativeName: SmartAmmo_IsTrackingEntity_Script
* @NativeFunctionAddress 0000000140FE1D90
*/

bool function SmartAmmo_IsTrackingEntity(entity, entity)

/*
* @Breif Returns true if this is a valid smart ammo target
* @Pramas entity, entity
* @NativeName: SmartAmmo_IsValidTarget_Script
* @NativeFunctionAddress 0000000140FE1D00
*/

bool function SmartAmmo_IsValidTarget(entity, entity)

/*
* @Breif Adds a status effect that will stop automatically after a given time. Applies the effect immediately and returns a handle to it (or SE_INVALID_HANDLE if code could not allocate a new status effect). This can cause mispredictions on players if the effect is only applied on the server, but is safe to use if the status doesn't affect player movement or weapon usage, or if it's called in predicted client script too (like a weapon attack callback).
* @Pramas entity ent, int eStatusEffect, float severity01, float duration, float easeOut
* @NativeName: Script_StatusEffect_AddTimed
* @NativeFunctionAddress 0000000140C87880
*/

int function StatusEffect_AddTimed(entity ent, int eStatusEffect, float severity01, float duration, float easeOut)

/*
* @Breif Adds a status effect that will stop automatically after a given time. The effect is briefly delayed so that the client can predict it properly, so a handle is not returned.
* @Pramas entity ent, int eStatusEffect, float severity01, float duration, float easeOut
* @NativeName: Script_StatusEffect_AddTimed_PredictionFriendly
* @NativeFunctionAddress 0000000140C877B0
*/

void function StatusEffect_AddTimed_PredictionFriendly(entity ent, int eStatusEffect, float severity01, float duration, float easeOut)

/*
* @Breif Adds a status effect. Returns SE_INVALID_HANDLE if code could not allocate a new status effect.
* @Pramas entity ent, int eStatusEffect, float severity01
* @NativeName: Script_StatusEffect_AddEndless
* @NativeFunctionAddress 0000000140C876D0
*/

int function StatusEffect_AddEndless(entity ent, int eStatusEffect, float severity01)

/*
* @Breif Stops a status effect given its handle (return value of StatusEffect_AddTimed or StatusEffect_AddEndless).
* @Pramas entity ent, int effectHandle
* @NativeName: Script_StatusEffect_Stop
* @NativeFunctionAddress 0000000140C87620
*/

bool function StatusEffect_Stop(entity ent, int effectHandle)

/*
* @Breif Stops all status effects of a given type. Returns the number that were stopped.
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_StopAllOfType
* @NativeFunctionAddress 0000000140C87530
*/

int function StatusEffect_StopAllOfType(entity ent, int eStatusEffect)

/*
* @Breif Stops all status effects regardless of type
* @Pramas entity ent
* @NativeName: Script_StatusEffect_StopAll
* @NativeFunctionAddress 0000000140C874B0
*/

void function StatusEffect_StopAll(entity ent)

/*
* @Breif Gets the max severity of a given status effect type
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_GetSeverity
* @NativeFunctionAddress 0000000140C873E0
*/

float function StatusEffect_GetSeverity(entity ent, int eStatusEffect)

/*
* @Breif Gets the longest time remaining of a given status effect type
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_GetTimeRemaining
* @NativeFunctionAddress 0000000140C87310
*/

float function StatusEffect_GetTimeRemaining(entity ent, int eStatusEffect)

/*
* @Breif 
* @Pramas entity ent
* @NativeName: Script_StatusEffect_GetAllSeverity
* @NativeFunctionAddress 0000000140C87240
*/

array< float > function StatusEffect_GetAllSeverity(entity ent)

/*
* @Breif Overrides the current duration of the given effect handle
* @Pramas entity ent, int effectHandle, float newDuration
* @NativeName: Script_StatusEffect_SetDuration
* @NativeFunctionAddress 0000000140C871A0
*/

bool function StatusEffect_SetDuration(entity ent, int effectHandle, float newDuration)

/*
* @Breif Pauses or unpauses a status effect given its handle (return value of StatusEffect_AddTimed or StatusEffect_AddEndless).
* @Pramas entity ent, int effectHandle, bool pauseState
* @NativeName: Script_StatusEffect_SetPauseState
* @NativeFunctionAddress 0000000140C870E0
*/

bool function StatusEffect_SetPauseState(entity ent, int effectHandle, bool pauseState)

/*
* @Breif Pauses or unpauses all status effects of a given type. Returns the number that were stopped.
* @Pramas entity ent, int eStatusEffect, bool pauseState
* @NativeName: Script_StatusEffect_SetPauseStateForAllOfType
* @NativeFunctionAddress 0000000140C86FE0
*/

int function StatusEffect_SetPauseStateForAllOfType(entity ent, int eStatusEffect, bool pauseState)

/*
* @Breif Given a handle to a status effect, checks if it is paused
* @Pramas entity ent, int effectHandle
* @NativeName: Script_StatusEffect_IsPaused
* @NativeFunctionAddress 0000000140C86DB0
*/

bool function StatusEffect_IsPaused(entity ent, int effectHandle)

/*
* @Breif Gets the max severity of a given status effect type, ignoring paused status effects
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_GetSeverity_IgnorePaused
* @NativeFunctionAddress 0000000140C86CE0
*/

float function StatusEffect_GetSeverity_IgnorePaused(entity ent, int eStatusEffect)

/*
* @Breif Gets the longest time remaining of a given status effect type, ignoring paused status effects
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_GetTimeRemaining_IgnorePaused
* @NativeFunctionAddress 0000000140C86C10
*/

float function StatusEffect_GetTimeRemaining_IgnorePaused(entity ent, int eStatusEffect)

/*
* @Breif Registers a named networked variable.
* @Pramas string name, int SNDC_category, int SNVT_type, var defaultValue = 0, float rangemin = 0, float rangemax = 0
* @NativeName: Script_RegisterNetworkedVariable
* @NativeFunctionAddress 0000000140C7C9B0
*/

var function RegisterNetworkedVariable()

/*
* @Breif Gets the internal index used to reference a scripted network variable. For use with FX_PATTACH_SCRIPT_NETWORK_VAR.
* @Pramas string name
* @NativeName: Script_GetNetworkedVariableIndex
* @NativeFunctionAddress 0000000140C7C9F0
*/

var function GetNetworkedVariableIndex()

/*
* @Breif Sets a global bool network variable (see RegisterNetworkedVariable)
* @Pramas string, bool
* @NativeName: Script_SetGlobalNetBool
* @NativeFunctionAddress 0000000140C8A1A0
*/

void function SetGlobalNetBool(string, bool)

/*
* @Breif Sets a global int network variable (see RegisterNetworkedVariable)
* @Pramas string, int
* @NativeName: Script_SetGlobalNetInt
* @NativeFunctionAddress 0000000140C8A100
*/

void function SetGlobalNetInt(string, int)

/*
* @Breif Sets a global float network variable (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetGlobalNetFloat
* @NativeFunctionAddress 0000000140C8A060
*/

void function SetGlobalNetFloat(string, float)

/*
* @Breif Sets a global float network variable gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)
* @Pramas string, float, float
* @NativeName: Script_SetGlobalNetFloatOverTime
* @NativeFunctionAddress 0000000140C89FA0
*/

void function SetGlobalNetFloatOverTime(string, float, float)

/*
* @Breif Sets a global time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetGlobalNetTime
* @NativeFunctionAddress 0000000140C89F30
*/

void function SetGlobalNetTime(string, float)

/*
* @Breif Sets a global entity network variable (see RegisterNetworkedVariable)
* @Pramas string, entity
* @NativeName: Script_SetGlobalNetEnt
* @NativeFunctionAddress 0000000140C89E80
*/

void function SetGlobalNetEnt(string, entity)

/*
* @Breif Gets a global bool network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetBool
* @NativeFunctionAddress 0000000140C89E20
*/

bool function GetGlobalNetBool(string)

/*
* @Breif Gets an global int network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetInt
* @NativeFunctionAddress 0000000140C89D40
*/

int function GetGlobalNetInt(string)

/*
* @Breif Gets a global float network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetFloat
* @NativeFunctionAddress 0000000140C89C60
*/

float function GetGlobalNetFloat(string)

/*
* @Breif Gets a global time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetTime
* @NativeFunctionAddress 0000000140C89BC0
*/

float function GetGlobalNetTime(string)

/*
* @Breif Gets a global entity network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetEnt
* @NativeFunctionAddress 0000000140C89B60
*/

entity function GetGlobalNetEnt(string)

/*
* @Breif Mark given entity as a target for grapple auto-aim.
* @Pramas entity target
* @NativeName: GrappleAutoAim_AddTarget
* @NativeFunctionAddress 0000000140FE36F0
*/

void function GrappleAutoAim_AddTarget(entity target)

/*
* @Breif Unmark given entity as a target for grapple auto-aim.
* @Pramas entity target
* @NativeName: GrappleAutoAim_RemoveTarget
* @NativeFunctionAddress 0000000140FE3690
*/

void function GrappleAutoAim_RemoveTarget(entity target)

/*
* @Breif Returns true if the given entity is marked as a grapple auto-aim target.
* @Pramas entity target
* @NativeName: GrappleAutoAim_IsTarget
* @NativeFunctionAddress 0000000140FE3600
*/

bool function GrappleAutoAim_IsTarget(entity target)

/*
* @Breif Searches for the closest, grapple auto-aim target. Returns null if not found.
* @Pramas entity player
* @NativeName: GrappleAutoAim_FindTargetScript
* @NativeFunctionAddress 0000000140FE3550
*/

entity function GrappleAutoAim_FindTarget(entity player)

/*
* @Breif Returns true if currently in prediction mode
* @Pramas 
* @NativeName: InPrediction
* @NativeFunctionAddress 00000001407AD660
*/

bool function InPrediction()

/*
* @Breif Returns true if in prediction mode and this is the first time the command is being predicted
* @Pramas 
* @NativeName: IsFirstTimePredicted
* @NativeFunctionAddress 00000001407AD660
*/

bool function IsFirstTimePredicted()

/*
* @Breif Get the name of the map.
* @Pramas 
* @NativeName: Script_GetMapName_ScriptCmd
* @NativeFunctionAddress 0000000140C86670
*/

string function GetMapName()

/*
* @Breif Get the current server time
* @Pramas 
* @NativeName: Time
* @NativeFunctionAddress 0000000140C865D0
*/

float function Time()

/*
* @Breif Get the time spent on the last frame
* @Pramas 
* @NativeName: FrameTime
* @NativeFunctionAddress 0000000140C86530
*/

float function FrameTime()

/*
* @Breif Get the time between each tick
* @Pramas 
* @NativeName: IntervalPerTick
* @NativeFunctionAddress 0000000140C86490
*/

float function IntervalPerTick()

/*
* @Breif Precache a weapon.
* @Pramas string weaponFile
* @NativeName: PrecacheWeapon
* @NativeFunctionAddress 0000000140C86400
*/

void function PrecacheWeapon(string weaponFile)

/*
* @Breif Precache a model.
* @Pramas asset modelFile
* @NativeName: ScriptPrecacheModel
* @NativeFunctionAddress 0000000140C86370
*/

void function PrecacheModel(asset modelFile)

/*
* @Breif Precache a material.
* @Pramas asset
* @NativeName: ScriptPrecacheMaterial
* @NativeFunctionAddress 0000000140C862F0
*/

void function PrecacheMaterial(asset)

/*
* @Breif 
* @Pramas string
* @NativeName: ScriptGetModelIndex
* @NativeFunctionAddress 0000000140C86230
*/

int function GetModelIndex(string)

/*
* @Breif True if script should send stats to devnet.
* @Pramas 
* @NativeName: ScriptShouldSendDevStats
* @NativeFunctionAddress 00000001408F9B10
*/

bool function ShouldSendDevStats()

/*
* @Breif Precache an impact effect table.
* @Pramas string tableName
* @NativeName: ScriptPrecacheImpactEffectTable
* @NativeFunctionAddress 0000000140C86150
*/

int function PrecacheImpactEffectTable(string tableName)

/*
* @Breif 
* @Pramas float posX, float posY, string text
* @NativeName: Script_DebugScreenText
* @NativeFunctionAddress 0000000140C860B0
*/

void function DebugScreenText(float posX, float posY, string text)

/*
* @Breif 
* @Pramas float posX, float posY, string text, vector rgb
* @NativeName: Script_DebugScreenTextWithColor
* @NativeFunctionAddress 0000000140C86020
*/

void function DebugScreenTextWithColor(float posX, float posY, string text, vector rgb)

/*
* @Breif Draw a debug overlay box. origin, mins, maxs, r, g, b, a, duration
* @Pramas vector, vector, vector, int, int, int, int, float
* @NativeName: ScriptDebugDrawBox
* @NativeFunctionAddress 00000001408F96E0
*/

void function DebugDrawBox(vector, vector, vector, int, int, int, int, float)

/*
* @Breif Draw a debug overlay line. start, end, r, g, b, drawThroughWorld, duration
* @Pramas vector, vector, int, int, int, bool, float
* @NativeName: ScriptDebugDrawLine
* @NativeFunctionAddress 00000001408F9610
*/

void function DebugDrawLine(vector, vector, int, int, int, bool, float)

/*
* @Breif Draw a debug overlay line with alpha. start, end, r, g, b, drawThroughWorld, duration
* @Pramas vector, vector, int, int, int, int, bool, float
* @NativeName: NDebugOverlay::AddLineOverlayAlpha
* @NativeFunctionAddress 00000001408F9510
*/

void function DebugDrawLineAlpha(vector, vector, int, int, int, int, bool, float)

/*
* @Breif Draw debug text. origin, text, depthTest, duration.
* @Pramas vector, string, bool, float
* @NativeName: NDebugOverlay::Text
* @NativeFunctionAddress 00000001408F94A0
*/

void function DebugDrawText(vector, string, bool, float)

/*
* @Breif Returns true if the given hit is a critical hit
* @Pramas entity, entity, int, int, int
* @NativeName: Script_IsCriticalHit
* @NativeFunctionAddress 0000000140C85F20
*/

bool function IsCriticalHit(entity, entity, int, int, int)

/*
* @Breif Returns true if the given hitbox is a Rodeo hit box.
* @Pramas entity, int
* @NativeName: Script_IsRodeoHitBox
* @NativeFunctionAddress 0000000140C85E10
*/

bool function IsRodeoHitBox(entity, int)

/*
* @Breif Returns true if the given entity is the size of a human.
* @Pramas entity
* @NativeName: Script_IsHumanSized
* @NativeFunctionAddress 0000000140C85DA0
*/

bool function IsHumanSized(entity)

/*
* @Breif 
* @Pramas table<string, string> kvPairs, string keyName
* @NativeName: SHARED_SCRIPT( Script_GetKeyValueAsAsset )
* @NativeFunctionAddress 00000001408EE670
*/

var function GetKeyValueAsAsset()

/*
* @Breif 
* @Pramas 
* @NativeName: DeathField_IsActive
* @NativeFunctionAddress 0000000140C85D40
*/

bool function DeathField_IsActive()

/*
* @Breif 
* @Pramas float time
* @NativeName: DeathField_GetRadiusForTime
* @NativeFunctionAddress 0000000140C85C90
*/

float function DeathField_GetRadiusForTime(float time)

/*
* @Breif 
* @Pramas 
* @NativeName: DeathField_GetRadiusForNow
* @NativeFunctionAddress 0000000140C85BF0
*/

float function DeathField_GetRadiusForNow()

/*
* @Breif 
* @Pramas vector point
* @NativeName: DeathField_PointDistanceFromFrontier
* @NativeFunctionAddress 0000000140C85B00
*/

float function DeathField_PointDistanceFromFrontier(vector point)

/*
* @Breif Retrieves an entity (or null) based off an encoded ehandle.
* @Pramas int eHandle
* @NativeName: Script_GetEntityFromEncodedEHandle
* @NativeFunctionAddress 0000000140C85A50
*/

entity function GetEntityFromEncodedEHandle(int eHandle)

/*
* @Breif 
* @Pramas entity ziplineProjectile, entity hitEntity, vector hitNormal, vector beginStationOrigin, vector beginStationAngles
* @NativeName: SHARED_SCRIPT( Zipline_FindZiplineStationSpotsForProjectile_Script )
* @NativeFunctionAddress 0000000140C7DD70
*/

var function Zipline_FindZiplineStationSpotsForProjectile()

/*
* @Breif Returns true if you are allowed to attach ziplines to the given entity
* @Pramas entity
* @NativeName: Script_IsAllowedToAttachZiplines
* @NativeFunctionAddress 0000000140C859E0
*/

bool function IsAllowedToAttachZiplines(entity)

/*
* @Breif 
* @Pramas entity, vector, float, float
* @NativeName: Skydive_CalculatePitch_Script
* @NativeFunctionAddress 0000000140C8CEC0
*/

float function Skydive_CalculatePitch(entity, vector, float, float)

/*
* @Breif 
* @Pramas entity, float, float, float, float
* @NativeName: Skydive_CalculateYaw_Script
* @NativeFunctionAddress 0000000140C8CDA0
*/

float function Skydive_CalculateYaw(entity, float, float, float, float)

/*
* @Breif 
* @Pramas entity, float, float, float, float
* @NativeName: Skydive_CalculateSpeed_Script
* @NativeFunctionAddress 0000000140C8CC80
*/

float function Skydive_CalculateSpeed(entity, float, float, float, float)

/*
* @Breif 
* @Pramas entity, float, float, float
* @NativeName: Skydive_CalculateStrafeAngle_Script
* @NativeFunctionAddress 0000000140C8CB80
*/

float function Skydive_CalculateStrafeAngle(entity, float, float, float)

/*
* @Breif 
* @Pramas entity, float, float, float, float
* @NativeName: Skydive_UpdatePoseParameterTargets_Script
* @NativeFunctionAddress 0000000140C8CAB0
*/

void function Skydive_UpdatePoseParameterTargets(entity, float, float, float, float)

/*
* @Breif 
* @Pramas entity, float
* @NativeName: Skydive_UpdatePoseParameters_Script
* @NativeFunctionAddress 0000000140C8CA30
*/

void function Skydive_UpdatePoseParameters(entity, float)

/*
* @Breif 
* @Pramas entity, float, float, float, float, float, float, float, float
* @NativeName: Skydive_CalculateVelocity_Script
* @NativeFunctionAddress 0000000140C8C830
*/

vector function Skydive_CalculateVelocity(entity, float, float, float, float, float, float, float, float)

/*
* @Breif Tries to put an entity into a position not in solid, given a desired 'end' position. Returns true if successful. If you don't have a safeStartingLocationForEntity, just set it the same as the end position. PutEntityInSafeSpot( entity, referenceEnt, movingGroundEnt, safeStartingLocationForEntity, positionAtEndOfAnimationForEntity )
* @Pramas entity, entity, entity, vector, vector
* @NativeName: PutEntityInSafeSpot
* @NativeFunctionAddress 0000000140C85910
*/

bool function PutEntityInSafeSpot(entity, entity, entity, vector, vector)

/*
* @Breif Trys to put entity in a safe spot while overriding the hull size to test with
* @Pramas entity testEnt, entity referenceEnt, entity movingGroundEnt, vector safeStartingLocationForEntity, vector positionAtEndOfAnimationForEntity, vector mins, vector maxs
* @NativeName: PutEntityInSafeSpot_Hullsize
* @NativeFunctionAddress 0000000140C85820
*/

bool function PutEntityInSafeSpot_Hullsize(entity testEnt, entity referenceEnt, entity movingGroundEnt, vector safeStartingLocationForEntity, vector positionAtEndOfAnimationForEntity, vector mins, vector maxs)

/*
* @Breif Tries to put an entity into a position not in solid, given a desired 'end' position. Returns true if successful. If you don't have a safeStartingLocationForEntity, just set it the same as the end position. PutEntityInSafeSpot( entity, referenceEnt, movingGroundEnt, safeStartingLocationForEntity, positionAtEndOfAnimationForEntity )
* @Pramas entity, entity, entity, vector, vector
* @NativeName: PutPlayerInSafeSpot_Script
* @NativeFunctionAddress 0000000140C85750
*/

bool function PutPlayerInSafeSpot(entity, entity, entity, vector, vector)

/*
* @Breif Tries to put a player vehicle in a safe position
* @Pramas entity vehicle, entity referenceEnt, entity movingGroundEnt, vector safeStartingLocationForEntity, vector positionAtEndOfAnimationForEntity
* @NativeName: PutPlayerVehicleInSafeSpot_Script
* @NativeFunctionAddress 0000000140C85680
*/

bool function PutPlayerVehicleInSafeSpot(entity vehicle, entity referenceEnt, entity movingGroundEnt, vector safeStartingLocationForEntity, vector positionAtEndOfAnimationForEntity)

/*
* @Breif Tells the specified entity to spawn. Should only be called once per entity.
* @Pramas entity
* @NativeName: Script_DoDispatchSpawn
* @NativeFunctionAddress 0000000140C7DDB0
*/

bool function DispatchSpawn(var, entity)

/*
* @Breif #EntFire:Queues an entity i/o event
* @Pramas string, string, string, float, entity, entity
* @NativeName: DoEntFire
* @NativeFunctionAddress 0000000140C855A0
*/

void function DoEntFire(string, string, string, float, entity, entity)

/*
* @Breif @
* @Pramas string, string, string, entity, entity
* @NativeName: DoEntFireNow
* @NativeFunctionAddress 0000000140C854E0
*/

void function EntFireNow(string, string, string, entity, entity)

/*
* @Breif Queues an entity i/o event. First parameter is an entity instance.
* @Pramas entity, string, string, float, entity, entity
* @NativeName: DoEntFireByInstanceHandle
* @NativeFunctionAddress 0000000140C853F0
*/

void function EntFireByHandle(entity, string, string, float, entity, entity)

/*
* @Breif @
* @Pramas entity, string, string, entity, entity
* @NativeName: DoEntFireByInstanceHandleNow
* @NativeFunctionAddress 0000000140C852F0
*/

void function EntFireByHandleNow(entity, string, string, entity, entity)

/*
* @Breif Create a physics prop
* @Pramas string, vector, string, int
* @NativeName: CreateProp
* @NativeFunctionAddress 0000000140C85270
*/

entity function CreateProp(string, vector, string, int)

/*
* @Breif Records achievement event or progress
* @Pramas string, int
* @NativeName: DoRecordAchievementEvent
* @NativeFunctionAddress 0000000140C85210
*/

void function RecordAchievementEvent(string, int)

/*
* @Breif Create a sound event that AI can respond to.
* @Pramas int soundFlags, int contextFlags, vector pos, float radius, float duration
* @NativeName: EmitAISound
* @NativeFunctionAddress 0000000140C85150
*/

void function EmitAISound(int soundFlags, int contextFlags, vector pos, float radius, float duration)

/*
* @Breif Create a sound event that AI can respond to, specifying the owner of the sound.
* @Pramas entity ownerEnt, int soundFlags, int contextFlags, vector pos, float radius, float duration
* @NativeName: EmitAISoundWithOwner
* @NativeFunctionAddress 0000000140C85060
*/

void function EmitAISoundWithOwner(entity ownerEnt, int soundFlags, int contextFlags, vector pos, float radius, float duration)

/*
* @Breif Create a sound event that AI can respond to, specifying who the sound should target.
* @Pramas entity targetEnt, int soundFlags, int contextFlags, vector pos, float radius, float duration
* @NativeName: EmitAISoundToTarget
* @NativeFunctionAddress 0000000140C84F70
*/

void function EmitAISoundToTarget(entity targetEnt, int soundFlags, int contextFlags, vector pos, float radius, float duration)

/*
* @Breif Create a sound event that AI can respond to, specifying who the sound should target, and the owner of the sound.
* @Pramas entity ownerEnt, entity targetEnt, int soundFlags, int contextFlags, vector pos, float radius, float duration
* @NativeName: EmitAISoundWithOwnerToTarget
* @NativeFunctionAddress 0000000140C84E50
*/

void function EmitAISoundWithOwnerToTarget(entity ownerEnt, entity targetEnt, int soundFlags, int contextFlags, vector pos, float radius, float duration)

/*
* @Breif @
* @Pramas 
* @NativeName: ServiceEventQueue
* @NativeFunctionAddress 0000000140C84D50
*/

void function ServiceEventQueue()

/*
* @Breif True if the 'fast_iteration' convar is enabled.
* @Pramas 
* @NativeName: ScriptIsFastIterationEnabled
* @NativeFunctionAddress 0000000140C84D00
*/

bool function IsFastIterationEnabled()

/*
* @Breif Set the level of an audio ducking channel
* @Pramas string, string, float
* @NativeName: SetDucking
* @NativeFunctionAddress 0000000140C84C90
*/

void function SetDucking(string, string, float)

/*
* @Breif Get array of all players, even ones who are connecting
* @Pramas 
* @NativeName: ScriptGetConnectingAndConnectedPlayerArray
* @NativeFunctionAddress 0000000140C7E890
*/

var function GetConnectingAndConnectedPlayerArray()

/*
* @Breif Gets a count of the number of clients who are connecting or reserved but do not yet have an entity.
* @Pramas 
* @NativeName: GetPendingClientsCount
* @NativeFunctionAddress 0000000140C84BF0
*/

int function GetPendingClientsCount()

/*
* @Breif Print a message in center of screen for all clients
* @Pramas string
* @NativeName: Script_CenterPrintAll
* @NativeFunctionAddress 0000000140C84BA0
*/

void function CenterPrintAll(string)

/*
* @Breif Get the index of the given impact effect table.
* @Pramas string
* @NativeName: ScriptGetImpactEffectTable
* @NativeFunctionAddress 0000000140C84AE0
*/

int function GetImpactEffectTable(string)

/*
* @Breif Calculate weapon damage for attacker and victim at given distance
* @Pramas entity, entity, entity, float, int
* @NativeName: ScriptCalcWeaponDamage
* @NativeFunctionAddress 0000000140C849A0
*/

float function CalcWeaponDamage(entity, entity, entity, float, int)

/*
* @Breif 
* @Pramas int loadoutIndex
* @NativeName: Script_SetBTLoadoutUnlocked
* @NativeFunctionAddress 0000000140C84900
*/

void function SetBTLoadoutUnlocked(int loadoutIndex)

/*
* @Breif 
* @Pramas int unlockBits
* @NativeName: Script_SetBTLoadoutsUnlockedBitfield
* @NativeFunctionAddress 0000000140C84870
*/

void function SetBTLoadoutsUnlockedBitfield(int unlockBits)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetBTLoadoutsUnlockedBitfield
* @NativeFunctionAddress 0000000140C847D0
*/

int function GetBTLoadoutsUnlockedBitfield()

/*
* @Breif Rebinds script callbacks
* @Pramas 
* @NativeName: ReloadServerScriptCallbacks
* @NativeFunctionAddress 0000000140C84750
*/

void function ReloadScriptCallbacks()

/*
* @Breif 
* @Pramas int loadoutIndex
* @NativeName: Script_IsBTLoadoutUnlocked
* @NativeFunctionAddress 0000000140C846D0
*/

bool function IsBTLoadoutUnlocked(int loadoutIndex)

/*
* @Breif Returns true if replays are enabled in code.
* @Pramas 
* @NativeName: Script_Replay_IsEnabled
* @NativeFunctionAddress 0000000140C84670
*/

bool function Replay_IsEnabled()

/*
* @Breif Get health/maxhealth
* @Pramas entity
* @NativeName: GetHealthFrac
* @NativeFunctionAddress 0000000140C84580
*/

float function GetHealthFrac(entity)

/*
* @Breif Get array of all players
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArray )
* @NativeFunctionAddress 0000000140C7EB10
*/

var function GetPlayerArray()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfTeam )
* @NativeFunctionAddress 0000000140C7EBF0
*/

var function GetPlayerArrayOfTeam()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfEnemies )
* @NativeFunctionAddress 0000000140C7ED20
*/

var function GetPlayerArrayOfEnemies()

/*
* @Breif 
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArray_Alive )
* @NativeFunctionAddress 0000000140C7EE60
*/

var function GetPlayerArray_Alive()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfTeam_Alive )
* @NativeFunctionAddress 0000000140C7EF60
*/

var function GetPlayerArrayOfTeam_Alive()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfEnemies_Alive )
* @NativeFunctionAddress 0000000140C7F0A0
*/

var function GetPlayerArrayOfEnemies_Alive()

/*
* @Breif 
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArray_Pilots )
* @NativeFunctionAddress 0000000140C7F1F0
*/

var function GetPlayerArray_Pilots()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfTeam_Pilots )
* @NativeFunctionAddress 0000000140C7F310
*/

var function GetPlayerArrayOfTeam_Pilots()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfEnemies_Pilots )
* @NativeFunctionAddress 0000000140C7F470
*/

var function GetPlayerArrayOfEnemies_Pilots()

/*
* @Breif 
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArray_AlivePilots )
* @NativeFunctionAddress 0000000140C7F5D0
*/

var function GetPlayerArray_AlivePilots()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfTeam_AlivePilots )
* @NativeFunctionAddress 0000000140C7F6F0
*/

var function GetPlayerArrayOfTeam_AlivePilots()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfEnemies_AlivePilots )
* @NativeFunctionAddress 0000000140C7F860
*/

var function GetPlayerArrayOfEnemies_AlivePilots()

/*
* @Breif 
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerDecoyArray )
* @NativeFunctionAddress 0000000140C7F9D0
*/

var function GetPlayerDecoyArray()

/*
* @Breif 
* @Pramas vector pos, float distToCheck, bool traceToPos, bool sortByDistToPos
* @NativeName: SHARED_SCRIPT( Script_GetSurvivalLootNearbyPos )
* @NativeFunctionAddress 0000000140C7FAE0
*/

var function GetSurvivalLootNearbyPos()

/*
* @Breif 
* @Pramas entity player, float distToCheck, bool traceToPlayer, bool sortByDistToPlayer
* @NativeName: SHARED_SCRIPT( Script_GetSurvivalLootNearbyPlayer )
* @NativeFunctionAddress 0000000140C7FB70
*/

var function GetSurvivalLootNearbyPlayer()

/*
* @Breif Get array of all titans
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetTitanArray )
* @NativeFunctionAddress 0000000140C7FC40
*/

var function GetTitanArray()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetTitanArrayOfTeam )
* @NativeFunctionAddress 0000000140C7FD60
*/

var function GetTitanArrayOfTeam()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetTitanArrayOfEnemies )
* @NativeFunctionAddress 0000000140C7FDD0
*/

var function GetTitanArrayOfEnemies()

/*
* @Breif Get array of all titan souls
* @Pramas 
* @NativeName: SHARED_SCRIPT( ScriptGetTitanSoulArray )
* @NativeFunctionAddress 0000000140C7FE40
*/

var function GetTitanSoulArray()

/*
* @Breif 
* @Pramas int team
* @NativeName: Script_GetTitanCountForTeam
* @NativeFunctionAddress 0000000140C844D0
*/

int function GetTitanCountForTeam(int team)

/*
* @Breif Get array of all players by class, team, within dist. team -1 for any team, 'any' for any class, otherwise 'titan' or 'pilot', -1 for any dist
* @Pramas string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayEx )
* @NativeFunctionAddress 0000000140C7FF80
*/

var function GetPlayerArrayEx()

/*
* @Breif Get the size of a team
* @Pramas 
* @NativeName: Script_GetMaxTeamPlayers
* @NativeFunctionAddress 0000000140C84430
*/

int function GetMaxTeamPlayers()

/*
* @Breif Get the number of players in a team
* @Pramas int
* @NativeName: GetTeamPlayerCount
* @NativeFunctionAddress 0000000140C84360
*/

int function GetTeamPlayerCount(int)

/*
* @Breif 
* @Pramas entity ent
* @NativeName: GetSurfacePropForEntity
* @NativeFunctionAddress 0000000140C842B0
*/

int function GetSurfacePropForEntity(entity ent)

/*
* @Breif Find and returns the entity with the given entity index.
* @Pramas int
* @NativeName: ScriptGetEntByIndex
* @NativeFunctionAddress 0000000140C84240
*/

entity function GetEntByIndex(int)

/*
* @Breif Get array of all NPCs
* @Pramas 
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArray )
* @NativeFunctionAddress 0000000140C7FFC0
*/

var function GetNPCArray()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayOfTeam )
* @NativeFunctionAddress 0000000140C80100
*/

var function GetNPCArrayOfTeam()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayOfEnemies )
* @NativeFunctionAddress 0000000140C80160
*/

var function GetNPCArrayOfEnemies()

/*
* @Breif Get array of all NPCs by class, team, within dist. team -1 for any team, 'any' for any class, -1 for any dist
* @Pramas string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayEx )
* @NativeFunctionAddress 0000000140C801C0
*/

var function GetNPCArrayEx()

/*
* @Breif Get array of all NPCs by class, team, and subclass (array), within dist. team -1 for any team, 'any' for any class, -1 for any dist
* @Pramas string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist, array< int > subclasses
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayWithSubclassEx )
* @NativeFunctionAddress 0000000140C80200
*/

var function GetNPCArrayWithSubclassEx()

/*
* @Breif Get array of all NPCs of class
* @Pramas string classname
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayByClass )
* @NativeFunctionAddress 0000000140C80240
*/

var function GetNPCArrayByClass()

/*
* @Breif Get array of all NPCs of class and subclass
* @Pramas string classname, array< int > subclasses
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayByClassAndSubclass )
* @NativeFunctionAddress 0000000140C80280
*/

var function GetNPCArrayByClassAndSubclass()

/*
* @Breif Get array of all projectiles
* @Pramas 
* @NativeName: SHARED_SCRIPT( ScriptGetProjectileArray )
* @NativeFunctionAddress 0000000140C802C0
*/

var function GetProjectileArray()

/*
* @Breif Get array of all projectiles by class, team, within dist. team -1 for any team, 'any' for any class, -1 for any dist
* @Pramas string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist
* @NativeName: SHARED_SCRIPT( ScriptGetProjectileArrayEx )
* @NativeFunctionAddress 0000000140C80400
*/

var function GetProjectileArrayEx()

/*
* @Breif Check if player is safe from NPCs
* @Pramas entity
* @NativeName: IsPlayerSafeFromNPCs
* @NativeFunctionAddress 0000000140C841D0
*/

bool function IsPlayerSafeFromNPCs(entity)

/*
* @Breif Check if player would safe from projectiles at a given position
* @Pramas entity, vector
* @NativeName: IsPlayerSafeFromProjectiles
* @NativeFunctionAddress 0000000140C84150
*/

bool function IsPlayerSafeFromProjectiles(entity, vector)

/*
* @Breif Returns the best window hint. Start position, clearance radius, clearance height, direction, distance, gravity, search margin, ignore ent
* @Pramas vector, float, float, vector, float, float, float, entity
* @NativeName: Script_GetWindowHint
* @NativeFunctionAddress 0000000140C84040
*/

entity function GetWindowHint(vector, float, float, vector, float, float, float, entity)

/*
* @Breif Returns true if building cube maps.
* @Pramas 
* @NativeName: Script_BuildingCubeMaps
* @NativeFunctionAddress 00000001408F7FF0
*/

bool function BuildingCubeMaps()

/*
* @Breif Returns value of IsTestMap from the level's script list .rson file
* @Pramas 
* @NativeName: Script_IsTestMap
* @NativeFunctionAddress 0000000140C83FA0
*/

bool function IsTestMap()

/*
* @Breif Given (player, r, g, b, a, fadeTime, fadeHold, FFADE_ flags), fade the player's screen.
* @Pramas entity, int, int, int, int, float, float, int
* @NativeName: ScriptScreenFade
* @NativeFunctionAddress 0000000140C83E70
*/

void function ScreenFade(entity, int, int, int, int, float, float, int)

/*
* @Breif Returns list of files in scripts/model_viewer_list.txt, which is written by reRun
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetModelViewerList )
* @NativeFunctionAddress 00000001408F08C0
*/

var function GetModelViewerList()

/*
* @Breif Play a first-person animation with the grapple (for when it attaches to something).
* @Pramas entity, string
* @NativeName: ScriptPlayGrappleAttachedAnimation
* @NativeFunctionAddress 0000000140C83E00
*/

void function PlayGrappleAttachedAnimation(entity, string)

/*
* @Breif Begin an iteration over the list of entities
* @Pramas 
* @NativeName: Entities_First
* @NativeFunctionAddress 0000000140E64F40
*/

entity function Entities_First()

/*
* @Breif Continue an iteration over the list of entities, providing reference to a previously found entity
* @Pramas entity
* @NativeName: Entities_Next
* @NativeFunctionAddress 0000000140E64E90
*/

entity function Entities_Next(entity)

/*
* @Breif Creates an entity by classname but does not spawn it.  Call DispatchSpawn( ent ) to spawn the entity into the level.
* @Pramas string
* @NativeName: Entities_CreateByClassname
* @NativeFunctionAddress 0000000140E64E30
*/

entity function Entities_CreateByClassname(string)

/*
* @Breif 
* @Pramas string, string
* @NativeName: Entities_CreateProjectileByClassname
* @NativeFunctionAddress 0000000140E64DD0
*/

entity function Entities_CreateProjectileByClassname(string, string)

/*
* @Breif Create an entity based on the named template.  If no template found, returns null.
* @Pramas string
* @NativeName: Entities_CreateByTemplate
* @NativeFunctionAddress 0000000140E64C70
*/

entity function Entities_CreateByTemplate(string)

/*
* @Breif Create zero or more entities from templates that match the given string, and return them as an array. Wildcards allowed.
* @Pramas string pointTemplate
* @NativeName: Entities_CreateByTemplateMultiple
* @NativeFunctionAddress 0000000140E5DC30
*/

var function Entities_CreateByTemplateMultiple()

/*
* @Breif Create zero or more entities from point-templates that match the given string, and return them as an array. Wildcards allowed.
* @Pramas string pointTemplate, vector origin, vector angles
* @NativeName: Entities_CreateByPointTemplates
* @NativeFunctionAddress 0000000140E5DCA0
*/

var function Entities_CreateByPointTemplates()

/*
* @Breif Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search
* @Pramas entity, string
* @NativeName: Entities_FindByClassname
* @NativeFunctionAddress 0000000140E64BF0
*/

entity function Entities_FindByClassname(entity, string)

/*
* @Breif Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search
* @Pramas entity, string
* @NativeName: Entities_FindByName
* @NativeFunctionAddress 0000000140E64B60
*/

entity function Entities_FindByName(entity, string)

/*
* @Breif Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search
* @Pramas entity, vector, float
* @NativeName: Entities_FindInSphere
* @NativeFunctionAddress 0000000140E64AD0
*/

entity function Entities_FindInSphere(entity, vector, float)

/*
* @Breif Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search
* @Pramas entity, string
* @NativeName: Entities_FindByTarget
* @NativeFunctionAddress 0000000140E649E0
*/

entity function Entities_FindByTarget(entity, string)

/*
* @Breif Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search
* @Pramas entity, string
* @NativeName: Entities_FindByModel
* @NativeFunctionAddress 0000000140E648E0
*/

entity function Entities_FindByModel(entity, string)

/*
* @Breif Find entities by name nearest to a point.
* @Pramas string, vector, float
* @NativeName: Entities_FindByNameNearest
* @NativeFunctionAddress 0000000140E64860
*/

entity function Entities_FindByNameNearest(string, vector, float)

/*
* @Breif Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search
* @Pramas entity, string, vector, float
* @NativeName: Entities_FindByNameWithin
* @NativeFunctionAddress 0000000140E647C0
*/

entity function Entities_FindByNameWithin(entity, string, vector, float)

/*
* @Breif Find entities by class name nearest to a point.
* @Pramas string, vector, float
* @NativeName: Entities_FindByClassnameNearest
* @NativeFunctionAddress 0000000140E64740
*/

entity function Entities_FindByClassnameNearest(string, vector, float)

/*
* @Breif Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search
* @Pramas entity, string, vector, float
* @NativeName: Entities_FindByClassnameWithin
* @NativeFunctionAddress 0000000140E646A0
*/

entity function Entities_FindByClassnameWithin(entity, string, vector, float)

/*
* @Breif Plays a given sound on the given entity.
* @Pramas entity, string
* @NativeName: ScriptEmitSoundOnEntity
* @NativeFunctionAddress 0000000141045480
*/

float function EmitSoundOnEntity(entity, string)

/*
* @Breif Plays a given sound on the given entity. Doesn't save sound
* @Pramas entity, string
* @NativeName: ScriptEmitSoundOnEntityNoSave
* @NativeFunctionAddress 0000000141045480
*/

float function EmitSoundOnEntityNoSave(entity, string)

/*
* @Breif Plays the given sound on the given entity after a given number of seconds.
* @Pramas entity, string, float
* @NativeName: ScriptEmitSoundOnEntityAfterDelay
* @NativeFunctionAddress 00000001410453A0
*/

float function EmitSoundOnEntityAfterDelay(entity, string, float)

/*
* @Breif Plays the given sound on the given entity only to a given player, seeking the given number of seconds into it.
* @Pramas entity, entity, string, float
* @NativeName: ScriptEmitSoundOnEntityOnlyToPlayerWithSeek
* @NativeFunctionAddress 00000001410452A0
*/

float function EmitSoundOnEntityOnlyToPlayerWithSeek(entity, entity, string, float)

/*
* @Breif Plays the given sound on the given entity except to a given player, seeking the given number of seconds into it.
* @Pramas entity, entity, string, float
* @NativeName: ScriptEmitSoundOnEntityExceptToPlayerWithSeek
* @NativeFunctionAddress 00000001410451A0
*/

float function EmitSoundOnEntityExceptToPlayerWithSeek(entity, entity, string, float)

/*
* @Breif Plays a given sound on the given entity only for one team.
* @Pramas entity, string, int
* @NativeName: ScriptEmitSoundOnEntityToTeam
* @NativeFunctionAddress 00000001410450C0
*/

float function EmitSoundOnEntityToTeam(entity, string, int)

/*
* @Breif Plays a given sound on the given entity only for enemies of the given team.
* @Pramas entity, string, int
* @NativeName: ScriptEmitSoundOnEntityToEnemies
* @NativeFunctionAddress 0000000141044FE0
*/

float function EmitSoundOnEntityToEnemies(entity, string, int)

/*
* @Breif 
* @Pramas int teamNumber, vector position, string soundName, entity realmsEntity = null
* @NativeName: ScriptEmitSoundAtPosition
* @NativeFunctionAddress 00000001410446A0
*/

var function EmitSoundAtPosition()

/*
* @Breif Play a sound in the world only to a given player.
* @Pramas int, vector, entity, string
* @NativeName: ScriptEmitSoundAtPositionOnlyToPlayer
* @NativeFunctionAddress 0000000141044F00
*/

float function EmitSoundAtPositionOnlyToPlayer(int, vector, entity, string)

/*
* @Breif Play a sound in the world for everyone except to a specific player.
* @Pramas int, vector, entity, string
* @NativeName: ScriptEmitSoundAtPositionExceptToPlayer
* @NativeFunctionAddress 0000000141044E20
*/

float function EmitSoundAtPositionExceptToPlayer(int, vector, entity, string)

/*
* @Breif Stops any instances of a certain sound playing on the given entity.
* @Pramas entity, string
* @NativeName: ScriptStopSoundOnEntity
* @NativeFunctionAddress 0000000141044DB0
*/

void function StopSoundOnEntity(entity, string)

/*
* @Breif Sends a preset signal to any instances of a certain sound playing on the given entity.
* @Pramas entity, string
* @NativeName: ScriptSignalSoundOnEntity
* @NativeFunctionAddress 0000000141044D40
*/

void function SignalSoundOnEntity(entity, string)

/*
* @Breif Stops any instances of a certain sound playing very near the given position.
* @Pramas vector, string
* @NativeName: ScriptStopSoundAtPosition
* @NativeFunctionAddress 0000000141044CF0
*/

void function StopSoundAtPosition(vector, string)

/*
* @Breif Fades out a sound over time.
* @Pramas entity, string, float
* @NativeName: ScriptFadeOutSoundOnEntity
* @NativeFunctionAddress 0000000141044C70
*/

void function FadeOutSoundOnEntity(entity, string, float)

/*
* @Breif Play a sound on an entity only to a given player.
* @Pramas entity, entity, string
* @NativeName: ScriptEmitSoundOnEntityOnlyToPlayer
* @NativeFunctionAddress 0000000141044B90
*/

float function EmitSoundOnEntityOnlyToPlayer(entity, entity, string)

/*
* @Breif Play a sound on an entity only to a given player with a fade in time.
* @Pramas entity, entity, string, float
* @NativeName: ScriptEmitSoundOnEntityOnlyToPlayerWithFadeIn
* @NativeFunctionAddress 0000000141044A90
*/

float function EmitSoundOnEntityOnlyToPlayerWithFadeIn(entity, entity, string, float)

/*
* @Breif Play a sound for everyone except for a specific player.
* @Pramas entity, entity, string
* @NativeName: ScriptEmitSoundOnEntityExceptToPlayer
* @NativeFunctionAddress 00000001410449B0
*/

float function EmitSoundOnEntityExceptToPlayer(entity, entity, string)

/*
* @Breif Play a sound for everyone except for a specific player.  Use this version if the player is not hearing a predicted version, but rather a different sound entirely.
* @Pramas entity, entity, string
* @NativeName: ScriptEmitSoundOnEntityExceptToPlayerNotPredicted
* @NativeFunctionAddress 00000001410448D0
*/

float function EmitSoundOnEntityExceptToPlayerNotPredicted(entity, entity, string)

/*
* @Breif Returns whether the given alias exists.
* @Pramas string
* @NativeName: ScriptDoesAliasExist_Server
* @NativeFunctionAddress 00000001410447D0
*/

bool function DoesAliasExist(string)

/*
* @Breif Returns int which is ORed together SOUNDTAG_* values for this sound (from scripts/audio/metadata_tags.rson)
* @Pramas string
* @NativeName: ScriptGetSoundTags
* @NativeFunctionAddress 0000000141044740
*/

int function GetSoundTags(string)

/*
* @Breif Specifies a player-shift offset to a location to also test sound radii against. (0 0 0 is disabled)
* @Pramas vector
* @NativeName: ScriptSetRapidShiftOffset
* @NativeFunctionAddress 00000001410446E0
*/

void function SetRapidShiftOffset(vector)

/*
* @Breif 
* @Pramas int typeIndex, asset modelAsset, asset effectAsset
* @NativeName: Script_ClientSidePickups_InitType
* @NativeFunctionAddress 0000000140BC9B20
*/

void function ClientSidePickups_InitType(int typeIndex, asset modelAsset, asset effectAsset)

/*
* @Breif 
* @Pramas entity playerEnt, int pickupType, int amount, vector origin, int CSPUFLAGflags, int customFlags, int recieptID
* @NativeName: Script_GrantClientSidePickup
* @NativeFunctionAddress 0000000140BC9A10
*/

void function GrantClientSidePickup(entity playerEnt, int pickupType, int amount, vector origin, int CSPUFLAGflags, int customFlags, int recieptID)

/*
* @Breif 
* @Pramas int waypointType
* @NativeName: Script_CreatePlayerWaypoint
* @NativeFunctionAddress 0000000140C8A660
*/

entity function CreatePlayerWaypoint(int waypointType)

/*
* @Breif 
* @Pramas int waypointType, int poiType, vector pos, entity ent, int teamNum, int priority, entity realmsEntity
* @NativeName: Script_CreatePlayerPOI
* @NativeFunctionAddress 0000000140C8A560
*/

void function CreatePlayerPOI(int waypointType, int poiType, vector pos, entity ent, int teamNum, int priority, entity realmsEntity)

/*
* @Breif 
* @Pramas int waypointType, int poiType, vector pos, entity ent, int teamNum, int priority, entity realmsEntity
* @NativeName: Script_CreatePlayerPOIAndReturnEntity
* @NativeFunctionAddress 0000000140C8A450
*/

entity function CreatePlayerPOIAndReturnEntity(int waypointType, int poiType, vector pos, entity ent, int teamNum, int priority, entity realmsEntity)

/*
* @Breif Gets all the poi clusters within a range of a position
* @Pramas vector nearbyPos, float maxClusterDist, int minClusterSize, int teamToIgnore
* @NativeName: Script_GetServerWaypointClusters
* @NativeFunctionAddress 0000000140C7C970
*/

var function GetServerWaypointClusters()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_CreatePlayerTasklist
* @NativeFunctionAddress 0000000140C8B8B0
*/

entity function CreatePlayerTasklist()

/*
* @Breif Adds a heal resource to an entity. Returns a unique handle to the heal resource if it was successfully added. Returns ENTITY_HEAL_RESOURCE_INVALID if code could not allocate a new heal resource.
* @Pramas entity ent, float duration, float healRatePerSecond, float delay, string refName, entity healSource
* @NativeName: Script_EntityHealResource_Add
* @NativeFunctionAddress 0000000140D12670
*/

int function EntityHealResource_Add(entity ent, float duration, float healRatePerSecond, float delay, string refName, entity healSource)

/*
* @Breif Removes a heal resource from an entity.
* @Pramas entity ent, int handle
* @NativeName: Script_EntityHealResource_Remove
* @NativeFunctionAddress 0000000140D125F0
*/

void function EntityHealResource_Remove(entity ent, int handle)

/*
* @Breif Gets the remaining heal value from a heal resource for an entity.
* @Pramas entity ent, int handle
* @NativeName: Script_EntityHealResource_GetRemainingHeals
* @NativeFunctionAddress 0000000140D124D0
*/

int function EntityHealResource_GetRemainingHeals(entity ent, int handle)

/*
* @Breif 
* @Pramas string aiSettingsName
* @NativeName: Script_GetAISettingHullType
* @NativeFunctionAddress 0000000140E645C0
*/

int function GetAISettingHullType(string aiSettingsName)

/*
* @Breif Given (ent, rayStart, rayDir), return an approximate point closest to the ray, based on hitbox centers.
* @Pramas entity, vector, vector
* @NativeName: ScriptGetApproxClosestHitboxToRay
* @NativeFunctionAddress 0000000140E644B0
*/

vector function GetApproxClosestHitboxToRay(entity, vector, vector)

/*
* @Breif Send a HUD message to the given player.
* @Pramas player, text, xPos, yPos, r1, g1, b1, a1, r2, g2, b2, a2, fadeTimeIn, holdTime, fadeTimeOut
* @NativeName: ScriptSendHudMessage
* @NativeFunctionAddress 0000000140E5E070
*/

void function SendHudMessage(var, var, string, number, number, int, int, int, int, number, number, number)

/*
* @Breif Send a HUD message to the given player.
* @Pramas player, text, xPos, yPos, r1, g1, b1, a1, r2, g2, b2, a2, fadeTimeIn, holdTime, fadeTimeOut
* @NativeName: ScriptSendHudMessageToAll
* @NativeFunctionAddress 0000000140E5E140
*/

void function SendHudMessageToAll(var, string, number, number, int, int, int, int, number, number, number)

/*
* @Breif Get array of entities matching a name
* @Pramas string name
* @NativeName: ScriptGetEntArrayByName
* @NativeFunctionAddress 0000000140E5E180
*/

var function GetEntArrayByName_Expensive()

/*
* @Breif Get array of entities matching a name with support for *
* @Pramas string name
* @NativeName: ScriptGetEntArrayByNameWildCard
* @NativeFunctionAddress 0000000140E5E1C0
*/

var function GetEntArrayByNameWildCard_Expensive()

/*
* @Breif Get array of entities matching a class
* @Pramas string classname
* @NativeName: ScriptGetEntArrayByClass
* @NativeFunctionAddress 0000000140E5E200
*/

var function GetEntArrayByClass_Expensive()

/*
* @Breif Get array of entities matching a class with support for *
* @Pramas string classname
* @NativeName: ScriptGetEntArrayByClassWildCard
* @NativeFunctionAddress 0000000140E5E240
*/

var function GetEntArrayByClassWildCard_Expensive()

/*
* @Breif Get array of entities matching a script name
* @Pramas string name
* @NativeName: ScriptServerGetEntArrayByScriptName
* @NativeFunctionAddress 0000000140E5E280
*/

var function GetEntArrayByScriptName()

/*
* @Breif Get array of entities matching a script name and instance
* @Pramas string scriptName, string instanceName
* @NativeName: ScriptServerGetEntArrayByScriptNameInInstance
* @NativeFunctionAddress 0000000140E5E2C0
*/

var function GetEntArrayByScriptNameInInstance()

/*
* @Breif Get entity matching the given script name. It will script error if no entity is found or more than one entity is found.
* @Pramas string
* @NativeName: ScriptServerGetEntByScriptName
* @NativeFunctionAddress 0000000140E64450
*/

entity function GetEntByScriptName(string)

/*
* @Breif Get entity matching the given script name and instance. It will script error if no entity is found or more than one entity is found.
* @Pramas string, string
* @NativeName: ScriptServerGetEntByScriptNameInInstance
* @NativeFunctionAddress 0000000140E643F0
*/

entity function GetEntByScriptNameInInstance(string, string)

/*
* @Breif Get weapons in the world
* @Pramas bool onlyNotOwned
* @NativeName: ScriptGetWeaponArray
* @NativeFunctionAddress 0000000140E5E300
*/

var function GetWeaponArray()

/*
* @Breif Create a weapon entity.
* @Pramas string, vector, vector
* @NativeName: Script_CreateWeaponEntByName
* @NativeFunctionAddress 0000000140E64390
*/

entity function CreateWeaponEntityByName(string, vector, vector)

/*
* @Breif Create a constrained weapon entity that will stay in place at spawn.
* @Pramas string, vector, vector
* @NativeName: Script_CreateWeaponEntByNameConstrained
* @NativeFunctionAddress 0000000140E64330
*/

entity function CreateWeaponEntityByNameConstrained(string, vector, vector)

/*
* @Breif Create a constrained weapon entity that will move at spawn.
* @Pramas string, vector, vector
* @NativeName: Script_CreateWeaponEntByNameWithPhysics
* @NativeFunctionAddress 0000000140E642D0
*/

entity function CreateWeaponEntityByNameWithPhysics(string, vector, vector)

/*
* @Breif Return array ID index
* @Pramas 
* @NativeName: CreateScriptManagedEntArray
* @NativeFunctionAddress 0000000140E64240
*/

int function CreateScriptManagedEntArray()

/*
* @Breif Destroys the given array
* @Pramas int
* @NativeName: DestroyScriptManagedEntArray
* @NativeFunctionAddress 0000000140E641E0
*/

void function DestroyScriptManagedEntArray(int)

/*
* @Breif Add an entity to script managed array
* @Pramas int, entity
* @NativeName: AddToScriptManagedEntArray
* @NativeFunctionAddress 0000000140E64160
*/

void function AddToScriptManagedEntArray(int, entity)

/*
* @Breif Remove entity from script managed array
* @Pramas int, entity
* @NativeName: RemoveFromScriptManagedEntArray
* @NativeFunctionAddress 0000000140E640E0
*/

void function RemoveFromScriptManagedEntArray(int, entity)

/*
* @Breif Get the size of the script managed ent array
* @Pramas int
* @NativeName: GetScriptManagedEntArrayLen
* @NativeFunctionAddress 0000000140E64030
*/

int function GetScriptManagedEntArrayLen(int)

/*
* @Breif Get the script managed ent array for the given index
* @Pramas int index
* @NativeName: GetScriptManagedEntArray
* @NativeFunctionAddress 0000000140E5E560
*/

var function GetScriptManagedEntArray()

/*
* @Breif Get the script managed ent array for the given index within distance of a point
* @Pramas int index, int notTeam, vector origin, float dist
* @NativeName: GetScriptManagedEntArrayWithinCenter
* @NativeFunctionAddress 0000000140E5E6F0
*/

var function GetScriptManagedEntArrayWithinCenter()

/*
* @Breif For a class, set enemy rating multipliers for titan, pilot, ai
* @Pramas int, float, float, float
* @NativeName: SpawnPoints_SetRatingMultipliers_Enemy
* @NativeFunctionAddress 0000000140E63F80
*/

void function SpawnPoints_SetRatingMultipliers_Enemy(int, float, float, float)

/*
* @Breif For a class, set friendly rating multipliers for titan, pilot, ai
* @Pramas int, float, float, float
* @NativeName: SpawnPoints_SetRatingMultipliers_Friendly
* @NativeFunctionAddress 0000000140E63ED0
*/

void function SpawnPoints_SetRatingMultipliers_Friendly(int, float, float, float)

/*
* @Breif Set pet Titan rating multiplier
* @Pramas float
* @NativeName: SpawnPoints_SetRatingMultiplier_PetTitan
* @NativeFunctionAddress 0000000140E63E70
*/

void function SpawnPoints_SetRatingMultiplier_PetTitan(float)

/*
* @Breif Get pilot spawn points
* @Pramas 
* @NativeName: SpawnPoints_GetPilot
* @NativeFunctionAddress 0000000140E5E830
*/

var function SpawnPoints_GetPilot()

/*
* @Breif Get titan spawn points
* @Pramas 
* @NativeName: SpawnPoints_GetTitan
* @NativeFunctionAddress 0000000140E5E870
*/

var function SpawnPoints_GetTitan()

/*
* @Breif Get droppod spawn points
* @Pramas 
* @NativeName: SpawnPoints_GetDropPod
* @NativeFunctionAddress 0000000140E5E8B0
*/

var function SpawnPoints_GetDropPod()

/*
* @Breif Get pilot start spawn points for a team
* @Pramas int team
* @NativeName: SpawnPoints_GetPilotStart
* @NativeFunctionAddress 0000000140E5E8F0
*/

var function SpawnPoints_GetPilotStart()

/*
* @Breif Get titan start spawn points for a team
* @Pramas int team
* @NativeName: SpawnPoints_GetTitanStart
* @NativeFunctionAddress 0000000140E5E930
*/

var function SpawnPoints_GetTitanStart()

/*
* @Breif Get droppod start spawn points for a team
* @Pramas int team
* @NativeName: SpawnPoints_GetDropPodStart
* @NativeFunctionAddress 0000000140E5E970
*/

var function SpawnPoints_GetDropPodStart()

/*
* @Breif Sort spawn points for pilot
* @Pramas 
* @NativeName: SpawnPoints_SortPilot
* @NativeFunctionAddress 0000000140E63DE0
*/

void function SpawnPoints_SortPilot()

/*
* @Breif Sort spawn points for titan
* @Pramas 
* @NativeName: SpawnPoints_SortTitan
* @NativeFunctionAddress 0000000140E63D50
*/

void function SpawnPoints_SortTitan()

/*
* @Breif Sort spawn points for droppod
* @Pramas 
* @NativeName: SpawnPoints_SortDropPod
* @NativeFunctionAddress 0000000140E63CC0
*/

void function SpawnPoints_SortDropPod()

/*
* @Breif Sort start spawn points for pilot
* @Pramas 
* @NativeName: SpawnPoints_SortPilotStart
* @NativeFunctionAddress 0000000140E63C30
*/

void function SpawnPoints_SortPilotStart()

/*
* @Breif Sort start spawn points for titan
* @Pramas 
* @NativeName: SpawnPoints_SortTitanStart
* @NativeFunctionAddress 0000000140E63BA0
*/

void function SpawnPoints_SortTitanStart()

/*
* @Breif Sort start spawn points for droppod
* @Pramas 
* @NativeName: SpawnPoints_SortDropPodStart
* @NativeFunctionAddress 0000000140E63B10
*/

void function SpawnPoints_SortDropPodStart()

/*
* @Breif Initialize rating spawn points
* @Pramas entity, float
* @NativeName: SpawnPoints_InitRatings
* @NativeFunctionAddress 0000000140E63990
*/

void function SpawnPoints_InitRatings(entity, float)

/*
* @Breif End rating spawn points without sorting
* @Pramas 
* @NativeName: SpawnPoints_DiscardRatings
* @NativeFunctionAddress 0000000140E63920
*/

void function SpawnPoints_DiscardRatings()

/*
* @Breif Initialize rating spawn points for frontlines
* @Pramas vector, vector, vector, vector, float
* @NativeName: SpawnPoints_InitFrontlineData
* @NativeFunctionAddress 0000000140E638B0
*/

void function SpawnPoints_InitFrontlineData(vector, vector, vector, vector, float)

/*
* @Breif Check the given entity has no player childrens attached. If so, it will raise a script error.
* @Pramas entity
* @NativeName: AssertNoPlayerChildren
* @NativeFunctionAddress 0000000140E63850
*/

void function AssertNoPlayerChildren(entity)

/*
* @Breif Tell code to try clear the move parent for the given entity, even if the entity is currently marked for deletion. This is a hack for shipping only and should not be used.
* @Pramas entity
* @NativeName: TryClearParent
* @NativeFunctionAddress 0000000140E637E0
*/

void function TryClearParent(entity)

/*
* @Breif 
* @Pramas string
* @NativeName: Script_CalculateHashForString
* @NativeFunctionAddress 0000000140E63710
*/

int function CalculateHashForString(string)

/*
* @Breif 
* @Pramas entity
* @NativeName: Script_IsEAAccessMember
* @NativeFunctionAddress 0000000140E63650
*/

bool function IsEAAccessMember(entity)

/*
* @Breif 
* @Pramas entity
* @NativeName: Script_IsEAAccessPremiumMember
* @NativeFunctionAddress 0000000140E63590
*/

bool function IsEAAccessPremiumMember(entity)

/*
* @Breif Returns the value of tweak var 'replay_forced'.
* @Pramas 
* @NativeName: Script_ShouldDoReplayIsForcedByCode
* @NativeFunctionAddress 00000001407AD660
*/

bool function ShouldDoReplayIsForcedByCode()

/*
* @Breif Given (entity, enabled) should this entity be a candidate to be returned from FindVisibleEntitiesInCone
* @Pramas entity, bool
* @NativeName: ScriptSetVisibleEntitiesInConeQueriableEnabled
* @NativeFunctionAddress 0000000140E63520
*/

void function SetVisibleEntitiesInConeQueriableEnabled(entity, bool)

/*
* @Breif Given (entity, disabled) should this entity be disabled from doing team color crosshair logic
* @Pramas entity, bool
* @NativeName: ScriptSetCrosshairTeamColoringDisabled
* @NativeFunctionAddress 0000000140E634B0
*/

void function SetCrosshairTeamColoringDisabled(entity, bool)

/*
* @Breif Force entity to be drawn even while parented to an invisible entity (such as the first person player)
* @Pramas entity, bool
* @NativeName: ScriptForceDrawWhileParented
* @NativeFunctionAddress 0000000140E63440
*/

void function SetForceDrawWhileParented(entity, bool)

/*
* @Breif Fully hide when cloaked
* @Pramas entity, bool
* @NativeName: ScriptSetHideOnCloak
* @NativeFunctionAddress 0000000140E633D0
*/

void function SetHideOnCloak(entity, bool)

/*
* @Breif Sets an entity to be a smart ammo target.
* @Pramas entity, bool
* @NativeName: ScriptSetCustomSmartAmmoTarget
* @NativeFunctionAddress 0000000140E63360
*/

void function SetCustomSmartAmmoTarget(entity, bool)

/*
* @Breif Whether an entity is immune to smart ammo lock or not
* @Pramas entity, bool
* @NativeName: ScriptSetPreventSmartAmmoLock
* @NativeFunctionAddress 0000000140E632E0
*/

void function SetPreventSmartAmmoLock(entity, bool)

/*
* @Breif Whether an entity is immune to smart ammo lock from humans
* @Pramas entity, bool
* @NativeName: ScriptSetSmartAmmoLockFromTitansOnly
* @NativeFunctionAddress 0000000140E63260
*/

void function SetSmartAmmoLockFromTitansOnly(entity, bool)

/*
* @Breif Whether a script mover is a hover tank one
* @Pramas entity, bool
* @NativeName: ScriptSetHoverTankMover
* @NativeFunctionAddress 0000000140E631E0
*/

void function SetHoverTankMover(entity, bool)

/*
* @Breif Whether a script mover is a hover tank one
* @Pramas entity
* @NativeName: ScriptIsHoverTankMover
* @NativeFunctionAddress 0000000140E63160
*/

bool function IsHoverTankMover(entity)

/*
* @Breif Whether a script mover is a leviathan one
* @Pramas entity, bool
* @NativeName: ScriptSetLeviathanMover
* @NativeFunctionAddress 0000000140E630E0
*/

void function SetLeviathanMover(entity, bool)

/*
* @Breif Whether a script mover is a leviathan one
* @Pramas entity
* @NativeName: ScriptIsLeviathanMover
* @NativeFunctionAddress 0000000140E63060
*/

bool function IsLeviathanMover(entity)

/*
* @Breif Validates that a data table is the same on server and client
* @Pramas entity, string
* @NativeName: Script_ValidateDataTable
* @NativeFunctionAddress 0000000140E62FF0
*/

void function ValidateDataTable(entity, string)

/*
* @Breif 
* @Pramas int MATCHRANKEDMODE_
* @NativeName: Script_SetMatchRankedMode
* @NativeFunctionAddress 00000001407AEC60
*/

var function SetMatchRankedMode()

/*
* @Breif 
* @Pramas entity player, int MATCHBANREASON_, int banSeconds
* @NativeName: Script_SetPlayerBan
* @NativeFunctionAddress 00000001407AEC60
*/

var function SetPlayerBan()

/*
* @Breif 
* @Pramas entity player, int rankScoreDiff, int rankScore, int killScore, int placementScore
* @NativeName: Script_SetPlayerRankScoreDiff
* @NativeFunctionAddress 00000001407AEC60
*/

var function SetPlayerRankScoreDiff()

/*
* @Breif 
* @Pramas entity player, int lossForgiveness, int rank, int kills
* @NativeName: Script_SetPlayerMatchResult
* @NativeFunctionAddress 00000001407AEC60
*/

var function SetPlayerMatchResult()

/*
* @Breif ( MATCHPHASE_?, maxRounds, roundsIMC, roundsMilitia, timeLimit, timePassed, maxScore, scoreIMC, scoreMilitia )
* @Pramas int, int, int, int, int, int, int, int, int
* @NativeName: NoteMatchState
* @NativeFunctionAddress 0000000140E62EB0
*/

void function NoteMatchState(int, int, int, int, int, int, int, int, int)

/*
* @Breif ( countdownRemaining [< 0 if no countdown] )
* @Pramas int, string
* @NativeName: NoteLobbyState
* @NativeFunctionAddress 0000000140E62E40
*/

void function NoteLobbyState(int, string)

/*
* @Breif Is high performance dev server
* @Pramas 
* @NativeName: IsHighPerfDevServer
* @NativeFunctionAddress 0000000140E62DF0
*/

bool function IsHighPerfDevServer()

/*
* @Breif Send a telemetry event to stryder - please talk to MikeK/Slothy before you add a new one or call it more often
* @Pramas string, int
* @NativeName: TelemetryEvent
* @NativeFunctionAddress 0000000140E62D80
*/

void function TelemetryEvent(string, int)

/*
* @Breif 
* @Pramas entity
* @NativeName: LogPlayerMatchStat_KilledAPilot
* @NativeFunctionAddress 0000000140E62CE0
*/

void function LogPlayerMatchStat_KilledAPilot(entity)

/*
* @Breif 
* @Pramas entity
* @NativeName: LogPlayerMatchStat_Death
* @NativeFunctionAddress 0000000140E62C40
*/

void function LogPlayerMatchStat_Death(entity)

/*
* @Breif 
* @Pramas entity, int
* @NativeName: LogPlayerMatchStat_EarnedXP
* @NativeFunctionAddress 0000000140E62B80
*/

void function LogPlayerMatchStat_EarnedXP(entity, int)

/*
* @Breif 
* @Pramas entity, int
* @NativeName: LogPlayerMatchStat_UsedBurncard
* @NativeFunctionAddress 0000000140E62AC0
*/

void function LogPlayerMatchStat_UsedBurncard(entity, int)

/*
* @Breif 
* @Pramas entity, int
* @NativeName: LogPlayerMatchStat_HappyHourMeritsGiven
* @NativeFunctionAddress 0000000140E62A00
*/

void function LogPlayerMatchStat_HappyHourMeritsGiven(entity, int)

/*
* @Breif 
* @Pramas entity
* @NativeName: ShouldAwardHappyHourBonus
* @NativeFunctionAddress 0000000140E62960
*/

bool function ShouldAwardHappyHourBonus(entity)

/*
* @Breif 
* @Pramas string
* @NativeName: Script_SvDemo_ConsistencyCheckString
* @NativeFunctionAddress 0000000140E628F0
*/

void function SvDemo_ConsistencyCheckString(string)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SvDemo_ConsistencyCheckInt
* @NativeFunctionAddress 00000001407AEC60
*/

void function SvDemo_ConsistencyCheckInt(int)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SvDemo_ConsistencyCheckFloat
* @NativeFunctionAddress 00000001407AEC60
*/

void function SvDemo_ConsistencyCheckFloat(float)

/*
* @Breif 
* @Pramas entity
* @NativeName: SvDemo_ConsistencyCheckEntIndex
* @NativeFunctionAddress 0000000140E62890
*/

void function SvDemo_ConsistencyCheckEnt(entity)

/*
* @Breif Look up a list of players in the specified ranked period name
* @Pramas string rankedPeriodName, array<entity>
* @NativeName: Script_LookupRankPosForPlayers
* @NativeFunctionAddress 00000001407AEC60
*/

var function LookupRankedPosForPlayers()

/*
* @Breif Send all players on the server back to the party server / screen
* @Pramas 
* @NativeName: Script_SendAllPlayersBackToPartyScreen
* @NativeFunctionAddress 0000000140E62820
*/

void function SendAllPlayersBackToPartyScreen()

/*
* @Breif Creates an explosion. Does damage in an area, moves physics objects, plays effects. Explosion( center, attacker, inflictor, damage, damageHeavyArmor, innerRadius, outerRadius, flags, projectileLaunchOrigin, explosionForce, scriptDamageFlags, scriptDamageSourceIdentifier, impactEffectTableName )
* @Pramas vector, entity, entity, float, float, float, float, int, vector, float, int, int, string
* @NativeName: Script_Explosion
* @NativeFunctionAddress 0000000140E62630
*/

void function Explosion(vector, entity, entity, float, float, float, float, int, vector, float, int, int, string)

/*
* @Breif Creates an explosion. Does damage in an area, moves physics objects, plays effects. Explosion_DamageDefSimple( damageDefID, center, attacker, inflictor, projectileLaunchOrigin )
* @Pramas int, vector, entity, entity, vector
* @NativeName: Script_Explosion_DamageDefSimple
* @NativeFunctionAddress 0000000140E62580
*/

void function Explosion_DamageDefSimple(int, vector, entity, entity, vector)

/*
* @Breif Same as Explosion_DamageDefSimple but specify damage and radius. Explosion_DamageDef( damageDefID, center, attacker, inflictor, damage, damageHeavyArmor, innerRadius, outerRadius, projectileLaunchOrigin )
* @Pramas int, vector, entity, entity, float, float, float, float, vector
* @NativeName: Script_Explosion_DamageDef
* @NativeFunctionAddress 0000000140E62440
*/

void function Explosion_DamageDef(int, vector, entity, entity, float, float, float, float, vector)

/*
* @Breif Does silent, invisible damage in a spherical area. RadiusDamage( center, attacker, inflictor, damage, damageHeavyArmor, innerRadius, outerRadius, flags, distanceFromAttacker, explosionForce, scriptDamageFlags, scriptDamageSourceIdentifier )
* @Pramas vector, entity, entity, float, float, float, float, int, float, float, int, int
* @NativeName: Script_RadiusDamage
* @NativeFunctionAddress 0000000140E62270
*/

void function RadiusDamage(vector, entity, entity, float, float, float, float, int, float, float, int, int)

/*
* @Breif Does silent, invisible damage in a spherical area. RadiusDamage_DamageDefSimple( damagedefID, center, attacker, inflictor, distanceFromAttacker )
* @Pramas int, vector, entity, entity, float
* @NativeName: RadiusDamage_DamageDefSimple
* @NativeFunctionAddress 0000000140E621B0
*/

void function RadiusDamage_DamageDefSimple(int, vector, entity, entity, float)

/*
* @Breif Same as RadiusDamage_DamageDefSimple but specify damage and radius. RadiusDamage_DamageDef( damagedefID, center, attacker, inflictor, damage, damageHeavyArmor, innerRadius, outerRadius, distanceFromAttacker )
* @Pramas int, vector, entity, entity, float, float, float, float, float
* @NativeName: RadiusDamage_DamageDef
* @NativeFunctionAddress 0000000140E62060
*/

void function RadiusDamage_DamageDef(int, vector, entity, entity, float, float, float, float, float)

/*
* @Breif Returns an entity representing the specified team
* @Pramas int
* @NativeName: Script_GetTeamEnt
* @NativeFunctionAddress 0000000140E61FE0
*/

entity function GetTeamEnt(int)

/*
* @Breif Begin registration of remote functions and script network vars.
* @Pramas 
* @NativeName: Script_Remote_BeginRegisteringFunctions_Server
* @NativeFunctionAddress 0000000140E61F70
*/

void function Remote_BeginRegisteringFunctions()

/*
* @Breif Begin registration of remote functions and script network vars for the level script.
* @Pramas 
* @NativeName: Script_Remote_BeginRegisteringLevelFunctions_Server
* @NativeFunctionAddress 0000000140E61EF0
*/

void function Remote_BeginRegisteringLevelFunctions()

/*
* @Breif Register a function name to be used in remote calls.
* @Pramas string
* @NativeName: Script_Remote_RegisterUntypedFunction_Server
* @NativeFunctionAddress 0000000140E61E10
*/

void function Remote_RegisterUntypedFunction_deprecated(string)

/*
* @Breif Register a function name to be used in remote calls. Specify argument types with "bool", "int", "float", "vector", and "entity". "int" must be followed by min, max + 1. "float" and "vector" must be followed by min, max, bit count. The value will be rounded to the nearest 1/2^(bit count) fraction of the specified range. Use 32 to send perfectly precise values.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterUIFunction_Server
* @NativeFunctionAddress 0000000140E5F7C0
*/

var function Remote_RegisterUIFunction()

/*
* @Breif Same as Remote_RegisterUIFunction, but the function is not required to exist. Useful for dev-only functions.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterUIFunction_Optional_Server
* @NativeFunctionAddress 0000000140E5F7C0
*/

var function Remote_RegisterUIFunction_Optional()

/*
* @Breif Register a function name to be used in remote calls. Specify argument types with "bool", "int", "float", "vector", and "entity". "int" must be followed by min, max + 1. "float" and "vector" must be followed by min, max, bit count. The value will be rounded to the nearest 1/2^(bit count) fraction of the specified range. Use 32 to send perfectly precise values.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterClientFunction_Server
* @NativeFunctionAddress 0000000140E5F800
*/

var function Remote_RegisterClientFunction()

/*
* @Breif Same as Remote_RegisterClientFunction, but the function is not required to exist. Useful for dev-only functions.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterClientFunction_Optional_Server
* @NativeFunctionAddress 0000000140E5F800
*/

var function Remote_RegisterClientFunction_Optional()

/*
* @Breif Finish registration of remote functions and script network vars.
* @Pramas 
* @NativeName: Script_Remote_EndRegisteringFunctions_Server
* @NativeFunctionAddress 0000000140E61D80
*/

void function Remote_EndRegisteringFunctions()

/*
* @Breif Finish registration of remote functions and script network vars for the level script.
* @Pramas 
* @NativeName: Script_Remote_EndRegisteringLevelFunctions_Server
* @NativeFunctionAddress 0000000140E61CF0
*/

void function Remote_EndRegisteringLevelFunctions()

/*
* @Breif Given a player, function name, and optional parameters, call function in client script. Then call it again if we rewind and play a kill replay. The command will not reach the client at all if called during a span of time the player skips because they were watching a replay. Allowed var types are null, bool, int, and float.
* @Pramas player, functionName, [param1], [param2], [param3], ...
* @NativeName: Script_Remote_CallFunction_Replay
* @NativeFunctionAddress 0000000140E5F840
*/

void function Remote_CallFunction_Replay(var, entity, string)

/*
* @Breif Given a player, function name, and optional parameters, call function in client script. Does not get called again in replays. Allowed var types are null, bool, int, and float.
* @Pramas player, functionName, [param1], [param2], [param3], ...
* @NativeName: Script_Remote_CallFunction_NonReplay
* @NativeFunctionAddress 0000000140E5F880
*/

void function Remote_CallFunction_NonReplay(var, entity, string)

/*
* @Breif Given a player, function name, and optional parameters, call function in UI script. Allowed var types are null, bool, int, and float.
* @Pramas player, functionName, [param1], [param2], [param3], ...
* @NativeName: Script_Remote_CallFunction_UI
* @NativeFunctionAddress 0000000140E5F8C0
*/

void function Remote_CallFunction_UI(var, entity, string)

/*
* @Breif Loads an anim_recording asset generated by bakery.
* @Pramas asset recordedAnimPath
* @NativeName: Script_LoadRecordedAnimation
* @NativeFunctionAddress 0000000140E5F900
*/

var function LoadRecordedAnimation()

/*
* @Breif Returns the duration in seconds of the recorded anim.
* @Pramas var recordedAnim
* @NativeName: Script_GetRecordedAnimationDuration
* @NativeFunctionAddress 0000000140E5FA70
*/

var function GetRecordedAnimationDuration()

/*
* @Breif Calculates the position of the first frame of the recorded animation if it were played so that its reference origin/angles line up with the given origin/angles.
* @Pramas var recordedAnim, vector refOrg, vector refAng
* @NativeName: Script_GetRecordedAnimationStartForRefPoint
* @NativeFunctionAddress 0000000140E5FAF0
*/

var function GetRecordedAnimationStartForRefPoint()

/*
* @Breif Do a save,  SaveGame_Create( string saveName, int saveVersion, int start_point ) 
* @Pramas string, int, int
* @NativeName: Script_SaveGame_Create
* @NativeFunctionAddress 00000001407AEC60
*/

void function SaveGame_Create(string, int, int)

/*
* @Breif Do a save,  SaveGame_Create( string saveName, int saveVersion, float delay, int trycount ) , will call back  'bool CodeCallback_SaveGameIsSafeToCommit()' to validate it is ok to commit the save file.
* @Pramas string, int, float, int, int
* @NativeName: Script_SaveGame_CreateWithCommitDelay
* @NativeFunctionAddress 00000001407AEC60
*/

void function SaveGame_CreateWithCommitDelay(string, int, float, int, int)

/*
* @Breif If their is an outstanding save commit, accept it asap.
* @Pramas 
* @NativeName: Script_SaveGame_Commit
* @NativeFunctionAddress 00000001407AEC60
*/

void function SaveGame_Commit()

/*
* @Breif If their is an outstanding save commit, reject it asap.
* @Pramas 
* @NativeName: Script_SaveGame_Reject
* @NativeFunctionAddress 00000001407AEC60
*/

void function SaveGame_Reject()

/*
* @Breif Do a restore,  SaveGame_Load( string saveName )
* @Pramas string
* @NativeName: Script_SaveGame_Load
* @NativeFunctionAddress 00000001407AEC60
*/

void function SaveGame_Load(string)

/*
* @Breif Checks if a file is ok to use. SaveGame_IsValid( string saveName )
* @Pramas string
* @NativeName: Script_SaveGame_IsLoadable
* @NativeFunctionAddress 00000001407AD660
*/

bool function SaveGame_IsLoadable(string)

/*
* @Breif Checks if a file is ok to get map/version/.. from . SaveGame_IsReadable( string saveName )
* @Pramas string
* @NativeName: Script_SaveGame_IsReadable
* @NativeFunctionAddress 00000001407AD660
*/

bool function SaveGame_IsReadable(string)

/*
* @Breif Return the script version of a save load. SaveGame_GetVersion( string saveName ) 
* @Pramas string
* @NativeName: Script_SaveGame_GetVersion
* @NativeFunctionAddress 00000001407AD5D0
*/

int function SaveGame_GetVersion(string)

/*
* @Breif Return the script start point of a save load. SaveGame_GetStartPoint( string saveName )
* @Pramas string
* @NativeName: Script_SaveGame_GetStartPoint
* @NativeFunctionAddress 00000001407AD5D0
*/

int function SaveGame_GetStartPoint(string)

/*
* @Breif Return the map name of a save load. SaveGame_GetMapName( string saveName ) 
* @Pramas string
* @NativeName: Script_SaveGame_GetMapName
* @NativeFunctionAddress 00000001407AD4F0
*/

string function SaveGame_GetMapName(string)

/*
* @Breif Loads a new level. The data in transitionStruct can be read in the next level with GetLevelTransitionStruct().
* @Pramas string mapname, LevelTransitionStruct transitionStruct
* @NativeName: Script_ChangeLevel
* @NativeFunctionAddress 0000000140E5FD20
*/

var function ChangeLevel()

/*
* @Breif Reads the transition data set by ChangeLevel() on the previous map. Returns null if this is the first map or the previous map didn't supply any data.
* @Pramas 
* @NativeName: Script_GetLevelTransitionStruct
* @NativeFunctionAddress 0000000140E5FD60
*/

var function GetLevelTransitionStruct()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetTimeshiftTimeOfDay_Night
* @NativeFunctionAddress 0000000140E61C70
*/

void function SetTimeshiftTimeOfDay_Night()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetTimeshiftTimeOfDay_Day
* @NativeFunctionAddress 0000000140E61BF0
*/

void function SetTimeshiftTimeOfDay_Day()

/*
* @Breif 
* @Pramas vector center, float radiusStart, float radiusEnd, float timeStart, float timeEnd
* @NativeName: Script_SetDeathFieldParams
* @NativeFunctionAddress 0000000140E61AB0
*/

void function SetDeathFieldParams(vector center, float radiusStart, float radiusEnd, float timeStart, float timeEnd)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetTeamRelationshipRulesForPVE
* @NativeFunctionAddress 0000000140E61A20
*/

void function SetTeamRelationshipRulesForPVE()

/*
* @Breif 
* @Pramas string weaponName
* @NativeName: Script_WeaponIsPrecached
* @NativeFunctionAddress 0000000140E619B0
*/

bool function WeaponIsPrecached(string weaponName)

/*
* @Breif 
* @Pramas asset modelAssetName
* @NativeName: Script_ModelIsPrecached
* @NativeFunctionAddress 0000000140E61950
*/

bool function ModelIsPrecached(asset modelAssetName)

/*
* @Breif Creates a rope between two points or entities.
* @Pramas vector start, vector end, float length = 0, entity startEnt = null, entity endEnt = null, int startAttachment = 0, int endAttachment = 0, int width = 2, string material = "", int segmentCount = 0
* @NativeName: Script_CreateRope
* @NativeFunctionAddress 0000000140E5FEC0
*/

var function CreateRope()

/*
* @Breif Gets the overall skill of the given team
* @Pramas int
* @NativeName: Script_GetTeamSkill
* @NativeFunctionAddress 0000000140E61870
*/

float function GetTeamSkill(int)

/*
* @Breif Gets the name of this server's datacenter
* @Pramas 
* @NativeName: Script_GetDatacenterName
* @NativeFunctionAddress 0000000140E61810
*/

string function GetDatacenterName()

/*
* @Breif Executes a server console cmd.
* @Pramas string
* @NativeName: Script_ServerCommand
* @NativeFunctionAddress 0000000140E61790
*/

void function ServerCommand(string)

/*
* @Breif 
* @Pramas string className, string scriptName, string editorClass
* @NativeName: Script_BlockMapEntityParseCreationOf
* @NativeFunctionAddress 0000000140E61730
*/

void function BlockMapEntityParseCreationOf(string className, string scriptName, string editorClass)

/*
* @Breif 
* @Pramas entity player, entity target
* @NativeName: Script_ValidateSpottedEnemyForPlayer
* @NativeFunctionAddress 0000000140E616A0
*/

bool function ValidateSpottedEnemyForPlayer(entity player, entity target)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PersistenceRequestGlobalSave
* @NativeFunctionAddress 00000001407AEC60
*/

void function PersistenceRequestGlobalSave()

/*
* @Breif 
* @Pramas string guid
* @NativeName: Script_GetEntityForGUID
* @NativeFunctionAddress 0000000140E61640
*/

entity function GetEntityForGUID(string guid)

/*
* @Breif One player reports cheater to anticheat system. ReportCheater( string reportedGUID, string reportingGUID, string descr )
* @Pramas string, string, string
* @NativeName: Script_ReportCheater
* @NativeFunctionAddress 0000000140E615D0
*/

void function ReportCheater(string, string, string)

/*
* @Breif One player reports another player for text chat abuse. ReportCheater( string targetUid, string petitionerUid, string category )
* @Pramas string, string, string
* @NativeName: Script_ReportAbusiveChat
* @NativeFunctionAddress 0000000140E61560
*/

void function ReportAbusiveChat(string, string, string)

/*
* @Breif 
* @Pramas vector
* @NativeName: MayAttachZiplineAtPoint
* @NativeFunctionAddress 0000000140E61500
*/

bool function MayAttachZiplineAtPoint(vector)

/*
* @Breif 
* @Pramas vector targetPos
* @NativeName: Script_BotsSetSkydiveTargetPos
* @NativeFunctionAddress 00000001407AEC60
*/

void function BotsSetSkydiveTargetPos(vector targetPos)

/*
* @Breif Is this a reloaded save game?
* @Pramas 
* @NativeName: ScriptIsGameFromReload
* @NativeFunctionAddress 0000000140BC72B0
*/

bool function IsGameFromReload()

/*
* @Breif Gets the CPU level for the platform this server is running on
* @Pramas 
* @NativeName: ScriptGetCPULevel
* @NativeFunctionAddress 0000000140BC71F0
*/

int function GetCPULevel()

/*
* @Breif Returns the number of gamemodes in the current playlist
* @Pramas 
* @NativeName: GetCurrentPlaylistGamemodesCount
* @NativeFunctionAddress 0000000140BC8950
*/

int function GetCurrentPlaylistGamemodesCount()

/*
* @Breif Returns the number of gamemodes in the specified playlist
* @Pramas string
* @NativeName: GetPlaylistGamemodesCount
* @NativeFunctionAddress 0000000140BC88A0
*/

int function GetPlaylistGamemodesCount(string)

/*
* @Breif Returns the name of the gamemode at the specified index in the current playlist
* @Pramas int
* @NativeName: GetCurrentPlaylistGamemodeByIndex
* @NativeFunctionAddress 0000000140BC87E0
*/

string function GetCurrentPlaylistGamemodeByIndex(int)

/*
* @Breif Returns the name of the gamemode at the specified index in the specified playlist
* @Pramas string, int
* @NativeName: GetPlaylistGamemodeByIndex
* @NativeFunctionAddress 0000000140BC8720
*/

string function GetPlaylistGamemodeByIndex(string, int)

/*
* @Breif 
* @Pramas string, int, string
* @NativeName: GetPlaylistGamemodeByIndexVar
* @NativeFunctionAddress 0000000140BC86A0
*/

string function GetPlaylistGamemodeByIndexVar(string, int, string)

/*
* @Breif 
* @Pramas int, string, bool
* @NativeName: GetCurrentPlaylistGamemodeByIndexVar
* @NativeFunctionAddress 0000000140BC8600
*/

string function GetCurrentPlaylistGamemodeByIndexVar(int, string, bool)

/*
* @Breif Returns the number of maps for the gamemode at the specified index in the current playlist
* @Pramas int
* @NativeName: GetCurrentPlaylistGamemodeByIndexMapsCount
* @NativeFunctionAddress 0000000140BC8540
*/

int function GetCurrentPlaylistGamemodeByIndexMapsCount(int)

/*
* @Breif Returns the number of maps for the gamemode at the specified index in the specified playlist
* @Pramas string, int
* @NativeName: GetPlaylistGamemodeByIndexMapsCount
* @NativeFunctionAddress 0000000140BC8480
*/

int function GetPlaylistGamemodeByIndexMapsCount(string, int)

/*
* @Breif Returns the name of the map at the specified gamemode and map indices in the current playlist
* @Pramas int, int
* @NativeName: GetCurrentPlaylistGamemodeByIndexMapByIndex
* @NativeFunctionAddress 0000000140BC8400
*/

string function GetCurrentPlaylistGamemodeByIndexMapByIndex(int, int)

/*
* @Breif Returns the name of the map at the specified gamemode and map indices in the specified playlist
* @Pramas string, int, int
* @NativeName: GetPlaylistGamemodeByIndexMapByIndex
* @NativeFunctionAddress 0000000140BC8370
*/

string function GetPlaylistGamemodeByIndexMapByIndex(string, int, int)

/*
* @Breif Returns the total number of maps in current playlist
* @Pramas 
* @NativeName: GetCurrentPlaylistMapsCount
* @NativeFunctionAddress 0000000140BC82D0
*/

int function GetCurrentPlaylistMapsCount()

/*
* @Breif Returns the total number of maps in the specified playlist
* @Pramas string
* @NativeName: GetPlaylistMapsCount
* @NativeFunctionAddress 0000000140BC8220
*/

int function GetPlaylistMapsCount(string)

/*
* @Breif 
* @Pramas 
* @NativeName: IsPrivateMatch
* @NativeFunctionAddress 0000000140BC81C0
*/

bool function IsPrivateMatch()

/*
* @Breif 
* @Pramas 
* @NativeName: IsCoopMatch
* @NativeFunctionAddress 0000000140BC8160
*/

bool function IsCoopMatch()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLobbyTeamsShowAsBalanced
* @NativeFunctionAddress 0000000140BC8110
*/

bool function GetLobbyTeamsShowAsBalanced()

/*
* @Breif 
* @Pramas 
* @NativeName: DevLobbyIsFrozen
* @NativeFunctionAddress 00000001407AD660
*/

bool function DevLobbyIsFrozen()

/*
* @Breif 
* @Pramas string, string, string
* @NativeName: GetGamemodeVarOrUseValue
* @NativeFunctionAddress 0000000140BC8080
*/

string function GetGamemodeVarOrUseValue(string, string, string)

/*
* @Breif Returns the total number of playlists
* @Pramas 
* @NativeName: GetPlaylistCount
* @NativeFunctionAddress 0000000140BC7FE0
*/

int function GetPlaylistCount()

/*
* @Breif Gets the name of the playlist, by index
* @Pramas int
* @NativeName: GetPlaylistName
* @NativeFunctionAddress 0000000140BC7F60
*/

string ornull function GetPlaylistName(int)

/*
* @Breif Get the original value of a variable from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, string
* @NativeName: GetPlaylistVarOrUseValueOriginal
* @NativeFunctionAddress 0000000140BC7ED0
*/

string function GetPlaylistVarOrUseValueOriginal(string, string, string)

/*
* @Breif Get the name of the current playlist
* @Pramas 
* @NativeName: GetCurrentPlaylistName
* @NativeFunctionAddress 0000000140BC7E70
*/

string function GetCurrentPlaylistName()

/*
* @Breif Get the original value of a variable from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string
* @NativeName: GetCurrentPlaylistVarOrUseValueOriginal
* @NativeFunctionAddress 0000000140BC7DE0
*/

string function GetCurrentPlaylistVarOrUseValueOriginal(string, string)

/*
* @Breif Get the value of a string from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, string
* @NativeName: GetPlaylistVarString
* @NativeFunctionAddress 0000000140BC7D50
*/

string function GetPlaylistVarString(string, string, string)

/*
* @Breif Get the value of a bool from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, bool
* @NativeName: GetPlaylistVarBool
* @NativeFunctionAddress 0000000140BC7CE0
*/

bool function GetPlaylistVarBool(string, string, bool)

/*
* @Breif Get the value of an integer from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, int
* @NativeName: GetPlaylistVarInt
* @NativeFunctionAddress 0000000140BC7C20
*/

int function GetPlaylistVarInt(string, string, int)

/*
* @Breif Get the value of a float from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, float
* @NativeName: GetPlaylistVarFloat
* @NativeFunctionAddress 0000000140BC7B60
*/

float function GetPlaylistVarFloat(string, string, float)

/*
* @Breif Get the value of a string from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string
* @NativeName: GetCurrentPlaylistVarString
* @NativeFunctionAddress 0000000140BC7AD0
*/

string function GetCurrentPlaylistVarString(string, string)

/*
* @Breif Get the value of a bool from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, bool
* @NativeName: GetCurrentPlaylistVarBool
* @NativeFunctionAddress 0000000140BC7A70
*/

bool function GetCurrentPlaylistVarBool(string, bool)

/*
* @Breif Get the value of an integer from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, int
* @NativeName: GetCurrentPlaylistVarInt
* @NativeFunctionAddress 0000000140BC79C0
*/

int function GetCurrentPlaylistVarInt(string, int)

/*
* @Breif Get the value of a float from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, float
* @NativeName: GetCurrentPlaylistVarFloat
* @NativeFunctionAddress 0000000140BC7900
*/

float function GetCurrentPlaylistVarFloat(string, float)

/*
* @Breif Gets the max players for the specified playlist
* @Pramas string
* @NativeName: GetMaxPlayersForPlaylistName
* @NativeFunctionAddress 0000000140BC7850
*/

int function GetMaxPlayersForPlaylistName(string)

/*
* @Breif Gets the max teams for the specified playlist
* @Pramas string
* @NativeName: GetMaxTeamsForPlaylistName
* @NativeFunctionAddress 0000000140BC77A0
*/

int function GetMaxTeamsForPlaylistName(string)

/*
* @Breif 
* @Pramas string, string
* @NativeName: SetPlaylistVarOverride
* @NativeFunctionAddress 0000000140BC76F0
*/

void function SetPlaylistVarOverride(string, string)

/*
* @Breif 
* @Pramas 
* @NativeName: ClearPlaylistVarOverrides
* @NativeFunctionAddress 0000000140BC7670
*/

void function ClearPlaylistVarOverrides()

/*
* @Breif 
* @Pramas entity, int, int, float
* @NativeName: SendTrainingGauntletStatsToBackend
* @NativeFunctionAddress 0000000140BC75C0
*/

void function SendTrainingGauntletStatsToBackend(entity, int, int, float)

/*
* @Breif Returns true if this is a matchmaking server
* @Pramas 
* @NativeName: IsMatchmakingServer
* @NativeFunctionAddress 0000000140BC7560
*/

bool function IsMatchmakingServer()

/*
* @Breif Returns 'party' or 'game' lobby type
* @Pramas 
* @NativeName: GetLobbyType
* @NativeFunctionAddress 0000000140BC73A0
*/

string function GetLobbyType()

/*
* @Breif Returns player entity n where n is in [0,maxPlayers-1].
* @Pramas int
* @NativeName: GetPlayerByIndex
* @NativeFunctionAddress 0000000140BC7300
*/

entity function GetPlayerByIndex(int)

/*
* @Breif 
* @Pramas int teamNumber, int otherTeam
* @NativeName: Script_IsEnemyTeam
* @NativeFunctionAddress 0000000140BC7170
*/

bool function IsEnemyTeam(int teamNumber, int otherTeam)

/*
* @Breif 
* @Pramas int teamNumber, int otherTeam
* @NativeName: Script_IsFriendlyTeam
* @NativeFunctionAddress 0000000140BC70F0
*/

bool function IsFriendlyTeam(int teamNumber, int otherTeam)

/*
* @Breif 
* @Pramas int teamNum, bool isMarked
* @NativeName: Script_SetTeamIsCivil
* @NativeFunctionAddress 0000000140BC7090
*/

void function SetTeamIsCivil(int teamNum, bool isMarked)

/*
* @Breif 
* @Pramas int teamNum, bool isMarked
* @NativeName: Script_SetTeamIsRabid
* @NativeFunctionAddress 0000000140BC7030
*/

void function SetTeamIsRabid(int teamNum, bool isMarked)

/*
* @Breif 
* @Pramas int teamNum
* @NativeName: Script_IsTeamCivil
* @NativeFunctionAddress 0000000140BC6FA0
*/

bool function IsTeamCivil(int teamNum)

/*
* @Breif 
* @Pramas int teamNum
* @NativeName: Script_IsTeamRabid
* @NativeFunctionAddress 0000000140BC6F10
*/

bool function IsTeamRabid(int teamNum)

/*
* @Breif Sets the current playlist
* @Pramas string
* @NativeName: SetCurrentPlaylist
* @NativeFunctionAddress 0000000140BC6E70
*/

bool function SetCurrentPlaylist(string)

/*
* @Breif Get number of damage defs defined
* @Pramas 
* @NativeName: DamageDef_GetCount
* @NativeFunctionAddress 0000000140C86B80
*/

int function DamageDef_GetCount()

/*
* @Breif Get damage def name
* @Pramas int
* @NativeName: DamageDef_GetName
* @NativeFunctionAddress 0000000140C86AF0
*/

string function DamageDef_GetName(int)

/*
* @Breif 
* @Pramas int
* @NativeName: DamageDef_GetObituary
* @NativeFunctionAddress 0000000140C86A50
*/

string function DamageDef_GetObituary(int)

/*
* @Breif 
* @Pramas int
* @NativeName: DamageDef_GetDeathProtection
* @NativeFunctionAddress 0000000140C869B0
*/

bool function DamageDef_GetDeathProtection(int)

/*
* @Breif 
* @Pramas int, string
* @NativeName: Script_DamageDef_GetSettingByKeyField
* @NativeFunctionAddress 0000000140C86810
*/

var function Dev_DamageDef_GetSettingByKeyField(int, string)

/*
* @Breif Get the base, game mode name
* @Pramas 
* @NativeName: Script_GameRules_GetGameMode
* @NativeFunctionAddress 0000000140BC6E10
*/

string function GameRules_GetGameMode()

/*
* @Breif Get a team's score, given a team index.
* @Pramas int
* @NativeName: Script_GameRules_GetTeamScore
* @NativeFunctionAddress 0000000140BC6D30
*/

int function GameRules_GetTeamScore(int)

/*
* @Breif Get a team's second score, given a team index.
* @Pramas int
* @NativeName: Script_GameRules_GetTeamScore2
* @NativeFunctionAddress 0000000140BC6C50
*/

int function GameRules_GetTeamScore2(int)

/*
* @Breif Get a team's score, given a team index.
* @Pramas int
* @NativeName: Script_GameRules_GetTeamKills
* @NativeFunctionAddress 0000000140BC6B70
*/

int function GameRules_GetTeamKills(int)

/*
* @Breif Get a team's score, given a team index.
* @Pramas int
* @NativeName: Script_GameRules_GetTeamDeaths
* @NativeFunctionAddress 0000000140BC6A90
*/

int function GameRules_GetTeamDeaths(int)

/*
* @Breif Get a team's name, given a team index.
* @Pramas int
* @NativeName: Script_GameRules_GetTeamName
* @NativeFunctionAddress 0000000140BC69F0
*/

string function GameRules_GetTeamName(int)

/*
* @Breif Returns true if the time limit should be enabled
* @Pramas 
* @NativeName: Script_GameRules_TimeLimitEnabled
* @NativeFunctionAddress 0000000140844A90
*/

bool function GameRules_TimeLimitEnabled()

/*
* @Breif Returns true if the match can end
* @Pramas 
* @NativeName: Script_GameRules_AllowMatchEnd
* @NativeFunctionAddress 0000000140844A40
*/

bool function GameRules_AllowMatchEnd()

/*
* @Breif Get the max players allowed for a class.
* @Pramas string
* @NativeName: Script_GameRules_GetClassMax
* @NativeFunctionAddress 0000000140BC6950
*/

int function GameRules_GetClassMax(string)

/*
* @Breif Set the game mode
* @Pramas string
* @NativeName: Script_GameRules_SetGameMode
* @NativeFunctionAddress 0000000140BC68B0
*/

void function GameRules_SetGameMode(string)

/*
* @Breif Set a team's score, given a team index and new score.
* @Pramas int, int
* @NativeName: Script_GameRules_SetTeamScore
* @NativeFunctionAddress 0000000140BC6840
*/

void function GameRules_SetTeamScore(int, int)

/*
* @Breif Set a team's second score, given a team index and new score.
* @Pramas int, int
* @NativeName: Script_GameRules_SetTeamScore2
* @NativeFunctionAddress 0000000140BC67D0
*/

void function GameRules_SetTeamScore2(int, int)

/*
* @Breif Begin the match.
* @Pramas 
* @NativeName: Script_GameRules_BeginMatch
* @NativeFunctionAddress 0000000140BC6780
*/

void function GameRules_BeginMatch()

/*
* @Breif End the match.
* @Pramas 
* @NativeName: Script_GameRules_EndMatch
* @NativeFunctionAddress 0000000140BC6740
*/

void function GameRules_EndMatch()

/*
* @Breif Note that the game has started (end of prematch).
* @Pramas 
* @NativeName: Script_GameRules_MarkGameStatePrematchEnding
* @NativeFunctionAddress 0000000140BC6700
*/

void function GameRules_MarkGameStatePrematchEnding()

/*
* @Breif Note that a winner has been declared (start of epilogue, etc).
* @Pramas int
* @NativeName: Script_GameRules_MarkGameStateWinnerDetermined
* @NativeFunctionAddress 0000000140BC6500
*/

void function GameRules_MarkGameStateWinnerDetermined(int)

/*
* @Breif Change to a new map
* @Pramas string, string
* @NativeName: Script_GameRules_ChangeMap
* @NativeFunctionAddress 0000000140BC64A0
*/

void function GameRules_ChangeMap(string, string)

/*
* @Breif Returns the most recent maps loaded
* @Pramas int
* @NativeName: Script_GameRules_GetRecentMap
* @NativeFunctionAddress 0000000140BC63F0
*/

string function GameRules_GetRecentMap(int)

/*
* @Breif Returns the most recent game modes loaded
* @Pramas int
* @NativeName: Script_GameRules_GetRecentGameMode
* @NativeFunctionAddress 0000000140BC6340
*/

string function GameRules_GetRecentGameMode(int)

/*
* @Breif Returns the most recent team scores
* @Pramas int, int
* @NativeName: Script_GameRules_GetRecentTeamScore
* @NativeFunctionAddress 0000000140BC6280
*/

int function GameRules_GetRecentTeamScore(int, int)

/*
* @Breif Set whether you want everyone to hear everyone else
* @Pramas bool
* @NativeName: Script_GameRules_EnableGlobalChat
* @NativeFunctionAddress 0000000140BC6240
*/

void function GameRules_EnableGlobalChat(bool)

/*
* @Breif Gets the unique ID for this match
* @Pramas 
* @NativeName: Script_GameRules_GetUniqueMatchID
* @NativeFunctionAddress 0000000140BC61E0
*/

string function GameRules_GetUniqueMatchID()

/*
* @Breif Set if dead players can only text chat with other dead players
* @Pramas bool
* @NativeName: Script_GameRules_SetDeadPlayersCanOnlySpeakToDeadPlayersInHudChat
* @NativeFunctionAddress 0000000140BC6180
*/

void function GameRules_SetDeadPlayersCanOnlySpeakToDeadPlayersInHudChat(bool)

/*
* @Breif Sends a group of players off to the party screen, possibly by allocating a server first
* @Pramas 
* @NativeName: SendPlayersToPartyScreen
* @NativeFunctionAddress 0000000140BC37B0
*/

void function SendPlayersToPartyScreen(var, var)

/*
* @Breif 
* @Pramas entity
* @NativeName: BeginPrivateMatchSearchForPlayer
* @NativeFunctionAddress 0000000140BC6100
*/

void function BeginPrivateMatchSearchForPlayer(entity)

/*
* @Breif Find a match for this player
* @Pramas entity
* @NativeName: MatchmakePlayer
* @NativeFunctionAddress 0000000140BC6060
*/

void function MatchmakePlayer(entity)

/*
* @Breif 
* @Pramas string, entity
* @NativeName: AbortMatchSearchesForPlayer
* @NativeFunctionAddress 0000000140BC5FF0
*/

void function AbortMatchSearchesForPlayer(string, entity)

/*
* @Breif Set max activity mode on the server (0,1,2)
* @Pramas int
* @NativeName: SetMaxActivityMode
* @NativeFunctionAddress 00000001407AEC60
*/

void function SetMaxActivityMode(int)

/*
* @Breif Call when a player is revived. ( CBaseEntity* playerRevived, CBaseEntity* reviver )
* @Pramas entity, entity
* @NativeName: Script_GameRules_OnPlayerGotRevived
* @NativeFunctionAddress 0000000140BC5F60
*/

void function GameRules_OnPlayerGotRevived(entity, entity)

/*
* @Breif Return the attacker that inflicted this damage
* @Pramas var
* @NativeName: Script_DamageInfo_GetAttacker
* @NativeFunctionAddress 0000000140BC5EF0
*/

entity function DamageInfo_GetAttacker(var)

/*
* @Breif Return the entity that inflicted this damage (projectile, etc...)
* @Pramas var
* @NativeName: Script_DamageInfo_GetInflictor
* @NativeFunctionAddress 0000000140BC5E80
*/

entity function DamageInfo_GetInflictor(var)

/*
* @Breif Return the weapon that the attacker was using
* @Pramas var
* @NativeName: Script_DamageInfo_GetWeapon
* @NativeFunctionAddress 0000000140BC5E10
*/

entity function DamageInfo_GetWeapon(var)

/*
* @Breif Return whether this damage should force a kill
* @Pramas var
* @NativeName: Script_DamageInfo_GetForceKill
* @NativeFunctionAddress 0000000140BC5D80
*/

bool function DamageInfo_GetForceKill(var)

/*
* @Breif Return the amount of damage
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamage
* @NativeFunctionAddress 0000000140BC5CA0
*/

float function DamageInfo_GetDamage(var)

/*
* @Breif Gets the scale that critical hit damage should be multiplied by.
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamageCriticalHitScale
* @NativeFunctionAddress 0000000140BC5BC0
*/

float function DamageInfo_GetDamageCriticalHitScale(var)

/*
* @Breif Gets the scale that damage to shields should be multiplied by
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamageShieldScale
* @NativeFunctionAddress 0000000140BC5AE0
*/

float function DamageInfo_GetDamageShieldScale(var)

/*
* @Breif Gets the world position where the damage was dealt
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamagePosition
* @NativeFunctionAddress 0000000140BC59D0
*/

vector function DamageInfo_GetDamagePosition(var)

/*
* @Breif Get the section group being damaged
* @Pramas var
* @NativeName: Script_DamageInfo_GetHitGroup
* @NativeFunctionAddress 0000000140BC58F0
*/

int function DamageInfo_GetHitGroup(var)

/*
* @Breif Get the section being damaged
* @Pramas var
* @NativeName: Script_DamageInfo_GetHitBox
* @NativeFunctionAddress 0000000140BC5810
*/

int function DamageInfo_GetHitBox(var)

/*
* @Breif Returns what death package you have set, if any.
* @Pramas var
* @NativeName: Script_DamageInfo_GetDeathPackage
* @NativeFunctionAddress 0000000140BC5770
*/

string function DamageInfo_GetDeathPackage(var)

/*
* @Breif Gets the code damage type
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamageType
* @NativeFunctionAddress 0000000140BC5690
*/

int function DamageInfo_GetDamageType(var)

/*
* @Breif Gets the damage type that was set by script when firing the weapon.
* @Pramas var
* @NativeName: Script_DamageInfo_GetCustomDamageType
* @NativeFunctionAddress 0000000140BC55B0
*/

int function DamageInfo_GetCustomDamageType(var)

/*
* @Breif Gets the damage source identifier that was set by script when this damage mechanism was created.
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamageSourceIdentifier
* @NativeFunctionAddress 0000000140BC54D0
*/

int function DamageInfo_GetDamageSourceIdentifier(var)

/*
* @Breif Gets the view punch multiplier
* @Pramas var
* @NativeName: Script_DamageInfo_GetViewPunchMultiplier
* @NativeFunctionAddress 0000000140BC5420
*/

float function DamageInfo_GetViewPunchMultiplier(var)

/*
* @Breif Get the distance from where the bullet/projectile was fired.
* @Pramas var
* @NativeName: Script_DamageInfo_GetDistFromAttackOrigin
* @NativeFunctionAddress 0000000140BC5340
*/

float function DamageInfo_GetDistFromAttackOrigin(var)

/*
* @Breif If it's a radius damage, gives the distance from the center of the blast. Otherwise defaults to zero.
* @Pramas var
* @NativeName: Script_DamageInfo_GetDistFromExplosionCenter
* @NativeFunctionAddress 0000000140BC5260
*/

float function DamageInfo_GetDistFromExplosionCenter(var)

/*
* @Breif Get damage force vector.
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamageForce
* @NativeFunctionAddress 0000000140BC5150
*/

vector function DamageInfo_GetDamageForce(var)

/*
* @Breif Get damage direction vector.
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamageForceDirection
* @NativeFunctionAddress 0000000140BC5040
*/

vector function DamageInfo_GetDamageForceDirection(var)

/*
* @Breif Checks if code is allowing this entity to ragdoll on death
* @Pramas var
* @NativeName: Script_DamageInfo_IsRagdollAllowed
* @NativeFunctionAddress 0000000140BC4FB0
*/

bool function DamageInfo_IsRagdollAllowed(var)

/*
* @Breif Get all DAMAGEFLAG_* flags.
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamageFlags
* @NativeFunctionAddress 0000000140BC4ED0
*/

int function DamageInfo_GetDamageFlags(var)

/*
* @Breif Returns true if contains all given DAMAGEFLAG_* flags.
* @Pramas var, int
* @NativeName: Script_DamageInfo_HasDamageFlags
* @NativeFunctionAddress 0000000140BC4E20
*/

bool function DamageInfo_HasDamageFlags(var, int)

/*
* @Breif Returns weapon name, even if weapon entity is gone
* @Pramas var
* @NativeName: Script_DamageInfo_GetDamageWeaponName
* @NativeFunctionAddress 0000000140BC4D50
*/

string ornull function DamageInfo_GetDamageWeaponName(var)

/*
* @Breif Returns if stats should be recorded for damage weapon
* @Pramas var
* @NativeName: Script_DamageInfo_ShouldRecordStatsForWeapon
* @NativeFunctionAddress 0000000140BC4CE0
*/

bool function DamageInfo_ShouldRecordStatsForWeapon(var)

/*
* @Breif Stores text for damage diagnostics
* @Pramas var, string
* @NativeName: Script_DamageInfo_Print
* @NativeFunctionAddress 0000000140BC4C60
*/

void function DamageInfo_Print(var, string)

/*
* @Breif Sets that damage was done for damage diagnostics
* @Pramas var, int
* @NativeName: Script_DamageInfo_SetDidDamage
* @NativeFunctionAddress 0000000140BC4C60
*/

void function DamageInfo_SetDidDamage(var, int)

/*
* @Breif Sets that damage was done for damage diagnostics
* @Pramas var
* @NativeName: Script_DamageInfo_FlagTypicalCase
* @NativeFunctionAddress 0000000140BC4C60
*/

void function DamageInfo_FlagTypicalCase(var)

/*
* @Breif Sets whether this damage should force a kill
* @Pramas var, bool
* @NativeName: DamageInfo_SetForceKill
* @NativeFunctionAddress 0000000140BC4BD0
*/

void function DamageInfo_SetForceKill(var, bool)

/*
* @Breif Set the amount of damage
* @Pramas var, float
* @NativeName: DamageInfo_SetDamage
* @NativeFunctionAddress 0000000140BC4B40
*/

void function DamageInfo_SetDamage(var, float)

/*
* @Breif Overrides the damage type that was set by script when firing the weapon.
* @Pramas var, int
* @NativeName: DamageInfo_SetCustomDamageType
* @NativeFunctionAddress 0000000140BC4AA0
*/

void function DamageInfo_SetCustomDamageType(var, int)

/*
* @Breif Add damage flag.
* @Pramas var, int
* @NativeName: DamageInfo_AddCustomDamageType
* @NativeFunctionAddress 0000000140BC4A00
*/

void function DamageInfo_AddCustomDamageType(var, int)

/*
* @Breif Remove damage flag.
* @Pramas var, int
* @NativeName: DamageInfo_RemoveCustomDamageType
* @NativeFunctionAddress 0000000140BC4960
*/

void function DamageInfo_RemoveCustomDamageType(var, int)

/*
* @Breif Sets the damage source identifier.
* @Pramas var, int
* @NativeName: DamageInfo_SetDamageSourceIdentifier
* @NativeFunctionAddress 0000000140BC48C0
*/

void function DamageInfo_SetDamageSourceIdentifier(var, int)

/*
* @Breif Set what death (anim) package to use if this damage kills the guy.
* @Pramas var, string
* @NativeName: DamageInfo_SetDeathPackage
* @NativeFunctionAddress 0000000140BC4840
*/

void function DamageInfo_SetDeathPackage(var, string)

/*
* @Breif Set damage force magnitude.
* @Pramas var, float
* @NativeName: DamageInfo_SetDamageForceMagnitude
* @NativeFunctionAddress 0000000140BC47B0
*/

void function DamageInfo_SetDamageForceMagnitude(var, float)

/*
* @Breif Set damage force direction.
* @Pramas var, vector
* @NativeName: DamageInfo_SetDamageForceDirection
* @NativeFunctionAddress 0000000140BC4730
*/

void function DamageInfo_SetDamageForceDirection(var, vector)

/*
* @Breif Set damage force vector.
* @Pramas var, vector
* @NativeName: DamageInfo_SetDamageForce
* @NativeFunctionAddress 0000000140BC46A0
*/

void function DamageInfo_SetDamageForce(var, vector)

/*
* @Breif Set damage force magnitude and direction.
* @Pramas var, float, vector
* @NativeName: DamageInfo_SetDamageForce2
* @NativeFunctionAddress 0000000140BC4610
*/

void function DamageInfo_SetDamageForce2(var, float, vector)

/*
* @Breif Set which direction the target should flinch in.
* @Pramas var, int
* @NativeName: DamageInfo_SetFlinchDirection
* @NativeFunctionAddress 0000000140BC4580
*/

void function DamageInfo_SetFlinchDirection(var, int)

/*
* @Breif Add a DAMAGEFLAG_* flag.
* @Pramas var, int
* @NativeName: Script_DamageInfo_AddDamageFlags
* @NativeFunctionAddress 0000000140BC44E0
*/

void function DamageInfo_AddDamageFlags(var, int)

/*
* @Breif Returns an arbitrary NPC that is selected i.e. npc_select
* @Pramas 
* @NativeName: GetSelectedNPC
* @NativeFunctionAddress 0000000140D260C0
*/

entity function GetSelectedNPC()

/*
* @Breif Returns true if the map's AIN file is up-to-date.
* @Pramas 
* @NativeName: AINFileIsUpToDate
* @NativeFunctionAddress 0000000140D26070
*/

bool function AINFileIsUpToDate()

/*
* @Breif Returns AIN file exists
* @Pramas 
* @NativeName: AINExists
* @NativeFunctionAddress 0000000140D26020
*/

bool function AINExists()

/*
* @Breif Set the maximum distance for considering search paths
* @Pramas float
* @NativeName: NPCSetSearchPathUseDist
* @NativeFunctionAddress 0000000140D25FC0
*/

void function NPCSetSearchPathUseDist(float)

/*
* @Breif Get the maximum distance for considering search paths
* @Pramas 
* @NativeName: NPCGetSearchPathUseDist
* @NativeFunctionAddress 0000000140D25F20
*/

float function NPCGetSearchPathUseDist()

/*
* @Breif Sets how long it takes AI cone to focus to values in weapon settings, and how much to increase cone by when not focused
* @Pramas float, float
* @NativeName: NPCSetAimConeFocusParams
* @NativeFunctionAddress 0000000140D25E60
*/

void function NPCSetAimConeFocusParams(float, float)

/*
* @Breif Sets how long it takes AI spread pattern to focus to values in weapon settings, and also for when the AI is not in players FOV, and multiplier for not in FOV
* @Pramas float, float, float
* @NativeName: NPCSetAimPatternFocusParams
* @NativeFunctionAddress 0000000140D25DC0
*/

void function NPCSetAimPatternFocusParams(float, float, float)

/*
* @Breif Sets how long it takes AI to not see enemy before considering enemy to be reacquired. Set time to prevent reacquire if AI has been suppressing enemy
* @Pramas float, float
* @NativeName: NPCSetReacquireParams
* @NativeFunctionAddress 0000000140D25D40
*/

void function NPCSetReacquireParams(float, float)

/*
* @Breif Sets distance and member percent fraction (0 - 1) for not using flanking
* @Pramas string, float, float
* @NativeName: NPCSetSquadNoFlankThreshold
* @NativeFunctionAddress 0000000140D25CC0
*/

void function NPCSetSquadNoFlankThreshold(string, float, float)

/*
* @Breif Creates an empty NPC Squad
* @Pramas string
* @NativeName: CreateNPCSquad
* @NativeFunctionAddress 0000000140D25C30
*/

void function CreateNPCSquad(string)

/*
* @Breif Gets the nearest node to a position
* @Pramas vector
* @NativeName: NavMeshNode_GetNearestNodeToPos
* @NativeFunctionAddress 0000000140D25B90
*/

int function NavMeshNode_GetNearestNodeToPos(vector)

/*
* @Breif Gets the best node in a wedge shape, taking distance from a given point into account, that has the given script data bits set
* @Pramas vector, vector, float, float, float, float, int, int
* @NativeName: NavMeshNode_GetBestNodeForPosInWedge
* @NativeFunctionAddress 0000000140D25A40
*/

int function NavMeshNode_GetBestNodeForPosInWedge(vector, vector, float, float, float, float, int, int)

/*
* @Breif Gets the best node closest to an origin, that has the given script data bits set
* @Pramas vector, int, int
* @NativeName: NavMeshNode_GetBestNodeForPos
* @NativeFunctionAddress 0000000140D25980
*/

int function NavMeshNode_GetBestNodeForPos(vector, int, int)

/*
* @Breif Gets a list of valid data slots for the node in given range( dataSlotsCount slots starting from dataSlotsStart).
* @Pramas int nodeIndex, int dataSlotsStart, int dataSlotsCount
* @NativeName: NavmeshNode_GetValidDataSlots
* @NativeFunctionAddress 0000000140D10730
*/

var function NavmeshNode_GetValidDataSlots()

/*
* @Breif Gets the position of a node
* @Pramas int
* @NativeName: NavMeshNode_GetNodePos
* @NativeFunctionAddress 0000000140D25860
*/

vector function NavMeshNode_GetNodePos(int)

/*
* @Breif Gets the number of nodes in the level
* @Pramas 
* @NativeName: NavMeshNode_GetNodeCount
* @NativeFunctionAddress 0000000140D257B0
*/

int function NavMeshNode_GetNodeCount()

/*
* @Breif Returns boolean data on an AI node at a given slot
* @Pramas int, int
* @NativeName: NavMeshNode_GetBooleanData
* @NativeFunctionAddress 0000000140D25730
*/

bool function NavMeshNode_GetBooleanData(int, int)

/*
* @Breif Sets boolean data on an AI node at a given slot
* @Pramas int, int, bool
* @NativeName: NavMeshNode_SetBooleanData
* @NativeFunctionAddress 0000000140D256B0
*/

void function NavMeshNode_SetBooleanData(int, int, bool)

/*
* @Breif Returns what the currently loaded AINs script version is
* @Pramas 
* @NativeName: GetAINScriptVersion
* @NativeFunctionAddress 0000000140D25600
*/

int function GetAINScriptVersion()

/*
* @Breif Sets what the currently loaded AINs script version is for later serialization to file
* @Pramas int
* @NativeName: SetAINScriptVersion
* @NativeFunctionAddress 0000000140D25550
*/

void function SetAINScriptVersion(int)

/*
* @Breif Returns true if the map's navmesh is up-to-date.
* @Pramas 
* @NativeName: NavMesh_IsUpToDate
* @NativeFunctionAddress 0000000140D254E0
*/

bool function NavMesh_IsUpToDate()

/*
* @Breif Clamps a goal point to the NavMesh for a given AI. Uses AIs hull size as test extents
* @Pramas vector pointToClamp, entity contextAI
* @NativeName: NavMesh_ClampPointForAI
* @NativeFunctionAddress 0000000140D10770
*/

var function NavMesh_ClampPointForAI()

/*
* @Breif Clamps a goal point to the NavMesh for a given AI. As extents increase in size more possible clamp positions become available, but too large and the clamped position may be very far from the original point
* @Pramas vector pointToClamp, entity contextAI, vector extents
* @NativeName: NavMesh_ClampPointForAIWithExtents
* @NativeFunctionAddress 0000000140D107B0
*/

var function NavMesh_ClampPointForAIWithExtents()

/*
* @Breif Clamps a goal point to the NavMesh for a given hull
* @Pramas vector pointToClamp, int hull
* @NativeName: NavMesh_ClampPointForHull
* @NativeFunctionAddress 0000000140D107F0
*/

var function NavMesh_ClampPointForHull()

/*
* @Breif Clamps a goal point to the NavMesh for a given hull. As extents increase in size more possible clamp positions become available, but too large and the clamped position may be very far from the original point
* @Pramas vector pointToClamp, int hull, vector extents
* @NativeName: NavMesh_ClampPointForHullWithExtents
* @NativeFunctionAddress 0000000140D10830
*/

var function NavMesh_ClampPointForHullWithExtents()

/*
* @Breif Get nearby ground positions by following the NavMesh graph
* @Pramas vector startPos, int hull, int numPositionsRequested
* @NativeName: NavMesh_GetNeighborPositions
* @NativeFunctionAddress 0000000140D10870
*/

var function NavMesh_GetNeighborPositions()

/*
* @Breif Get n ( < 64) ground positions around a spot within minDist and maxDist
* @Pramas vector startPos, int hull, int numPositionsRequested, float minDist, float maxDist
* @NativeName: NavMesh_RandomPositions
* @NativeFunctionAddress 0000000140D108B0
*/

var function NavMesh_RandomPositions()

/*
* @Breif Get upto n ground positions around a spot within minDist and maxDist. Gets center of random polygons
* @Pramas vector startPos, int hull, int numPositionsRequested, float minDist, float maxDist
* @NativeName: NavMesh_RandomPositions_LargeArea
* @NativeFunctionAddress 0000000140D108F0
*/

var function NavMesh_RandomPositions_LargeArea()

/*
* @Breif Finds a path from startPos to goalPos using the navmesh for hullType. If both ends are valid but no path exists, it returns the closest path found. Returns a result struct with the centers of the polygons of the path, which may not match the path an AI unit would take. Long paths may be truncated.
* @Pramas vector startPos, int hull, vector goalPos
* @NativeName: NavMesh_FindMeshPath
* @NativeFunctionAddress 0000000140D10930
*/

var function NavMesh_FindMeshPath()

/*
* @Breif Return if a position is reachable for an AI from it's current position. Only checks static pathing.
* @Pramas entity, vector
* @NativeName: NavMesh_IsPosReachableForAI
* @NativeFunctionAddress 0000000140D25420
*/

bool function NavMesh_IsPosReachableForAI(entity, vector)

/*
* @Breif Get minimum bounds for a HULL type
* @Pramas int
* @NativeName: ScriptGetBoundsMin
* @NativeFunctionAddress 0000000140D25320
*/

vector function GetBoundsMin(int)

/*
* @Breif Get maximum bounds for a HULL type
* @Pramas int
* @NativeName: ScriptGetBoundsMax
* @NativeFunctionAddress 0000000140D25220
*/

vector function GetBoundsMax(int)

/*
* @Breif Gets the number of members in a squad
* @Pramas string
* @NativeName: GetNPCSquadSize
* @NativeFunctionAddress 0000000140D25150
*/

int function GetNPCSquadSize(string)

/*
* @Breif Set squad mode
* @Pramas string, int
* @NativeName: SetNPCSquadMode
* @NativeFunctionAddress 0000000140D250A0
*/

void function SetNPCSquadMode(string, int)

/*
* @Breif Get array of all NPCs of squad
* @Pramas string squadname
* @NativeName: ScriptGetNPCArrayBySquad
* @NativeFunctionAddress 0000000140D10970
*/

var function GetNPCArrayBySquad()

/*
* @Breif Get a dump of enemies from all teammate AI
* @Pramas entity
* @NativeName: UpdateEnemyMemoryFromTeammates
* @NativeFunctionAddress 0000000140D25040
*/

void function UpdateEnemyMemoryFromTeammates(entity)

/*
* @Breif Get all enemy information within radius
* @Pramas entity, float
* @NativeName: UpdateEnemyMemoryWithinRadius
* @NativeFunctionAddress 0000000140D24FC0
*/

void function UpdateEnemyMemoryWithinRadius(entity, float)

/*
* @Breif Enable or disable AI in the level
* @Pramas bool
* @NativeName: SetEnableNPCs
* @NativeFunctionAddress 0000000140D24F60
*/

void function SetEnableNPCs(bool)

/*
* @Breif Enable or disable pathing for collision of an entity
* @Pramas entity, bool
* @NativeName: ToggleNPCPathsForEntity
* @NativeFunctionAddress 0000000140D24ED0
*/

void function ToggleNPCPathsForEntity(entity, bool)

/*
* @Breif Transition pathing from moving collision to end state of the moving collision or vice versa
* @Pramas entity, bool
* @NativeName: TransitionNPCPathsForEntity
* @NativeFunctionAddress 0000000140D24E60
*/

void function TransitionNPCPathsForEntity(entity, bool)

/*
* @Breif Initialize distance to nearest hard point
* @Pramas 
* @NativeName: AISkit_SetDistancesToClosestHardpoints
* @NativeFunctionAddress 0000000140D24E20
*/

void function SkitSetDistancesToClosestHarpoints()

/*
* @Breif Get skit nodes sorted by nearest to average player position with some randomization
* @Pramas 
* @NativeName: GetSkitNodeArray_NearPlayers
* @NativeFunctionAddress 0000000140D109B0
*/

var function GetSkitNodeArray_NearPlayers()

/*
* @Breif Get skit nodes sorted by nearest to hardpoints with some randomization
* @Pramas 
* @NativeName: GetSkitNodeArray_NearHardpoints
* @NativeFunctionAddress 0000000140D10BA0
*/

var function GetSkitNodeArray_NearHardpoints()

/*
* @Breif Get skit nodes sorted by nearest to pos with some randomization
* @Pramas 
* @NativeName: GetSkitNodeArray_NearPos
* @NativeFunctionAddress 0000000140D10BE0
*/

var function GetSkitNodeArray_NearPos()

/*
* @Breif Create a known dangerous area that AI should avoid if necessary. The lifetime of the danger is tied to an entity
* @Pramas entity lifetimeEnt, entity weaponOrProjectile, float radius, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor
* @NativeName: AI_CreateDangerousAreaScript
* @NativeFunctionAddress 0000000140D10C40
*/

var function AI_CreateDangerousArea()

/*
* @Breif Same as AI_CreateDangerousArea except the origin is always in a single place
* @Pramas entity lifetimeEnt, entity weaponOrProjectile, float radius, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor, vector staticOrigin
* @NativeName: AI_CreateDangerousArea_StaticScript
* @NativeFunctionAddress 0000000140D10CA0
*/

var function AI_CreateDangerousArea_Static()

/*
* @Breif Create dangerous area using damage def
* @Pramas int damageDef, entity lifetimeEnt, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor
* @NativeName: AI_CreateDangerousArea_DamageDef
* @NativeFunctionAddress 0000000140D24D60
*/

void function AI_CreateDangerousArea_DamageDef(int damageDef, entity lifetimeEnt, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor)

/*
* @Breif Dropped weapons disappear after this much time
* @Pramas float
* @NativeName: Weapon_SetDespawnTime
* @NativeFunctionAddress 00000001410291B0
*/

void function Weapon_SetDespawnTime(float)

/*
* @Breif Set a source for a lock-on warning
* @Pramas entity, entity, float
* @NativeName: Script_SmartAmmo_Server_SetCustomFractionSource
* @NativeFunctionAddress 00000001410473F0
*/

void function SmartAmmo_SetCustomFractionSource(entity, entity, float)

/*
* @Breif Clear a source for a lock-on warning. Pass in null for target player to clear all lock-on warnings for the given source.
* @Pramas entity, entity
* @NativeName: Script_SmartAmmo_Server_ClearCustomFractionSource
* @NativeFunctionAddress 0000000141047320
*/

void function SmartAmmo_ClearCustomFractionSource(entity, entity)

/*
* @Breif Get the current fraction value for the given source and target
* @Pramas entity, entity
* @NativeName: Script_SmartAmmo_Server_GetCustomFractionSource
* @NativeFunctionAddress 0000000141047240
*/

float function SmartAmmo_GetCustomFractionSource(entity, entity)

/*
* @Breif 
* @Pramas entity, float, float, float
* @NativeName: Freefall_ShouldBeInLandingMode_Script
* @NativeFunctionAddress 0000000140C8CFB0
*/

bool function Freefall_ShouldBeInLandingMode(entity, float, float, float)

/*
* @Breif 
* @Pramas vector origin, vector angles, entity ownerEnt, asset turretModel, string turretSettingsName
* @NativeName: Script_CreateTurretEnt
* @NativeFunctionAddress 0000000140FE1BE0
*/

entity function CreateTurretEnt(vector origin, vector angles, entity ownerEnt, asset turretModel, string turretSettingsName)

/*
* @Breif 
* @Pramas vector origin, vector angles, entity ownerEnt, asset model
* @NativeName: Script_CreateControlPanelEnt
* @NativeFunctionAddress 0000000140FE1B60
*/

entity function CreateControlPanelEnt(vector origin, vector angles, entity ownerEnt, asset model)

/*
* @Breif Get array of spawners matching a class name
* @Pramas string name
* @NativeName: GetSpawnerArrayByClassName
* @NativeFunctionAddress 0000000140E5D0E0
*/

var function GetSpawnerArrayByClassName()

/*
* @Breif Get array of spawners matching a script name
* @Pramas string name
* @NativeName: GetSpawnerArrayByScriptName
* @NativeFunctionAddress 0000000140E5D280
*/

var function GetSpawnerArrayByScriptName()

/*
* @Breif Get spawner matching the given script name. It will script error if no spawner is found or more than one entity is found.
* @Pramas string
* @NativeName: GetSpawnerByScriptName
* @NativeFunctionAddress 0000000140E67F40
*/

entity function GetSpawnerByScriptName(string)

/*
* @Breif Start monitoring a player for threat against them and generating script callbacks when threatened. If exclusiveThreatTypes array is empty then consider all threats, otherwise only consider the threat types in the array
* @Pramas entity player, array< int > exclusiveThreatTypes
* @NativeName: StartMonitoringPlayer
* @NativeFunctionAddress 0000000140E5D5C0
*/

var function ThreatDetection_StartMonitoringPlayer()

/*
* @Breif 
* @Pramas entity player
* @NativeName: StopMonitoringPlayer
* @NativeFunctionAddress 0000000140E5D600
*/

var function ThreatDetection_StopMonitoringPlayer()

/*
* @Breif If lifespan is 0 then it must be removed manually
* @Pramas int threatType, vector origin, float height, float radius, float durationUntilActive, float decayScalar, int team, float lifespan, entity owner
* @NativeName: CreateThreatZoneCylinder
* @NativeFunctionAddress 0000000140E5D790
*/

var function ThreatDetection_CreateThreatZoneCylinder()

/*
* @Breif 
* @Pramas int zoneID, vector origin
* @NativeName: UpdateThreatZoneOrigin
* @NativeFunctionAddress 0000000140E5D7D0
*/

var function ThreatDetection_UpdateThreatZoneOrigin()

/*
* @Breif Can only remove zones with 0 lifespan
* @Pramas int zoneID
* @NativeName: RemoveThreatZone
* @NativeFunctionAddress 0000000140E5D980
*/

var function ThreatDetection_RemoveThreatZone()

/*
* @Breif Play a first-person animation.
* @Pramas entity, string
* @NativeName: ScriptPlayFirstPersonAnimation
* @NativeFunctionAddress 0000000140E61490
*/

void function PlayFirstPersonAnimation(entity, string)

/*
* @Breif Returns true if given player is playing a first-person animation only.
* @Pramas entity
* @NativeName: ScriptIsPlayingFirstPersonAnimation
* @NativeFunctionAddress 0000000140E613D0
*/

bool function IsPlayingFirstPersonAnimation(entity)

/*
* @Breif Play a first-person animation.
* @Pramas entity, string
* @NativeName: ScriptPlayThirdPersonAnimation
* @NativeFunctionAddress 0000000140E61360
*/

void function PlayThirdPersonAnimation(entity, string)

/*
* @Breif Returns true if given player is playing a third-person animation only.
* @Pramas entity
* @NativeName: ScriptIsPlayingThirdPersonAnimation
* @NativeFunctionAddress 0000000140E612F0
*/

bool function IsPlayingThirdPersonAnimation(entity)

/*
* @Breif Play a first-person and third-person animation.
* @Pramas entity, string, string
* @NativeName: ScriptPlayFirstAndThirdPersonAnimation
* @NativeFunctionAddress 0000000140E61280
*/

void function PlayFirstAndThirdPersonAnimation(entity, string, string)

/*
* @Breif Returns true if given player is playing a first-person and third-person animation.
* @Pramas entity
* @NativeName: ScriptIsPlayingFirstAndThirdPersonAnimation
* @NativeFunctionAddress 0000000140E611C0
*/

bool function IsPlayingFirstAndThirdPersonAnimation(entity)

/*
* @Breif Play a first-person and third-person animation while parented to something.
* @Pramas entity, entity, string, string, string
* @NativeName: ScriptPlayParentedFirstAndThirdPersonAnimation
* @NativeFunctionAddress 0000000140E61100
*/

void function PlayParentedFirstAndThirdPersonAnimation(entity, entity, string, string, string)

/*
* @Breif Returns true if given player is playing a first-person and third-person animation while parented to something.
* @Pramas entity
* @NativeName: ScriptIsPlayingParentedFirstAndThirdPersonAnimation
* @NativeFunctionAddress 0000000140E61040
*/

bool function IsPlayingParentedFirstAndThirdPersonAnimation(entity)

/*
* @Breif Stop playing scripted first-person and/or third-person animation on the player.
* @Pramas entity
* @NativeName: ScriptStopPlayingAnimation
* @NativeFunctionAddress 0000000140E60FE0
*/

void function StopPlayingAnimation(entity)

/*
* @Breif 
* @Pramas entity, bool
* @NativeName: ScriptCreatePlayAnimationEntityBlocker
* @NativeFunctionAddress 0000000140E60F20
*/

void function CreatePlayAnimationEntityBlocker(entity, bool)

/*
* @Breif 
* @Pramas entity
* @NativeName: ScriptDestroyPlayAnimationEntityBlocker
* @NativeFunctionAddress 0000000140E60E80
*/

void function DestroyPlayAnimationEntityBlocker(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetHealth
* @NativeFunctionAddress 0000000140D1D4E0
*/

int function GetHealth()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMaxHealth
* @NativeFunctionAddress 0000000140D1D430
*/

int function GetMaxHealth()

/*
* @Breif 
* @Pramas int
* @NativeName: ScriptSetHealth
* @NativeFunctionAddress 0000000140D1D3C0
*/

void function SetHealth(int)

/*
* @Breif 
* @Pramas int
* @NativeName: ScriptSetMaxHealth
* @NativeFunctionAddress 0000000140D1D350
*/

void function SetMaxHealth(int)

/*
* @Breif ( int damage, attacker, inflictor, additionalParams ) - Deals damage to the entity. Additional params table can contain: weapon, origin, force, forceKill, scriptType, damageSourceId, attackerClass, meleeAttack, meleeExecution, hitbox
* @Pramas int, entity, entity, var
* @NativeName: ScriptTakeDamage
* @NativeFunctionAddress 0000000140D1D270
*/

void function TakeDamage(int, entity, entity, var)

/*
* @Breif Is this entity alive?
* @Pramas 
* @NativeName: ScriptIsAlive
* @NativeFunctionAddress 0000000140D1D200
*/

bool function IsEntAlive()

/*
* @Breif Get the entity's armor type
* @Pramas 
* @NativeName: ScriptGetArmorType
* @NativeFunctionAddress 0000000140D1D150
*/

int function GetArmorType()

/*
* @Breif 
* @Pramas bool
* @NativeName: ScriptSetPassDamageToParent
* @NativeFunctionAddress 0000000140D1D0C0
*/

void function SetPassDamageToParent(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetPassDamageToParent
* @NativeFunctionAddress 0000000140D1D060
*/

bool function GetPassDamageToParent()

/*
* @Breif Set the file path of the model
* @Pramas asset
* @NativeName: ScriptSetModel
* @NativeFunctionAddress 0000000140D1CFF0
*/

bool function SetModel(asset)

/*
* @Breif Sets the entity's hold use and press use prompts.
* @Pramas string, string
* @NativeName: SetUsePrompts
* @NativeFunctionAddress 0000000140D1CF80
*/

void function SetUsePrompts(string, string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetNoTarget
* @NativeFunctionAddress 0000000140D1CF10
*/

bool function GetNoTarget()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetNoTarget
* @NativeFunctionAddress 0000000140D1CE70
*/

void function SetNoTarget(bool)

/*
* @Breif Get whether the smart ammo system can see this target
* @Pramas 
* @NativeName: GetNoTargetSmartAmmo
* @NativeFunctionAddress 0000000140D1CE00
*/

bool function GetNoTargetSmartAmmo()

/*
* @Breif Set whether the smart ammo system can see this target
* @Pramas bool
* @NativeName: SetNoTargetSmartAmmo
* @NativeFunctionAddress 0000000140D1CD60
*/

void function SetNoTargetSmartAmmo(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsDraw
* @NativeFunctionAddress 0000000140D1CCF0
*/

bool function IsDraw()

/*
* @Breif Returns true if solid entity
* @Pramas 
* @NativeName: IsSolid
* @NativeFunctionAddress 0000000140D1CC60
*/

bool function IsSolid()

/*
* @Breif Returns the name of the model
* @Pramas 
* @NativeName: ScriptGetModelName
* @NativeFunctionAddress 0000000140D1CBD0
*/

asset function GetModelName()

/*
* @Breif Returns Body group name from the hitboxid.
* @Pramas int
* @NativeName: GetBodygroupNameFromHitboxId
* @NativeFunctionAddress 0000000140D1CB20
*/

string ornull function GetBodygroupNameFromHitboxId(int)

/*
* @Breif Avoid using outside of debug code.
* @Pramas 
* @NativeName: GetClassname
* @NativeFunctionAddress 0000000140D1CA90
*/

string function GetCodeClassName()

/*
* @Breif Reliably returns server-side class name
* @Pramas 
* @NativeName: GetClassname
* @NativeFunctionAddress 0000000140D1CA90
*/

string function GetClassName()

/*
* @Breif Works on both server and client. Can return null.
* @Pramas 
* @NativeName: ScriptGetSignifierName
* @NativeFunctionAddress 0000000140D1CA00
*/

string ornull function GetNetworkedClassName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetEntityNameAsCStr
* @NativeFunctionAddress 0000000140D1C970
*/

string function GetTargetName()

/*
* @Breif Returns the script_name for this entity
* @Pramas 
* @NativeName: GetScriptName
* @NativeFunctionAddress 0000000140D1C8E0
*/

string function GetScriptName()

/*
* @Breif Sets the script_name for this entity
* @Pramas string
* @NativeName: SetScriptName
* @NativeFunctionAddress 0000000140D1C6C0
*/

void function SetScriptName(string)

/*
* @Breif Returns the instance_name for this entity
* @Pramas 
* @NativeName: GetInstanceName
* @NativeFunctionAddress 0000000140D1C630
*/

string function GetInstanceName()

/*
* @Breif Get the entity name stripped of template unique decoration
* @Pramas 
* @NativeName: GetPreTemplateName
* @NativeFunctionAddress 0000000140D1C5A0
*/

string function GetPreTemplateName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsOrigin
* @NativeFunctionAddress 0000000140D1C520
*/

vector function GetOrigin()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalOrigin
* @NativeFunctionAddress 0000000140D1C4C0
*/

vector function GetLocalOrigin()

/*
* @Breif Sets the position of the entity
* @Pramas vector
* @NativeName: ScriptSetOrigin
* @NativeFunctionAddress 0000000140D1C460
*/

void function SetOrigin(vector)

/*
* @Breif Sets the position of the entity relative to the world, regardless of parent orientation
* @Pramas vector
* @NativeName: ScriptSetAbsOrigin
* @NativeFunctionAddress 0000000140D1C400
*/

void function SetAbsOrigin(vector)

/*
* @Breif Sets the position of the entity relative to the world, regardless of parent orientation. Does it by smoothly interpolating the entity to the new location.
* @Pramas vector
* @NativeName: ScriptSetAbsOriginSmooth
* @NativeFunctionAddress 0000000140D1C3A0
*/

void function SetAbsOriginSmooth(vector)

/*
* @Breif Like SetAbsOrigin(), except it will not do any blending/lerping to the new location
* @Pramas vector
* @NativeName: ScriptSnapToAbsOrigin
* @NativeFunctionAddress 0000000140D1C340
*/

void function SnapToAbsOrigin(vector)

/*
* @Breif Sets the position of the entity relative to its parent
* @Pramas vector
* @NativeName: ScriptSetLocalOrigin
* @NativeFunctionAddress 0000000140D1C2E0
*/

void function SetLocalOrigin(vector)

/*
* @Breif Get the forward vector of the entity
* @Pramas 
* @NativeName: ScriptGetForward
* @NativeFunctionAddress 0000000140D1C200
*/

vector function GetForwardVector()

/*
* @Breif Get the right vector of the entity
* @Pramas 
* @NativeName: ScriptGetRight
* @NativeFunctionAddress 0000000140D1C120
*/

vector function GetRightVector()

/*
* @Breif Get the up vector of the entity
* @Pramas 
* @NativeName: ScriptGetUp
* @NativeFunctionAddress 0000000140D1C040
*/

vector function GetUpVector()

/*
* @Breif Set the orientation of the entity to have this forward vector
* @Pramas vector
* @NativeName: ScriptSetForward
* @NativeFunctionAddress 0000000140D1BFE0
*/

void function SetForwardVector(vector)

/*
* @Breif Set the orientation of the entity to have this forward vector relative to the world, regardless of parent orientation
* @Pramas vector
* @NativeName: ScriptSetAbsForward
* @NativeFunctionAddress 0000000140D1BFE0
*/

void function SetAbsForwardVector(vector)

/*
* @Breif Set the orientation of the entity to have this forward vector relative to its parent
* @Pramas vector
* @NativeName: ScriptSetLocalForward
* @NativeFunctionAddress 0000000140D1BF80
*/

void function SetLocalForwardVector(vector)

/*
* @Breif Set the orientation of the entity to have this forward vector, based on the given up vector
* @Pramas vector, vector
* @NativeName: ScriptSetForwardWithUp
* @NativeFunctionAddress 0000000140D1BF20
*/

void function SetForwardVectorWithUp(vector, vector)

/*
* @Breif Set the orientation of the entity to have this forward vector, based on the given up vector, relative to its parent
* @Pramas vector, vector
* @NativeName: ScriptSetLocalForwardWithUp
* @NativeFunctionAddress 0000000140D1BEC0
*/

void function SetLocalForwardVectorWithUp(vector, vector)

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsVelocity
* @NativeFunctionAddress 0000000140D1BE40
*/

vector function GetVelocity()

/*
* @Breif Get velocity that is weighted averaged with previous velocity
* @Pramas 
* @NativeName: GetSmoothedVelocity
* @NativeFunctionAddress 0000000140D1BD70
*/

vector function GetSmoothedVelocity()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalVelocity
* @NativeFunctionAddress 0000000140D1BD10
*/

vector function GetLocalVelocity()

/*
* @Breif 
* @Pramas vector
* @NativeName: ScriptSetAbsVelocity
* @NativeFunctionAddress 0000000140D1BCB0
*/

void function SetVelocity(vector)

/*
* @Breif Gets the "base" velocity, typically given to an entity from the last pusher it touched.
* @Pramas 
* @NativeName: GetBaseVelocity
* @NativeFunctionAddress 0000000140D1BC50
*/

vector function GetBaseVelocity()

/*
* @Breif Sets the "base" velocity, typically given to an entity from the last pusher it touched.
* @Pramas vector
* @NativeName: SetBaseVelocity
* @NativeFunctionAddress 0000000140D1BB90
*/

void function SetBaseVelocity(vector)

/*
* @Breif Set the local angular velocity - takes float pitch,yaw,roll velocities
* @Pramas float, float, float
* @NativeName: ScriptSetLocalAngularVelocity
* @NativeFunctionAddress 0000000140D1BAD0
*/

void function SetAngularVelocity(float, float, float)

/*
* @Breif Get the local angular velocity - returns a vector of pitch,yaw,roll
* @Pramas 
* @NativeName: ScriptGetLocalAngularVelocity
* @NativeFunctionAddress 0000000140D1BA70
*/

vector function GetAngularVelocity()

/*
* @Breif Get vector to center of object - absolute coords
* @Pramas 
* @NativeName: RenderedWorldSpaceCenter
* @NativeFunctionAddress 0000000140D1B9A0
*/

vector function GetCenter()

/*
* @Breif Get vector to eye position - absolute coords
* @Pramas 
* @NativeName: ScriptEyePosition
* @NativeFunctionAddress 0000000140D1B8C0
*/

vector function EyePosition()

/*
* @Breif The the position between the entity's eyes.
* @Pramas 
* @NativeName: PositionBetweenEyes
* @NativeFunctionAddress 0000000140D1B7F0
*/

vector function ShipHack_PositionBetweenEyes()

/*
* @Breif Set entity pitch, yaw, roll
* @Pramas vector
* @NativeName: ScriptSetAngles
* @NativeFunctionAddress 0000000140D1B790
*/

void function SetAngles(vector)

/*
* @Breif Set entity pitch, yaw, roll relative to world, regardless of parent orientation
* @Pramas vector
* @NativeName: ScriptSetAbsAngles
* @NativeFunctionAddress 0000000140D1B790
*/

void function SetAbsAngles(vector)

/*
* @Breif Set entity pitch, yaw, roll relative to world, regardless of parent orientation. Will smoothly interpolate to the new angles.
* @Pramas vector
* @NativeName: ScriptSetAbsAnglesSmooth
* @NativeFunctionAddress 0000000140D1B730
*/

void function SetAbsAnglesSmooth(vector)

/*
* @Breif Set entity pitch, yaw, roll relative to parent
* @Pramas vector
* @NativeName: ScriptSetLocalAngles
* @NativeFunctionAddress 0000000140D1B6D0
*/

void function SetLocalAngles(vector)

/*
* @Breif Get entity pitch, yaw, roll as a vector
* @Pramas 
* @NativeName: ScriptGetAngles
* @NativeFunctionAddress 0000000140D1B600
*/

vector function GetAngles()

/*
* @Breif Get entity pitch, yaw, roll as a vector relative to parent
* @Pramas 
* @NativeName: ScriptGetLocalAngles
* @NativeFunctionAddress 0000000140D1B530
*/

vector function GetLocalAngles()

/*
* @Breif Get eye angles
* @Pramas 
* @NativeName: ScriptEyeAngles
* @NativeFunctionAddress 0000000140D1B460
*/

vector function EyeAngles()

/*
* @Breif 
* @Pramas vector, vector
* @NativeName: ScriptSetSize
* @NativeFunctionAddress 0000000140D1B3F0
*/

void function SetSize(vector, vector)

/*
* @Breif Get a vector containing min bounds, centered on object
* @Pramas 
* @NativeName: Script_GetBoundingMins
* @NativeFunctionAddress 0000000140D1B320
*/

vector function GetBoundingMins()

/*
* @Breif Get a vector containing max bounds, centered on object
* @Pramas 
* @NativeName: Script_GetBoundingMaxs
* @NativeFunctionAddress 0000000140D1B250
*/

vector function GetBoundingMaxs()

/*
* @Breif Returns minimum bounds in world-space. This takes into account all movement of the current animation.
* @Pramas 
* @NativeName: WorldSpaceSurroundingMins
* @NativeFunctionAddress 0000000140D1B180
*/

vector function WorldSpaceSurroundingMins()

/*
* @Breif Returns maximum bounds in world-space. This takes into account all movement of the current animation.
* @Pramas 
* @NativeName: WorldSpaceSurroundingMaxs
* @NativeFunctionAddress 0000000140D1B0B0
*/

vector function WorldSpaceSurroundingMaxs()

/*
* @Breif Sets whether this entity will block AI LOS
* @Pramas bool
* @NativeName: SetBlocksLOS
* @NativeFunctionAddress 0000000140D1B040
*/

void function SetBlocksLOS(bool)

/*
* @Breif Gets whether this entity will block AI LOS
* @Pramas 
* @NativeName: BlocksLOS
* @NativeFunctionAddress 0000000140D1AFD0
*/

bool function GetBlocksLOS()

/*
* @Breif Sets whether this entity will block radius damage. An entity may block radius damage for other reasons, but setting this flag ensures that it will.
* @Pramas bool
* @NativeName: SetBlocksRadiusDamage
* @NativeFunctionAddress 0000000140D1AF60
*/

void function SetBlocksRadiusDamage(bool)

/*
* @Breif Gets whether this flag is set.
* @Pramas 
* @NativeName: GetBlocksRadiusDamage
* @NativeFunctionAddress 0000000140D1AEF0
*/

bool function GetBlocksRadiusDamage()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptUtilRemove
* @NativeFunctionAddress 0000000140D1AE70
*/

void function Destroy()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTeamNumber
* @NativeFunctionAddress 0000000140D1ADC0
*/

int function GetTeam()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_ChangeTeam
* @NativeFunctionAddress 0000000140D1AD20
*/

bool function Code_SetTeam(int)

/*
* @Breif 
* @Pramas int newIndex
* @NativeName: Script_SetTeamMemberIndex
* @NativeFunctionAddress 0000000140D1AC80
*/

void function SetTeamMemberIndex(int newIndex)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTeamMemberIndex
* @NativeFunctionAddress 0000000140D1ABD0
*/

int function GetTeamMemberIndex()

/*
* @Breif 
* @Pramas int newID
* @NativeName: Script_SetSquadID
* @NativeFunctionAddress 0000000140D1AB30
*/

void function SetSquadID(int newID)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSquadID
* @NativeFunctionAddress 0000000140D1AA80
*/

int function GetSquadID()

/*
* @Breif 
* @Pramas int grade
* @NativeName: Script_SetGrade
* @NativeFunctionAddress 0000000140D1A9E0
*/

void function SetGrade(int grade)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrade
* @NativeFunctionAddress 0000000140D1A930
*/

int function GetGrade()

/*
* @Breif If in hierarchy, retrieves the entity's parent
* @Pramas 
* @NativeName: ScriptGetMoveParent
* @NativeFunctionAddress 0000000140D1A8A0
*/

entity function GetParent()

/*
* @Breif Gives the name of the attachment that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentAttachment
* @NativeFunctionAddress 0000000140D1A810
*/

string function GetParentAttachment()

/*
* @Breif Gives the index of the attachment that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentAttachmentIndex
* @NativeFunctionAddress 0000000140D1A730
*/

int function GetParentAttachmentIndex()

/*
* @Breif Gives the index of the hitbox that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentHitbox
* @NativeFunctionAddress 0000000140D1A650
*/

int function GetParentHitbox()

/*
* @Breif If in hierarchy, walks up the hierarchy to find the root parent
* @Pramas 
* @NativeName: ScriptGetRootMoveParent
* @NativeFunctionAddress 0000000140D1A5F0
*/

entity function GetRootMoveParent()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptFirstMoveChild
* @NativeFunctionAddress 0000000140D1A560
*/

entity function FirstMoveChild()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptNextMovePeer
* @NativeFunctionAddress 0000000140D1A4D0
*/

entity function NextMovePeer()

/*
* @Breif Set sound 'code' controller for sounds attached to entity.
* @Pramas float
* @NativeName: SetSoundCodeControllerValue
* @NativeFunctionAddress 0000000140D1A460
*/

void function SetSoundCodeControllerValue(float)

/*
* @Breif Unset sound 'code' controller for sounds attached to entity.
* @Pramas 
* @NativeName: UnsetSoundCodeControllerValue
* @NativeFunctionAddress 0000000140D1A3D0
*/

void function UnsetSoundCodeControllerValue()

/*
* @Breif type safe equivalent of ent.kv.model = model
* @Pramas asset
* @NativeName: SetValueForModelKey
* @NativeFunctionAddress 0000000140D1A330
*/

void function SetValueForModelKey(asset)

/*
* @Breif type safe equivalent of model = ent.kv.model
* @Pramas 
* @NativeName: GetValueForModelKey
* @NativeFunctionAddress 0000000140D1A250
*/

asset function GetValueForModelKey()

/*
* @Breif type safe equivalent of ent.kv.texture = model
* @Pramas asset
* @NativeName: SetValueForTextureKey
* @NativeFunctionAddress 0000000140D1A1B0
*/

void function SetValueForTextureKey(asset)

/*
* @Breif type safe equivalent of model = ent.kv.texture
* @Pramas 
* @NativeName: GetValueForTextureKey
* @NativeFunctionAddress 0000000140D1A0D0
*/

asset function GetValueForTextureKey()

/*
* @Breif type safe equivalent of ent.kv.effect_name = effect_name
* @Pramas asset
* @NativeName: SetValueForEffectNameKey
* @NativeFunctionAddress 0000000140D1A030
*/

void function SetValueForEffectNameKey(asset)

/*
* @Breif type safe equivalent of effect_name = ent.kv.effect_name
* @Pramas 
* @NativeName: GetValueForEffectNameKey
* @NativeFunctionAddress 0000000140D19F50
*/

asset function GetValueForEffectNameKey()

/*
* @Breif @
* @Pramas string, var
* @NativeName: ScriptSetValueForKey
* @NativeFunctionAddress 0000000140D19E20
*/

bool function SetValueForKey(string, var)

/*
* @Breif Get a string representation of the specified key's value.
* @Pramas string
* @NativeName: ScriptGetKeyValueAsString
* @NativeFunctionAddress 0000000140D19D90
*/

string function GetValueForKey(string)

/*
* @Breif Shortcut for GetValueForKey( "target" )
* @Pramas 
* @NativeName: Script_GetTarget
* @NativeFunctionAddress 0000000140D19D00
*/

string function GetTarget_Deprecated()

/*
* @Breif Returns true if the specified key exists on the entity.
* @Pramas string
* @NativeName: ScriptDoesKeyExist
* @NativeFunctionAddress 0000000140D19C70
*/

bool function HasKey(string)

/*
* @Breif Takes a key in the entity's key value list and returns the next key. Useful for iterating through key values.
* @Pramas var
* @NativeName: ScriptGetNextKey
* @NativeFunctionAddress 0000000140D19B00
*/

var function GetNextKey(var)

/*
* @Breif 
* @Pramas entity
* @NativeName: CopyGenericKeyValues
* @NativeFunctionAddress 0000000140D19A80
*/

void function CopyGenericKeyValues(entity)

/*
* @Breif Ensure that an entity's script scope has been created
* @Pramas 
* @NativeName: InitializeOrValidateScriptScope
* @NativeFunctionAddress 0000000140D19A20
*/

bool function ValidateScriptScope()

/*
* @Breif Retrieve the script-side data associated with an entity
* @Pramas 
* @NativeName: GetScriptScope
* @NativeFunctionAddress 0000000140D199A0
*/

var function GetScriptScope()

/*
* @Breif Retrieve the script-side data associated with an entity
* @Pramas 
* @NativeName: GetScriptScope
* @NativeFunctionAddress 0000000140D199A0
*/

var function scope()

/*
* @Breif Retrieve the unique identifier used to refer to the entity within the scripting system
* @Pramas 
* @NativeName: GetScriptId
* @NativeFunctionAddress 0000000140D19910
*/

string function GetScriptId()

/*
* @Breif Gets this entity's owner
* @Pramas 
* @NativeName: GetScriptOwnerEntity
* @NativeFunctionAddress 0000000140D19880
*/

entity function GetOwner()

/*
* @Breif Sets this entity's owner
* @Pramas entity
* @NativeName: SetScriptOwnerEntity
* @NativeFunctionAddress 0000000140D19800
*/

void function SetOwner(entity)

/*
* @Breif Get entity index of networked entity.  Script error if the entity doesn't have an index
* @Pramas 
* @NativeName: GetScriptEntIndex
* @NativeFunctionAddress 0000000140D19730
*/

int function GetEntIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: entindex
* @NativeFunctionAddress 0000000140D19680
*/

int function entindex()

/*
* @Breif Add entity to spatial partition data
* @Pramas 
* @NativeName: AddEntBackToSpatialPartition
* @NativeFunctionAddress 0000000140D195F0
*/

void function AddToSpatialPartition()

/*
* @Breif Remove entity from spatial partition data
* @Pramas 
* @NativeName: RemoveEntFromSpatialPartition
* @NativeFunctionAddress 0000000140D19560
*/

void function RemoveFromSpatialPartition()

/*
* @Breif Marks this entity as an attachment that never moves away from the attachment point
* @Pramas 
* @NativeName: MarkAsNonMovingAttachment
* @NativeFunctionAddress 0000000140D19500
*/

void function MarkAsNonMovingAttachment()

/*
* @Breif Don't create a giant bounding box even though we are attached to an attachment
* @Pramas 
* @NativeName: DontIncludeParentBbox
* @NativeFunctionAddress 0000000140D194A0
*/

void function DontIncludeParentBbox()

/*
* @Breif Hitbox overrides vphysics for trace checks on this entity
* @Pramas 
* @NativeName: UseHitBoxForTraceCheck
* @NativeFunctionAddress 0000000140D19440
*/

void function UseHitBoxForTraceCheck()

/*
* @Breif Treat entity as part of parent when calculating animations
* @Pramas entity
* @NativeName: ScriptSetBoneMerge
* @NativeFunctionAddress 0000000140D19330
*/

void function SetBoneMerge(entity)

/*
* @Breif Clear bone merge and unlink from parent
* @Pramas 
* @NativeName: ScriptClearBoneMerge
* @NativeFunctionAddress 0000000140D192E0
*/

void function ClearBoneMerge()

/*
* @Breif Stops movement physics for an entity
* @Pramas 
* @NativeName: ScriptStopPhysics
* @NativeFunctionAddress 0000000140D19280
*/

void function StopPhysics()

/*
* @Breif Sets the move type.
* @Pramas int
* @NativeName: ScriptSetPhysics
* @NativeFunctionAddress 0000000140D19210
*/

void function SetPhysics(int)

/*
* @Breif Gets the move type.
* @Pramas 
* @NativeName: ScriptGetPhysics
* @NativeFunctionAddress 0000000140D19160
*/

int function GetPhysics()

/*
* @Breif Sets this entity's move parent to be the same as the given entity's.
* @Pramas entity
* @NativeName: ScriptSetToSameParentAs
* @NativeFunctionAddress 0000000140D18FA0
*/

void function SetToSameParentAs(entity)

/*
* @Breif Prints information about the entity's parenting.
* @Pramas 
* @NativeName: DumpParentingState
* @NativeFunctionAddress 0000000140D18F50
*/

void function DumpParentingState()

/*
* @Breif Clears an entity's parenting.
* @Pramas 
* @NativeName: ClearParent
* @NativeFunctionAddress 0000000140D18F00
*/

void function ClearParent()

/*
* @Breif Clears all children attached to hitboxes
* @Pramas 
* @NativeName: ClearHitboxAttachedChildren
* @NativeFunctionAddress 0000000140D18EB0
*/

void function ClearHitboxAttachedChildren()

/*
* @Breif Transfers all children (entities parented to this entity) to another parent.
* @Pramas entity
* @NativeName: ScriptTransferChildrenTo
* @NativeFunctionAddress 0000000140D18E30
*/

void function TransferChildrenTo(entity)

/*
* @Breif Returns true if given entity is already a child of this entity
* @Pramas entity
* @NativeName: ScriptIsAncestorOf
* @NativeFunctionAddress 0000000140D18DA0
*/

bool function IsChild(entity)

/*
* @Breif Get an index that can be used for kill replay.
* @Pramas 
* @NativeName: GetIndexForEntity
* @NativeFunctionAddress 0000000140D18CE0
*/

int function GetIndexForEntity()

/*
* @Breif Turns off physics collision (for bouncy rolly type physics)
* @Pramas 
* @NativeName: Script_DisablePhysics
* @NativeFunctionAddress 0000000140D18C80
*/

void function DisablePhysics()

/*
* @Breif Gets the solid mask for this entity
* @Pramas 
* @NativeName: ScriptGetPhysicsSolidMask
* @NativeFunctionAddress 0000000140D18BD0
*/

int function GetPhysicsSolidMask()

/*
* @Breif Set the entity to be not solid.
* @Pramas 
* @NativeName: ScriptSetNotSolid
* @NativeFunctionAddress 0000000140D18B60
*/

void function NotSolid()

/*
* @Breif Sets an entity to solid (usually something that had NotSolid called on it.
* @Pramas 
* @NativeName: ScriptSetSolid
* @NativeFunctionAddress 0000000140D18AC0
*/

void function Solid()

/*
* @Breif Specify the bounding box for this entity, also switch collision over to BBOX (may stop physics movement, etc.)
* @Pramas vector, vector
* @NativeName: SetBoundingBox
* @NativeFunctionAddress 0000000140D18A30
*/

void function SetBoundingBox(vector, vector)

/*
* @Breif Set whether this entity will touch triggers
* @Pramas bool
* @NativeName: SetTouchTriggers
* @NativeFunctionAddress 0000000140D189B0
*/

void function SetTouchTriggers(bool)

/*
* @Breif Sets whether this entity will touch predicted triggers of a type or not
* @Pramas int
* @NativeName: SetIgnorePredictedTriggerTypes
* @NativeFunctionAddress 0000000140D18940
*/

void function SetIgnorePredictedTriggerTypes(int)

/*
* @Breif Sets an entity's title. This may be displayed on client HUDs.
* @Pramas string
* @NativeName: SetTitle
* @NativeFunctionAddress 0000000140D188E0
*/

void function SetTitle(string)

/*
* @Breif Gets an entity's title. This may be displayed on client HUDs.
* @Pramas 
* @NativeName: GetTitle
* @NativeFunctionAddress 0000000140D18850
*/

string function GetTitle()

/*
* @Breif Returns true if entity is a player.
* @Pramas 
* @NativeName: IsPlayer
* @NativeFunctionAddress 0000000140D187F0
*/

bool function IsPlayer()

/*
* @Breif Returns true if entity is an NPC.
* @Pramas 
* @NativeName: IsNPC
* @NativeFunctionAddress 0000000140D18790
*/

bool function IsNPC()

/*
* @Breif Returns true if entity is the world entity.
* @Pramas 
* @NativeName: IsWorld
* @NativeFunctionAddress 0000000140D18720
*/

bool function IsWorld()

/*
* @Breif Returns true if entity is a func brush.
* @Pramas 
* @NativeName: IsFuncBrush
* @NativeFunctionAddress 0000000140D186C0
*/

bool function IsFuncBrush()

/*
* @Breif Returns true if this is a projectile.
* @Pramas 
* @NativeName: IsProjectile
* @NativeFunctionAddress 0000000140D18660
*/

bool function IsProjectile()

/*
* @Breif Returns true if this is a trigger box.
* @Pramas 
* @NativeName: IsTriggerBox
* @NativeFunctionAddress 0000000140D18600
*/

bool function IsTriggerBox()

/*
* @Breif Sets the entity's next think time to as soon as possible. Calling this on multiple entities at the same time will synchronize their think times.
* @Pramas 
* @NativeName: SetNextThinkNow
* @NativeFunctionAddress 0000000140D18580
*/

void function SetNextThinkNow()

/*
* @Breif Get an encoded handle to this ent, suitable for sending to client script.
* @Pramas 
* @NativeName: GetEncodedEHandle
* @NativeFunctionAddress 0000000140D184B0
*/

int function GetEncodedEHandle()

/*
* @Breif Returns true if an entity has an output of the given name.
* @Pramas string
* @NativeName: ScriptHasOutput
* @NativeFunctionAddress 0000000140D18440
*/

bool function HasOutput(string)

/*
* @Breif sets the ground entity on a given entity
* @Pramas entity
* @NativeName: ScriptSetGroundEntity
* @NativeFunctionAddress 0000000140D183C0
*/

void function SetGroundEntity(entity)

/*
* @Breif Make AI treat this as a threat. Args: ( int priority, int extraPriority, int extraPriorityFlags ). Compare priority with values set in player and AI settings files. Flags are prefixed AI_AP_FLAG_*
* @Pramas int, int, int
* @NativeName: EnableAttackableByAI
* @NativeFunctionAddress 0000000140D18320
*/

void function EnableAttackableByAI(int, int, int)

/*
* @Breif Clear this entity from being a threat to AI
* @Pramas 
* @NativeName: DisableAttackableByAI
* @NativeFunctionAddress 0000000140D182D0
*/

void function DisableAttackableByAI()

/*
* @Breif Sets if AI can melee this entity
* @Pramas bool
* @NativeName: SetIsValidAIMeleeTarget
* @NativeFunctionAddress 0000000140D18260
*/

void function SetIsValidAIMeleeTarget(bool)

/*
* @Breif Gets if AI can melee this entity
* @Pramas 
* @NativeName: IsValidAIMeleeTarget
* @NativeFunctionAddress 0000000140D181F0
*/

bool function IsValidAIMeleeTarget()

/*
* @Breif Make AI try to path around this entity or not
* @Pramas bool
* @NativeName: SetAIObstacle
* @NativeFunctionAddress 0000000140D18180
*/

void function SetAIObstacle(bool)

/*
* @Breif Get the centerpoint of an entity.
* @Pramas 
* @NativeName: RenderedWorldSpaceCenter
* @NativeFunctionAddress 0000000140D1B9A0
*/

vector function GetWorldSpaceCenter()

/*
* @Breif Gets the boss player for an entity
* @Pramas 
* @NativeName: Script_GetBossPlayer
* @NativeFunctionAddress 0000000140D180F0
*/

entity function GetBossPlayer()

/*
* @Breif Mark this entity as belonging to the specified player
* @Pramas entity
* @NativeName: Script_SetBossPlayer
* @NativeFunctionAddress 0000000140D18070
*/

void function SetBossPlayer(entity)

/*
* @Breif Clear this entity of any player ownership.
* @Pramas 
* @NativeName: Script_ClearBossPlayer
* @NativeFunctionAddress 0000000140D17FC0
*/

void function ClearBossPlayer()

/*
* @Breif Marks this entity as usable by any player.
* @Pramas 
* @NativeName: ScriptSetUsable
* @NativeFunctionAddress 0000000140D17F70
*/

void function SetUsable()

/*
* @Breif Returns a integer representing of the usable state, so that you can return to this state later.
* @Pramas 
* @NativeName: ScriptGetUsableValue
* @NativeFunctionAddress 0000000140D17EC0
*/

int function GetUsableValue()

/*
* @Breif Sets the usable state by integer, which was earlier obtained from GetUsableValue().
* @Pramas int
* @NativeName: ScriptSetUsableValue
* @NativeFunctionAddress 0000000140D17E50
*/

void function SetUsableValue(int)

/*
* @Breif Adds a usable type to the entity. Should not be called often as need to recompute partition mask everytime a new value is added
* @Pramas int
* @NativeName: ScriptAddUsableValue
* @NativeFunctionAddress 0000000140D17DD0
*/

void function AddUsableValue(int)

/*
* @Breif Removes a usable type from the entity. Should not be called often as need to recompute partition mask evertime a new value is removed
* @Pramas int
* @NativeName: ScriptRemoveUsableValue
* @NativeFunctionAddress 0000000140D17D50
*/

void function RemoveUsableValue(int)

/*
* @Breif Marks this entity as usable by specific players.
* @Pramas string
* @NativeName: ScriptSetUsableByGroup
* @NativeFunctionAddress 0000000140D17CF0
*/

void function SetUsableByGroup(string)

/*
* @Breif Sets the priority of a usable ent
* @Pramas int
* @NativeName: ScriptSetUsablePriority
* @NativeFunctionAddress 0000000140D17C30
*/

void function SetUsablePriority(int)

/*
* @Breif In order for an object to be usable, the player must be a within a certain distance of the object's bounding box. This sets an override for that distance. Must also set flag USABLE_USE_DISTANCE_OVERRIDE to enable.
* @Pramas float
* @NativeName: ScriptSetUsableDistanceOverride
* @NativeFunctionAddress 0000000140D17BC0
*/

void function SetUsableDistanceOverride(float)

/*
* @Breif Set fov for this ent to use
* @Pramas float
* @NativeName: ScriptSetUsableFOV
* @NativeFunctionAddress 0000000140D17B50
*/

void function SetUsableFOV(float)

/*
* @Breif Converts to cosine degrees
* @Pramas float
* @NativeName: ScriptSetUsableFOVByDegrees
* @NativeFunctionAddress 0000000140D17AE0
*/

void function SetUsableFOVByDegrees(float)

/*
* @Breif 
* @Pramas float
* @NativeName: ScriptSetUsePromptSize
* @NativeFunctionAddress 0000000140D17A30
*/

void function SetUsePromptSize(float)

/*
* @Breif Undoes the effects of SetUsable().
* @Pramas 
* @NativeName: ScriptUnsetUsable
* @NativeFunctionAddress 0000000140D179E0
*/

void function UnsetUsable()

/*
* @Breif Make entity do lag compensation
* @Pramas bool
* @NativeName: SetLagCompensate
* @NativeFunctionAddress 0000000140D17980
*/

void function LagCompensate(bool)

/*
* @Breif Set the distance that this entity starts fading.
* @Pramas float
* @NativeName: SetFadeDist
* @NativeFunctionAddress 0000000140D178C0
*/

void function SetFadeDistance(float)

/*
* @Breif Controls whether the given entity is drawn as a viewmodel or not
* @Pramas bool
* @NativeName: RenderWithViewModels
* @NativeFunctionAddress 0000000140D17830
*/

void function RenderWithViewModels(bool)

/*
* @Breif Returns true if the entity is rendering in the view model pass
* @Pramas 
* @NativeName: IsRenderingWithViewModels
* @NativeFunctionAddress 0000000140D177D0
*/

bool function IsRenderingWithViewModels()

/*
* @Breif Sets the take damage type, DAMAGE_NO, DAMAGE_YES, DAMAGE_EVENTS_ONLY
* @Pramas int
* @NativeName: ScriptSetTakeDamageType
* @NativeFunctionAddress 0000000140D17750
*/

void function SetTakeDamageType(int)

/*
* @Breif True if this entity is being removed (deleted or killed).
* @Pramas 
* @NativeName: ScriptIsMarkedForDeletion
* @NativeFunctionAddress 0000000140D176E0
*/

bool function IsMarkedForDeletion()

/*
* @Breif If true, this entity will be do a callback to script before being destroyed.
* @Pramas bool
* @NativeName: SetDoDestroyCallback
* @NativeFunctionAddress 0000000140D17680
*/

void function SetDoDestroyCallback(bool)

/*
* @Breif Returns the amount of damage this entity would potentially inflict.
* @Pramas 
* @NativeName: GetDamage
* @NativeFunctionAddress 0000000140D175D0
*/

float function GetDamage()

/*
* @Breif True if standing on something
* @Pramas 
* @NativeName: IsOnGround
* @NativeFunctionAddress 0000000140D17540
*/

bool function IsOnGround()

/*
* @Breif If entity is parented to a pusher
* @Pramas 
* @NativeName: HasPusherAncestor
* @NativeFunctionAddress 0000000140D17480
*/

bool function HasPusherAncestor()

/*
* @Breif Return ground entity
* @Pramas 
* @NativeName: ScriptGetGroundEntity
* @NativeFunctionAddress 0000000140D173F0
*/

entity function GetGroundEntity()

/*
* @Breif Transform a world space position to where it would be if moving ground entity is in its original position.
* @Pramas 
* @NativeName: GetGroundRelativePos
* @NativeFunctionAddress 0000000140D17320
*/

vector function GetGroundRelativePos()

/*
* @Breif Set player visibility of this entity's name.
* @Pramas bool
* @NativeName: SetNameVisibleToOwner_script
* @NativeFunctionAddress 0000000140D172C0
*/

void function SetNameVisibleToOwner(bool)

/*
* @Breif Set player visibility of this entity's name.
* @Pramas bool
* @NativeName: SetNameVisibleToFriendly_script
* @NativeFunctionAddress 0000000140D17260
*/

void function SetNameVisibleToFriendly(bool)

/*
* @Breif Set player visibility of this entity's name.
* @Pramas bool
* @NativeName: SetNameVisibleToEnemy_script
* @NativeFunctionAddress 0000000140D17200
*/

void function SetNameVisibleToEnemy(bool)

/*
* @Breif Set player visibility of this entity's name.
* @Pramas bool
* @NativeName: SetNameVisibleToNeutral_script
* @NativeFunctionAddress 0000000140D171A0
*/

void function SetNameVisibleToNeutral(bool)

/*
* @Breif True if the entity is titan type.
* @Pramas 
* @NativeName: IsTitan
* @NativeFunctionAddress 0000000140D17140
*/

bool function IsTitan()

/*
* @Breif True if the entity is human type.
* @Pramas 
* @NativeName: IsHuman
* @NativeFunctionAddress 0000000140D170E0
*/

bool function IsHuman()

/*
* @Breif True if the entity is mechanical type
* @Pramas 
* @NativeName: IsMechanical
* @NativeFunctionAddress 0000000140D17080
*/

bool function IsMechanical()

/*
* @Breif True if the entity has gib models
* @Pramas 
* @NativeName: HasGibModel
* @NativeFunctionAddress 0000000140D17020
*/

bool function HasGibModel()

/*
* @Breif True if the entity is a zipline type.
* @Pramas 
* @NativeName: IsZipline
* @NativeFunctionAddress 0000000140D16FC0
*/

bool function IsZipline()

/*
* @Breif True if the entity is breakable glass.
* @Pramas 
* @NativeName: IsBreakableGlass
* @NativeFunctionAddress 0000000140D16F60
*/

bool function IsBreakableGlass()

/*
* @Breif True if the entity is a player decoy.
* @Pramas 
* @NativeName: IsPlayerDecoy
* @NativeFunctionAddress 0000000140D16F00
*/

bool function IsPlayerDecoy()

/*
* @Breif True if the entity is a hologram.
* @Pramas 
* @NativeName: IsHologram
* @NativeFunctionAddress 0000000140D16EA0
*/

bool function IsHologram()

/*
* @Breif Tell this entity whether to draw always upright on client minimaps
* @Pramas bool
* @NativeName: Script_Minimap_SetAlignUpright
* @NativeFunctionAddress 0000000140D16E30
*/

void function Minimap_SetAlignUpright(bool)

/*
* @Breif Tell this entity whether to clamp to the edges of client minimaps when drawing
* @Pramas bool
* @NativeName: Script_Minimap_SetClampToEdge
* @NativeFunctionAddress 0000000140D16DC0
*/

void function Minimap_SetClampToEdge(bool)

/*
* @Breif Tell this entity whether to use height tracking behavior on client minimaps
* @Pramas bool
* @NativeName: Script_Minimap_SetHeightTracking
* @NativeFunctionAddress 0000000140D16D50
*/

void function Minimap_SetHeightTracking(bool)

/*
* @Breif The size ratio of this icon relative to the size of the smaller side of client minimaps. Values around 0.1 are ideal
* @Pramas float
* @NativeName: Script_Minimap_SetObjectScale
* @NativeFunctionAddress 0000000140D16CE0
*/

void function Minimap_SetObjectScale(float)

/*
* @Breif Forces this entity to show up on client minimaps that match the team or player handle
* @Pramas int, entity
* @NativeName: Script_Minimap_AlwaysShow
* @NativeFunctionAddress 0000000140D16C50
*/

void function Minimap_AlwaysShow(int, entity)

/*
* @Breif Forces this entity to NOT show up on client minimaps that match the team or player handle
* @Pramas int, entity
* @NativeName: Script_Minimap_Hide
* @NativeFunctionAddress 0000000140D16BC0
*/

void function Minimap_Hide(int, entity)

/*
* @Breif Allows this entity to do default draw behavior on client minimaps that match the team or player handle (This is exclusive with AlwaysShow/Hide)
* @Pramas int, entity
* @NativeName: Script_Minimap_DisplayDefault
* @NativeFunctionAddress 0000000140D16B30
*/

void function Minimap_DisplayDefault(int, entity)

/*
* @Breif The z order of this entity on the minimap relative to all other minimap entities. Larger values draw on top. Must be positive or 0
* @Pramas int
* @NativeName: Script_Minimap_SetZOrder
* @NativeFunctionAddress 0000000140D16AC0
*/

void function Minimap_SetZOrder(int)

/*
* @Breif A custom integer that can be RUI tracked on the client. Code behavior isn't affected by this variable. Must be positive or 0
* @Pramas int
* @NativeName: Script_Minimap_SetCustomState
* @NativeFunctionAddress 0000000140D16A50
*/

void function Minimap_SetCustomState(int)

/*
* @Breif Return if entity is cloaked
* @Pramas bool
* @NativeName: IsCloaked
* @NativeFunctionAddress 0000000140D169E0
*/

bool function IsCloaked(bool)

/*
* @Breif Return when cloak ends (ie, when fade-in begins)
* @Pramas 
* @NativeName: GetCloakEndTime
* @NativeFunctionAddress 0000000140D16930
*/

float function GetCloakEndTime()

/*
* @Breif Sets the cloak (fade in, duration, fade out); duration: -1 for infinite, 0 to turn off
* @Pramas float, float, float
* @NativeName: SetCloakDuration
* @NativeFunctionAddress 0000000140D16890
*/

void function SetCloakDuration(float, float, float)

/*
* @Breif Makes existing cloak flicker off for (amount, duration); amount: 0..1; duration: -1 for infinite, 0 to turn off
* @Pramas float, float
* @NativeName: SetCloakFlicker
* @NativeFunctionAddress 0000000140D16800
*/

void function SetCloakFlicker(float, float)

/*
* @Breif Sets whether the entity can cloak or not
* @Pramas bool
* @NativeName: SetCanCloak
* @NativeFunctionAddress 0000000140D16740
*/

void function SetCanCloak(bool)

/*
* @Breif Gets whether the entity can cloak or not
* @Pramas 
* @NativeName: CanCloak
* @NativeFunctionAddress 0000000140D166D0
*/

bool function CanCloak()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsPhaseShifted
* @NativeFunctionAddress 0000000140D16660
*/

bool function IsPhaseShifted()

/*
* @Breif Get the current highlight context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentContext
* @NativeFunctionAddress 0000000140D165B0
*/

int function Highlight_GetCurrentContext()

/*
* @Breif Get the inside opacity on the current context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentInsideOpacity
* @NativeFunctionAddress 0000000140D164F0
*/

float function Highlight_GetCurrentInsideOpacity()

/*
* @Breif Get the outline opacity on the current context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentOutlineOpacity
* @NativeFunctionAddress 0000000140D16430
*/

float function Highlight_GetCurrentOutlineOpacity()

/*
* @Breif Tells if this entity can inherit the highlighting settings from a parent entity if there is no local settings.
* @Pramas 
* @NativeName: Script_Highlight_GetInheritHighlight
* @NativeFunctionAddress 0000000140D163C0
*/

bool function Highlight_GetInheritHighlight()

/*
* @Breif Get the inside function slot on the given context. 0 for a disabled a function.
* @Pramas int
* @NativeName: Script_Highlight_GetInsideFunction
* @NativeFunctionAddress 0000000140D162D0
*/

int function Highlight_GetInsideFunction(int)

/*
* @Breif Get the outline function slot on the given context. 0 for a disabled a function.
* @Pramas int
* @NativeName: Script_Highlight_GetOutlineFunction
* @NativeFunctionAddress 0000000140D161E0
*/

int function Highlight_GetOutlineFunction(int)

/*
* @Breif Get the outline radius on the given context.
* @Pramas int
* @NativeName: Script_Highlight_GetOutlineRadius
* @NativeFunctionAddress 0000000140D160E0
*/

float function Highlight_GetOutlineRadius(int)

/*
* @Breif Get custom parameters on the given context. Parameters are shared between inside and outline functions.
* @Pramas int, int
* @NativeName: Script_Highlight_GetParam
* @NativeFunctionAddress 0000000140D15FB0
*/

vector function Highlight_GetParam(int, int)

/*
* @Breif Get custom state on the given context.
* @Pramas int
* @NativeName: Script_Highlight_GetState
* @NativeFunctionAddress 0000000140D15EC0
*/

int function Highlight_GetState(int)

/*
* @Breif Tells if this entity will be drawn.
* @Pramas int
* @NativeName: Script_Highlight_IsEntityVisible
* @NativeFunctionAddress 0000000140D15E20
*/

bool function Highlight_IsEntityVisible(int)

/*
* @Breif Tells if this highlight will be drawn after all post-processes.
* @Pramas int
* @NativeName: Script_Highlight_IsAfterPostProcess
* @NativeFunctionAddress 0000000140D15D80
*/

bool function Highlight_IsAfterPostProcess(int)

/*
* @Breif Enable highlighting on this entity.
* @Pramas 
* @NativeName: Script_Highlight_Enable
* @NativeFunctionAddress 0000000140D15D30
*/

void function Highlight_Enable()

/*
* @Breif Set the current highlight context. 0 by default. Server has priority over client. Use context -1 to disable highlighting.
* @Pramas int
* @NativeName: Script_Highlight_SetCurrentContext
* @NativeFunctionAddress 0000000140D15CC0
*/

void function Highlight_SetCurrentContext(int)

/*
* @Breif Set if this entity can inherit the highlighting settings from a parent entity if there is no local settings. False by default. Shared by all contexts.
* @Pramas bool
* @NativeName: Script_Highlight_SetInheritHighlight
* @NativeFunctionAddress 0000000140D15C60
*/

void function Highlight_SetInheritHighlight(bool)

/*
* @Breif Given( contextID, insideSlot, entityVisible, outlineSlot, outlineRadius, state, afterPostProcess ) Set function slots on the given context. Use slot 0 to disable a function
* @Pramas int, int, bool, int, float, int, bool
* @NativeName: Script_Highlight_SetFunctions
* @NativeFunctionAddress 0000000140D15B70
*/

void function Highlight_SetFunctions(int, int, bool, int, float, int, bool)

/*
* @Breif Set custom parameters on the given context. Parameters are shared between inside and outline functions.
* @Pramas int, int, vector
* @NativeName: Script_Highlight_SetParam
* @NativeFunctionAddress 0000000140D15AE0
*/

void function Highlight_SetParam(int, int, vector)

/*
* @Breif Hide inside function in a given duration. 0 to hide immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_HideInside
* @NativeFunctionAddress 0000000140D159C0
*/

void function Highlight_HideInside(float)

/*
* @Breif Hide outline function in a given duration. 0 to hide immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_HideOutline
* @NativeFunctionAddress 0000000140D15890
*/

void function Highlight_HideOutline(float)

/*
* @Breif Show inside function in a given duration. 0 to show immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_ShowInside
* @NativeFunctionAddress 0000000140D15770
*/

void function Highlight_ShowInside(float)

/*
* @Breif Show outline function in a given duration. 0 to show immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_ShowOutline
* @NativeFunctionAddress 0000000140D15640
*/

void function Highlight_ShowOutline(float)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightEnableForTeam
* @NativeFunctionAddress 0000000140D155D0
*/

void function HighlightEnableForTeam(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightDisableForTeam
* @NativeFunctionAddress 0000000140D15560
*/

void function HighlightDisableForTeam(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightSetTeamBitField
* @NativeFunctionAddress 0000000140D154C0
*/

void function HighlightSetTeamBitField(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_IsHighlightEnabledForTeam
* @NativeFunctionAddress 0000000140D15420
*/

bool function IsHighlightEnabledForTeam(int)

/*
* @Breif Set the debounce duration for when AI are allowed to throw grenades at this target
* @Pramas float
* @NativeName: SetGrenadeTargetDebounce_Script
* @NativeFunctionAddress 0000000140D15390
*/

void function SetGrenadeTargetDebounce(float)

/*
* @Breif Hides this entity and its children (entity still gets sent to the client, it just isn't rendered)
* @Pramas 
* @NativeName: Script_MakeInvisible
* @NativeFunctionAddress 0000000140D15300
*/

void function MakeInvisible()

/*
* @Breif Shows this entity
* @Pramas 
* @NativeName: Script_MakeVisible
* @NativeFunctionAddress 0000000140D15270
*/

void function MakeVisible()

/*
* @Breif Hides this entity but not its children (entity still gets sent to the client, it just isn't rendered)
* @Pramas 
* @NativeName: Script_Hide
* @NativeFunctionAddress 0000000140D151E0
*/

void function Hide()

/*
* @Breif Shows this entity
* @Pramas 
* @NativeName: Script_Show
* @NativeFunctionAddress 0000000140D15150
*/

void function Show()

/*
* @Breif Sets whether this object has collision allowed or not. Note that other things might affect this object's collision, like its solid type
* @Pramas bool
* @NativeName: Script_SetCollisionAllowed
* @NativeFunctionAddress 0000000140D150E0
*/

void function SetCollisionAllowed(bool)

/*
* @Breif Sets the collision detail level of an entity to high
* @Pramas 
* @NativeName: Script_SetCollisionDetailHigh
* @NativeFunctionAddress 0000000140D15060
*/

void function SetCollisionDetailHigh()

/*
* @Breif 
* @Pramas entity, vector, vector, vector, int, int, int, int, entity, int
* @NativeName: Script_DispatchImpactEffects
* @NativeFunctionAddress 0000000140D14E80
*/

void function DispatchImpactEffects(entity, vector, vector, vector, int, int, int, int, entity, int)

/*
* @Breif 
* @Pramas bool
* @NativeName: ScriptSetAimAssistAllowed
* @NativeFunctionAddress 0000000140D14DE0
*/

void function SetAimAssistAllowed(bool)

/*
* @Breif Return the time that this entity spawned.
* @Pramas 
* @NativeName: GetTimeSinceSpawning
* @NativeFunctionAddress 0000000140D14D20
*/

float function GetTimeSinceSpawning()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetLifeState
* @NativeFunctionAddress 0000000140D14C70
*/

int function GetLifeState()

/*
* @Breif Increment invulnerability counter. IsInvulnerable will return true as long as that counter is > 0.
* @Pramas 
* @NativeName: PushInvulnerableToDamage
* @NativeFunctionAddress 0000000140D14BE0
*/

void function SetInvulnerable()

/*
* @Breif Decrement invulnerability counter. IsInvulnerable will return true as long as that counter is > 0.
* @Pramas 
* @NativeName: PopInvulnerableToDamage
* @NativeFunctionAddress 0000000140D14B50
*/

void function ClearInvulnerable()

/*
* @Breif Returns whether the entity is invulnerable to damage.
* @Pramas 
* @NativeName: IsInvulnerableToDamage
* @NativeFunctionAddress 0000000140D14AD0
*/

bool function IsInvulnerable()

/*
* @Breif Sets the entity to be active or inactive
* @Pramas bool
* @NativeName: SetInactive
* @NativeFunctionAddress 0000000140D14A30
*/

void function SetInactive(bool)

/*
* @Breif Set the shield health
* @Pramas int
* @NativeName: Script_SetShieldHealth
* @NativeFunctionAddress 0000000140D149C0
*/

void function SetShieldHealth(int)

/*
* @Breif Set the maximum shield health
* @Pramas int
* @NativeName: Script_SetShieldHealthMax
* @NativeFunctionAddress 0000000140D14900
*/

void function SetShieldHealthMax(int)

/*
* @Breif Get the shield health
* @Pramas 
* @NativeName: Script_GetShieldHealth
* @NativeFunctionAddress 0000000140D14850
*/

int function GetShieldHealth()

/*
* @Breif Get the maximum shield health
* @Pramas 
* @NativeName: Script_GetShieldHealthMax
* @NativeFunctionAddress 0000000140D147A0
*/

int function GetShieldHealthMax()

/*
* @Breif Does a trace to trigger all triggers along it
* @Pramas int, entity, entity, var, vector, vector, vector
* @NativeName: ScriptTraceAttackToTriggers
* @NativeFunctionAddress 0000000140D14680
*/

void function TraceAttackToTriggers(int, entity, entity, var, vector, vector, vector)

/*
* @Breif Returns array of entities that this entity is linked to
* @Pramas 
* @NativeName: ScriptGetLinkEntArray
* @NativeFunctionAddress 0000000140D145B0
*/

array< entity > function GetLinkEntArray()

/*
* @Breif Returns array of entities that are linked to this entity
* @Pramas 
* @NativeName: ScriptGetLinkParentArray
* @NativeFunctionAddress 0000000140D144E0
*/

array< entity > function GetLinkParentArray()

/*
* @Breif Creates a link from the current entity to the given entity
* @Pramas entity
* @NativeName: ScriptLinkToEnt
* @NativeFunctionAddress 0000000140D14460
*/

void function LinkToEnt(entity)

/*
* @Breif Removes a link from the current entity to the given entity
* @Pramas entity
* @NativeName: ScriptUnlinkFromEnt
* @NativeFunctionAddress 0000000140D143D0
*/

void function UnlinkFromEnt(entity)

/*
* @Breif Returns the single entity this entity is linked to (if there is one)
* @Pramas 
* @NativeName: ScriptGetLinkEnt
* @NativeFunctionAddress 0000000140D14370
*/

entity function GetLinkEnt()

/*
* @Breif Returns the single entity that connects to this entity (if there is one)
* @Pramas 
* @NativeName: ScriptGetLinkParent
* @NativeFunctionAddress 0000000140D14310
*/

entity function GetLinkParent()

/*
* @Breif Returns true if there exists a link from this entity to the given entity
* @Pramas entity
* @NativeName: IsLinkedToEnt
* @NativeFunctionAddress 0000000140D14270
*/

bool function IsLinkedToEnt(entity)

/*
* @Breif Sets whether this entity pushes other entities
* @Pramas bool
* @NativeName: SetPusher
* @NativeFunctionAddress 0000000140D14210
*/

void function SetPusher(bool)

/*
* @Breif Sets whether this entity pushes other entities
* @Pramas 
* @NativeName: IsPusher
* @NativeFunctionAddress 0000000140D141A0
*/

bool function GetPusher()

/*
* @Breif Sets whether this entity should kill NPCs when it pushes them
* @Pramas bool
* @NativeName: SetKillNPCOnPush
* @NativeFunctionAddress 0000000140D14140
*/

void function SetKillNPCOnPush(bool)

/*
* @Breif Forces an entity to be visible during phase shift.
* @Pramas bool
* @NativeName: Script_SetForceVisibleInPhaseShift
* @NativeFunctionAddress 0000000140D140A0
*/

void function SetForceVisibleInPhaseShift(bool)

/*
* @Breif Allows the shifter to see others while not in phase shift
* @Pramas bool
* @NativeName: Script_SetSeeOtherNonShifters
* @NativeFunctionAddress 0000000140D14000
*/

void function SetSeeOtherNonShifters(bool)

/*
* @Breif Allows ent to have aim assit applied to them on non phased players while they are phased
* @Pramas bool
* @NativeName: Script_SetCanBeAimAssistTrackedWhilePhased
* @NativeFunctionAddress 0000000140D13F60
*/

void function SetCanBeAimAssistTrackedWhilePhased(bool)

/*
* @Breif If true, this entity will be do a callback to script whenever it pushes an object
* @Pramas bool
* @NativeName: SetDoPusherCallback
* @NativeFunctionAddress 0000000140D13F00
*/

void function SetDoPusherCallback(bool)

/*
* @Breif Allows mantling on this entity (normally disabled for non-pusher entities)
* @Pramas 
* @NativeName: AllowMantle
* @NativeFunctionAddress 0000000140D13EA0
*/

void function AllowMantle()

/*
* @Breif Sets whether CodeCallback_DamageEntity should be called for this entity. Equivalent to ent.kv.damageNotifications
* @Pramas bool
* @NativeName: SetDamageNotifications
* @NativeFunctionAddress 0000000140D13E40
*/

void function SetDamageNotifications(bool)

/*
* @Breif Sets whether CodeCallback_OnEntityKilled should be called for this entity. Equivalent to ent.kv.deathNotifications
* @Pramas bool
* @NativeName: SetDeathNotifications
* @NativeFunctionAddress 0000000140D13DE0
*/

void function SetDeathNotifications(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPassThroughFlags
* @NativeFunctionAddress 0000000140D13D30
*/

int function GetPassThroughFlags()

/*
* @Breif Sets flags for when pass through happens on this entity
* @Pramas int
* @NativeName: Script_SetPassThroughFlags
* @NativeFunctionAddress 0000000140D13CC0
*/

void function SetPassThroughFlags(int)

/*
* @Breif Sets the thickness of and entity for pass through bullets.
* @Pramas int
* @NativeName: Script_SetPassThroughThickness
* @NativeFunctionAddress 0000000140D13C20
*/

void function SetPassThroughThickness(int)

/*
* @Breif Sets the direction the shot has to come from to pass the ent.
* @Pramas float
* @NativeName: Script_SetPassThroughDirection
* @NativeFunctionAddress 0000000140D13B70
*/

void function SetPassThroughDirection(float)

/*
* @Breif Disables Id lights on this entity
* @Pramas 
* @NativeName: Script_DisableIdLights
* @NativeFunctionAddress 0000000140D13AE0
*/

void function DisableIdLights()

/*
* @Breif Enables Id lights on this entity
* @Pramas 
* @NativeName: Script_EnableIdLights
* @NativeFunctionAddress 0000000140D13A50
*/

void function EnableIdLights()

/*
* @Breif sets the visibility flags on a given entity
* @Pramas int
* @NativeName: Script_SetVisibilityFlags
* @NativeFunctionAddress 0000000140D139B0
*/

void function SetVisibilityFlags(int)

/*
* @Breif 
* @Pramas bool
* @NativeName: Script_SetPreventCrits
* @NativeFunctionAddress 0000000140D13910
*/

void function SetPreventCrits(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetCritsPrevented
* @NativeFunctionAddress 0000000140D138A0
*/

bool function GetCritsPrevented()

/*
* @Breif Prevents this entity from ever hibernating (so it is sent to all clients). Consider using MinimizeHibernation() instead.
* @Pramas 
* @NativeName: Script_DisableHibernation
* @NativeFunctionAddress 0000000140D13830
*/

void function DisableHibernation()

/*
* @Breif Makes this entity only hibernate beyond hibernation_far_dist.
* @Pramas 
* @NativeName: Script_MinimizeHibernation
* @NativeFunctionAddress 0000000140D137C0
*/

void function MinimizeHibernation()

/*
* @Breif Returns this entity to normal hibernation behavior.
* @Pramas 
* @NativeName: Script_EnableHibernation
* @NativeFunctionAddress 0000000140D13740
*/

void function EnableHibernation()

/*
* @Breif Rounds entity origin and angles so they will exactly match on client and server
* @Pramas 
* @NativeName: RoundOriginAndAnglesToNearestNetworkValue
* @NativeFunctionAddress 0000000140D136F0
*/

void function RoundOriginAndAnglesToNearestNetworkValue()

/*
* @Breif Returns spawner that created this entity, if it was created from one.
* @Pramas 
* @NativeName: GetSpawner
* @NativeFunctionAddress 0000000140D13660
*/

entity function GetSpawner()

/*
* @Breif Set this entity to render always
* @Pramas 
* @NativeName: ScriptEnableRenderAlways
* @NativeFunctionAddress 0000000140D13600
*/

void function EnableRenderAlways()

/*
* @Breif Set this entity to not render always
* @Pramas 
* @NativeName: ScriptDisableRenderAlways
* @NativeFunctionAddress 0000000140D13560
*/

void function DisableRenderAlways()

/*
* @Breif Prevents grapple from attaching to this entity
* @Pramas 
* @NativeName: EnableGrappleAttachment
* @NativeFunctionAddress 0000000140D134D0
*/

void function EnableGrappleAttachment()

/*
* @Breif Prevents grapple from attaching to this entity
* @Pramas 
* @NativeName: DisableGrappleAttachment
* @NativeFunctionAddress 0000000140D13440
*/

void function DisableGrappleAttachment()

/*
* @Breif ( linear, angular ) Set damping on the entity's physics object. 0 to infinity.
* @Pramas float, float
* @NativeName: PhysicsSetDamping
* @NativeFunctionAddress 0000000140D13390
*/

void function PhysicsSetDamping(float, float)

/*
* @Breif Set friction on the entity's physics object. 0 to infinity.
* @Pramas float
* @NativeName: PhysicsSetFriction
* @NativeFunctionAddress 0000000140D13300
*/

void function PhysicsSetFriction(float)

/*
* @Breif Sets whether CodeCallback_OnPhysicsAutoDisable() should be called for this entity.
* @Pramas bool
* @NativeName: PhysicsSetAutoDisableNotifications
* @NativeFunctionAddress 0000000140D13280
*/

void function PhysicsSetAutoDisableNotifications(bool)

/*
* @Breif Adds the entity to the realm.
* @Pramas int realmIndex
* @NativeName: ScriptAddToRealm
* @NativeFunctionAddress 0000000140D131E0
*/

void function AddToRealm(int realmIndex)

/*
* @Breif Removes the entity from the realm.
* @Pramas int realmIndex
* @NativeName: ScriptRemoveFromRealm
* @NativeFunctionAddress 0000000140D13140
*/

void function RemoveFromRealm(int realmIndex)

/*
* @Breif Check if the entity belongs to the realm.
* @Pramas int realmIndex
* @NativeName: ScriptIsInRealm
* @NativeFunctionAddress 0000000140D13090
*/

bool function IsInRealm(int realmIndex)

/*
* @Breif Removes the entity from all the realms.
* @Pramas 
* @NativeName: ScriptRemoveFromAllRealms
* @NativeFunctionAddress 0000000140D13030
*/

void function RemoveFromAllRealms()

/*
* @Breif Adds the entity to all the realms.
* @Pramas 
* @NativeName: ScriptAddToAllRealms
* @NativeFunctionAddress 0000000140D12FB0
*/

void function AddToAllRealms()

/*
* @Breif Sets a bool network variable (see RegisterNetworkedVariable)
* @Pramas string, bool
* @NativeName: Script_SetNetBool
* @NativeFunctionAddress 0000000140D12F40
*/

void function SetNetBool(string, bool)

/*
* @Breif Sets an int network variable (see RegisterNetworkedVariable)
* @Pramas string, int
* @NativeName: Script_SetNetInt
* @NativeFunctionAddress 0000000140D12EC0
*/

void function SetNetInt(string, int)

/*
* @Breif Sets a float network variable (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetNetFloat
* @NativeFunctionAddress 0000000140D12E40
*/

void function SetNetFloat(string, float)

/*
* @Breif Changes a float network variable gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)
* @Pramas string, float, float
* @NativeName: Script_SetNetFloatOverTime
* @NativeFunctionAddress 0000000140D12DB0
*/

void function SetNetFloatOverTime(string, float, float)

/*
* @Breif Sets a time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetNetTime
* @NativeFunctionAddress 0000000140D12D30
*/

void function SetNetTime(string, float)

/*
* @Breif Sets an entity network variable (see RegisterNetworkedVariable)
* @Pramas string, entity
* @NativeName: Script_SetNetEnt
* @NativeFunctionAddress 0000000140D12CB0
*/

void function SetNetEnt(string, entity)

/*
* @Breif Gets a bool network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetBool
* @NativeFunctionAddress 0000000140D12C40
*/

bool function GetNetBool(string)

/*
* @Breif Gets an int network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetInt
* @NativeFunctionAddress 0000000140D12B80
*/

int function GetNetInt(string)

/*
* @Breif Gets a float network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetFloat
* @NativeFunctionAddress 0000000140D12AC0
*/

float function GetNetFloat(string)

/*
* @Breif Gets a time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetTime
* @NativeFunctionAddress 0000000140D12A00
*/

float function GetNetTime(string)

/*
* @Breif Gets an entity network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetEnt
* @NativeFunctionAddress 0000000140D12990
*/

entity function GetNetEnt(string)

/*
* @Breif Set Whether a script entity can be meleed - Damage and Lunge
* @Pramas bool
* @NativeName: Script_SetCanBeMeleed
* @NativeFunctionAddress 0000000140D12920
*/

void function SetCanBeMeleed(bool)

/*
* @Breif Get Whether a script entity can be meleed - Damage and Lunge
* @Pramas 
* @NativeName: Script_CanBeMeleed
* @NativeFunctionAddress 0000000140D128C0
*/

bool function CanBeMeleed()

/*
* @Breif Allow ziplines to attach to this mover
* @Pramas 
* @NativeName: AllowZiplines
* @NativeFunctionAddress 0000000140D12830
*/

void function AllowZiplines()

/*
* @Breif Disallow ziplines to attach to this mover
* @Pramas 
* @NativeName: DisallowZiplines
* @NativeFunctionAddress 0000000140D127A0
*/

void function DisallowZiplines()

/*
* @Breif Adds an I/O connection that will call the named function when the specified output fires
* @Pramas string eventName, void functionref( entity self, entity activator, entity caller, var value )
* @NativeName: ConnectOutputToScript
* @NativeFunctionAddress 0000000140D117D0
*/

var function ConnectOutput()

/*
* @Breif Removes a connected script function from an I/O event.
* @Pramas string eventName, void functionref( entity self, entity activator, entity caller, var value )
* @NativeName: DisconnectOutputFromScript
* @NativeFunctionAddress 0000000140D11820
*/

var function DisconnectOutput()

/*
* @Breif Kill the entity. Additional params table can contain: weapon, origin, force, forceKill, scriptType, damageSourceId, attackerClass, meleeAttack, meleeExecution, hitbox
* @Pramas entity attacker = null, entity inflictor = null, table additionalParams = null
* @NativeName: ScriptDie
* @NativeFunctionAddress 0000000140D11970
*/

var function Die()

/*
* @Breif Parents this entity to another entity. maintainOffset defaults to false if an attachment is specified, and defaults to true otherwise.
* @Pramas entity parentEnt, string attachment = "", bool maintainOffset = null, float blendTime = 0
* @NativeName: ScriptSetParent
* @NativeFunctionAddress 0000000140D119C0
*/

var function SetParent()

/*
* @Breif Parents this entity to another entity's hitbox. maintainOffset defaults to false if a hitbox is nonzero, and defaults to true otherwise.
* @Pramas entity parentEnt, int hitboxIdx, bool maintainOffset = false, float blendTime = 0
* @NativeName: ScriptSetParentWithHitbox
* @NativeFunctionAddress 0000000140D11A10
*/

var function SetParentWithHitbox()

/*
* @Breif Creates and returns a script table built from the entity's model's .qc $keyvalues block.
* @Pramas 
* @NativeName: ScriptCreateTableFromModelKeyValues
* @NativeFunctionAddress 0000000140D11A60
*/

table function CreateTableFromModelKeyValues(var)

/*
* @Breif Check if the entity shares a realm with this entity.
* @Pramas entity otherEntity
* @NativeName: ScriptDoesShareRealms
* @NativeFunctionAddress 0000000140D11C30
*/

var function DoesShareRealms()

/*
* @Breif Get list of realms this entity belongs to.
* @Pramas 
* @NativeName: ScriptGetRealms
* @NativeFunctionAddress 0000000140D11C80
*/

var function GetRealms()

/*
* @Breif Get list of realms this entity shares with the other entity.
* @Pramas entity otherEntity
* @NativeName: ScriptGetSharedRealms
* @NativeFunctionAddress 0000000140D11CD0
*/

var function GetSharedRealms()

/*
* @Breif Add this entity to all the realms the other entity belongs to, in addition to the current realms the entity is in
* @Pramas entity otherEntity
* @NativeName: ScriptAddToOtherEntitysRealms
* @NativeFunctionAddress 0000000140D11D20
*/

var function AddToOtherEntitysRealms()

/*
* @Breif Get the named attachment id
* @Pramas string
* @NativeName: ScriptLookupAttachment
* @NativeFunctionAddress 0000000140D24A50
*/

int function LookupAttachment(string)

/*
* @Breif Set this entity to use or not use doomed animations
* @Pramas bool
* @NativeName: ScriptSetUseDoomedAnims
* @NativeFunctionAddress 0000000140D249B0
*/

void function SetUseDoomedAnims(bool)

/*
* @Breif Returns true if this entity is using doomed animations
* @Pramas 
* @NativeName: ScriptIsUsingDoomedAnims
* @NativeFunctionAddress 0000000140D24940
*/

bool function IsUsingDoomedAnims()

/*
* @Breif Get the attachement id's origin vector
* @Pramas int
* @NativeName: ScriptGetAttachmentOrigin
* @NativeFunctionAddress 0000000140D248C0
*/

vector function GetAttachmentOrigin(int)

/*
* @Breif Get the attachement id's angles as a p,y,r vector
* @Pramas int
* @NativeName: ScriptGetAttachmentAngles
* @NativeFunctionAddress 0000000140D247A0
*/

vector function GetAttachmentAngles(int)

/*
* @Breif Get the attachement id's forward vector
* @Pramas int
* @NativeName: ScriptGetAttachmentForward
* @NativeFunctionAddress 0000000140D24720
*/

vector function GetAttachmentForward(int)

/*
* @Breif Get the attachement id's right vector
* @Pramas int
* @NativeName: ScriptGetAttachmentRight
* @NativeFunctionAddress 0000000140D24690
*/

vector function GetAttachmentRight(int)

/*
* @Breif Get the attachement id's up vector
* @Pramas int
* @NativeName: ScriptGetAttachmentUp
* @NativeFunctionAddress 0000000140D24610
*/

vector function GetAttachmentUp(int)

/*
* @Breif Get integer index for sequence string
* @Pramas string
* @NativeName: ScriptLookupSequence
* @NativeFunctionAddress 0000000140D24550
*/

int function LookupSequence(string)

/*
* @Breif Get animation sequence duration in seconds
* @Pramas string
* @NativeName: ScriptGetSequenceDuration
* @NativeFunctionAddress 0000000140D24490
*/

float function GetSequenceDuration(string)

/*
* @Breif Get animation position deltas
* @Pramas int, float, float
* @NativeName: GetAnimDeltas
* @NativeFunctionAddress 0000000140D24370
*/

vector function GetAnimDeltas(int, float, float)

/*
* @Breif Get where animation will end up if played from current position and angles
* @Pramas int, float, float
* @NativeName: Script_GetAnimEndPos
* @NativeFunctionAddress 0000000140D24250
*/

vector function GetAnimEndPos(int, float, float)

/*
* @Breif Given ( groupIndex, modelIndex ), Sets a bodygroup's model by index
* @Pramas int, int
* @NativeName: ScriptSetBodygroupModelByIndex
* @NativeFunctionAddress 0000000140D241D0
*/

void function SetBodygroupModelByIndex(int, int)

/*
* @Breif Given ( groupIndex, modelName ), Sets a bodygroup's model by name
* @Pramas int, string
* @NativeName: ScriptSetBodygroupModelByName
* @NativeFunctionAddress 0000000140D24150
*/

void function SetBodygroupModel(int, string)

/*
* @Breif Ask whether the main sequence is done playing
* @Pramas 
* @NativeName: IsSequenceFinished
* @NativeFunctionAddress 0000000140D240F0
*/

bool function IsSequenceFinished()

/*
* @Breif Sets the entire bodygroup state.
* @Pramas int
* @NativeName: SetFullBodygroup
* @NativeFunctionAddress 0000000140D24050
*/

void function SetFullBodygroup(int)

/*
* @Breif Gets the entire bodygroup state.
* @Pramas 
* @NativeName: GetFullBodygroup
* @NativeFunctionAddress 0000000140D23FA0
*/

int function GetFullBodygroup()

/*
* @Breif Given ( groupName ), finds the index of the bodygroup with the given name. Returns -1 if it doesn't exist
* @Pramas string
* @NativeName: ScriptFindBodygroup
* @NativeFunctionAddress 0000000140D23EB0
*/

int function FindBodygroup(string)

/*
* @Breif Given ( groupIndex, modelName ), finds the bodygroup's model index with the given name. Returns -1 if it doesn't exist
* @Pramas int, string
* @NativeName: ScriptFindBodygroupModelIndex
* @NativeFunctionAddress 0000000140D23DE0
*/

int function FindBodygroupModelIndex(int, string)

/*
* @Breif Given ( groupIndex ), gets the currently active model index of a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModelIndex
* @NativeFunctionAddress 0000000140D23D20
*/

int function GetBodygroupModelIndex(int)

/*
* @Breif Given ( groupIndex ), gets the currently active model name of a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModel
* @NativeFunctionAddress 0000000140D23C80
*/

string function GetBodygroupModel(int)

/*
* @Breif Given ( groupIndex, modelIndex ), gets the name of the bodygroup's model at the given index.
* @Pramas int, int
* @NativeName: ScriptGetBodygroupModelNameForIndex
* @NativeFunctionAddress 0000000140D23BD0
*/

string function GetBodygroupModelNameForIndex(int, int)

/*
* @Breif Given ( groupIndex ), gets the number of models in a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModelCount
* @NativeFunctionAddress 0000000140D23B10
*/

int function GetBodygroupModelCount(int)

/*
* @Breif Given ( groupIndex ), gets the index of the "blank" model, or -1 if none.
* @Pramas int
* @NativeName: ScriptGetBodygroupBlankModelIndex
* @NativeFunctionAddress 0000000140D23A50
*/

int function GetBodygroupBlankModelIndex(int)

/*
* @Breif Set whether this model should do face animations or not
* @Pramas bool
* @NativeName: ScriptSetDoFaceAnimations
* @NativeFunctionAddress 0000000140D238F0
*/

void function SetDoFaceAnimations(bool)

/*
* @Breif Get the specified pose parameter index by name. Returns -1 if not found.
* @Pramas string
* @NativeName: ScriptLookupPoseParameter
* @NativeFunctionAddress 0000000140D23830
*/

int function LookupPoseParameterIndex(string)

/*
* @Breif Set the specified pose parameter to the specified value
* @Pramas int, float
* @NativeName: ScriptSetPoseParameter
* @NativeFunctionAddress 0000000140D237B0
*/

void function SetPoseParameter(int, float)

/*
* @Breif Set the specified pose parameter to the specified value over the given duration
* @Pramas int, float, float
* @NativeName: ScriptSetPoseParameterOverTime
* @NativeFunctionAddress 0000000140D23710
*/

void function SetPoseParameterOverTime(int, float, float)

/*
* @Breif Get the specified pose parameter value
* @Pramas int
* @NativeName: ScriptGetPoseParameter
* @NativeFunctionAddress 0000000140D23650
*/

float function GetPoseParameter(int)

/*
* @Breif Set pose parameters to be the same as the given entity
* @Pramas entity
* @NativeName: SetPoseParametersSameAs
* @NativeFunctionAddress 0000000140D235D0
*/

void function SetPoseParametersSameAs(entity)

/*
* @Breif Initialize the sequence transitioner to blend from the given entity
* @Pramas entity
* @NativeName: SequenceTransitionFromEntity
* @NativeFunctionAddress 0000000140D23550
*/

void function SequenceTransitionFromEntity(entity)

/*
* @Breif Returns bool whether the entity's model has the specified sequence.
* @Pramas string
* @NativeName: Anim_HasSequence
* @NativeFunctionAddress 0000000140D234E0
*/

bool function Anim_HasSequence(string)

/*
* @Breif Returns bool whether the entity's model has the specified activity.
* @Pramas string
* @NativeName: Anim_HasActivity
* @NativeFunctionAddress 0000000140D23470
*/

bool function Anim_HasActivity(string)

/*
* @Breif Returns enum value for the current activity e.g. ACT_***
* @Pramas 
* @NativeName: Anim_GetActivity
* @NativeFunctionAddress 0000000140D233C0
*/

int function Anim_GetActivity()

/*
* @Breif Play an anim without trying to set origin/angles.
* @Pramas string
* @NativeName: Anim_Play
* @NativeFunctionAddress 0000000140D23360
*/

void function Anim_Play(string)

/*
* @Breif Play an anim without trying to set origin/angles (even if parented
* @Pramas string
* @NativeName: Anim_PlayOnly
* @NativeFunctionAddress 0000000140D23300
*/

void function Anim_PlayOnly(string)

/*
* @Breif Just sets the current sequence, without the entity entering a scripted anim mode.
* @Pramas string
* @NativeName: Anim_NonScriptedPlay
* @NativeFunctionAddress 0000000140D23280
*/

void function Anim_NonScriptedPlay(string)

/*
* @Breif Gets the name of the current sequence
* @Pramas 
* @NativeName: Script_GetCurrentSequenceName
* @NativeFunctionAddress 0000000140D231F0
*/

string function GetCurrentSequenceName()

/*
* @Breif Plays an animation with a specific ref point.
* @Pramas string, vector, vector, float
* @NativeName: Anim_PlayWithRefPoint
* @NativeFunctionAddress 0000000140D23160
*/

void function Anim_PlayWithRefPoint(string, vector, vector, float)

/*
* @Breif Disables movement due to animation delta.
* @Pramas 
* @NativeName: Anim_DisableAnimDelta
* @NativeFunctionAddress 0000000140D230D0
*/

void function Anim_DisableAnimDelta()

/*
* @Breif Disables moving the entity around via the animation. In other words, they will just animate in place.
* @Pramas 
* @NativeName: Anim_DisableUpdatePosition
* @NativeFunctionAddress 0000000140D23040
*/

void function Anim_DisableUpdatePosition()

/*
* @Breif Gets position local offset from ref point for an animation.
* @Pramas string
* @NativeName: Anim_GetRefLocalOffset_Script
* @NativeFunctionAddress 0000000140D22F60
*/

vector function Anim_GetRefLocalOffset(string)

/*
* @Breif Enables collision and root motion.
* @Pramas 
* @NativeName: Anim_EnableCollision
* @NativeFunctionAddress 0000000140D22F10
*/

void function Anim_EnableCollision()

/*
* @Breif Enables collision and root motion. Also causes ref to move in Z to keep entity on ground.
* @Pramas 
* @NativeName: Anim_EnablePlanting
* @NativeFunctionAddress 0000000140D22E70
*/

void function Anim_EnablePlanting()

/*
* @Breif By default the REF attachment is checked only the first frame to get the initial offset. Then root motion is added onto that offset. Call this function to position the entity using REF every frame instead of using root motion.
* @Pramas 
* @NativeName: Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion
* @NativeFunctionAddress 0000000140D22E20
*/

void function Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion()

/*
* @Breif Sets the initial time (in seconds) that the given animation will begin playing at
* @Pramas float
* @NativeName: Anim_SetInitialTime
* @NativeFunctionAddress 0000000140D22DB0
*/

void function Anim_SetInitialTime(float)

/*
* @Breif Immediately setup up the animation like as if it had actually already started at the given start time
* @Pramas float
* @NativeName: Anim_SetStartTime
* @NativeFunctionAddress 0000000140D22D40
*/

void function Anim_SetStartTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Anim_GetStartTime
* @NativeFunctionAddress 0000000140D22C90
*/

float function Anim_GetStartTime()

/*
* @Breif Ignore parent rotation when playing relative to a parent attachment. Turns off automatically on Anim_Stop
* @Pramas bool
* @NativeName: Anim_IgnoreParentRotation
* @NativeFunctionAddress 0000000140D22C00
*/

void function Anim_IgnoreParentRotation(bool)

/*
* @Breif Instead of blending into position over time, instantly snap into position. But only if the entity is the local view player (or parented to one)
* @Pramas 
* @NativeName: Anim_SnapForLocalPlayer
* @NativeFunctionAddress 0000000140D22B80
*/

void function Anim_SnapForLocalPlayer()

/*
* @Breif End the moment the animation beginds to fade out rather than waiting until the cycle reaches 1
* @Pramas 
* @NativeName: Anim_EnableFadeOut
* @NativeFunctionAddress 0000000140D22B00
*/

void function Anim_EnableFadeOut()

/*
* @Breif Stops playing the animation when continuing it would hit a pushable object. Resumes automatically.
* @Pramas bool
* @NativeName: Anim_SetSafePushMode
* @NativeFunctionAddress 0000000140D22AA0
*/

void function Anim_SetSafePushMode(bool)

/*
* @Breif Returns true if currently playing an animation from Anim_Play*()
* @Pramas 
* @NativeName: Anim_IsActive
* @NativeFunctionAddress 0000000140D22A40
*/

bool function Anim_IsActive()

/*
* @Breif Stops the current animation started by Anim_Play*() after signaling "ScriptAnimStop"
* @Pramas 
* @NativeName: Script_Anim_Stop
* @NativeFunctionAddress 0000000140D229F0
*/

void function Anim_Stop()

/*
* @Breif Stops the current animation started by Anim_Play*()
* @Pramas 
* @NativeName: Anim_Stop
* @NativeFunctionAddress 0000000140D229A0
*/

void function Code_Anim_Stop()

/*
* @Breif Snaps into the animation straight away rather than blending it in from its previous sequence.
* @Pramas 
* @NativeName: Anim_DisableSequenceTransition
* @NativeFunctionAddress 0000000140D22950
*/

void function Anim_DisableSequenceTransition()

/*
* @Breif Leave prediction on for the player while the animation is playing.
* @Pramas 
* @NativeName: Anim_EnablePrediction
* @NativeFunctionAddress 0000000140D228C0
*/

void function Anim_EnablePrediction()

/*
* @Breif Set the entity's velocity to match the velocity of the animation when it ends.
* @Pramas 
* @NativeName: Anim_SetVelocityOnEnd
* @NativeFunctionAddress 0000000140D22830
*/

void function Anim_SetVelocityOnEnd()

/*
* @Breif Instead of finishing the animation and exiting scripted state, just pause.
* @Pramas 
* @NativeName: Anim_PauseAtEnd
* @NativeFunctionAddress 0000000140D227A0
*/

void function Anim_PauseAtEnd()

/*
* @Breif Sets the decalIndex.
* @Pramas int decalIndex
* @NativeName: Script_SetDecal
* @NativeFunctionAddress 0000000140D1E660
*/

void function SetDecal(int decalIndex)

/*
* @Breif Gets the decalIndex.
* @Pramas 
* @NativeName: GetDecal
* @NativeFunctionAddress 0000000140D221C0
*/

int function GetDecal()

/*
* @Breif Turns the entity into a client-side ragdoll; returns true for success
* @Pramas vector, bool
* @NativeName: ScriptBecomeRagdoll
* @NativeFunctionAddress 0000000140D22150
*/

bool function BecomeRagdoll(vector, bool)

/*
* @Breif When this entity becomes a client ragdoll it will do impact fx according to the passed ImpactTable index (PrecacheImpactEffectTable)
* @Pramas int
* @NativeName: ScriptSetRagdollImpactFX
* @NativeFunctionAddress 0000000140D220E0
*/

void function SetRagdollImpactFX(int)

/*
* @Breif Entity will continue animating on the server after it becomes a ragdoll on the client. This helps the ragdoll keep momentum when the transition occurs.
* @Pramas bool
* @NativeName: ScriptSetContinueAnimatingAfterRagdoll
* @NativeFunctionAddress 0000000140D22080
*/

void function SetContinueAnimatingAfterRagdoll(bool)

/*
* @Breif Gib this entity
* @Pramas vector impulseforce
* @NativeName: Gib
* @NativeFunctionAddress 0000000140D22020
*/

void function Gib(vector impulseforce)

/*
* @Breif Dissolve this entity
* @Pramas int, vector, int
* @NativeName: ScriptDissolve
* @NativeFunctionAddress 0000000140D21F80
*/

void function Dissolve(int, vector, int)

/*
* @Breif Dissolve this entity without killing it.
* @Pramas int, vector, int
* @NativeName: ScriptDissolveNonLethal
* @NativeFunctionAddress 0000000140D21EE0
*/

void function DissolveNonLethal(int, vector, int)

/*
* @Breif If this.IsDissolving(), stop the effect.
* @Pramas 
* @NativeName: ScriptDissolveStop
* @NativeFunctionAddress 0000000140D21E90
*/

void function DissolveStop()

/*
* @Breif True if entity is dissolving.
* @Pramas 
* @NativeName: IsDissolving
* @NativeFunctionAddress 0000000140D21E30
*/

bool function IsDissolving()

/*
* @Breif Returns the cycle for the given event in the given animation sequence. Returns -1 on any errors.
* @Pramas string, string
* @NativeName: ScriptGetAnimEventCycleFrac
* @NativeFunctionAddress 0000000140D21D70
*/

float function GetAnimEventCycleFrac(string, string)

/*
* @Breif Returns the cycle for the given AE_SV/CL_VSCRIPT_CALLBACK event, with the given option name, in the given animation sequence. Returns -1 on any errors.
* @Pramas string, string
* @NativeName: ScriptGetScriptedAnimEventCycleFrac
* @NativeFunctionAddress 0000000140D21CB0
*/

float function GetScriptedAnimEventCycleFrac(string, string)

/*
* @Breif Sets the sky scale for this entity.  Pass in target skyscale and time to lerp to that value.
* @Pramas float, float
* @NativeName: LerpSkyScale
* @NativeFunctionAddress 0000000140D21C20
*/

void function LerpSkyScale(float, float)

/*
* @Breif Sets the playback rate of the recorded animation started with PlayRecordedAnimation().
* @Pramas float
* @NativeName: Script_SetRecordedAnimationPlaybackRate
* @NativeFunctionAddress 0000000140D21BB0
*/

void function SetRecordedAnimationPlaybackRate(float)

/*
* @Breif 
* @Pramas float
* @NativeName: ScriptSetCycle
* @NativeFunctionAddress 0000000140D21B00
*/

void function SetCycle(float)

/*
* @Breif Get how far through the animation is.
* @Pramas 
* @NativeName: GetCycle
* @NativeFunctionAddress 0000000140D21A50
*/

float function GetCycle()

/*
* @Breif Set the playback rate
* @Pramas float
* @NativeName: Anim_SetPlaybackRate
* @NativeFunctionAddress 0000000140D21990
*/

void function Anim_SetPlaybackRate(float)

/*
* @Breif Get the playback rate
* @Pramas 
* @NativeName: Anim_GetPlaybackRate
* @NativeFunctionAddress 0000000140D218E0
*/

float function Anim_GetPlaybackRate()

/*
* @Breif Change the playback rate of an already-playing animation
* @Pramas float
* @NativeName: Anim_ChangePlaybackRate
* @NativeFunctionAddress 0000000140D21810
*/

void function Anim_ChangePlaybackRate(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetSequence
* @NativeFunctionAddress 0000000140D21760
*/

int function GetSequence()

/*
* @Breif Sets the scale for the model for the animating entity.
* @Pramas float scale
* @NativeName: SetModelScale
* @NativeFunctionAddress 0000000140D216B0
*/

void function SetModelScale(float scale)

/*
* @Breif Gets the scale for the model for the animating entity.
* @Pramas 
* @NativeName: GetModelScale
* @NativeFunctionAddress 0000000140D21600
*/

float function GetModelScale()

/*
* @Breif Force sync the animation of the created anim prop entity with the parent entity.
* @Pramas entity parentEntity, float startCycle, float endCycle, string windowName
* @NativeName: Script_AnimSyncScriptProp_Begin
* @NativeFunctionAddress 0000000140D21540
*/

void function AnimSyncScriptProp_Begin(entity parentEntity, float startCycle, float endCycle, string windowName)

/*
* @Breif Force sync the animation of the created anim prop entity with the parent entity.
* @Pramas entity parentEntity
* @NativeName: Script_AnimSyncScriptProp_End
* @NativeFunctionAddress 0000000140D214C0
*/

void function AnimSyncScriptProp_End(entity parentEntity)

/*
* @Breif Gets the starting position for an animation played with a specific ref point.
* @Pramas string animName, vector origin, vector angles
* @NativeName: Anim_GetStartForRefPoint_Script
* @NativeFunctionAddress 0000000140D11060
*/

var function Anim_GetStartForRefPoint()

/*
* @Breif Gets the starting position for an animation played with a parent entity and attachment as a ref point.
* @Pramas string animName, entity ent, string attachment
* @NativeName: Anim_GetStartForRefEntity_Script
* @NativeFunctionAddress 0000000140D110B0
*/

var function Anim_GetStartForRefEntity()

/*
* @Breif Gets the starting position for an animation played with a specific ref point.
* @Pramas animName, referencePosition, referenceAngles
* @NativeName: Anim_GetStartForRefPoint_ScriptOld
* @NativeFunctionAddress 0000000140D11100
*/

table function Anim_GetStartForRefPoint_Old(var, string, vector, vector)

/*
* @Breif Gets the starting position for an animation played with a parent entity and attachment as a ref point.
* @Pramas animName, referenceEntity, referenceAttachment
* @NativeName: Anim_GetStartForRefEntity_ScriptOld
* @NativeFunctionAddress 0000000140D11150
*/

table function Anim_GetStartForRefEntity_Old(var, string, entity, string)

/*
* @Breif Returns the position and angle of an attachment at the given time in the given animation
* @Pramas string animName, string attachName, float time
* @NativeName: Script_GetAttachmentAtTime
* @NativeFunctionAddress 0000000140D11310
*/

var function Anim_GetAttachmentAtTime()

/*
* @Breif Plays an animation recorded via StartRecordingAnimation(). If ref entity is specified, origin and angles should be in its local space.
* @Pramas var recordedAnim, vector origin, vector angles, float blendtime = 0, entity ref = null
* @NativeName: Script_PlayRecordedAnimation
* @NativeFunctionAddress 0000000140D11360
*/

var function PlayRecordedAnimation()

/*
* @Breif Returns the active weapon.
* @Pramas int
* @NativeName: Script_GetActiveWeapon
* @NativeFunctionAddress 0000000140D211E0
*/

entity function GetActiveWeapon(int)

/*
* @Breif Sets the active weapon.
* @Pramas int, string
* @NativeName: Script_SetActiveWeaponByName
* @NativeFunctionAddress 0000000140D21160
*/

void function SetActiveWeaponByName(int, string)

/*
* @Breif Sets the active weapon.
* @Pramas int, int
* @NativeName: Script_SetActiveWeaponBySlot
* @NativeFunctionAddress 0000000140D210E0
*/

void function SetActiveWeaponBySlot(int, int)

/*
* @Breif Returns the anti titan weapon.
* @Pramas 
* @NativeName: Script_GetAntiTitanWeapon
* @NativeFunctionAddress 0000000140D21080
*/

entity function GetAntiTitanWeapon()

/*
* @Breif Returns the active weapon.
* @Pramas 
* @NativeName: Script_GetSidearmWeapon
* @NativeFunctionAddress 0000000140D20F70
*/

entity function GetSidearmWeapon()

/*
* @Breif Returns the last primary weapon used
* @Pramas int
* @NativeName: Script_GetLatestPrimaryWeapon
* @NativeFunctionAddress 0000000140D20EE0
*/

entity function GetLatestPrimaryWeapon(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetLatestPrimaryWeaponForIndexZeroOrOne
* @NativeFunctionAddress 0000000140D20E60
*/

entity function GetLatestPrimaryWeaponForIndexZeroOrOne(int)

/*
* @Breif Returns the selected weapon.
* @Pramas int
* @NativeName: Script_GetSelectedWeapon
* @NativeFunctionAddress 0000000140D20DD0
*/

entity function GetSelectedWeapon(int)

/*
* @Breif Returns true if the weapon slot is disabled
* @Pramas int
* @NativeName: Script_Weapon_IsSlotDisabled
* @NativeFunctionAddress 0000000140D20D40
*/

bool function IsWeaponSlotDisabled(int)

/*
* @Breif Returns the weapon disable flags that are active
* @Pramas 
* @NativeName: Script_Weapon_GetDisableFlags
* @NativeFunctionAddress 0000000140D20C90
*/

int function GetWeaponDisableFlags()

/*
* @Breif Returns true if player is using an offhand weapon in the active slot.
* @Pramas int
* @NativeName: Script_Weapon_IsUsingOffhand
* @NativeFunctionAddress 0000000140D20C00
*/

bool function IsUsingOffhandWeapon(int)

/*
* @Breif Returns position that has been offset relative to the view
* @Pramas vector, vector
* @NativeName: OffsetPositionFromView_Script
* @NativeFunctionAddress 0000000140D20B20
*/

vector function OffsetPositionFromView(vector, vector)

/*
* @Breif Returns angles that has been offset relative to the view
* @Pramas vector
* @NativeName: OffsetFromViewAngles_Script
* @NativeFunctionAddress 0000000140D20A40
*/

vector function OffsetFromViewAngles(vector)

/*
* @Breif Refills ammo for all equipped weapons.
* @Pramas 
* @NativeName: RefillAllAmmo
* @NativeFunctionAddress 0000000140D209F0
*/

void function RefillAllAmmo()

/*
* @Breif Get the amount of currently loaded ammo in the active weapon.
* @Pramas int
* @NativeName: Script_GetActiveWeaponPrimaryAmmoLoaded
* @NativeFunctionAddress 0000000140D20930
*/

int function GetActiveWeaponPrimaryAmmoLoaded(int)

/*
* @Breif Set the total amount of ammo for the active weapon that this character has.
* @Pramas int, int
* @NativeName: Script_SetActiveWeaponPrimaryAmmoTotal
* @NativeFunctionAddress 0000000140D208B0
*/

void function SetActiveWeaponPrimaryAmmoTotal(int, int)

/*
* @Breif Set the amount of currently loaded ammo in the active weapon.
* @Pramas int, int
* @NativeName: Script_SetActiveWeaponPrimaryAmmoLoaded
* @NativeFunctionAddress 0000000140D20830
*/

void function SetActiveWeaponPrimaryAmmoLoaded(int, int)

/*
* @Breif Get the normal weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_GetNormal
* @NativeFunctionAddress 0000000140D207B0
*/

entity function GetNormalWeapon(int)

/*
* @Breif Give an existing weapon to the specified slot
* @Pramas entity, int
* @NativeName: Script_Weapon_GiveExistingOffhand
* @NativeFunctionAddress 0000000140D20720
*/

void function GiveExistingOffhandWeapon(entity, int)

/*
* @Breif Take the offhand weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_TakeOffhand
* @NativeFunctionAddress 0000000140D206B0
*/

void function TakeOffhandWeapon(int)

/*
* @Breif Take the offhand weapon in the specified slot and return the weapon entity
* @Pramas int
* @NativeName: Script_Weapon_TakeOffhand_NoDelete
* @NativeFunctionAddress 0000000140D20630
*/

entity function TakeOffhandWeapon_NoDelete(int)

/*
* @Breif Get the offhand weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_GetOffhand
* @NativeFunctionAddress 0000000140D205B0
*/

entity function GetOffhandWeapon(int)

/*
* @Breif Set the selected offhand weapon.
* @Pramas int, entity
* @NativeName: Script_Weapon_SetSelectedOffhand
* @NativeFunctionAddress 0000000140D20520
*/

void function SetSelectedOffhand(int, entity)

/*
* @Breif Clear offhand weapons
* @Pramas int
* @NativeName: Script_Weapon_ClearOffhand
* @NativeFunctionAddress 0000000140D204B0
*/

void function ClearOffhand(int)

/*
* @Breif Returns true if the player is switching weapons in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_IsSwitching
* @NativeFunctionAddress 0000000140D20400
*/

bool function IsSwitching(int)

/*
* @Breif Take the weapon by name.
* @Pramas string
* @NativeName: Script_TakeWeapon
* @NativeFunctionAddress 0000000140D203A0
*/

void function TakeWeapon(string)

/*
* @Breif Take the weapon by name, skipping any put-the-weapon-away formalities.
* @Pramas string
* @NativeName: Script_TakeWeaponNow
* @NativeFunctionAddress 0000000140D20340
*/

void function TakeWeaponNow(string)

/*
* @Breif Take weapon by entity
* @Pramas entity
* @NativeName: Script_TakeWeaponByEnt
* @NativeFunctionAddress 0000000140D202C0
*/

void function TakeWeaponByEnt(entity)

/*
* @Breif Take weapon by entity, skipping the put away weapon stuff
* @Pramas entity
* @NativeName: Script_TakeWeaponByEntNow
* @NativeFunctionAddress 0000000140D20240
*/

void function TakeWeaponByEntNow(entity)

/*
* @Breif Take weapon by index
* @Pramas int
* @NativeName: Script_TakeNormalWeaponByIndex
* @NativeFunctionAddress 0000000140D201D0
*/

void function TakeNormalWeaponByIndex(int)

/*
* @Breif takes a normal weapon at a specifix slot index
* @Pramas int
* @NativeName: Script_TakeNormalWeaponByIndexNow
* @NativeFunctionAddress 0000000140D20160
*/

void function TakeNormalWeaponByIndexNow(int)

/*
* @Breif Take the weapon by name and returns weapon entity without deleting it.
* @Pramas string
* @NativeName: Script_Weapon_Take_NoDelete
* @NativeFunctionAddress 0000000140D200F0
*/

entity function TakeWeapon_NoDelete(string)

/*
* @Breif Sets whether this entity will generate a callback to CodeCallback_OnInventoryChanged when its inventory changes
* @Pramas bool
* @NativeName: Script_Weapon_SetInventoryChangedCallbackEnabled
* @NativeFunctionAddress 0000000140D20090
*/

void function SetInventoryChangedCallbackEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ResetFirstDeployForAllWeapons
* @NativeFunctionAddress 0000000140D20040
*/

void function ResetFirstDeployForAllWeapons()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ClearFirstDeployForAllWeapons
* @NativeFunctionAddress 0000000140D1FFF0
*/

void function ClearFirstDeployForAllWeapons()

/*
* @Breif Gets the forward view vector of a player or NPC. Prefer GetViewVector or GetNPCViewVector when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewVector
* @NativeFunctionAddress 0000000140D1FF20
*/

vector function GetPlayerOrNPCViewVector()

/*
* @Breif Gets the forward view vector of a player or NPC. Prefer GetViewForward or GetNPCViewForward when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewForward
* @NativeFunctionAddress 0000000140D1FE50
*/

vector function GetPlayerOrNPCViewForward()

/*
* @Breif Gets the up view vector of a player or NPC. Prefer GetViewUp or GetNPCViewUp when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewUp
* @NativeFunctionAddress 0000000140D1FD80
*/

vector function GetPlayerOrNPCViewUp()

/*
* @Breif Gets the right view vector of a player or NPC. Prefer GetViewright or GetNPCViewRight when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewRight
* @NativeFunctionAddress 0000000140D1FCB0
*/

vector function GetPlayerOrNPCViewRight()

/*
* @Breif Set time at which this player or NPC titan will die from being out of bounds (assuming it doesn't move into bounds)
* @Pramas float
* @NativeName: SetOutOfBoundsDeadTime
* @NativeFunctionAddress 0000000140D1FC40
*/

void function SetOutOfBoundsDeadTime(float)

/*
* @Breif Get time at which this player or NPC titan will die from being out of bounds (assuming it doesn't move into bounds)
* @Pramas 
* @NativeName: GetOutOfBoundsDeadTime
* @NativeFunctionAddress 0000000140D1FB90
*/

float function GetOutOfBoundsDeadTime()

/*
* @Breif Give an existing weapon entity to player or AI
* @Pramas entity
* @NativeName: Script_GiveExistingWeapon
* @NativeFunctionAddress 0000000140D1FB10
*/

void function GiveExistingWeapon(entity)

/*
* @Breif Reset health change rate for AI logic
* @Pramas 
* @NativeName: ResetHealthChangeRate
* @NativeFunctionAddress 0000000140D1FAB0
*/

void function ResetHealthChangeRate()

/*
* @Breif Set amount of health per segment
* @Pramas int
* @NativeName: SetHealthPerSegment
* @NativeFunctionAddress 0000000140D1FA40
*/

void function SetHealthPerSegment(int)

/*
* @Breif Get amount of health per segment
* @Pramas 
* @NativeName: GetHealthPerSegment
* @NativeFunctionAddress 0000000140D1F990
*/

int function GetHealthPerSegment()

/*
* @Breif Sets the titanSoul of this entity
* @Pramas entity
* @NativeName: Script_SetTitanSoul
* @NativeFunctionAddress 0000000140D1F910
*/

void function SetTitanSoul(entity)

/*
* @Breif Gets the titanSoul for this entity
* @Pramas 
* @NativeName: Script_GetTitanSoul
* @NativeFunctionAddress 0000000140D1F880
*/

entity function GetTitanSoul()

/*
* @Breif Gets the current accumulated damage amount
* @Pramas 
* @NativeName: Script_GetDamageAccumulator
* @NativeFunctionAddress 0000000140D1F7D0
*/

float function GetDamageAccumulator()

/*
* @Breif Get headshot fx from settings
* @Pramas 
* @NativeName: GetSettingsHeadshotFX
* @NativeFunctionAddress 0000000140D1F740
*/

asset function GetSettingsHeadshotFX()

/*
* @Breif 
* @Pramas float
* @NativeName: SetCloakReactEndTime
* @NativeFunctionAddress 0000000140D1F6D0
*/

void function SetCloakReactEndTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsPhaseShiftedOrPending
* @NativeFunctionAddress 0000000140D1F650
*/

bool function IsPhaseShiftedOrPending()

/*
* @Breif 
* @Pramas float, float
* @NativeName: Script_PhaseShiftBegin
* @NativeFunctionAddress 0000000140D1F5C0
*/

void function PhaseShiftBegin(float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnablePhaseShiftFlags
* @NativeFunctionAddress 0000000140D1F560
*/

void function EnablePhaseShiftFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisablePhaseShiftFlags
* @NativeFunctionAddress 0000000140D1F500
*/

void function DisablePhaseShiftFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PhaseShiftCancel
* @NativeFunctionAddress 0000000140D1F4B0
*/

void function PhaseShiftCancel()

/*
* @Breif Time left in phase shift.
* @Pramas 
* @NativeName: Script_PhaseShiftTimeRemaining
* @NativeFunctionAddress 0000000140D1F3E0
*/

float function PhaseShiftTimeRemaining()

/*
* @Breif 
* @Pramas 
* @NativeName: PhaseShiftTimePassed
* @NativeFunctionAddress 0000000140D1F300
*/

float function PhaseShiftTimePassed()

/*
* @Breif Gets the entity you are about to phase shift into
* @Pramas 
* @NativeName: Script_GetEntityAtPhaseShiftExitPosition
* @NativeFunctionAddress 0000000140D1F2A0
*/

entity function GetEntityAtPhaseShiftExitPosition()

/*
* @Breif Returns whether in the middle of any context action (like melee or leeching)
* @Pramas 
* @NativeName: ContextAction_IsActive
* @NativeFunctionAddress 0000000140D1F230
*/

bool function ContextAction_IsActive()

/*
* @Breif Returns whether in the middle of a busy context action
* @Pramas 
* @NativeName: ContextAction_IsBusy
* @NativeFunctionAddress 0000000140D1F1C0
*/

bool function ContextAction_IsBusy()

/*
* @Breif Returns whether in the middle of a leeching context action
* @Pramas 
* @NativeName: ContextAction_IsLeeching
* @NativeFunctionAddress 0000000140D1F130
*/

bool function ContextAction_IsLeeching()

/*
* @Breif Returns true if the entity is in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecution
* @NativeFunctionAddress 0000000140D1F0C0
*/

bool function ContextAction_IsMeleeExecution()

/*
* @Breif Returns true if the entity is an attacker in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecutionAttacker
* @NativeFunctionAddress 0000000140D1F050
*/

bool function ContextAction_IsMeleeExecutionAttacker()

/*
* @Breif Returns true if the entity is a target in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecutionTarget
* @NativeFunctionAddress 0000000140D1EFE0
*/

bool function ContextAction_IsMeleeExecutionTarget()

/*
* @Breif Returns whether entity is in the middle of a battery requisition context action
* @Pramas 
* @NativeName: ContextAction_IsRequisitionBattery
* @NativeFunctionAddress 0000000140D1EF70
*/

bool function ContextAction_IsRequisitionBattery()

/*
* @Breif Returns whether the player is in a rodeo context action
* @Pramas 
* @NativeName: ContextAction_IsRodeo
* @NativeFunctionAddress 0000000140D1EF00
*/

bool function ContextAction_IsRodeo()

/*
* @Breif Returns whether the player is in a vehicle context action
* @Pramas 
* @NativeName: ContextAction_IsInVehicle
* @NativeFunctionAddress 0000000140D1EE90
*/

bool function ContextAction_IsInVehicle()

/*
* @Breif Returns whether the player is in a zipline context action
* @Pramas 
* @NativeName: ContextAction_IsZipline
* @NativeFunctionAddress 0000000140D1EE20
*/

bool function ContextAction_IsZipline()

/*
* @Breif Returns whether the player is in a fastball context action
* @Pramas 
* @NativeName: ContextAction_IsFastball
* @NativeFunctionAddress 0000000140D1EDB0
*/

bool function ContextAction_IsFastball()

/*
* @Breif Returns whether the player is in a revive context action
* @Pramas 
* @NativeName: ContextAction_IsReviving
* @NativeFunctionAddress 0000000140D1ED40
*/

bool function ContextAction_IsReviving()

/*
* @Breif Returns whether the player is in a being-revived context action
* @Pramas 
* @NativeName: ContextAction_IsBeingRevived
* @NativeFunctionAddress 0000000140D1ECD0
*/

bool function ContextAction_IsBeingRevived()

/*
* @Breif Marks the entity as in the middle of a busy context action (so other things don't interrupt them)
* @Pramas 
* @NativeName: ContextAction_SetBusy
* @NativeFunctionAddress 0000000140D1EC80
*/

void function ContextAction_SetBusy()

/*
* @Breif Marks the entity as no longer doing some kind of context action
* @Pramas 
* @NativeName: ContextAction_ClearBusy
* @NativeFunctionAddress 0000000140D1EC30
*/

void function ContextAction_ClearBusy()

/*
* @Breif Marks the entity as inside a vehicle
* @Pramas 
* @NativeName: ContextAction_SetInVehicle
* @NativeFunctionAddress 0000000140D1EBE0
*/

void function ContextAction_SetInVehicle()

/*
* @Breif Marks the entity as no longer inside a vehicle
* @Pramas 
* @NativeName: ContextAction_ClearInVehicle
* @NativeFunctionAddress 0000000140D1EB90
*/

void function ContextAction_ClearInVehicle()

/*
* @Breif Marks that the entity is executing a fastball
* @Pramas 
* @NativeName: ContextAction_SetFastball
* @NativeFunctionAddress 0000000140D1EB40
*/

void function ContextAction_SetFastball()

/*
* @Breif Marks that the entity as no longer executing a fastball
* @Pramas 
* @NativeName: ContextAction_ClearFastball
* @NativeFunctionAddress 0000000140D1EAF0
*/

void function ContextAction_ClearFastball()

/*
* @Breif Marks the entity as executing a revive
* @Pramas 
* @NativeName: ContextAction_SetReviving
* @NativeFunctionAddress 0000000140D1EAA0
*/

void function ContextAction_SetReviving()

/*
* @Breif Marks the entity as no longer executing a revive
* @Pramas 
* @NativeName: ContextAction_ClearReviving
* @NativeFunctionAddress 0000000140D1EA50
*/

void function ContextAction_ClearReviving()

/*
* @Breif Marks the entity as being revived
* @Pramas 
* @NativeName: ContextAction_SetBeingRevived
* @NativeFunctionAddress 0000000140D1EA00
*/

void function ContextAction_SetBeingRevived()

/*
* @Breif Marks the entity as no longer being revived
* @Pramas 
* @NativeName: ContextAction_ClearBeingRevived
* @NativeFunctionAddress 0000000140D1E9B0
*/

void function ContextAction_ClearBeingRevived()

/*
* @Breif Let script tell code a melee attack has started (for the attacker)
* @Pramas float
* @NativeName: PlayerMelee_ExecutionStartAttacker
* @NativeFunctionAddress 0000000140D1E930
*/

bool function PlayerMelee_ExecutionStartAttacker(float)

/*
* @Breif Let script tell code a melee attack has started (for the target/victim)
* @Pramas entity
* @NativeName: PlayerMelee_ExecutionStartTarget
* @NativeFunctionAddress 0000000140D1E8B0
*/

bool function PlayerMelee_ExecutionStartTarget(entity)

/*
* @Breif Let script tell code a melee attack has ended (for the attacker)
* @Pramas 
* @NativeName: PlayerMelee_ExecutionEndAttacker
* @NativeFunctionAddress 0000000140D1E850
*/

bool function PlayerMelee_ExecutionEndAttacker()

/*
* @Breif Let script tell code a melee attack has ended (for the target/victim)
* @Pramas 
* @NativeName: PlayerMelee_ExecutionEndTarget
* @NativeFunctionAddress 0000000140D1E7F0
*/

bool function PlayerMelee_ExecutionEndTarget()

/*
* @Breif Let script tell code a leech has started
* @Pramas 
* @NativeName: Event_LeechStart
* @NativeFunctionAddress 0000000140D1E7A0
*/

void function Event_LeechStart()

/*
* @Breif Let script tell code a leech has ended
* @Pramas 
* @NativeName: Event_LeechEnd
* @NativeFunctionAddress 0000000140D1E750
*/

void function Event_LeechEnd()

/*
* @Breif Let script tell code battery requisitioning has started
* @Pramas 
* @NativeName: ContextAction_RequisitionBatteryStart
* @NativeFunctionAddress 0000000140D1E700
*/

void function ContextAction_RequisitionBatteryStart()

/*
* @Breif Let script tell code battery requisitioning has ended
* @Pramas 
* @NativeName: ContextAction_RequisitionBatteryEnd
* @NativeFunctionAddress 0000000140D1E6B0
*/

void function ContextAction_RequisitionBatteryEnd()

/*
* @Breif Prints the contents of the weapon inventory to the console
* @Pramas 
* @NativeName: PrintInventory
* @NativeFunctionAddress 0000000140D1E660
*/

void function PrintInventory()

/*
* @Breif Sets NPC enemy selection priority override. Refer to player/AI settings files for values
* @Pramas int
* @NativeName: SetNPCPriorityOverride
* @NativeFunctionAddress 0000000140D1E5C0
*/

void function SetNPCPriorityOverride(int)

/*
* @Breif AI will never naturally choose this entity as their enemy
* @Pramas 
* @NativeName: SetNPCPriorityOverride_NoThreat
* @NativeFunctionAddress 0000000140D1E540
*/

void function SetNPCPriorityOverride_NoThreat()

/*
* @Breif Clears NPC enemy selection priority override
* @Pramas 
* @NativeName: ClearNPCPriorityOverride
* @NativeFunctionAddress 0000000140D1E4E0
*/

void function ClearNPCPriorityOverride()

/*
* @Breif drops a weapon using the default class behavior
* @Pramas entity
* @NativeName: Script_Weapon_Drop
* @NativeFunctionAddress 0000000140D1E460
*/

void function DropWeapon(entity)

/*
* @Breif 
* @Pramas bool alwaysPasses
* @NativeName: Script_SetHudInfoVisibilityTestAlwaysPasses
* @NativeFunctionAddress 0000000140D1E3D0
*/

void function SetHudInfoVisibilityTestAlwaysPasses(bool alwaysPasses)

/*
* @Breif Exposed to client targetinfo RUIs as 'image targetIcon' arg.
* @Pramas asset newIcon
* @NativeName: Script_SetTargetInfoIcon
* @NativeFunctionAddress 0000000140D1E330
*/

void function SetTargetInfoIcon(asset newIcon)

/*
* @Breif Adds a tether to this player or AI. Returns an integer ID
* @Pramas vector
* @NativeName: Script_AddTether
* @NativeFunctionAddress 0000000140D1E280
*/

int function AddTether(vector)

/*
* @Breif Removes a tether from this player or AI. ID should be return value of AddPlayerTether.
* @Pramas int
* @NativeName: Script_RemoveTether
* @NativeFunctionAddress 0000000140D1E210
*/

void function RemoveTether(int)

/*
* @Breif Checks if the tether still exists. ID should be return value of AddPlayerTether.
* @Pramas int
* @NativeName: Script_IsValidTetherID
* @NativeFunctionAddress 0000000140D1E150
*/

bool function IsValidTetherID(int)

/*
* @Breif Transfers all tethers to another entity. Destroys all tethers on the destination entity, if any.
* @Pramas entity
* @NativeName: Script_TransferTethersToEntity
* @NativeFunctionAddress 0000000140D1E0D0
*/

void function TransferTethersToEntity(entity)

/*
* @Breif Returns the last time the entity fired a bullet weapon.
* @Pramas 
* @NativeName: GetLastFiredTime
* @NativeFunctionAddress 0000000140D1E020
*/

float function GetLastFiredTime()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_AddSharedEnergy
* @NativeFunctionAddress 0000000140D1DFB0
*/

void function AddSharedEnergy(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_TakeSharedEnergy
* @NativeFunctionAddress 0000000140D1DF30
*/

void function TakeSharedEnergy(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_CanUseSharedEnergy
* @NativeFunctionAddress 0000000140D1DEA0
*/

bool function CanUseSharedEnergy(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyCount
* @NativeFunctionAddress 0000000140D1DDF0
*/

int function GetSharedEnergyCount()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetSharedEnergyTotal
* @NativeFunctionAddress 0000000140D1DD30
*/

void function SetSharedEnergyTotal(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyTotal
* @NativeFunctionAddress 0000000140D1DC80
*/

int function GetSharedEnergyTotal()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetSharedEnergyRegenRate
* @NativeFunctionAddress 0000000140D1DBD0
*/

void function SetSharedEnergyRegenRate(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyRegenRate
* @NativeFunctionAddress 0000000140D1DB20
*/

float function GetSharedEnergyRegenRate()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetSharedEnergyRegenDelay
* @NativeFunctionAddress 0000000140D1DAB0
*/

void function SetSharedEnergyRegenDelay(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyRegenDelay
* @NativeFunctionAddress 0000000140D1DA00
*/

float function GetSharedEnergyRegenDelay()

/*
* @Breif 
* @Pramas float duration
* @NativeName: Script_SetSharedEnergyPenaltyDuration
* @NativeFunctionAddress 0000000140D1D990
*/

void function SetSharedEnergyPenaltyDuration(float duration)

/*
* @Breif 
* @Pramas int threshold
* @NativeName: Script_SetSharedEnergyLockoutThreshold
* @NativeFunctionAddress 0000000140D1D8C0
*/

void function SetSharedEnergyLockoutThreshold(int threshold)

/*
* @Breif 
* @Pramas 
* @NativeName: EnableTitanStepDamage
* @NativeFunctionAddress 0000000140D1D860
*/

void function EnableTitanStepDamage()

/*
* @Breif 
* @Pramas 
* @NativeName: DisableTitanStepDamage
* @NativeFunctionAddress 0000000140D1D800
*/

void function DisableTitanStepDamage()

/*
* @Breif Returns all active weapons. Array indices will not match active weapon slot values and the array will have no null elements.
* @Pramas 
* @NativeName: Script_GetAllActiveWeapons
* @NativeFunctionAddress 0000000140D113B0
*/

var function GetAllActiveWeapons()

/*
* @Breif Take the current weapon and instantly replace with the new weapon.  This will skip any holster and draw animations.
* @Pramas int activeInventorySlot, string weaponName, array< string > mods = null
* @NativeName: Script_ReplaceActiveWeapon
* @NativeFunctionAddress 0000000140D11400
*/

var function ReplaceActiveWeapon()

/*
* @Breif Get array of the main weapons.
* @Pramas 
* @NativeName: Script_Weapon_GetMainArray
* @NativeFunctionAddress 0000000140D11450
*/

var function GetMainWeapons()

/*
* @Breif Give the offhand weapon in the specified slot, and optionally apply active mods.
* @Pramas string weaponName, int slotIndex, array< string > mods = null
* @NativeName: Script_Weapon_GiveOffhand
* @NativeFunctionAddress 0000000140D114A0
*/

var function GiveOffhandWeapon()

/*
* @Breif Get array of the offhand weapons.
* @Pramas 
* @NativeName: Script_Weapon_GetOffhandArray
* @NativeFunctionAddress 0000000140D11590
*/

var function GetOffhandWeapons()

/*
* @Breif Create a weapon of the given classname, and optionally apply active mods or disable first deploy animation.
* @Pramas string weaponname, int inventorySlot, array< string > mods = null, bool doFirstDeploy = true
* @NativeName: Script_GiveWeapon
* @NativeFunctionAddress 0000000140D115E0
*/

var function GiveWeapon()

/*
* @Breif Return if AI settings have been set
* @Pramas 
* @NativeName: HasAISettings
* @NativeFunctionAddress 0000000140F3DC40
*/

bool function HasAISettings()

/*
* @Breif Sets the AI's settings file
* @Pramas string
* @NativeName: SetAISettings
* @NativeFunctionAddress 0000000140F3DBE0
*/

void function SetAISettings(string)

/*
* @Breif Gets the AI settings name
* @Pramas 
* @NativeName: GetAISettingsName
* @NativeFunctionAddress 0000000140F3DB50
*/

string function GetAISettingsName()

/*
* @Breif Sets the AI's behavior selector
* @Pramas string
* @NativeName: SetBehaviorSelector
* @NativeFunctionAddress 0000000140F3DAF0
*/

void function SetBehaviorSelector(string)

/*
* @Breif Gets the AI's subclass type
* @Pramas 
* @NativeName: GetSubclass
* @NativeFunctionAddress 0000000140F3DA40
*/

int function GetSubclass()

/*
* @Breif Sets the AI's subclass type
* @Pramas int
* @NativeName: SetSubclass
* @NativeFunctionAddress 0000000140F3D9D0
*/

void function SetSubclass(int)

/*
* @Breif Gets the AI Class
* @Pramas 
* @NativeName: Script_GetAIClass
* @NativeFunctionAddress 0000000140F3D920
*/

int function GetAIClass()

/*
* @Breif Gets the AI Class by name
* @Pramas 
* @NativeName: GetAIClassName
* @NativeFunctionAddress 0000000140F3D890
*/

string function GetAIClassName()

/*
* @Breif Gets the AI body type
* @Pramas 
* @NativeName: GetBodyType
* @NativeFunctionAddress 0000000140F3D800
*/

string function GetBodyType()

/*
* @Breif Returns whether the AI is crouching
* @Pramas 
* @NativeName: IsCrouching
* @NativeFunctionAddress 0000000140F3D7A0
*/

bool function IsCrouching()

/*
* @Breif Use animation sequence for bounding box (expensive)
* @Pramas bool
* @NativeName: UseSequenceBounds
* @NativeFunctionAddress 0000000140F3D740
*/

void function UseSequenceBounds(bool)

/*
* @Breif Return default model name for current team
* @Pramas 
* @NativeName: ScriptGetSettingModelName
* @NativeFunctionAddress 0000000140F3D6B0
*/

asset function GetSettingModelName()

/*
* @Breif Return default title for current team
* @Pramas 
* @NativeName: GetSettingTitle
* @NativeFunctionAddress 0000000140F3D620
*/

string function GetSettingTitle()

/*
* @Breif Add this npc to the specified player's fireteam in the specified slot, and set player as this npc's boss.
* @Pramas entity, int
* @NativeName: Script_AddToFireteam
* @NativeFunctionAddress 0000000140F3D590
*/

void function AddToFireteam(entity, int)

/*
* @Breif Remove this npc from any fireteam.
* @Pramas 
* @NativeName: Script_RemoveFromFireteam
* @NativeFunctionAddress 0000000140F3D540
*/

void function RemoveFromFireteam()

/*
* @Breif Enable NPC Behavior by behavior name
* @Pramas string
* @NativeName: ScriptEnableBehavior
* @NativeFunctionAddress 0000000140F3D4E0
*/

void function EnableBehavior(string)

/*
* @Breif Disable NPC Behavior by behavior name
* @Pramas string
* @NativeName: ScriptDisableBehavior
* @NativeFunctionAddress 0000000140F3D480
*/

void function DisableBehavior(string)

/*
* @Breif Setup follow behavior (follow target and formation)
* @Pramas entity, int
* @NativeName: ScriptInitFollowBehavior
* @NativeFunctionAddress 0000000140F3D3F0
*/

void function InitFollowBehavior(entity, int)

/*
* @Breif Set target move tolerance to change follow position when follow target moves
* @Pramas float
* @NativeName: ScriptSetFollowTargetMoveTolerance
* @NativeFunctionAddress 0000000140F3D380
*/

void function SetFollowTargetMoveTolerance(float)

/*
* @Breif Set goal tolerance when not in combat
* @Pramas float
* @NativeName: ScriptSetFollowGoalTolerance
* @NativeFunctionAddress 0000000140F3D310
*/

void function SetFollowGoalTolerance(float)

/*
* @Breif Set goal tolerance when in combat
* @Pramas float
* @NativeName: ScriptSetFollowGoalCombatTolerance
* @NativeFunctionAddress 0000000140F3D2A0
*/

void function SetFollowGoalCombatTolerance(float)

/*
* @Breif Gets the entity the NPC is following
* @Pramas 
* @NativeName: ScriptGetFollowTarget
* @NativeFunctionAddress 0000000140F3D240
*/

entity function GetFollowTarget()

/*
* @Breif Same as AssaultPoint but clamps position to navmesh within extents.
* @Pramas vector, vector
* @NativeName: ScriptAssaultPointClampedExtents
* @NativeFunctionAddress 0000000140F3D1E0
*/

void function AssaultPointClampedExtents(vector, vector)

/*
* @Breif Same as AssaultPoint but clamps position to navmesh.
* @Pramas vector
* @NativeName: ScriptAssaultPointClamped
* @NativeFunctionAddress 0000000140F3D180
*/

void function AssaultPointClamped(vector)

/*
* @Breif Uses assault behavior to reach a given location.
* @Pramas vector
* @NativeName: ScriptAssaultPoint
* @NativeFunctionAddress 0000000140F3D120
*/

void function AssaultPoint(vector)

/*
* @Breif Callback when AI arrives at position to do animation
* @Pramas string
* @NativeName: ScriptAssaultPointToAnimSetCallback
* @NativeFunctionAddress 0000000140F3D0C0
*/

void function AssaultPointToAnimSetCallback(string)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetAssaultPointOrigin
* @NativeFunctionAddress 0000000140F3CFF0
*/

vector function GetAssaultPointOrigin()

/*
* @Breif Get assault fight radius.
* @Pramas 
* @NativeName: ScriptAssaultGetFightRadius
* @NativeFunctionAddress 0000000140F3CF40
*/

float function AssaultGetFightRadius()

/*
* @Breif Get assault goal radius.
* @Pramas 
* @NativeName: ScriptAssaultGetGoalRadius
* @NativeFunctionAddress 0000000140F3CE90
*/

float function AssaultGetGoalRadius()

/*
* @Breif Get assault goal radius.
* @Pramas 
* @NativeName: ScriptAssaultGetGoalHeight
* @NativeFunctionAddress 0000000140F3CDE0
*/

float function AssaultGetGoalHeight()

/*
* @Breif Get the custom assault arrival tolerance.
* @Pramas 
* @NativeName: ScriptAssaultGetArrivalTolerance
* @NativeFunctionAddress 0000000140F3CD30
*/

float function AssaultGetArrivalTolerance()

/*
* @Breif Removes the custom assault arrival tolerance.
* @Pramas 
* @NativeName: ScriptAssaultClearArrivalTolerance
* @NativeFunctionAddress 0000000140F3CCE0
*/

void function AssaultClearArrivalTolerance()

/*
* @Breif Set assault fight radius.
* @Pramas float
* @NativeName: ScriptAssaultSetFightRadius
* @NativeFunctionAddress 0000000140F3CC70
*/

void function AssaultSetFightRadius(float)

/*
* @Breif Set assault goal radius. Sets goal height to radius if it is taller than the radius
* @Pramas float
* @NativeName: ScriptAssaultSetGoalRadius
* @NativeFunctionAddress 0000000140F3CC00
*/

void function AssaultSetGoalRadius(float)

/*
* @Breif Set assault goal height.
* @Pramas float
* @NativeName: ScriptAssaultSetGoalHeight
* @NativeFunctionAddress 0000000140F3CB90
*/

void function AssaultSetGoalHeight(float)

/*
* @Breif Sets a custom assault arrival tolerance.
* @Pramas float
* @NativeName: ScriptAssaultSetArrivalTolerance
* @NativeFunctionAddress 0000000140F3CB20
*/

void function AssaultSetArrivalTolerance(float)

/*
* @Breif Set assault angles and faceAngles.
* @Pramas vector, bool
* @NativeName: ScriptAssaultSetAngles
* @NativeFunctionAddress 0000000140F3CAC0
*/

void function AssaultSetAngles(vector, bool)

/*
* @Breif Set assault final destination flag which allows AI to take up squad assigned positions.
* @Pramas bool
* @NativeName: ScriptAssaultSetFinalDestination
* @NativeFunctionAddress 0000000140F3CA60
*/

void function AssaultSetFinalDestination(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptInitSquadAssaultInterupt
* @NativeFunctionAddress 0000000140F3CA10
*/

void function InitSquadAssaultInterupt()

/*
* @Breif Enables the squad the ai is in to halt from assaulting
* @Pramas 
* @NativeName: ScriptEnableSquadHalting
* @NativeFunctionAddress 0000000140F3C9C0
*/

void function EnableSquadHalting()

/*
* @Breif Disables the squad the ai is in from halting their assault
* @Pramas 
* @NativeName: ScriptDisableSquadHalting
* @NativeFunctionAddress 0000000140F3C970
*/

void function DisableSquadHalting()

/*
* @Breif Get minium goal radius for an AI for current AI setting
* @Pramas 
* @NativeName: ScriptGetMinGoalRadius
* @NativeFunctionAddress 0000000140F3C8C0
*/

float function GetMinGoalRadius()

/*
* @Breif Get weapon name for current dangerous area
* @Pramas 
* @NativeName: GetDangerousAreaWeapon
* @NativeFunctionAddress 0000000140F3C830
*/

string function GetDangerousAreaWeapon()

/*
* @Breif Force check ground entity
* @Pramas 
* @NativeName: ForceCheckGroundEntity
* @NativeFunctionAddress 0000000140F3C7E0
*/

void function ForceCheckGroundEntity()

/*
* @Breif Gets an NPC's velocity.
* @Pramas 
* @NativeName: ScriptGetVelocity
* @NativeFunctionAddress 0000000140F3C710
*/

vector function GetNPCVelocity()

/*
* @Breif Checks if NPC can play an animation from its current position and angles without getting blocked
* @Pramas int, float, float, bool
* @NativeName: ScriptTestAnimPath
* @NativeFunctionAddress 0000000140F3C650
*/

bool function TestAnimPath(int, float, float, bool)

/*
* @Breif Checks if NPC can play an animation from a position and angles without getting blocked
* @Pramas vector, float, int, float, float, bool
* @NativeName: ScriptTestAnimPathFrom
* @NativeFunctionAddress 0000000140F3C570
*/

bool function TestAnimPathFrom(vector, float, int, float, float, bool)

/*
* @Breif Enables or disables activity modifiers on this entity. See ACT_MODIFIER_***
* @Pramas int, bool
* @NativeName: ScriptSetActivityModifier
* @NativeFunctionAddress 0000000140F3C500
*/

void function SetActivityModifier(int, bool)

/*
* @Breif Returns whether or not an activity modifier is active on this entity. See ACT_MODIFIER_***
* @Pramas int
* @NativeName: ScriptIsActivityModifierActive
* @NativeFunctionAddress 0000000140F3C480
*/

bool function IsActivityModifierActive(int)

/*
* @Breif Gets the squad members average origin
* @Pramas 
* @NativeName: ScriptGetSquadCentroid
* @NativeFunctionAddress 0000000140F3C3B0
*/

vector function GetSquadCentroid()

/*
* @Breif Sets NPC's squad. Set to "" to clear
* @Pramas string
* @NativeName: ScriptSetSquad
* @NativeFunctionAddress 0000000140F3C350
*/

void function SetSquad(string)

/*
* @Breif Set NPC to auto managed squad.
* @Pramas 
* @NativeName: SetAutoSquad
* @NativeFunctionAddress 0000000140F3C300
*/

void function SetAutoSquad()

/*
* @Breif Gets the NPC's enemy, if he has one
* @Pramas 
* @NativeName: ScriptGetEnemy
* @NativeFunctionAddress 0000000140F3C2A0
*/

entity function GetEnemy()

/*
* @Breif Return the last known position of the enemy for this NPC
* @Pramas 
* @NativeName: GetEnemyLKP
* @NativeFunctionAddress 0000000140F3C240
*/

vector function GetEnemyLKP()

/*
* @Breif Return the last seen position of the enemy for this NPC
* @Pramas 
* @NativeName: GetEnemyLSP
* @NativeFunctionAddress 0000000140F3C1E0
*/

vector function GetEnemyLSP()

/*
* @Breif Returns the last time this AI saw his enemy. Only valid if GetEnemy() is not null
* @Pramas 
* @NativeName: GetEnemyLastTimeSeen
* @NativeFunctionAddress 0000000140F3C130
*/

float function GetEnemyLastTimeSeen()

/*
* @Breif Return the time that this AI first shot at the enemy after reacquire
* @Pramas 
* @NativeName: GetTimeFirstAttackAfterReacquire
* @NativeFunctionAddress 0000000140F3C080
*/

float function GetTimeFirstAttackAfterReacquire()

/*
* @Breif Gets closest non-cloaked enemy player, even if not visible, within sensing dist
* @Pramas 
* @NativeName: ScriptGetClosestEnemyPlayer
* @NativeFunctionAddress 0000000140F3C020
*/

entity function GetClosestEnemyPlayer()

/*
* @Breif Gets closest non-cloaked enemy NPC, even if not visible, within sensing dist
* @Pramas 
* @NativeName: ScriptGetClosestEnemyNPC
* @NativeFunctionAddress 0000000140F3BFC0
*/

entity function GetClosestEnemyNPC()

/*
* @Breif Gets closest non-cloaked enemy player or NPC, even if not visible, within sensing dist
* @Pramas 
* @NativeName: ScriptGetClosestEnemy
* @NativeFunctionAddress 0000000140F3BF60
*/

entity function GetClosestEnemy()

/*
* @Breif Gets the safe hint entity the AI is currently using
* @Pramas 
* @NativeName: ScriptGetSafeHint
* @NativeFunctionAddress 0000000140F3BF00
*/

entity function GetSafeHint()

/*
* @Breif Gets the NPC's goal entity
* @Pramas 
* @NativeName: GetGoalEnt
* @NativeFunctionAddress 0000000140F3BEA0
*/

entity function GetGoalEnt()

/*
* @Breif Sets the NPC's goal entity
* @Pramas entity
* @NativeName: ScriptSetGoalEnt
* @NativeFunctionAddress 0000000140F3BE20
*/

void function SetGoalEnt(entity)

/*
* @Breif Determines if the given entity is visible to this NPC
* @Pramas entity
* @NativeName: ScriptCanSee
* @NativeFunctionAddress 0000000140F3BDA0
*/

bool function CanSee(entity)

/*
* @Breif 
* @Pramas entity ent
* @NativeName: Script_GetTimeLastAcquired
* @NativeFunctionAddress 0000000140F3BCD0
*/

float function GetTimeLastAcquired(entity ent)

/*
* @Breif Time since this NPC last saw this entity
* @Pramas entity
* @NativeName: ScriptTimeSinceSeen
* @NativeFunctionAddress 0000000140F3BC00
*/

float function TimeSinceSeen(entity)

/*
* @Breif Time since this NPC last knew this entity's position
* @Pramas entity
* @NativeName: ScriptTimeSinceKnown
* @NativeFunctionAddress 0000000140F3BB30
*/

float function TimeSinceKnown(entity)

/*
* @Breif Flat adjustment that should be applied to an NPCs aiming precision value(how well they shoot)
* @Pramas float
* @NativeName: ScriptSetAimingPrecisionAdjustment
* @NativeFunctionAddress 0000000140F3BAC0
*/

void function SetAimingPrecisionAdjustment(float)

/*
* @Breif Gets the nearest visible friendly player
* @Pramas 
* @NativeName: ScriptGetNearestVisibleFriendlyPlayer
* @NativeFunctionAddress 0000000140F3BA60
*/

entity function GetNearestVisibleFriendlyPlayer()

/*
* @Breif Gets the enemy the NPC's squad is focused on
* @Pramas 
* @NativeName: ScriptGetSquadEnemy
* @NativeFunctionAddress 0000000140F3BA00
*/

entity function GetSquadEnemy()

/*
* @Breif Get actual maximum sight dist currently in use
* @Pramas 
* @NativeName: ScriptGetLookDist
* @NativeFunctionAddress 0000000140F3B950
*/

float function GetLookDist()

/*
* @Breif Set maximum sight dist that overrides the aisetting file
* @Pramas float
* @NativeName: ScriptSetLookDistOverride
* @NativeFunctionAddress 0000000140F3B8E0
*/

void function SetLookDistOverride(float)

/*
* @Breif Get the overriden maximum sight dist. It will be -1 if it has not been overriden
* @Pramas 
* @NativeName: ScriptGetLookDistOverride
* @NativeFunctionAddress 0000000140F3B830
*/

float function GetLookDistOverride()

/*
* @Breif Disable the maximum sight dist override and instead use values form the aisetting file
* @Pramas 
* @NativeName: ScriptDisableLookDistOverride
* @NativeFunctionAddress 0000000140F3B7E0
*/

void function DisableLookDistOverride()

/*
* @Breif Set engagement distances vs weak enemy (min vs weak, max vs weak)
* @Pramas float, float
* @NativeName: SetEngagementDistVsWeak
* @NativeFunctionAddress 0000000140F3B750
*/

void function SetEngagementDistVsWeak(float, float)

/*
* @Breif Set engagement distances vs strong enemy (min vs strong, max vs strong)
* @Pramas float, float
* @NativeName: SetEngagementDistVsStrong
* @NativeFunctionAddress 0000000140F3B6C0
*/

void function SetEngagementDistVsStrong(float, float)

/*
* @Breif Get hearing sensitivity (default 1.0)
* @Pramas 
* @NativeName: ScriptGetHearingSensitivity
* @NativeFunctionAddress 0000000140F3B610
*/

float function GetHearingSensitivity()

/*
* @Breif Set hearing sensitivity
* @Pramas float
* @NativeName: ScriptSetHearingSensitivity
* @NativeFunctionAddress 0000000140F3B5A0
*/

void function SetHearingSensitivity(float)

/*
* @Breif Check if npc is allowed to melee
* @Pramas 
* @NativeName: ScriptGetAllowMelee
* @NativeFunctionAddress 0000000140F3B540
*/

bool function GetAllowMelee()

/*
* @Breif Set if npc is allowed to melee
* @Pramas bool
* @NativeName: ScriptSetAllowMelee
* @NativeFunctionAddress 0000000140F3B4E0
*/

void function SetAllowMelee(bool)

/*
* @Breif Sets AI to alert state once. The state might be changed by the AI at some point later when appropriate
* @Pramas 
* @NativeName: ScriptSetStateToAlert
* @NativeFunctionAddress 0000000140F3B490
*/

void function SetAlert()

/*
* @Breif Return the current NPC state
* @Pramas 
* @NativeName: ScriptGetNPCState
* @NativeFunctionAddress 0000000140F3B400
*/

string function GetNPCState()

/*
* @Breif Return the previous NPC state
* @Pramas 
* @NativeName: ScriptGetPrevNPCState
* @NativeFunctionAddress 0000000140F3B370
*/

string function GetPrevNPCState()

/*
* @Breif Returns the reason the AI is reacting surprised. Compare to enum RSR_***
* @Pramas 
* @NativeName: ScriptGetSurprisedReactionReason
* @NativeFunctionAddress 0000000140F3B2C0
*/

int function GetSurprisedReactionReason()

/*
* @Breif Sets the movement animation to use
* @Pramas string
* @NativeName: ScriptSetMoveAnim
* @NativeFunctionAddress 0000000140F3B260
*/

void function SetMoveAnim(string)

/*
* @Breif Clears script override move animation
* @Pramas 
* @NativeName: ScriptClearMoveAnim
* @NativeFunctionAddress 0000000140F3B210
*/

void function ClearMoveAnim()

/*
* @Breif Sets the idle animation to use
* @Pramas string
* @NativeName: ScriptSetIdleAnim
* @NativeFunctionAddress 0000000140F3B1B0
*/

void function SetIdleAnim(string)

/*
* @Breif Clears script override idle animation
* @Pramas 
* @NativeName: ScriptClearIdleAnim
* @NativeFunctionAddress 0000000140F3B160
*/

void function ClearIdleAnim()

/*
* @Breif Sets the attack animation to use
* @Pramas string
* @NativeName: ScriptSetAttackAnim
* @NativeFunctionAddress 0000000140F3B100
*/

void function SetAttackAnim(string)

/*
* @Breif Clears script override attack animation
* @Pramas 
* @NativeName: ScriptClearAttackAnim
* @NativeFunctionAddress 0000000140F3B0B0
*/

void function ClearAttackAnim()

/*
* @Breif Forces a certain death animation
* @Pramas string
* @NativeName: ScriptSetDeathActivity
* @NativeFunctionAddress 0000000140F3B050
*/

void function SetDeathActivity(string)

/*
* @Breif Clears the script overridden death animation
* @Pramas 
* @NativeName: ScriptClearDeathActivity
* @NativeFunctionAddress 0000000140F3B000
*/

void function ClearDeathActivity()

/*
* @Breif For animations that must be synced with non AI. Must be parented to an entity
* @Pramas bool
* @NativeName: ScriptAnimAdvanceCycleEveryFrame
* @NativeFunctionAddress 0000000140F3AFA0
*/

void function Anim_AdvanceCycleEveryFrame(bool)

/*
* @Breif Disable arrival animation once; arriving at goal or new path find will clear this
* @Pramas bool
* @NativeName: ScriptDisableArrivalOnce
* @NativeFunctionAddress 0000000140F3AF40
*/

void function DisableArrivalOnce(bool)

/*
* @Breif Removes npc's current weapon (no drop)
* @Pramas int
* @NativeName: Script_TakeActiveWeapon
* @NativeFunctionAddress 0000000140F3AED0
*/

void function TakeActiveWeapon(int)

/*
* @Breif Sets the npc's hull type: HULL_HUMAN, HULL_SMALL, HULL_MEDIUM, HULL_FLYING_VEHICLE, HULL_TITAN, HULL_PROWLER, HULL_GOLIATH
* @Pramas string
* @NativeName: ScriptSetHullType
* @NativeFunctionAddress 0000000140F3AE70
*/

void function SetHullType(string)

/*
* @Breif Sets the npc's LKP of the enemy to a given position
* @Pramas entity, vector
* @NativeName: ScriptSetEnemyLKP
* @NativeFunctionAddress 0000000140F3ADF0
*/

void function SetEnemyLKP(entity, vector)

/*
* @Breif Sets the npc's enemy
* @Pramas entity
* @NativeName: ScriptSetEnemy
* @NativeFunctionAddress 0000000140F3AD70
*/

void function SetEnemy(entity)

/*
* @Breif Lock's npc's enemy to one entity until it is dead or cleared
* @Pramas entity
* @NativeName: ScriptLockEnemy
* @NativeFunctionAddress 0000000140F3ACF0
*/

void function LockEnemy(entity)

/*
* @Breif Sets the npc's enemy set by SetEnemy
* @Pramas 
* @NativeName: ScriptClearEnemy
* @NativeFunctionAddress 0000000140F3ACA0
*/

void function ClearEnemy()

/*
* @Breif Sets threat position to take cover from
* @Pramas vector
* @NativeName: ScriptSetPotentialThreatPos
* @NativeFunctionAddress 0000000140F3AC40
*/

void function SetPotentialThreatPos(vector)

/*
* @Breif Sets a position to defend from threats coming from all sides
* @Pramas vector
* @NativeName: ScriptSetDefendFromThreatPos
* @NativeFunctionAddress 0000000140F3ABE0
*/

void function SetDefendFromThreatPos(vector)

/*
* @Breif Clears all alternate positions that an AI would consider when taking cover
* @Pramas 
* @NativeName: ScriptClearAlternateThreatPositions
* @NativeFunctionAddress 0000000140F3AB90
*/

void function ClearAlternateThreatPositions()

/*
* @Breif Sets secondary enemy, use for special behaviors only
* @Pramas entity
* @NativeName: SetSecondaryEnemy
* @NativeFunctionAddress 0000000140F3AB10
*/

void function SetSecondaryEnemy(entity)

/*
* @Breif Clears memory about current enemy
* @Pramas 
* @NativeName: ClearEnemyMemory
* @NativeFunctionAddress 0000000140F3AAC0
*/

void function ClearEnemyMemory()

/*
* @Breif Clears memory about all enemies
* @Pramas 
* @NativeName: ClearAllEnemyMemory
* @NativeFunctionAddress 0000000140F3AA70
*/

void function ClearAllEnemyMemory()

/*
* @Breif Request AI to do special attack when possible, resets to off after attack is done
* @Pramas int
* @NativeName: RequestSpecialRangeAttack
* @NativeFunctionAddress 0000000140F3AA00
*/

void function RequestSpecialRangeAttack(int)

/*
* @Breif Sets the callback function when to be used when the NPCs enemy changes
* @Pramas void functionref( entity self )
* @NativeName: ScriptSetEnemyChangeCallback
* @NativeFunctionAddress 0000000140F3A980
*/

void function SetEnemyChangeCallback(void functionref( entity self ))

/*
* @Breif Gets the previous NPC schedule
* @Pramas 
* @NativeName: GetPrevScheduleName
* @NativeFunctionAddress 0000000140F3A8F0
*/

string function GetPrevScheduleName()

/*
* @Breif Gets the current NPC schedule
* @Pramas 
* @NativeName: GetCurScheduleName
* @NativeFunctionAddress 0000000140F3A860
*/

string function GetCurScheduleName()

/*
* @Breif Sets the default schedule to use when there is nothing else to do
* @Pramas string
* @NativeName: ScriptSetDefaultSchedule
* @NativeFunctionAddress 0000000140F3A800
*/

void function SetDefaultSchedule(string)

/*
* @Breif Sets whether this npc should run in efficient mode (less frequent think)
* @Pramas bool
* @NativeName: ScriptSetEfficientMode
* @NativeFunctionAddress 0000000140F3A7A0
*/

void function SetEfficientMode(bool)

/*
* @Breif Sets whether this npc should think every frame. Should only be used briefly to match up animation with non-npc entity
* @Pramas bool
* @NativeName: ScriptSetThinkEveryFrame
* @NativeFunctionAddress 0000000140F3A740
*/

void function SetThinkEveryFrame(bool)

/*
* @Breif Do rodeo attack while attach on enemy
* @Pramas bool
* @NativeName: ScriptDoRodeoAttack
* @NativeFunctionAddress 0000000140F3A6E0
*/

void function DoRodeoAttack(bool)

/*
* @Breif Set if this NPC can be rodeoed
* @Pramas bool
* @NativeName: ScriptSetRodeoAllowed
* @NativeFunctionAddress 0000000140F3A680
*/

void function SetRodeoAllowed(bool)

/*
* @Breif 
* @Pramas bool forcePitchEnabled
* @NativeName: ScriptSetAimAssistForcePullPitchEnabled
* @NativeFunctionAddress 0000000140F3A620
*/

void function SetAimAssistForcePullPitchEnabled(bool forcePitchEnabled)

/*
* @Breif Make this NPC a hologram. It will generate hologram impact effects when hit.
* @Pramas 
* @NativeName: ScriptSetHologram
* @NativeFunctionAddress 0000000140F3A5D0
*/

void function SetHologram()

/*
* @Breif Make this NPC no longer a hologram.
* @Pramas 
* @NativeName: ScriptClearHologram
* @NativeFunctionAddress 0000000140F3A580
*/

void function ClearHologram()

/*
* @Breif Freeze NPC
* @Pramas 
* @NativeName: Freeze
* @NativeFunctionAddress 0000000140F3A530
*/

void function Freeze()

/*
* @Breif Unfreeze NPC
* @Pramas 
* @NativeName: Unfreeze
* @NativeFunctionAddress 0000000140F3A4E0
*/

void function Unfreeze()

/*
* @Breif Returns true if the NPC is currently frozen
* @Pramas 
* @NativeName: IsFrozen
* @NativeFunctionAddress 0000000140F3A480
*/

bool function IsFrozen()

/*
* @Breif Turn off NPC_* flags
* @Pramas int
* @NativeName: ScriptDisableNPCFlag
* @NativeFunctionAddress 0000000140F3A410
*/

void function DisableNPCFlag(int)

/*
* @Breif Turn off NPCMF_* flags
* @Pramas int
* @NativeName: ScriptDisableNPCMoveFlag
* @NativeFunctionAddress 0000000140F3A3A0
*/

void function DisableNPCMoveFlag(int)

/*
* @Breif Turn on NPC_* flags
* @Pramas int
* @NativeName: ScriptEnableNPCFlag
* @NativeFunctionAddress 0000000140F3A330
*/

void function EnableNPCFlag(int)

/*
* @Breif Turn on NPCMF_* flags
* @Pramas int
* @NativeName: ScriptEnableNPCMoveFlag
* @NativeFunctionAddress 0000000140F3A2C0
*/

void function EnableNPCMoveFlag(int)

/*
* @Breif Set NPC_* flags
* @Pramas int, bool
* @NativeName: ScriptSetNPCFlag
* @NativeFunctionAddress 0000000140F3A250
*/

void function SetNPCFlag(int, bool)

/*
* @Breif Set NPCMF_* flags
* @Pramas int, bool
* @NativeName: ScriptSetNPCMoveFlag
* @NativeFunctionAddress 0000000140F3A1E0
*/

void function SetNPCMoveFlag(int, bool)

/*
* @Breif Get NPC_* flags
* @Pramas int
* @NativeName: ScriptGetNPCFlag
* @NativeFunctionAddress 0000000140F3A160
*/

bool function GetNPCFlag(int)

/*
* @Breif Get NPCMF_* flags
* @Pramas int
* @NativeName: ScriptGetNPCMoveFlag
* @NativeFunctionAddress 0000000140F3A0E0
*/

bool function GetNPCMoveFlag(int)

/*
* @Breif Set bits_CAP_* flags
* @Pramas int, bool
* @NativeName: ScriptSetCapabilityFlag
* @NativeFunctionAddress 0000000140F3A070
*/

void function SetCapabilityFlag(int, bool)

/*
* @Breif Get bits_CAP_* flags
* @Pramas int
* @NativeName: ScriptGetCapabilityFlag
* @NativeFunctionAddress 0000000140F39FF0
*/

bool function GetCapabilityFlag(int)

/*
* @Breif 
* @Pramas bool newSetting
* @NativeName: Script_SetChanceToHitEnabled
* @NativeFunctionAddress 0000000140F39F90
*/

void function SetChanceToHitEnabled(bool newSetting)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetChanceToHitEnabled
* @NativeFunctionAddress 0000000140F39F30
*/

bool function GetChanceToHitEnabled()

/*
* @Breif Sets whether this npc is a valid melee execute target
* @Pramas bool
* @NativeName: Script_SetCanBeMeleeExecuted
* @NativeFunctionAddress 0000000140F39ED0
*/

void function SetCanBeMeleeExecuted(bool)

/*
* @Breif Sets whether this npc can be executed on ground
* @Pramas bool
* @NativeName: Script_SetCanBeGroundExecuted
* @NativeFunctionAddress 0000000140F39E70
*/

void function SetCanBeGroundExecuted(bool)

/*
* @Breif Returns if AI is a non-combat AI
* @Pramas 
* @NativeName: IsNonCombatAI
* @NativeFunctionAddress 0000000140F39E10
*/

bool function IsNonCombatAI()

/*
* @Breif Sets whether this npc is a valid melee execute target
* @Pramas 
* @NativeName: CanBeMeleeExecuted
* @NativeFunctionAddress 0000000140F39DB0
*/

bool function CanBeMeleeExecuted()

/*
* @Breif Sets whether this npc is a valid ground execute target
* @Pramas 
* @NativeName: CanBeGroundExecuted
* @NativeFunctionAddress 0000000140F39D50
*/

bool function CanBeGroundExecuted()

/*
* @Breif Sets whether this npc can display a healthbar
* @Pramas bool
* @NativeName: Script_SetValidHealthBarTarget
* @NativeFunctionAddress 0000000140F39CF0
*/

void function SetValidHealthBarTarget(bool)

/*
* @Breif Sets whether this npc can display a healthbar
* @Pramas 
* @NativeName: Script_IsValidHealthBarTarget
* @NativeFunctionAddress 0000000140F39C90
*/

bool function IsValidHealthBarTarget()

/*
* @Breif 
* @Pramas float fireDelay
* @NativeName: Script_ResetAttackRestTimes
* @NativeFunctionAddress 0000000140F39C20
*/

void function ResetAttackRestTimes(float fireDelay)

/*
* @Breif Sets movement speed multiplier
* @Pramas float
* @NativeName: ScriptSetMoveSpeedScale
* @NativeFunctionAddress 0000000140F39BB0
*/

void function SetNPCMoveSpeedScale(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetDangerousAreaRadius
* @NativeFunctionAddress 0000000140F39B40
*/

void function SetDangerousAreaRadius(float)

/*
* @Breif Returns if AI is in a state that can be interrupted
* @Pramas 
* @NativeName: IsInterruptable
* @NativeFunctionAddress 0000000140F39AE0
*/

bool function IsInterruptable()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsAtShootingCoverHint
* @NativeFunctionAddress 0000000140F39A80
*/

bool function IsAtShootingCoverHint()

/*
* @Breif 
* @Pramas float
* @NativeName: ScriptSetDangerousAreaReactionTime
* @NativeFunctionAddress 0000000140F39A10
*/

void function SetDangerousAreaReactionTime(float)

/*
* @Breif If AI is using secondary attack
* @Pramas 
* @NativeName: IsSecondaryAttack
* @NativeFunctionAddress 0000000140F399B0
*/

bool function IsSecondaryAttack()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_BaseHealth
* @NativeFunctionAddress 0000000140F39900
*/

int function AISetting_BaseHealth()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_MaxFlyingSpeed
* @NativeFunctionAddress 0000000140F39850
*/

float function AISetting_MaxFlyingSpeed()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_GetDefaultWeapon
* @NativeFunctionAddress 0000000140F397C0
*/

string function AISetting_GetDefaultWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_GetGrenadeWeapon
* @NativeFunctionAddress 0000000140F39730
*/

string function AISetting_GetGrenadeWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_SummonDrone
* @NativeFunctionAddress 0000000140F396A0
*/

string function AISetting_SummonDrone()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_MeleeChargeSet
* @NativeFunctionAddress 0000000140F39610
*/

string function AISetting_MeleeChargeSet()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechAnimSet
* @NativeFunctionAddress 0000000140F39580
*/

string function AISetting_LeechAnimSet()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechAnimTag
* @NativeFunctionAddress 0000000140F394F0
*/

string function AISetting_LeechAnimTag()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechDataKnifeTag
* @NativeFunctionAddress 0000000140F39460
*/

string function AISetting_LeechDataKnifeTag()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_OnLeechFunc
* @NativeFunctionAddress 0000000140F39400
*/

var function AISetting_OnLeechFunc()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_ShootableByFriendlyPlayer
* @NativeFunctionAddress 0000000140F393A0
*/

bool function AISetting_ShootableByFriendlyPlayer()

/*
* @Breif 
* @Pramas entity
* @NativeName: GetMeleeDamageMaxForTarget
* @NativeFunctionAddress 0000000140F392D0
*/

int function GetMeleeDamageMaxForTarget(entity)

/*
* @Breif Same as Anim_Play but block AI
* @Pramas string
* @NativeName: Anim_ScriptedPlay
* @NativeFunctionAddress 0000000140F39270
*/

void function Anim_ScriptedPlay(string)

/*
* @Breif Same as Anim_PlayWithRefPoint but block AI
* @Pramas string, vector, vector, float
* @NativeName: Anim_ScriptedPlayWithRefPoint
* @NativeFunctionAddress 0000000140F391E0
*/

void function Anim_ScriptedPlayWithRefPoint(string, vector, vector, float)

/*
* @Breif 
* @Pramas string, bool, float
* @NativeName: Anim_ScriptedPlayActivityByName
* @NativeFunctionAddress 0000000140F39160
*/

void function Anim_ScriptedPlayActivityByName(string, bool, float)

/*
* @Breif 
* @Pramas string, vector, vector, float
* @NativeName: Anim_ScriptedPlayActivityByNameWithRefPoint
* @NativeFunctionAddress 0000000140F390D0
*/

void function Anim_ScriptedPlayActivityByNameWithRefPoint(string, vector, vector, float)

/*
* @Breif Play jump animation to position
* @Pramas vector
* @NativeName: Anim_ScriptedJump
* @NativeFunctionAddress 0000000140F39070
*/

void function Anim_ScriptedJump(vector)

/*
* @Breif Play a gesture by sequence name
* @Pramas string, bool
* @NativeName: Anim_ScriptedAddGestureSequence
* @NativeFunctionAddress 0000000140F39000
*/

void function Anim_ScriptedAddGestureSequence(string, bool)

/*
* @Breif Play a gesture by activity and set if it should auto kill on finishing
* @Pramas string, bool
* @NativeName: Anim_ScriptedAddGestureActivity
* @NativeFunctionAddress 0000000140F38F90
*/

void function Anim_ScriptedAddGestureActivity(string, bool)

/*
* @Breif Remove a gesture by activity
* @Pramas string
* @NativeName: Anim_ScriptedRemoveGestureActivity
* @NativeFunctionAddress 0000000140F38F30
*/

void function Anim_ScriptedRemoveGestureActivity(string)

/*
* @Breif Remove all gesture animations
* @Pramas 
* @NativeName: Anim_ScriptedRemoveAllGestures
* @NativeFunctionAddress 0000000140F38EE0
*/

void function Anim_ScriptedRemoveAllGestures()

/*
* @Breif Set allowing special jumps
* @Pramas bool
* @NativeName: SetAllowSpecialJump
* @NativeFunctionAddress 0000000140F38E80
*/

void function SetAllowSpecialJump(bool)

/*
* @Breif Get current aim direction
* @Pramas 
* @NativeName: GetNPCViewVector
* @NativeFunctionAddress 0000000140F38DB0
*/

vector function GetNPCViewVector()

/*
* @Breif Get current aim direction
* @Pramas 
* @NativeName: GetNPCViewVector
* @NativeFunctionAddress 0000000140F38DB0
*/

vector function GetNPCViewForward()

/*
* @Breif Get current aim up
* @Pramas 
* @NativeName: GetNPCViewUp
* @NativeFunctionAddress 0000000140F38CE0
*/

vector function GetNPCViewUp()

/*
* @Breif Get current aim right
* @Pramas 
* @NativeName: GetNPCViewRight
* @NativeFunctionAddress 0000000140F38C10
*/

vector function GetNPCViewRight()

/*
* @Breif Turns on local grav for this ai right now, takes a normal of the surface you're on and a facing dir
* @Pramas vector, vector
* @NativeName: ScriptEnableLocalGrav
* @NativeFunctionAddress 0000000140F38BB0
*/

void function EnableLocalGrav(vector, vector)

/*
* @Breif Disables local grav for this ai
* @Pramas 
* @NativeName: ScriptDisableLocalGrav
* @NativeFunctionAddress 00000001406A8C20
*/

void function DisableLocalGrav()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMaxEnemyDist
* @NativeFunctionAddress 0000000140F38B00
*/

float function GetMaxEnemyDist()

/*
* @Breif 
* @Pramas float
* @NativeName: SetMaxEnemyDistOverride
* @NativeFunctionAddress 0000000140F38A90
*/

void function SetMaxEnemyDistOverride(float)

/*
* @Breif 
* @Pramas 
* @NativeName: DisableMaxEnemyDistOverride
* @NativeFunctionAddress 0000000140F38A40
*/

void function DisableMaxEnemyDistOverride()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMaxEnemyDistHeavyArmor
* @NativeFunctionAddress 0000000140F38990
*/

float function GetMaxEnemyDistHeavyArmor()

/*
* @Breif 
* @Pramas float
* @NativeName: SetMaxEnemyDistHeavyArmorOverride
* @NativeFunctionAddress 0000000140F38920
*/

void function SetMaxEnemyDistHeavyArmorOverride(float)

/*
* @Breif 
* @Pramas 
* @NativeName: DisableMaxEnemyDistHeavyArmorOverride
* @NativeFunctionAddress 0000000140F388D0
*/

void function DisableMaxEnemyDistHeavyArmorOverride()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMaxTurretYaw
* @NativeFunctionAddress 0000000140F38820
*/

float function GetMaxTurretYaw()

/*
* @Breif Get AI setting key field.
* @Pramas string
* @NativeName: Script_GetAISettingByKeyField
* @NativeFunctionAddress 0000000140F38750
*/

var function Dev_GetAISettingByKeyField(string)

/*
* @Breif Get AI setting key field. Assume return type is an asset
* @Pramas string
* @NativeName: Script_GetAISettingAssetByKeyField
* @NativeFunctionAddress 0000000140F386B0
*/

asset function Dev_GetAISettingAssetByKeyField(string)

/*
* @Breif Uses assault behavior to reach a given location, but does not stop at the goal. When approaching the goal, the NPC will ramp its speed to match the beginning speed of the specified sequence.
* @Pramas vector point, vector angles, string animName, bool doArrival, float tolerance
* @NativeName: ScriptAssaultPointToAnim
* @NativeFunctionAddress 0000000140F367E0
*/

var function AssaultPointToAnim()

/*
* @Breif Returns the last known position(LKP) that an AI has for a given enemy
* @Pramas entity enemy
* @NativeName: ScriptLastKnownPosition
* @NativeFunctionAddress 0000000140F36B20
*/

var function LastKnownPosition()

/*
* @Breif Returns the last seen position(LSP) that an AI has for a given enemy
* @Pramas entity enemy
* @NativeName: ScriptLastSeenPosition
* @NativeFunctionAddress 0000000140F36B70
*/

var function LastSeenPosition()

/*
* @Breif Gets the NPC's squad's last known position of their enemy
* @Pramas 
* @NativeName: ScriptGetSquadLastKnownPosition
* @NativeFunctionAddress 0000000140F36BC0
*/

vector function SquadLastKnownPosition(var)

/*
* @Breif Enable the turret
* @Pramas 
* @NativeName: Enable
* @NativeFunctionAddress 000000014103D400
*/

void function EnableTurret()

/*
* @Breif Disable the turret
* @Pramas 
* @NativeName: Disable
* @NativeFunctionAddress 000000014103D3B0
*/

void function DisableTurret()

/*
* @Breif Gets the turret's current state. Enum values under TURRET_***
* @Pramas 
* @NativeName: GetTurretState
* @NativeFunctionAddress 000000014103D300
*/

int function GetTurretState()

/*
* @Breif Sets the control panel for this turret.
* @Pramas entity
* @NativeName: SetControlPanel
* @NativeFunctionAddress 000000014103D280
*/

void function SetControlPanel(entity)

/*
* @Breif Gets the control panel for this turret.
* @Pramas 
* @NativeName: GetControlPanel
* @NativeFunctionAddress 000000014103D220
*/

entity function GetControlPanel()

/*
* @Breif starts the turret searching
* @Pramas 
* @NativeName: StartDeployed
* @NativeFunctionAddress 000000014103D1D0
*/

void function StartDeployed()

/*
* @Breif lets the turrets shoot at glass if a player is behind it
* @Pramas bool
* @NativeName: SetDumbFireMode
* @NativeFunctionAddress 000000014103D170
*/

void function SetDumbFireMode(bool)

/*
* @Breif Force fires a turret weapon given a shot direction
* @Pramas vector
* @NativeName: TurretForceFireWeapon
* @NativeFunctionAddress 000000014103D110
*/

void function TurretForceFireWeapon(vector)

/*
* @Breif Get last rodeo hit time
* @Pramas 
* @NativeName: GetLastRodeoHitTime
* @NativeFunctionAddress 0000000140FE39C0
*/

float function GetLastRodeoHitTime()

/*
* @Breif Set last rodeo hit time
* @Pramas float
* @NativeName: SetLastRodeoHitTime
* @NativeFunctionAddress 0000000141037FC0
*/

void function SetLastRodeoHitTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetStance
* @NativeFunctionAddress 0000000141037F10
*/

int function GetStance()

/*
* @Breif 
* @Pramas int
* @NativeName: SetStance
* @NativeFunctionAddress 0000000141037E70
*/

void function SetStance(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerSettingsName
* @NativeFunctionAddress 0000000141037D90
*/

asset function GetPlayerSettingsName()

/*
* @Breif 
* @Pramas asset
* @NativeName: SetPlayerSettingsName
* @NativeFunctionAddress 0000000141037D30
*/

void function SetPlayerSettingsName(asset)

/*
* @Breif 
* @Pramas 
* @NativeName: EnableDoomed
* @NativeFunctionAddress 0000000141037CA0
*/

void function EnableDoomed()

/*
* @Breif 
* @Pramas 
* @NativeName: DisableDoomed
* @NativeFunctionAddress 0000000141037C10
*/

void function DisableDoomed()

/*
* @Breif 
* @Pramas 
* @NativeName: IsDoomed
* @NativeFunctionAddress 0000000141037BB0
*/

bool function IsDoomed()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetInvalidHealthBarEnt
* @NativeFunctionAddress 0000000141037B20
*/

void function SetInvalidHealthBarEnt(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetInvalidHealthBarEnt
* @NativeFunctionAddress 0000000141037AC0
*/

bool function GetInvalidHealthBarEnt()

/*
* @Breif 
* @Pramas 
* @NativeName: IsEjecting
* @NativeFunctionAddress 0000000141037A60
*/

bool function IsEjecting()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetEjecting
* @NativeFunctionAddress 00000001410379D0
*/

void function SetEjecting(bool)

/*
* @Breif Whether the Titan can be rodeo-ed by players or not
* @Pramas bool
* @NativeName: SetIsValidRodeoTarget
* @NativeFunctionAddress 0000000141037940
*/

void function SetIsValidRodeoTarget(bool)

/*
* @Breif Set active defensive placement information for AI to use
* @Pramas float, float, float, bool, vector, vector
* @NativeName: SetDefensivePlacement
* @NativeFunctionAddress 0000000141037840
*/

void function SetDefensivePlacement(float, float, float, bool, vector, vector)

/*
* @Breif Set active defensive attachment information for AI to use
* @Pramas float, float, float, bool
* @NativeName: SetDefensiveAttachment
* @NativeFunctionAddress 0000000141037710
*/

void function SetDefensiveAttachment(float, float, float, bool)

/*
* @Breif Returns if the titanSoul has a valid titan
* @Pramas 
* @NativeName: Script_HasValidTitan
* @NativeFunctionAddress 00000001410376B0
*/

bool function HasValidTitan()

/*
* @Breif Gets the titan for this titanSoul entity
* @Pramas 
* @NativeName: Script_GetTitan
* @NativeFunctionAddress 0000000141037620
*/

entity function GetTitan()

/*
* @Breif 
* @Pramas 
* @NativeName: GetNextCoreChargeAvailable
* @NativeFunctionAddress 0000000141037570
*/

float function GetNextCoreChargeAvailable()

/*
* @Breif 
* @Pramas float
* @NativeName: SetNextCoreChargeAvailable
* @NativeFunctionAddress 00000001410374C0
*/

void function SetNextCoreChargeAvailable(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreChargeExpireTime
* @NativeFunctionAddress 0000000141037410
*/

float function GetCoreChargeExpireTime()

/*
* @Breif 
* @Pramas float
* @NativeName: SetCoreChargeExpireTime
* @NativeFunctionAddress 0000000141037360
*/

void function SetCoreChargeExpireTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreChargeStartTime
* @NativeFunctionAddress 00000001410372B0
*/

float function GetCoreChargeStartTime()

/*
* @Breif 
* @Pramas float
* @NativeName: SetCoreChargeStartTime
* @NativeFunctionAddress 0000000141037200
*/

void function SetCoreChargeStartTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreUseDuration
* @NativeFunctionAddress 0000000141037150
*/

float function GetCoreUseDuration()

/*
* @Breif 
* @Pramas float
* @NativeName: SetCoreUseDuration
* @NativeFunctionAddress 00000001410370A0
*/

void function SetCoreUseDuration(float)

/*
* @Breif Adds a spawn flag to the titan soul
* @Pramas int
* @NativeName: Script_AddTitanSoulSpawnFlag
* @NativeFunctionAddress 0000000141036FF0
*/

void function AddTitanSoulSpawnFlag(int)

/*
* @Breif Sets a bool network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, bool
* @NativeName: Script_SetTitanSoulNetBool
* @NativeFunctionAddress 0000000141036F80
*/

void function SetTitanSoulNetBool(string, bool)

/*
* @Breif Sets an int network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, int
* @NativeName: Script_SetTitanSoulNetInt
* @NativeFunctionAddress 0000000141036F00
*/

void function SetTitanSoulNetInt(string, int)

/*
* @Breif Sets a float network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetTitanSoulNetFloat
* @NativeFunctionAddress 0000000141036E80
*/

void function SetTitanSoulNetFloat(string, float)

/*
* @Breif Changes a float network variable on the titan soul gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)
* @Pramas string, float, float
* @NativeName: Script_SetTitanSoulNetFloatOverTime
* @NativeFunctionAddress 0000000141036DF0
*/

void function SetTitanSoulNetFloatOverTime(string, float, float)

/*
* @Breif Sets a time (float) network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetTitanSoulNetTime
* @NativeFunctionAddress 0000000141036D70
*/

void function SetTitanSoulNetTime(string, float)

/*
* @Breif Sets an entity network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string, entity
* @NativeName: Script_SetTitanSoulNetEnt
* @NativeFunctionAddress 0000000141036CF0
*/

void function SetTitanSoulNetEnt(string, entity)

/*
* @Breif Gets a bool network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetBool
* @NativeFunctionAddress 0000000141036C80
*/

bool function GetTitanSoulNetBool(string)

/*
* @Breif Gets an int network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetInt
* @NativeFunctionAddress 0000000141036BC0
*/

int function GetTitanSoulNetInt(string)

/*
* @Breif Gets a float network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetFloat
* @NativeFunctionAddress 0000000141036B00
*/

float function GetTitanSoulNetFloat(string)

/*
* @Breif Gets a time (float) network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetTime
* @NativeFunctionAddress 0000000141036A40
*/

float function GetTitanSoulNetTime(string)

/*
* @Breif Gets an entity network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetEnt
* @NativeFunctionAddress 00000001410369D0
*/

entity function GetTitanSoulNetEnt(string)

/*
* @Breif Let client know that the titan could stand when checked.
* @Pramas bool
* @NativeName: SetCanStand
* @NativeFunctionAddress 0000000141038140
*/

void function SetCanStand(bool)

/*
* @Breif Is the titan able to stand
* @Pramas 
* @NativeName: GetCanStand
* @NativeFunctionAddress 00000001410380E0
*/

bool function GetCanStand()

/*
* @Breif Launch grapple
* @Pramas vector
* @NativeName: GrappleNPC
* @NativeFunctionAddress 0000000141038070
*/

bool function GrappleNPC(vector)

/*
* @Breif Returns the display name of the weapon
* @Pramas 
* @NativeName: GetPrintName
* @NativeFunctionAddress 0000000141029120
*/

string ornull function GetWeaponPrintName()

/*
* @Breif Returns the description of the weapon
* @Pramas 
* @NativeName: GetWeaponDescription
* @NativeFunctionAddress 0000000141029090
*/

string ornull function GetWeaponDescription()

/*
* @Breif 
* @Pramas asset
* @NativeName: Script_SetDroppedModel
* @NativeFunctionAddress 0000000141029030
*/

void function SetDroppedModel(asset)

/*
* @Breif Constrains a non-carried weapon in place. Similar to parenting a non-carried weapon.
* @Pramas 
* @NativeName: SetWeaponConstrained
* @NativeFunctionAddress 0000000141028FE0
*/

void function SetWeaponConstrained()

/*
* @Breif Returns index for the given attachment on the weapon's world model.
* @Pramas string
* @NativeName: ScriptLookupWorldModelAttachment
* @NativeFunctionAddress 0000000141028F20
*/

int function LookupWorldModelAttachment(string)

/*
* @Breif Returns index for the given attachment on the weapon's view model.
* @Pramas string
* @NativeName: ScriptLookupViewModelAttachment
* @NativeFunctionAddress 0000000141028E60
*/

int function LookupViewModelAttachment(string)

/*
* @Breif Returns entity using the weapon
* @Pramas 
* @NativeName: GetWeaponOwner_Script
* @NativeFunctionAddress 0000000140E65A60
*/

entity function GetWeaponOwner()

/*
* @Breif Returns the position to fire from
* @Pramas 
* @NativeName: GetAttackPosition_Script
* @NativeFunctionAddress 0000000141028D20
*/

vector function GetAttackPosition()

/*
* @Breif Returns the direction to fire from
* @Pramas 
* @NativeName: GetAttackDirection_Script
* @NativeFunctionAddress 0000000141028C50
*/

vector function GetAttackDirection()

/*
* @Breif Sets whether a weapon can be used or not
* @Pramas bool
* @NativeName: AllowUse
* @NativeFunctionAddress 0000000141028BF0
*/

void function AllowUse(bool)

/*
* @Breif Returns if weapon has a silencer
* @Pramas 
* @NativeName: HasSilencer
* @NativeFunctionAddress 0000000141028B90
*/

bool function HasSilencer()

/*
* @Breif Plays appropriate 1p and 3p sounds
* @Pramas string soundName1p, string soundName3p
* @NativeName: Script_EmitWeaponSound_1p3p
* @NativeFunctionAddress 0000000141028B20
*/

void function EmitWeaponSound_1p3p(string soundName1p, string soundName3p)

/*
* @Breif Plays the sound on the weapon
* @Pramas string
* @NativeName: EmitWeaponSound_Script
* @NativeFunctionAddress 0000000141028AA0
*/

void function EmitWeaponSound(string)

/*
* @Breif Stops the sound on the weapon
* @Pramas string
* @NativeName: StopWeaponSound_Script
* @NativeFunctionAddress 0000000141028A20
*/

void function StopWeaponSound(string)

/*
* @Breif Notifies NPCs of weapon sound
* @Pramas float, float
* @NativeName: EmitWeaponNpcSound
* @NativeFunctionAddress 0000000141028990
*/

void function EmitWeaponNpcSound(float, float)

/*
* @Breif Notifies NPCs of weapon sound
* @Pramas float, float
* @NativeName: EmitWeaponNpcSound_DontUpdateLastFiredTime
* @NativeFunctionAddress 0000000141028900
*/

void function EmitWeaponNpcSound_DontUpdateLastFiredTime(float, float)

/*
* @Breif Returns true if this weapon is net optimized *and* net weapon optimizations are enabled ('net_optimize_weapons 1')
* @Pramas 
* @NativeName: IsNetOptimized
* @NativeFunctionAddress 00000001410288A0
*/

bool function IsNetOptimized()

/*
* @Breif Plays the effect on the weapons owner, use this when the weapon does NOT have a world model.
* @Pramas asset, int
* @NativeName: PlayWeaponEffectOnOwner_Script
* @NativeFunctionAddress 00000001410287F0
*/

void function PlayWeaponEffectOnOwner(asset, int)

/*
* @Breif Stops the effect on the weapon
* @Pramas asset, asset
* @NativeName: StopWeaponEffect_Script
* @NativeFunctionAddress 0000000141028780
*/

void function StopWeaponEffect(asset, asset)

/*
* @Breif Set the burst fire count
* @Pramas int
* @NativeName: SetWeaponBurstFireCount_Script
* @NativeFunctionAddress 00000001410286C0
*/

void function SetWeaponBurstFireCount(int)

/*
* @Breif Get the burst fire count
* @Pramas 
* @NativeName: GetWeaponBurstFireCount_Script
* @NativeFunctionAddress 0000000141028610
*/

int function GetWeaponBurstFireCount()

/*
* @Breif Fires a bullet
* @Pramas vector, vector, int, int
* @NativeName: FireWeaponBullet_Script
* @NativeFunctionAddress 0000000141028430
*/

void function FireWeaponBullet(vector, vector, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: DoDryfire
* @NativeFunctionAddress 0000000141021F60
*/

void function DoDryfire()

/*
* @Breif Gets the number of projectiles per shot
* @Pramas 
* @NativeName: GetProjectilesPerShot_Script
* @NativeFunctionAddress 0000000141028380
*/

int function GetProjectilesPerShot()

/*
* @Breif Gets the ammo consumed per shot
* @Pramas 
* @NativeName: GetAmmoPerShot_Script
* @NativeFunctionAddress 00000001410282D0
*/

int function GetAmmoPerShot()

/*
* @Breif Gets the display type of the ammo
* @Pramas 
* @NativeName: GetAmmoDisplay_Script
* @NativeFunctionAddress 0000000141028240
*/

string function GetAmmoDisplay()

/*
* @Breif Returns the max amount of primary ammo that can be in the clip.
* @Pramas 
* @NativeName: GetWeaponPrimaryClipCountMax_Script
* @NativeFunctionAddress 0000000141028190
*/

int function GetWeaponPrimaryClipCountMax()

/*
* @Breif Set the amount of primary ammo in the clip
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCount_Script
* @NativeFunctionAddress 0000000141028120
*/

void function SetWeaponPrimaryClipCount(int)

/*
* @Breif Set the amount of primary ammo in the clip
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCountAbsolute_Script
* @NativeFunctionAddress 00000001410280B0
*/

void function SetWeaponPrimaryClipCountAbsolute(int)

/*
* @Breif Sets primary ammo count, doesn't reset regen
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCountNoRegenReset_Script
* @NativeFunctionAddress 0000000141027FB0
*/

void function SetWeaponPrimaryClipCountNoRegenReset(int)

/*
* @Breif gets whether or not the regen ammo on this weapon is draining or not
* @Pramas 
* @NativeName: IsWeaponRegenDraining_Script
* @NativeFunctionAddress 0000000141027F00
*/

bool function IsWeaponRegenDraining()

/*
* @Breif Returns the amount of primary ammo in the clip.
* @Pramas 
* @NativeName: GetWeaponPrimaryClipCount_Script
* @NativeFunctionAddress 0000000141027E40
*/

int function GetWeaponPrimaryClipCount()

/*
* @Breif True if the weapon uses clips for ammo
* @Pramas 
* @NativeName: UsesClipsForAmmo
* @NativeFunctionAddress 0000000141027DD0
*/

bool function UsesClipsForAmmo()

/*
* @Breif Get the ammo source this weapon is using: AMMOSOURCE_STOCKPILE, AMMOSOURCE_POOL
* @Pramas 
* @NativeName: Script_GetActiveAmmoSource
* @NativeFunctionAddress 0000000141027D20
*/

int function GetActiveAmmoSource()

/*
* @Breif Gets the ammo pool type this weapon uses.
* @Pramas 
* @NativeName: Script_GetAmmoPoolType
* @NativeFunctionAddress 0000000141027C70
*/

int function GetWeaponAmmoPoolType()

/*
* @Breif Get the max ammo that can be available for this weapon to use
* @Pramas int
* @NativeName: Script_GetWeaponPrimaryAmmoCountMax
* @NativeFunctionAddress 0000000141027BB0
*/

int function GetWeaponPrimaryAmmoCountMax(int)

/*
* @Breif Get the amount of ammo available for this weapon to use
* @Pramas int
* @NativeName: Script_GetWeaponPrimaryAmmoCount
* @NativeFunctionAddress 0000000141027AF0
*/

int function GetWeaponPrimaryAmmoCount(int)

/*
* @Breif Set the amount of primary ammo
* @Pramas int, int
* @NativeName: Script_SetWeaponPrimaryAmmoCount
* @NativeFunctionAddress 0000000141027A40
*/

void function SetWeaponPrimaryAmmoCount(int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: ShouldAutoCycleWhenOutOfAmmo
* @NativeFunctionAddress 00000001410279E0
*/

bool function ShouldAutoCycleWhenOutOfAmmo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_RegenerateAmmoReset
* @NativeFunctionAddress 0000000141027990
*/

void function RegenerateAmmoReset()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponShieldScale
* @NativeFunctionAddress 00000001410278E0
*/

float function GetWeaponShieldScale()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetLifetimeShotsRemaining
* @NativeFunctionAddress 0000000141027830
*/

int function GetLifetimeShotsRemaining()

/*
* @Breif 
* @Pramas int newCount
* @NativeName: Script_SetLifetimeShotsRemaining
* @NativeFunctionAddress 0000000141027770
*/

void function SetLifetimeShotsRemaining(int newCount)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetLifetimeShotsRemainingInfinite
* @NativeFunctionAddress 00000001410276C0
*/

void function SetLifetimeShotsRemainingInfinite()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetRechamberMilestone
* @NativeFunctionAddress 00000001410275E0
*/

int function GetRechamberMilestone()

/*
* @Breif 
* @Pramas int newMilestone
* @NativeName: Script_ForceRechamberMilestone
* @NativeFunctionAddress 0000000141027570
*/

void function ForceRechamberMilestone(int newMilestone)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetCooldownMilestone
* @NativeFunctionAddress 0000000141027480
*/

int function GetCooldownMilestone()

/*
* @Breif 
* @Pramas int newMilestone
* @NativeName: Script_ForceCooldownMilestone
* @NativeFunctionAddress 0000000141027410
*/

void function ForceCooldownMilestone(int newMilestone)

/*
* @Breif Get the weapon's utility entity
* @Pramas 
* @NativeName: GetWeaponUtilityEntity
* @NativeFunctionAddress 0000000141027380
*/

entity function GetWeaponUtilityEntity()

/*
* @Breif Returns true if the weapon is reloading
* @Pramas 
* @NativeName: IsReloading
* @NativeFunctionAddress 0000000141027320
*/

bool function IsReloading()

/*
* @Breif Returns true if the weapon is in ADS
* @Pramas 
* @NativeName: IsWeaponInAds
* @NativeFunctionAddress 0000000141027280
*/

bool function IsWeaponInAds()

/*
* @Breif Returns true if the ADS button is pressed, even if the weapon doesn't allow zooming
* @Pramas 
* @NativeName: IsWeaponAdsButtonPressed
* @NativeFunctionAddress 00000001410271E0
*/

bool function IsWeaponAdsButtonPressed()

/*
* @Breif Return weapon type: WT_DEFAULT, WT_SIDEARM, WT_ANTI_TITAN, WT_SHOULDER
* @Pramas 
* @NativeName: GetWeaponType
* @NativeFunctionAddress 0000000141027130
*/

int function GetWeaponType()

/*
* @Breif Returns true if the weapon has a charge ability.
* @Pramas 
* @NativeName: IsChargeWeapon
* @NativeFunctionAddress 00000001410270A0
*/

bool function IsChargeWeapon()

/*
* @Breif Returns true if the weapon is currently charging
* @Pramas 
* @NativeName: IsWeaponCharging_Script
* @NativeFunctionAddress 0000000141026FE0
*/

bool function IsWeaponCharging()

/*
* @Breif Returns how long the weapon has been charging
* @Pramas 
* @NativeName: GetWeaponChargeTime_Script
* @NativeFunctionAddress 0000000141026EF0
*/

float function GetWeaponChargeTime()

/*
* @Breif Returns how long the weapon has left to charge
* @Pramas 
* @NativeName: GetWeaponChargeTimeRemaining_Script
* @NativeFunctionAddress 0000000141026E40
*/

float function GetWeaponChargeTimeRemaining()

/*
* @Breif Returns fraction [0,1] where the charge level is.
* @Pramas 
* @NativeName: GetWeaponChargeFractionClamped
* @NativeFunctionAddress 0000000141026D90
*/

float function GetWeaponChargeFraction()

/*
* @Breif Sets charge of the weapon as a fraction [0,1].
* @Pramas float
* @NativeName: Script_SetWeaponChargeFraction
* @NativeFunctionAddress 0000000141026D20
*/

void function SetWeaponChargeFraction(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetWeaponChargeFractionForced
* @NativeFunctionAddress 0000000141026CB0
*/

void function SetWeaponChargeFractionForced(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponChargeLevel_Script
* @NativeFunctionAddress 0000000141026BD0
*/

int function GetWeaponChargeLevel()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponChargeLevelMax_Script
* @NativeFunctionAddress 0000000141026B20
*/

int function GetWeaponChargeLevelMax()

/*
* @Breif Gets the total charge duration of the weapon.
* @Pramas 
* @NativeName: GetChargeDuration
* @NativeFunctionAddress 0000000141026A70
*/

float function GetChargeDuration()

/*
* @Breif Returns true if the weapon needs to complete an overheat cooldown.
* @Pramas 
* @NativeName: IsOverheated
* @NativeFunctionAddress 00000001410269E0
*/

bool function IsOverheated()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponReadyToFireProgress
* @NativeFunctionAddress 0000000141026930
*/

float function GetWeaponReadyToFireProgress()

/*
* @Breif Returns the weapon's attack spread in degrees from one side of the cone to the other.
* @Pramas 
* @NativeName: GetSpread
* @NativeFunctionAddress 0000000141026880
*/

float function GetAttackSpreadAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponChargeEnergyCost
* @NativeFunctionAddress 00000001410267D0
*/

int function GetWeaponChargeEnergyCost()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetWeaponDefaultEnergyCost
* @NativeFunctionAddress 0000000141026720
*/

int function GetWeaponDefaultEnergyCost(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ResetWeaponToDefaultEnergyCost
* @NativeFunctionAddress 0000000141026690
*/

void function ResetWeaponToDefaultEnergyCost()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponCurrentEnergyCost
* @NativeFunctionAddress 00000001410265E0
*/

int function GetWeaponCurrentEnergyCost()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetWeaponEnergyCost
* @NativeFunctionAddress 0000000141026520
*/

void function SetWeaponEnergyCost(int)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string
* @NativeName: GetWeaponInfoFileKeyField
* @NativeFunctionAddress 00000001410263B0
*/

var function GetWeaponInfoFileKeyField(string)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string key
* @NativeName: GetWeaponInfoFileKeyFieldAsset
* @NativeFunctionAddress 0000000141026310
*/

asset function GetWeaponInfoFileKeyFieldAsset(string key)

/*
* @Breif takes in a player and checks to see if the weapon is disabled
* @Pramas entity
* @NativeName: IsWeaponDisabled_Script
* @NativeFunctionAddress 0000000141026290
*/

bool function CheckWeaponIsDisabled(entity)

/*
* @Breif Gets the activity that the weapon is in.
* @Pramas 
* @NativeName: GetWeaponActivity_Script
* @NativeFunctionAddress 00000001410261E0
*/

int function GetWeaponActivity()

/*
* @Breif Triggers weapon deploy
* @Pramas 
* @NativeName: Script_DeployWeapon
* @NativeFunctionAddress 0000000141026180
*/

bool function Deploy()

/*
* @Breif Triggers weapon deploy
* @Pramas 
* @NativeName: Script_DeployWeaponInstant
* @NativeFunctionAddress 0000000141026120
*/

bool function DeployInstant()

/*
* @Breif Triggers weapon raise (or equip)
* @Pramas 
* @NativeName: Raise
* @NativeFunctionAddress 00000001410260B0
*/

bool function Raise()

/*
* @Breif True if the weapon is being discarded and will be removed from the owner's inventory.
* @Pramas 
* @NativeName: IsDiscarding
* @NativeFunctionAddress 0000000141026040
*/

bool function IsDiscarding()

/*
* @Breif Returns true if it is appropriate to fire predicted projectiles on the client
* @Pramas 
* @NativeName: ShouldPredictProjectiles
* @NativeFunctionAddress 0000000141025FD0
*/

bool function ShouldPredictProjectiles()

/*
* @Breif Returns true if smart ammo tracking is enabled
* @Pramas 
* @NativeName: SmartAmmo_IsEnabled_Script
* @NativeFunctionAddress 0000000141025F70
*/

bool function SmartAmmo_IsEnabled()

/*
* @Breif Let script inform code it started locking on a new target in this tick
* @Pramas 
* @NativeName: SmartAmmo_SetNewTargetTime
* @NativeFunctionAddress 0000000141025ED0
*/

void function SmartAmmo_SetNewTargetTime()

/*
* @Breif Returns the last time a new target was acquired
* @Pramas 
* @NativeName: SmartAmmo_GetNewTargetTime
* @NativeFunctionAddress 0000000141025E20
*/

float function SmartAmmo_GetNewTargetTime()

/*
* @Breif Returns the angle used by the smart ammo cone search
* @Pramas 
* @NativeName: SmartAmmo_GetSearchAngle
* @NativeFunctionAddress 0000000141025D70
*/

float function SmartAmmo_GetSearchAngle()

/*
* @Breif Returns a list of targets currently being tracked by the smart ammo system and their current and previous lock fractions
* @Pramas 
* @NativeName: SmartAmmo_Script_GetTargets
* @NativeFunctionAddress 0000000141025C80
*/

array< SmartAmmoTarget > function SmartAmmo_GetTargets()

/*
* @Breif Appends new smart ammo target if not already in the list
* @Pramas entity, float
* @NativeName: SmartAmmo_Script_SetTarget
* @NativeFunctionAddress 0000000141025BE0
*/

void function SmartAmmo_SetTarget(entity, float)

/*
* @Breif Stores the current list of smart ammo targets for later retrieval
* @Pramas 
* @NativeName: SmartAmmo_Script_StoreTargets
* @NativeFunctionAddress 0000000141025B90
*/

void function SmartAmmo_StoreTargets()

/*
* @Breif Returns the list of targets that was last stored
* @Pramas 
* @NativeName: SmartAmmo_Script_GetStoredTargets
* @NativeFunctionAddress 0000000141025AC0
*/

array< entity > function SmartAmmo_GetStoredTargets()

/*
* @Breif Clears all current smart ammo targets. Pass in true for the first argument to clear stored targets too. Pass in true for the second argument to clear trackers too.
* @Pramas bool, bool
* @NativeName: SmartAmmo_Clear
* @NativeFunctionAddress 0000000141025A50
*/

void function SmartAmmo_Clear(bool, bool)

/*
* @Breif Returns the position to fire at for this target
* @Pramas entity, int
* @NativeName: SmartAmmo_Script_GetFirePosition
* @NativeFunctionAddress 0000000141025930
*/

vector function SmartAmmo_GetFirePosition(entity, int)

/*
* @Breif Marks an entity as trackable by the smart ammo system
* @Pramas entity, float
* @NativeName: SmartAmmo_Script_TrackEntity
* @NativeFunctionAddress 0000000141025890
*/

void function SmartAmmo_TrackEntity(entity, float)

/*
* @Breif Clears an entity as trackable by the smart ammo system
* @Pramas entity
* @NativeName: SmartAmmo_Script_UntrackEntity
* @NativeFunctionAddress 0000000141025800
*/

void function SmartAmmo_UntrackEntity(entity)

/*
* @Breif Returns number of trackers currently on entity
* @Pramas entity
* @NativeName: SmartAmmo_Script_GetNumTrackersOnEntity
* @NativeFunctionAddress 0000000141025720
*/

int function SmartAmmo_GetNumTrackersOnEntity(entity)

/*
* @Breif Returns true if the given target is visible to the weapon
* @Pramas entity
* @NativeName: SmartAmmo_IsVisibleTarget
* @NativeFunctionAddress 00000001410256A0
*/

bool function SmartAmmo_IsVisibleTarget(entity)

/*
* @Breif Returns array of all entities currently tracked by this weapon
* @Pramas 
* @NativeName: SmartAmmo_Script_GetTrackedEntities
* @NativeFunctionAddress 00000001410255D0
*/

array< entity > function SmartAmmo_GetTrackedEntities()

/*
* @Breif Returns true if weapon is ready to fire (based on next allowed attack time)
* @Pramas 
* @NativeName: IsReadyToFire
* @NativeFunctionAddress 0000000141025550
*/

bool function IsReadyToFire()

/*
* @Breif Returns true if a burst fire is in progress
* @Pramas 
* @NativeName: IsBurstFireInProgress
* @NativeFunctionAddress 00000001410254E0
*/

bool function IsBurstFireInProgress()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBurstFireShotsPending
* @NativeFunctionAddress 0000000141025430
*/

int function GetBurstFireShotsPending()

/*
* @Breif Returns time remaining until ready to fire
* @Pramas 
* @NativeName: TimeUntilReadyToFire
* @NativeFunctionAddress 0000000141025380
*/

float function TimeUntilReadyToFire()

/*
* @Breif Returns the class name of the weapon
* @Pramas 
* @NativeName: GetWeaponName
* @NativeFunctionAddress 00000001410252F0
*/

string function GetWeaponClassName()

/*
* @Breif Gets the damage source ID for this weapon
* @Pramas 
* @NativeName: GetDamageSourceID
* @NativeFunctionAddress 0000000141025240
*/

int function GetDamageSourceID()

/*
* @Breif Gets the largest damage far dist for current owner
* @Pramas 
* @NativeName: GetMaxDamageFarDist
* @NativeFunctionAddress 0000000141025190
*/

float function GetMaxDamageFarDist()

/*
* @Breif Forces the offhand weapon to release
* @Pramas 
* @NativeName: ForceRelease
* @NativeFunctionAddress 0000000141025140
*/

void function ForceRelease()

/*
* @Breif Returns true if the offhand weapon was forced to release
* @Pramas 
* @NativeName: IsForceRelease
* @NativeFunctionAddress 00000001410250D0
*/

bool function IsForceRelease()

/*
* @Breif Forces the offhand weapon to release (on server only)
* @Pramas 
* @NativeName: ForceReleaseFromServer
* @NativeFunctionAddress 0000000141025080
*/

void function ForceReleaseFromServer()

/*
* @Breif Returns true if the offhand weapon was forced to release (on server only)
* @Pramas 
* @NativeName: IsForceReleaseFromServer
* @NativeFunctionAddress 0000000141024FF0
*/

bool function IsForceReleaseFromServer()

/*
* @Breif Given (string), returns true if mod is active on this weapon.
* @Pramas string
* @NativeName: HasMod_Script
* @NativeFunctionAddress 0000000141024F80
*/

bool function HasMod(string)

/*
* @Breif Given (string), add the mod from this weapon.
* @Pramas string
* @NativeName: AddMod_Script
* @NativeFunctionAddress 0000000141024F20
*/

void function AddMod(string)

/*
* @Breif Given (string), remove the mod from this weapon.
* @Pramas string
* @NativeName: RemoveMod_Script
* @NativeFunctionAddress 0000000141024EC0
*/

void function RemoveMod(string)

/*
* @Breif Sets mods bit field
* @Pramas int
* @NativeName: SetModBitfield_Script
* @NativeFunctionAddress 0000000141024E50
*/

void function SetModBitField(int)

/*
* @Breif Gets mods bit field
* @Pramas 
* @NativeName: GetModBitfield_Script
* @NativeFunctionAddress 0000000141024DA0
*/

int function GetModBitField()

/*
* @Breif Returns true if the weapon is offhand
* @Pramas 
* @NativeName: IsOffhandWeapon
* @NativeFunctionAddress 0000000141024D30
*/

bool function IsWeaponOffhand()

/*
* @Breif Returns true if this is a melee weapon
* @Pramas 
* @NativeName: IsOffhandMeleeWeapon
* @NativeFunctionAddress 0000000141024CC0
*/

bool function IsWeaponMelee()

/*
* @Breif Returns true if this is a toss weapon
* @Pramas 
* @NativeName: IsTossWeapon
* @NativeFunctionAddress 0000000141024C50
*/

bool function IsTossWeapon()

/*
* @Breif Gets the viewmodel for the weapon. Viewmodels are only valid for active player weapons.
* @Pramas 
* @NativeName: GetWeaponViewmodel_Script
* @NativeFunctionAddress 0000000141024BF0
*/

entity function GetWeaponViewmodel()

/*
* @Breif Given (activityName, WeaponActivityFlags), Plays the given activity on the weapon viewmodel
* @Pramas string, int
* @NativeName: StartCustomActivity_Script
* @NativeFunctionAddress 0000000141024B70
*/

bool function StartCustomActivity(string, int)

/*
* @Breif Stops any custom activities currently playing on the weapon viewmodel
* @Pramas 
* @NativeName: StopCustomActivity_Script
* @NativeFunctionAddress 0000000141024B10
*/

void function StopCustomActivity()

/*
* @Breif Queries whether the weapon viewmodel is currently playing a custom activity
* @Pramas 
* @NativeName: IsInCustomActivity
* @NativeFunctionAddress 0000000141024AA0
*/

bool function IsInCustomActivity()

/*
* @Breif Returns the fraction of the current custom weapon activity that is complete.
* @Pramas 
* @NativeName: GetCustomActivityFraction_Script
* @NativeFunctionAddress 0000000141024940
*/

float function GetCustomActivityFraction()

/*
* @Breif Returns the duration of the current custom weapon activity.
* @Pramas 
* @NativeName: GetCustomActivityDuration_Script
* @NativeFunctionAddress 0000000141024870
*/

float function GetCustomActivityDuration()

/*
* @Breif Specifies a model to be attached to the viewmodel during the current custom activity, as well as an attachment index.
* @Pramas string, string
* @NativeName: CustomActivityAttachModel_Script
* @NativeFunctionAddress 0000000141024770
*/

void function CustomActivityAttachModel(string, string)

/*
* @Breif Clears the attached custom activity model.
* @Pramas 
* @NativeName: CustomActivityClearAttachedModel_Script
* @NativeFunctionAddress 0000000141024700
*/

void function CustomActivityClearAttachedModel()

/*
* @Breif Get this weapon's internal when-can-I-shoot-next time.
* @Pramas 
* @NativeName: GetNextAttackAllowedTime_Script
* @NativeFunctionAddress 0000000141024640
*/

float function GetNextAttackAllowedTime()

/*
* @Breif Get this weapon's internal when-can-I-shoot-next time, ignoring the "ready" timer
* @Pramas 
* @NativeName: GetNextAttackAllowedTimeRaw_Script
* @NativeFunctionAddress 0000000141024590
*/

float function GetNextAttackAllowedTimeRaw()

/*
* @Breif Set this weapon's internal when-can-I-shoot-next time.
* @Pramas float
* @NativeName: SetNextAttackAllowedTime_Script
* @NativeFunctionAddress 00000001410244E0
*/

void function SetNextAttackAllowedTime(float)

/*
* @Breif 
* @Pramas float
* @NativeName: OverrideNextAttackTime_Script
* @NativeFunctionAddress 0000000141024470
*/

void function OverrideNextAttackTime(float)

/*
* @Breif Get the damage amount this weapon should do to a titan that the player is rodeoing.
* @Pramas 
* @NativeName: GetRodeoDamage_Script
* @NativeFunctionAddress 00000001410243C0
*/

int function GetRodeoDamage()

/*
* @Breif 
* @Pramas 
* @NativeName: GetShotCount_Script
* @NativeFunctionAddress 0000000141024310
*/

int function GetShotCount()

/*
* @Breif Gets the string specified in the weapon's .txt file for 'weaponClass'.
* @Pramas 
* @NativeName: GetWeaponClass
* @NativeFunctionAddress 0000000141024270
*/

string function GetWeaponClass()

/*
* @Breif Returns true if weapon is in a cooldown state.
* @Pramas 
* @NativeName: IsInCooldown
* @NativeFunctionAddress 0000000141024200
*/

bool function IsInCooldown()

/*
* @Breif Returns true if weapon is has a cooldown state pending.
* @Pramas 
* @NativeName: IsCooldownPending
* @NativeFunctionAddress 0000000141024160
*/

bool function IsCooldownPending()

/*
* @Breif Get Weapon Type Flags
* @Pramas 
* @NativeName: GetWeaponTypeFlags
* @NativeFunctionAddress 00000001410240B0
*/

int function GetWeaponTypeFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponDamageFlags
* @NativeFunctionAddress 0000000141024000
*/

int function GetWeaponDamageFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponExplosionDamageFlags
* @NativeFunctionAddress 0000000141023F50
*/

int function GetWeaponExplosionDamageFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetImpactTableIndex
* @NativeFunctionAddress 0000000141023EA0
*/

int function GetImpactTableIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetNPCMissFastPlayer
* @NativeFunctionAddress 0000000141023E40
*/

bool function GetNPCMissFastPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeLungeTargetRange
* @NativeFunctionAddress 0000000141023D90
*/

float function GetMeleeLungeTargetRange()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeLungeTargetAngle
* @NativeFunctionAddress 0000000141023CE0
*/

float function GetMeleeLungeTargetAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeCanHitHumanSized
* @NativeFunctionAddress 0000000141023C80
*/

bool function GetMeleeCanHitHumanSized()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeCanHitTitans
* @NativeFunctionAddress 0000000141023C20
*/

bool function GetMeleeCanHitTitans()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetDamageAmountForArmorType
* @NativeFunctionAddress 0000000141023B30
*/

int function GetDamageAmountForArmorType(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAttackRange
* @NativeFunctionAddress 0000000141023A80
*/

float function GetMeleeAttackRange()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAttackAngle
* @NativeFunctionAddress 00000001410239D0
*/

float function GetMeleeAttackAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAnim3p
* @NativeFunctionAddress 0000000141023940
*/

string function GetMeleeAnim3p()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponReadyMsg
* @NativeFunctionAddress 00000001410238B0
*/

string function GetWeaponReadyMsg()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponReadyHint
* @NativeFunctionAddress 0000000141023820
*/

string function GetWeaponReadyHint()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrenadeFuseTime
* @NativeFunctionAddress 0000000141023770
*/

float function GetGrenadeFuseTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrenadeIgnitionTime
* @NativeFunctionAddress 00000001410236C0
*/

float function GetGrenadeIgnitionTime()

/*
* @Breif 
* @Pramas 
* @NativeName: ZiplineGrenadeHasValidSpot
* @NativeFunctionAddress 0000000141023660
*/

bool function ZiplineGrenadeHasValidSpot()

/*
* @Breif Returns the exact origin the begin station should be placed at for the zipline grenade/gun
* @Pramas entity
* @NativeName: Script_GetBeginStationOriginForZiplineGrenade
* @NativeFunctionAddress 0000000141023520
*/

vector function GetBeginStationOriginForZiplineGrenade(entity)

/*
* @Breif Returns the exact angle the begin station should be placed at for the zipline grenade/gun
* @Pramas entity
* @NativeName: Script_GetBeginStationAnglesForZiplineGrenade
* @NativeFunctionAddress 0000000141023430
*/

vector function GetBeginStationAnglesForZiplineGrenade(entity)

/*
* @Breif Does this weapon allow for headshot damage
* @Pramas 
* @NativeName: Script_GetAllowHeadShots
* @NativeFunctionAddress 00000001410233D0
*/

bool function GetAllowHeadShots()

/*
* @Breif Gets the index for the next shot to be fired
* @Pramas 
* @NativeName: Script_GetCurrentAltFireIndex
* @NativeFunctionAddress 0000000141023320
*/

int function GetCurrentAltFireIndex()

/*
* @Breif Gets the current zoom FOV of the weapon
* @Pramas 
* @NativeName: Script_GetWeaponZoomFOV
* @NativeFunctionAddress 0000000141023270
*/

float function GetWeaponZoomFOV()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetReloadMilestoneIndex
* @NativeFunctionAddress 00000001410231C0
*/

int function GetReloadMilestoneIndex()

/*
* @Breif Forces the player to ads
* @Pramas 
* @NativeName: Script_SetForcedADS
* @NativeFunctionAddress 0000000141023130
*/

void function SetForcedADS()

/*
* @Breif Lets the player choose whether or not to ads
* @Pramas 
* @NativeName: Script_ClearForcedADS
* @NativeFunctionAddress 00000001410230A0
*/

void function ClearForcedADS()

/*
* @Breif Gets whether or not the player is forced into ads
* @Pramas 
* @NativeName: Script_GetForcedADS
* @NativeFunctionAddress 0000000141022FF0
*/

int function GetForcedADS()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetInventoryIndex
* @NativeFunctionAddress 0000000141022F40
*/

int function GetInventoryIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetChargeAnimIndex
* @NativeFunctionAddress 0000000141022E90
*/

int function GetChargeAnimIndex()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetChargeAnimIndex
* @NativeFunctionAddress 0000000141022DD0
*/

void function SetChargeAnimIndex(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponDamageForce
* @NativeFunctionAddress 0000000141022D20
*/

float function GetWeaponDamageForce()

/*
* @Breif Forcibly ends a sustained discharge. Does nothing if no sustained discharge is occurring.
* @Pramas 
* @NativeName: SustainedDischargeEnd
* @NativeFunctionAddress 0000000141022CB0
*/

void function ForceSustainedDischargeEnd()

/*
* @Breif Forcibly ends charging, without an attack. Does nothing if no charging is occurring.
* @Pramas 
* @NativeName: Script_ForceChargeEndNoAttack
* @NativeFunctionAddress 0000000141022C30
*/

void function ForceChargeEndNoAttack()

/*
* @Breif Gets the core duration
* @Pramas 
* @NativeName: GetCoreDuration
* @NativeFunctionAddress 0000000141022B80
*/

float function GetCoreDuration()

/*
* @Breif Indicates if this is a sustained discharge weapon.
* @Pramas 
* @NativeName: IsSustainedDischargeWeapon
* @NativeFunctionAddress 0000000141022B10
*/

bool function IsSustainedDischargeWeapon()

/*
* @Breif Indicates if the weapon is currently performing a sustained discharge
* @Pramas 
* @NativeName: IsDischarging
* @NativeFunctionAddress 0000000141022A80
*/

bool function IsDischarging()

/*
* @Breif Gets the total duration of a sustained discharge.
* @Pramas 
* @NativeName: GetSustainedDischargeDuration
* @NativeFunctionAddress 00000001410229D0
*/

float function GetSustainedDischargeDuration()

/*
* @Breif Gets the time remaining for the current sustained discharge between.
* @Pramas 
* @NativeName: GetSustainedDischargeRemainder
* @NativeFunctionAddress 00000001410228F0
*/

float function GetSustainedDischargeRemainder()

/*
* @Breif Gets the fraction of completion for the current sustained discharge between [0, 1].
* @Pramas 
* @NativeName: GetSustainedDischargeFraction
* @NativeFunctionAddress 0000000141022840
*/

float function GetSustainedDischargeFraction()

/*
* @Breif Gets the frequency at which pulse callbacks are dispatched if enabled. Also controls frequency of sustained laser damage.
* @Pramas 
* @NativeName: GetSustainedDischargePulseFrequency
* @NativeFunctionAddress 0000000141022790
*/

float function GetSustainedDischargePulseFrequency()

/*
* @Breif Forces the discharge to be at a certain fraction
* @Pramas float
* @NativeName: SetSustainedDischargeFractionForced
* @NativeFunctionAddress 0000000141022720
*/

void function SetSustainedDischargeFractionForced(float)

/*
* @Breif Indicates if this is a sustained laser weapon.
* @Pramas 
* @NativeName: IsSustainedLaserWeapon
* @NativeFunctionAddress 0000000141022690
*/

bool function IsSustainedLaserWeapon()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_DoMeleeHitConfirmation
* @NativeFunctionAddress 0000000141022620
*/

void function DoMeleeHitConfirmation(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetScriptTime0
* @NativeFunctionAddress 0000000141022570
*/

void function SetScriptTime0(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptTime0
* @NativeFunctionAddress 00000001410224C0
*/

float function GetScriptTime0()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetScriptFlags0
* @NativeFunctionAddress 0000000141022420
*/

void function SetScriptFlags0(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptFlags0
* @NativeFunctionAddress 0000000141022370
*/

int function GetScriptFlags0()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetScriptInt0
* @NativeFunctionAddress 00000001410222D0
*/

void function SetScriptInt0(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptInt0
* @NativeFunctionAddress 0000000141022220
*/

int function GetScriptInt0()

/*
* @Breif Duplicate this weapon and throw it.
* @Pramas vector, vector, vector, vector
* @NativeName: ThrowWeapon_Script
* @NativeFunctionAddress 0000000141022180
*/

entity function ThrowWeapon(vector, vector, vector, vector)

/*
* @Breif Set the weapon's utility entity
* @Pramas entity
* @NativeName: SetWeaponUtilityEntity_Script
* @NativeFunctionAddress 0000000141022090
*/

void function SetWeaponUtilityEntity(entity)

/*
* @Breif Makes the weapon play ACT_VM_DRAWCATCH next time it is deployed to a player.
* @Pramas 
* @NativeName: Script_EnableCatchAnimation
* @NativeFunctionAddress 0000000141022040
*/

void function EnableCatchAnimation()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_MarkAsLoadoutPickup
* @NativeFunctionAddress 0000000141021FB0
*/

void function MarkAsLoadoutPickup()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ForceDryfireEvent
* @NativeFunctionAddress 0000000141021F60
*/

void function ForceDryfireEvent()

/*
* @Breif 
* @Pramas entity proScreenOwner
* @NativeName: Script_SetProScreenOwner
* @NativeFunctionAddress 0000000141021EE0
*/

void function SetProScreenOwner(entity proScreenOwner)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetProScreenOwner
* @NativeFunctionAddress 0000000141021E50
*/

entity function GetProScreenOwner()

/*
* @Breif 
* @Pramas int index, int val
* @NativeName: Script_SetProScreenIntValForIndex
* @NativeFunctionAddress 0000000141021DD0
*/

void function SetProScreenIntValForIndex(int index, int val)

/*
* @Breif 
* @Pramas int index, float val
* @NativeName: Script_SetProScreenFloatValForIndex
* @NativeFunctionAddress 0000000141021D50
*/

void function SetProScreenFloatValForIndex(int index, float val)

/*
* @Breif 
* @Pramas bool isPlayerDropped
* @NativeName: Script_ManuallyAddToWeaponDropManager
* @NativeFunctionAddress 0000000141021CF0
*/

void function ManuallyAddToWeaponDropManager(bool isPlayerDropped)

/*
* @Breif Adds a mod in realtime.
* @Pramas string
* @NativeName: Script_RealtimeMod_Add
* @NativeFunctionAddress 0000000141021C90
*/

void function RealtimeMod_Add(string)

/*
* @Breif Set the override to be used for the optic appearance for this weapon entity. Use -1 to clear the override for an optic appearance.
* @Pramas string opticAppearanceName, int overrideIndex
* @NativeName: Script_SetOpticAppearanceOverride
* @NativeFunctionAddress 0000000141021C10
*/

void function SetOpticAppearanceOverride(string opticAppearanceName, int overrideIndex)

/*
* @Breif Removes a mod in realtime.
* @Pramas string
* @NativeName: Script_RealtimeMod_Remove
* @NativeFunctionAddress 0000000141021BB0
*/

void function RealtimeMod_Remove(string)

/*
* @Breif 
* @Pramas 
* @NativeName: IsLoadoutPickup
* @NativeFunctionAddress 0000000141021B50
*/

bool function IsLoadoutPickup()

/*
* @Breif Get weapon charm model name for the weapon.
* @Pramas 
* @NativeName: Script_GetCharmModelName
* @NativeFunctionAddress 0000000141021AB0
*/

string function GetCharmModelName()

/*
* @Breif Set the legendary weapon model index for this instance of the weapon. The weapon will use the dafault model from weapon info if a negative index is set.
* @Pramas int legendaryIndex
* @NativeName: Script_SetLegendaryModelIndex
* @NativeFunctionAddress 0000000141021A40
*/

void function SetLegendaryModelIndex(int legendaryIndex)

/*
* @Breif Set weapon charm for the model. This spawns an entity with the provided model and attach it to the CHARM attachment on the weapon.
* @Pramas asset weaponCharmModel, string attachmentName
* @NativeName: Script_SetWeaponCharm
* @NativeFunctionAddress 00000001410219D0
*/

void function SetWeaponCharm(asset weaponCharmModel, string attachmentName)

/*
* @Breif Set script index for weapon charm.
* @Pramas int charmScriptIndex
* @NativeName: Script_SetWeaponCharmIndex
* @NativeFunctionAddress 0000000141021930
*/

void function SetWeaponCharmIndex(int charmScriptIndex)

/*
* @Breif Get script index for the weapon charm.
* @Pramas 
* @NativeName: Script_GetWeaponCharmIndex
* @NativeFunctionAddress 0000000141021880
*/

int function GetWeaponCharmIndex()

/*
* @Breif Clear the wepaon charm entity for the current weapon.
* @Pramas 
* @NativeName: ClearWeaponCharm
* @NativeFunctionAddress 00000001410217E0
*/

void function ClearWeaponCharm()

/*
* @Breif Plays the effect on the weapon, always spawn even if out of view
* @Pramas asset, asset, string, bool persistent = false
* @NativeName: PlayWeaponEffectNoCull_Script
* @NativeFunctionAddress 0000000141020F00
*/

var function PlayWeaponEffectNoCull()

/*
* @Breif Plays the effect on the weapon
* @Pramas asset, asset, string, bool persistent = false
* @NativeName: PlayWeaponEffect_Script
* @NativeFunctionAddress 0000000141020F00
*/

var function PlayWeaponEffect()

/*
* @Breif Fires a bullet, can set to skip lag compensation, have zero spread, dryfire, or only cause a whizby sound.
* @Pramas WeaponFireBulletSpecialParams
* @NativeName: FireWeaponBulletSpecial_Script
* @NativeFunctionAddress 0000000141020F50
*/

var function FireWeaponBullet_Special()

/*
* @Breif Fires a bolt projectile
* @Pramas WeaponFireBoltParams
* @NativeName: FireWeaponBolt_Script
* @NativeFunctionAddress 0000000141020FA0
*/

var function FireWeaponBolt()

/*
* @Breif Fires a bolt projectile and returns the entity to script
* @Pramas WeaponFireBoltParams
* @NativeName: FireWeaponBoltAndReturnEntity_Script
* @NativeFunctionAddress 0000000141020FF0
*/

var function FireWeaponBoltAndReturnEntity()

/*
* @Breif Fires the weapon once as per weaponsettings, in a scaled blast pattern (if one is specified).
* @Pramas vector pos, vector dir, float speed, float patternScale, bool ignoreSpread
* @NativeName: FireWeapon_Default_Script
* @NativeFunctionAddress 0000000141021040
*/

var function FireWeapon_Default()

/*
* @Breif Fires a grenade projectile
* @Pramas WeaponFireGrenadeParams
* @NativeName: FireWeaponGrenade_Script
* @NativeFunctionAddress 0000000141021090
*/

var function FireWeaponGrenade()

/*
* @Breif Fires a missile projectile
* @Pramas WeaponFireMissileParams
* @NativeName: FireWeaponMissile_Script
* @NativeFunctionAddress 00000001410210E0
*/

var function FireWeaponMissile()

/*
* @Breif Get an array of mods active on this weapon.
* @Pramas 
* @NativeName: GetMods_Script
* @NativeFunctionAddress 0000000141021130
*/

var function GetMods()

/*
* @Breif Get an array of mods active or queued on this weapon.
* @Pramas 
* @NativeName: GetMods_WithQueued_Script
* @NativeFunctionAddress 0000000141021180
*/

var function GetMods_WithQueued()

/*
* @Breif Reset and apply active mods on a weapon.
* @Pramas array< string > mods
* @NativeName: SetMods_Script
* @NativeFunctionAddress 00000001410211D0
*/

var function SetMods()

/*
* @Breif Get all pending realtime mod commands. +mod_name/-mod_name for add/remove.
* @Pramas 
* @NativeName: Script_RealtimeMod_GetPendingCommands
* @NativeFunctionAddress 0000000141021220
*/

var function RealtimeMod_GetPendingCommands()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingInt
* @NativeFunctionAddress 0000000141021270
*/

var function GetWeaponSettingInt()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar, table enumType
* @NativeName: Script_GetWeaponSettingEnum
* @NativeFunctionAddress 0000000141021320
*/

var function GetWeaponSettingEnum()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingFloat
* @NativeFunctionAddress 0000000141021370
*/

var function GetWeaponSettingFloat()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingBool
* @NativeFunctionAddress 0000000141021420
*/

var function GetWeaponSettingBool()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingVector
* @NativeFunctionAddress 00000001410214D0
*/

var function GetWeaponSettingVector()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingString
* @NativeFunctionAddress 0000000141021580
*/

var function GetWeaponSettingString()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingAsset
* @NativeFunctionAddress 0000000141021630
*/

var function GetWeaponSettingAsset()

/*
* @Breif Detach the end of the zipline (so it becomes a vine)
* @Pramas 
* @NativeName: Zipline_DetachEnd
* @NativeFunctionAddress 0000000140FE0810
*/

void function Zipline_DetachEnd()

/*
* @Breif Whether the zipline is usable
* @Pramas 
* @NativeName: Zipline_IsEnabled
* @NativeFunctionAddress 0000000140FE07B0
*/

bool function Zipline_IsEnabled()

/*
* @Breif Whether the end of the zipline is detached (or will be if used)
* @Pramas 
* @NativeName: Zipline_IsEndDetachedScript
* @NativeFunctionAddress 0000000140FE0720
*/

bool function Zipline_IsEndDetached()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_IsVertical
* @NativeFunctionAddress 0000000140FE06B0
*/

bool function Zipline_IsVertical()

/*
* @Breif Make zipline unusable
* @Pramas 
* @NativeName: Zipline_Enable
* @NativeFunctionAddress 0000000140FE0630
*/

void function Zipline_Enable()

/*
* @Breif Make zipline usable
* @Pramas 
* @NativeName: Zipline_Disable
* @NativeFunctionAddress 0000000140FE05B0
*/

void function Zipline_Disable()

/*
* @Breif Allow using the initial rest positions (_zipline_rest_point_*)
* @Pramas 
* @NativeName: Zipline_EnableResting
* @NativeFunctionAddress 0000000140FE0550
*/

void function Zipline_EnableResting()

/*
* @Breif Disallow using the initial rest positions (_zipline_rest_point_*)
* @Pramas 
* @NativeName: Zipline_DisableResting
* @NativeFunctionAddress 0000000140FE04F0
*/

void function Zipline_DisableResting()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_WakeUp
* @NativeFunctionAddress 0000000140FE0480
*/

void function Zipline_WakeUp()

/*
* @Breif Gets the weapon classname that fired this projectile.
* @Pramas 
* @NativeName: ProjectileGetWeaponClassName_Script
* @NativeFunctionAddress 0000000140FE30D0
*/

string function ProjectileGetWeaponClassName()

/*
* @Breif Sets whether the projectile has been refired from the vortex; affects which script is run.
* @Pramas bool
* @NativeName: SetVortexRefired
* @NativeFunctionAddress 0000000140FE3070
*/

void function SetVortexRefired(bool)

/*
* @Breif Set whether projectile should do damage to alive entities only
* @Pramas bool
* @NativeName: DamageAliveOnly
* @NativeFunctionAddress 0000000140FE3010
*/

void function DamageAliveOnly(bool)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string
* @NativeName: Script_ProjectileGetWeaponInfoFileKeyField
* @NativeFunctionAddress 0000000140FE2EA0
*/

var function ProjectileGetWeaponInfoFileKeyField(string)

/*
* @Breif Resolves a string key to its asset in this weapons info file.
* @Pramas string
* @NativeName: ProjectileGetWeaponInfoFileKeyFieldAsset
* @NativeFunctionAddress 0000000140FE2E00
*/

asset function ProjectileGetWeaponInfoFileKeyFieldAsset(string)

/*
* @Breif Gets a weapons charge level returns 0 if not a charge weapon or has 0 charge
* @Pramas 
* @NativeName: ProjectileGetWeaponChargeLevel
* @NativeFunctionAddress 0000000140FE2D50
*/

int function ProjectileGetWeaponChargeLevel()

/*
* @Breif Get the damage amount this projectile's weapon should do to a titan that the player is rodeoing.
* @Pramas 
* @NativeName: ProjectileGetRodeoDamage_Script
* @NativeFunctionAddress 0000000140FE2C90
*/

int function ProjectileGetRodeoDamage()

/*
* @Breif Force projectile to act as if the 'adjust_to_gun_barrel' weapon setting had been set to false.
* @Pramas bool
* @NativeName: ForceAdjustToGunBarrelDisabled_Script
* @NativeFunctionAddress 0000000140FE2C00
*/

void function ForceAdjustToGunBarrelDisabled(bool)

/*
* @Breif Returns the time the projectile was created by the player
* @Pramas 
* @NativeName: GetProjectileCreationTime
* @NativeFunctionAddress 0000000140FE2B50
*/

float function GetProjectileCreationTime()

/*
* @Breif Return the time the projectile was created on the server
* @Pramas 
* @NativeName: GetProjectileCreationTimeServer
* @NativeFunctionAddress 0000000140FE2AA0
*/

float function GetProjectileCreationTimeServer()

/*
* @Breif Specify which of the weapon's "projectile_trail_effect_#" settings this projectile should use.
* @Pramas int
* @NativeName: SetProjectilTrailEffectIndex_Script
* @NativeFunctionAddress 0000000140FE29E0
*/

void function SetProjectilTrailEffectIndex(int)

/*
* @Breif Sets how long the projectile is alive for 0 is infinite or until it collides
* @Pramas float
* @NativeName: SetProjectileLifetime_Script
* @NativeFunctionAddress 0000000140FE2860
*/

void function SetProjectileLifetime(float)

/*
* @Breif Sets how far the projectile can travel for 0 is infinite or until it collides
* @Pramas float
* @NativeName: SetProjectileDestructionDistance_Script
* @NativeFunctionAddress 0000000140FE27B0
*/

void function SetProjectileDestructionDistance(float)

/*
* @Breif Gets how long before the lifetime of the projectile is up.
* @Pramas 
* @NativeName: GetTimeToProjectileDeath_Script
* @NativeFunctionAddress 0000000140FE26F0
*/

float function GetTimeToProjectileDeath()

/*
* @Breif Gets whether or not this projectile allows headshots
* @Pramas 
* @NativeName: Script_GetAllowHeadShots
* @NativeFunctionAddress 0000000140FE2690
*/

bool function GetProjectileAllowHeadShots()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetReducedEffects
* @NativeFunctionAddress 0000000140FE2640
*/

void function SetReducedEffects()

/*
* @Breif Set the impact FX table to use for collisions.
* @Pramas int
* @NativeName: SetImpactEffectTable_Script
* @NativeFunctionAddress 0000000140FE2580
*/

void function SetImpactEffectTable(int)

/*
* @Breif Set projectile's speed
* @Pramas float
* @NativeName: SetProjectileSpeed
* @NativeFunctionAddress 0000000140FE2510
*/

void function SetProjectileSpeed(float)

/*
* @Breif Get projectile's speed
* @Pramas 
* @NativeName: GetProjectileSpeed
* @NativeFunctionAddress 0000000140FE2460
*/

float function GetProjectileSpeed()

/*
* @Breif Returns reference to the weapon that fired this projectile
* @Pramas 
* @NativeName: GetWeaponSource
* @NativeFunctionAddress 0000000140FE23D0
*/

entity function GetWeaponSource()

/*
* @Breif 
* @Pramas float damage
* @NativeName: Script_SetProjectileImpactDamageOverride
* @NativeFunctionAddress 0000000140FE2360
*/

void function SetProjectileImpactDamageOverride(float damage)

/*
* @Breif Set the weapon classname that this projectile will report.
* @Pramas string
* @NativeName: SetWeaponClassName_Script
* @NativeFunctionAddress 0000000140FE22F0
*/

bool function SetWeaponClassName(string)

/*
* @Breif Get the damagesourceID set on this projectile.
* @Pramas 
* @NativeName: ProjectileGetDamageSourceID_Script
* @NativeFunctionAddress 0000000140FE2240
*/

int function ProjectileGetDamageSourceID()

/*
* @Breif Set the damagesourceID set on this projectile.
* @Pramas int
* @NativeName: ProjectileSetDamageSourceID_Script
* @NativeFunctionAddress 0000000140FE21D0
*/

void function ProjectileSetDamageSourceID(int)

/*
* @Breif Given (string), returns true if mod is active on this weapon.
* @Pramas string
* @NativeName: HasMod_Script
* @NativeFunctionAddress 0000000140FE2160
*/

bool function HasWeaponMod(string)

/*
* @Breif Get an array of mods active on the weapon that shot this projectile.
* @Pramas 
* @NativeName: ProjectileGetMods_Script
* @NativeFunctionAddress 0000000140FDFC40
*/

var function ProjectileGetMods()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingInt
* @NativeFunctionAddress 0000000140FDFC90
*/

var function GetProjectileWeaponSettingInt()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingFloat
* @NativeFunctionAddress 0000000140FDFCE0
*/

var function GetProjectileWeaponSettingFloat()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingBool
* @NativeFunctionAddress 0000000140FDFD30
*/

var function GetProjectileWeaponSettingBool()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingVector
* @NativeFunctionAddress 0000000140FDFD80
*/

var function GetProjectileWeaponSettingVector()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingString
* @NativeFunctionAddress 0000000140FDFDD0
*/

var function GetProjectileWeaponSettingString()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingAsset
* @NativeFunctionAddress 0000000140FDFE20
*/

var function GetProjectileWeaponSettingAsset()

/*
* @Breif Set missile's damage
* @Pramas float
* @NativeName: SetDamage
* @NativeFunctionAddress 0000000140FE1370
*/

void function SetDamage(float)

/*
* @Breif Set missile's inner and outer explosion radius
* @Pramas float, float
* @NativeName: SetExplosionRadius
* @NativeFunctionAddress 0000000140FE12E0
*/

void function SetExplosionRadius(float, float)

/*
* @Breif Set missile's homing speed
* @Pramas float, float
* @NativeName: SetHomingSpeeds
* @NativeFunctionAddress 0000000140FE1250
*/

void function SetHomingSpeeds(float, float)

/*
* @Breif Get missile's homing speed
* @Pramas 
* @NativeName: GetHomingSpeed
* @NativeFunctionAddress 0000000140BCA010
*/

float function GetHomingSpeed()

/*
* @Breif Get missile's homing speed -vs- dodging players.
* @Pramas 
* @NativeName: GetHomingSpeedAtDodgingPlayer
* @NativeFunctionAddress 0000000140FE11A0
*/

float function GetHomingSpeedAtDodgingPlayer()

/*
* @Breif Set missile's homing target. If the missile's target position is set that will be used instead.
* @Pramas entity, vector
* @NativeName: SetTarget_Script
* @NativeFunctionAddress 0000000140FE1020
*/

void function SetMissileTarget(entity, vector)

/*
* @Breif Get missile's homing target
* @Pramas 
* @NativeName: GetMissileTarget
* @NativeFunctionAddress 0000000140FE0F90
*/

entity function GetMissileTarget()

/*
* @Breif Sets the missile's target homing position. This will override any target entity.
* @Pramas vector
* @NativeName: SetTargetPosition
* @NativeFunctionAddress 0000000140FE0F30
*/

void function SetMissileTargetPosition(vector)

/*
* @Breif Gets the missile's target homing position. This may be garbage if not at first set.
* @Pramas 
* @NativeName: GetTargetPosition
* @NativeFunctionAddress 0000000140FE0ED0
*/

vector function GetMissileTargetPosition()

/*
* @Breif Clears the missile's target homing position.
* @Pramas 
* @NativeName: ClearTargetPosition
* @NativeFunctionAddress 0000000140FE0E40
*/

void function ClearMissileTargetPosition()

/*
* @Breif Self-destruct.
* @Pramas 
* @NativeName: MissileExplode_Script
* @NativeFunctionAddress 0000000140FE0DE0
*/

void function MissileExplode()

/*
* @Breif Init missile drift settings from weapon settings
* @Pramas vector, vector
* @NativeName: InitMissileForRandomDriftFromWeaponSettings
* @NativeFunctionAddress 0000000140FE0D80
*/

void function InitMissileForRandomDriftFromWeaponSettings(vector, vector)

/*
* @Breif Init missile drift with custom settings
* @Pramas vector, vector, float, float, float, float, float, float, float
* @NativeName: InitMissileForRandomDrift
* @NativeFunctionAddress 0000000140FE0BA0
*/

void function InitMissileForRandomDrift(vector, vector, float, float, float, float, float, float, float)

/*
* @Breif Init missile path expand contract settings
* @Pramas vector, vector, float, float, float, float, vector, bool
* @NativeName: InitMissileExpandContract
* @NativeFunctionAddress 0000000140FE0AB0
*/

void function InitMissileExpandContract(vector, vector, float, float, float, float, vector, bool)

/*
* @Breif Apply missile drift to velocity
* @Pramas float, float
* @NativeName: ApplyMissileControlledDrift
* @NativeFunctionAddress 0000000140FE0940
*/

vector function ApplyMissileControlledDrift(float, float)

/*
* @Breif Init spiralling missile
* @Pramas vector, vector, int, bool, bool
* @NativeName: InitMissileSpiral
* @NativeFunctionAddress 0000000140FE08B0
*/

void function InitMissileSpiral(vector, vector, int, bool, bool)

/*
* @Breif Sets max number of ricochet's a bolt can do
* @Pramas int
* @NativeName: Script_SetRicochetMaxCount
* @NativeFunctionAddress 0000000140FE13E0
*/

void function SetRicochetMaxCount(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetBulletAbsorbedCount
* @NativeFunctionAddress 0000000140FE1AB0
*/

int function GetBulletAbsorbedCount()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetProjectileAbsorbedCount
* @NativeFunctionAddress 0000000140FE1A00
*/

int function GetProjectileAbsorbedCount()

/*
* @Breif Set the weapon entity that owns this vortex sphere.
* @Pramas entity
* @NativeName: SetOwnerWeapon_Script
* @NativeFunctionAddress 0000000140FE1980
*/

void function SetOwnerWeapon(entity)

/*
* @Breif sets the particle effect of the vortex sphere.
* @Pramas entity
* @NativeName: SetVortexEffect_Script
* @NativeFunctionAddress 0000000140FE1880
*/

void function SetVortexEffect(entity)

/*
* @Breif sets local angles on the effect of the vortex
* @Pramas vector
* @NativeName: SetLocalVortexAngles_Script
* @NativeFunctionAddress 0000000140FE17A0
*/

void function SetLocalVortexAngles(vector)

/*
* @Breif sets the attachment for the gun
* @Pramas string
* @NativeName: SetGunVortexAttachment_Script
* @NativeFunctionAddress 0000000140FE1740
*/

void function SetGunVortexAttachment(string)

/*
* @Breif Get the weapon entity that owns this vortex sphere.
* @Pramas 
* @NativeName: GetOwnerWeapon_Script
* @NativeFunctionAddress 0000000140FE16B0
*/

entity function GetOwnerWeapon()

/*
* @Breif Add a single bullet to the sphere
* @Pramas 
* @NativeName: AddBulletToSphere_Script
* @NativeFunctionAddress 0000000140FE1660
*/

void function AddBulletToSphere()

/*
* @Breif Add a single projectile to the sphere.
* @Pramas 
* @NativeName: AddProjectileToSphere
* @NativeFunctionAddress 0000000140FE1610
*/

void function AddProjectileToSphere()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ClearAllBulletsFromSphere
* @NativeFunctionAddress 0000000140FE1580
*/

void function ClearAllBulletsFromSphere()

/*
* @Breif Allows npc's to target behind vortex sphere
* @Pramas 
* @NativeName: Script_DisableVortexBlockLOS
* @NativeFunctionAddress 0000000140FE14F0
*/

void function DisableVortexBlockLOS()

/*
* @Breif Remove a single bullet from the sphere.
* @Pramas 
* @NativeName: RemoveBulletFromSphere
* @NativeFunctionAddress 0000000140FE14A0
*/

void function RemoveBulletFromSphere()

/*
* @Breif Remove a single projectile from the sphere.
* @Pramas 
* @NativeName: RemoveProjectileFromSphere
* @NativeFunctionAddress 0000000140FE1450
*/

void function RemoveProjectileFromSphere()

/*
* @Breif Sets the aim direction of the turret (while there is no player controlling)
* @Pramas float, float
* @NativeName: ScriptAimTurret
* @NativeFunctionAddress 0000000140FE1C70
*/

void function AimTurret(float, float)

/*
* @Breif Set the collision volume to a sphere shape.
* @Pramas float
* @NativeName: ScriptSetSphere
* @NativeFunctionAddress 0000000140FE20F0
*/

void function SetSphere(float)

/*
* @Breif Set the collision volume to an obb shape.
* @Pramas vector, vector
* @NativeName: ScriptSetBox
* @NativeFunctionAddress 0000000140FE2090
*/

void function SetBox(vector, vector)

/*
* @Breif Gets the forward direction of the window
* @Pramas 
* @NativeName: GetNormal
* @NativeFunctionAddress 0000000140FE3BF0
*/

vector function GetNormal()

/*
* @Breif Gets the sideways direction of the window
* @Pramas 
* @NativeName: GetRight
* @NativeFunctionAddress 0000000140FE3B20
*/

vector function GetRight()

/*
* @Breif Gets half the width of the window
* @Pramas 
* @NativeName: GetHalfWidth
* @NativeFunctionAddress 0000000140FE3A70
*/

float function GetHalfWidth()

/*
* @Breif Gets half the height of the window
* @Pramas 
* @NativeName: GetHalfHeight
* @NativeFunctionAddress 0000000140FE39C0
*/

float function GetHalfHeight()

/*
* @Breif 
* @Pramas 
* @NativeName: Hide
* @NativeFunctionAddress 0000000140FE3D10
*/

void function HideFirstPersonProxy()

/*
* @Breif 
* @Pramas 
* @NativeName: Show
* @NativeFunctionAddress 0000000140FE3CC0
*/

void function ShowFirstPersonProxy()

/*
* @Breif Gets the type of the hint, such as "window" or "door"
* @Pramas 
* @NativeName: ScriptGetHintType
* @NativeFunctionAddress 0000000140F383E0
*/

string function GetHintType()

/*
* @Breif Gets the Generic Hint for "generic" hint types
* @Pramas 
* @NativeName: ScriptGetHintGenericType
* @NativeFunctionAddress 0000000140F38350
*/

string function GetHintGenericType()

/*
* @Breif Sets whether or not any AI can use this hint
* @Pramas bool
* @NativeName: ScriptSetHintDisabled
* @NativeFunctionAddress 0000000140F382F0
*/

void function SetHintDisabled(bool)

/*
* @Breif Will also activate the vehicle
* @Pramas entity
* @NativeName: Script_VehicleSetDriver
* @NativeFunctionAddress 0000000140E65D00
*/

void function VehicleSetDriver(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: VehicleRemoveDriver
* @NativeFunctionAddress 0000000140E65CB0
*/

void function VehicleRemoveDriver()

/*
* @Breif 
* @Pramas entity
* @NativeName: VehicleIsDriver
* @NativeFunctionAddress 0000000140E65BF0
*/

bool function VehicleIsDriver(entity)

/*
* @Breif Will also activate the vehicle
* @Pramas entity
* @NativeName: Script_VehicleAddPassenger
* @NativeFunctionAddress 0000000140E65B70
*/

void function VehicleAddPassenger(entity)

/*
* @Breif Returns true if removed passenger successfully
* @Pramas entity
* @NativeName: Script_VehicleRemovePassenger
* @NativeFunctionAddress 0000000140E65AF0
*/

bool function VehicleRemovePassenger(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_VehicleGetDriver
* @NativeFunctionAddress 0000000140E65A60
*/

entity function VehicleGetDriver()

/*
* @Breif Checks driver and passengers
* @Pramas entity
* @NativeName: Script_IsPlayerInVehicle
* @NativeFunctionAddress 0000000140E659E0
*/

bool function IsPlayerInVehicle(entity)

/*
* @Breif Does not include driver
* @Pramas 
* @NativeName: VehicleGetPlayerCount
* @NativeFunctionAddress 0000000140E65930
*/

int function VehicleGetPlayerCount()

/*
* @Breif Determines whether driver can launch the drop pod in aiming mode
* @Pramas 
* @NativeName: VehicleGetLaunchable
* @NativeFunctionAddress 0000000140E658D0
*/

bool function VehicleGetLaunchable()

/*
* @Breif Determines whether driver can launch the drop pod in aiming mode
* @Pramas bool
* @NativeName: VehicleSetLaunchable
* @NativeFunctionAddress 0000000140E65830
*/

void function VehicleSetLaunchable(bool)

/*
* @Breif Sets the vehicle to be script controlled and have no predicted controls
* @Pramas bool
* @NativeName: VehicleSetScriptControlled
* @NativeFunctionAddress 0000000140E65790
*/

void function VehicleSetScriptControlled(bool)

/*
* @Breif Sets the type of vehicle this is for movement
* @Pramas int
* @NativeName: VehicleSetType
* @NativeFunctionAddress 0000000140E656F0
*/

void function VehicleSetType(int)

/*
* @Breif Plays a sound on a given entity for all players in the vehicle. Unreliable (may be dropped if network traffit is too high).
* @Pramas entity, string
* @NativeName: Script_VehiclePlaySoundOnEntityForOccupants
* @NativeFunctionAddress 0000000140E65670
*/

void function VehiclePlaySoundOnEntityForOccupants(entity, string)

/*
* @Breif Plays a sound on a given entity for all players in the vehicle. Reliable (will keep sending sound command until client receives it).
* @Pramas entity, string
* @NativeName: Script_VehiclePlayReliableSoundOnEntityForOccupants
* @NativeFunctionAddress 0000000140E655F0
*/

void function VehiclePlayReliableSoundOnEntityForOccupants(entity, string)

/*
* @Breif Plays a sound on a given entity for all players not in the vehicle
* @Pramas entity, string
* @NativeName: VehiclePlaySoundOnEntityForNonOccupants
* @NativeFunctionAddress 0000000140E65570
*/

void function VehiclePlaySoundOnEntityForNonOccupants(entity, string)

/*
* @Breif Plays particle effect on the vehicle for all players in the vehicle. Unreliable (may be dropped if network traffit is too high).
* @Pramas int, int, int
* @NativeName: Script_VehiclePlayParticleEffectForOccupants
* @NativeFunctionAddress 0000000140E654D0
*/

void function VehiclePlayParticleEffectForOccupants(int, int, int)

/*
* @Breif Plays particle effect on the vehicle for all players in the vehicle. Reliable (will keep sending command until client receives it).
* @Pramas int, int, int
* @NativeName: Script_VehiclePlayReliableParticleEffectForOccupants
* @NativeFunctionAddress 0000000140E65430
*/

void function VehiclePlayReliableParticleEffectForOccupants(int, int, int)

/*
* @Breif Plays particle effect on the vehicle for all players not in the vehicle
* @Pramas int, int, int
* @NativeName: VehiclePlayParticleEffectForNonOccupants
* @NativeFunctionAddress 0000000140E65390
*/

void function VehiclePlayParticleEffectForNonOccupants(int, int, int)

/*
* @Breif Removes all players (driver AND passengers)
* @Pramas 
* @NativeName: VehicleRemoveAllPlayers
* @NativeFunctionAddress 0000000140E65340
*/

void function VehicleRemoveAllPlayers()

/*
* @Breif Sets the view offset vector from camera to vehicle
* @Pramas vector
* @NativeName: Script_VehicleSetViewOffset
* @NativeFunctionAddress 0000000140E65240
*/

void function VehicleSetViewOffset(vector)

/*
* @Breif Stops the vehicle from updating (stops movement, aiming, etc)
* @Pramas 
* @NativeName: Script_VehicleDeactivate
* @NativeFunctionAddress 0000000140E651B0
*/

void function VehicleDeactivate()

/*
* @Breif Forces the vehicle to be launched. MUST have driver to call this
* @Pramas 
* @NativeName: Script_VehicleForceLaunch
* @NativeFunctionAddress 0000000140E65160
*/

void function VehicleForceLaunch()

/*
* @Breif Returns true if the vehicle has been launched
* @Pramas 
* @NativeName: Script_VehicleHasLaunched
* @NativeFunctionAddress 0000000140E650D0
*/

bool function VehicleHasLaunched()

/*
* @Breif Sets the local eye angles of a vehicle
* @Pramas vector
* @NativeName: Script_Vehicle_SetEyeAngles
* @NativeFunctionAddress 0000000140E65070
*/

void function Vehicle_SetEyeAngles(vector)

/*
* @Breif Gets the internal speed of the vehicle
* @Pramas 
* @NativeName: Script_GetVehicleVelocity
* @NativeFunctionAddress 0000000140E64FA0
*/

vector function GetVehicleVelocity()

/*
* @Breif Get array of all players in this vehicle
* @Pramas 
* @NativeName: Script_VehicleGetPlayerArray
* @NativeFunctionAddress 0000000140E5DBE0
*/

var function VehicleGetPlayerArray()

/*
* @Breif Tests if the trigger contains a given point.
* @Pramas vector
* @NativeName: ScriptContainsPoint
* @NativeFunctionAddress 0000000140E66C20
*/

bool function ContainsPoint(vector)

/*
* @Breif Tests if the trigger contains a given bounding hull.
* @Pramas vector, vector, vector
* @NativeName: ScriptContainsHull
* @NativeFunctionAddress 0000000140E66BB0
*/

bool function ContainsHull(vector, vector, vector)

/*
* @Breif Tests if the trigger contains a given entity.
* @Pramas entity
* @NativeName: ScriptIsTouching
* @NativeFunctionAddress 0000000140E66B00
*/

bool function IsTouching(entity)

/*
* @Breif Tests if the trigger is being touched by any entity that can trigger it.
* @Pramas 
* @NativeName: ScriptIsTouched
* @NativeFunctionAddress 0000000140E66A90
*/

bool function IsTouched()

/*
* @Breif Sets whether or not phase shifted players can touch this trigger.
* @Pramas bool
* @NativeName: ScriptSetPhaseShiftCanTouch
* @NativeFunctionAddress 0000000140E669F0
*/

void function SetPhaseShiftCanTouch(bool)

/*
* @Breif Sets whether or not non phase shifted players can touch this trigger.
* @Pramas bool
* @NativeName: ScriptSetNonPhaseShiftCanTouch
* @NativeFunctionAddress 0000000140E66950
*/

void function SetNonPhaseShiftCanTouch(bool)

/*
* @Breif Enable the trigger
* @Pramas 
* @NativeName: Enable
* @NativeFunctionAddress 0000000140E66900
*/

void function Enable()

/*
* @Breif Disable the trigger
* @Pramas 
* @NativeName: Disable
* @NativeFunctionAddress 0000000140E668B0
*/

void function Disable()

/*
* @Breif Returns true if the trigger is enabled
* @Pramas 
* @NativeName: IsEnabled
* @NativeFunctionAddress 0000000140E66840
*/

bool function IsEnabled()

/*
* @Breif Force trigger to search for entities touching it. Needed when spawning in a new trigger.
* @Pramas 
* @NativeName: SearchForNewTouchingEntity
* @NativeFunctionAddress 0000000140E667F0
*/

void function SearchForNewTouchingEntity()

/*
* @Breif Get array of touching entities
* @Pramas 
* @NativeName: ScriptGetTouchingEntities
* @NativeFunctionAddress 0000000140E5DAF0
*/

var function GetTouchingEntities()

/*
* @Breif Sets a function to be called when an entity enters the trigger.
* @Pramas void functionref( entity trig, entity ent )
* @NativeName: Script_SetEnterCallback
* @NativeFunctionAddress 0000000140E5DB40
*/

var function SetEnterCallback()

/*
* @Breif Sets a function to be called when an entity leaves the trigger.
* @Pramas void functionref( entity trig, entity ent )
* @NativeName: Script_SetLeaveCallback
* @NativeFunctionAddress 0000000140E5DB90
*/

var function SetLeaveCallback()

/*
* @Breif Get the cylinder's radius
* @Pramas 
* @NativeName: GetRadius
* @NativeFunctionAddress 0000000140E66740
*/

float function GetRadius()

/*
* @Breif Set the cylinder's radius
* @Pramas float
* @NativeName: SetRadius
* @NativeFunctionAddress 0000000140E666D0
*/

void function SetRadius(float)

/*
* @Breif Get the cylinder's height above its origin
* @Pramas 
* @NativeName: GetAboveHeight
* @NativeFunctionAddress 0000000140E66620
*/

float function GetAboveHeight()

/*
* @Breif Set the cylinder's height extending upward from its origin.
* @Pramas float
* @NativeName: SetAboveHeight
* @NativeFunctionAddress 0000000140E665B0
*/

void function SetAboveHeight(float)

/*
* @Breif Get the cylinder's height below its origin
* @Pramas 
* @NativeName: GetBelowHeight
* @NativeFunctionAddress 0000000140E66500
*/

float function GetBelowHeight()

/*
* @Breif Set the cylinder's height extending downward from its origin.
* @Pramas float
* @NativeName: SetBelowHeight
* @NativeFunctionAddress 0000000140E66490
*/

void function SetBelowHeight(float)

/*
* @Breif Checks for a line of sight to touching entities and signals "TouchVisible" if one succeeds
* @Pramas 
* @NativeName: CheckForLOS
* @NativeFunctionAddress 0000000140E66420
*/

void function CheckForLOS()

/*
* @Breif Set gravity parameters. (pull inner radius, pull outer radius, reduce speed inner radius, reduce speed outer radius, pull accel, pull speed)
* @Pramas float, float, float, float, float, float
* @NativeName: SetParams
* @NativeFunctionAddress 0000000140E65D80
*/

void function SetParams(float, float, float, float, float, float)

/*
* @Breif Set the cylinder's launch values
* @Pramas float, float
* @NativeName: SetLaunchScaleValues
* @NativeFunctionAddress 0000000140E66390
*/

void function SetLaunchScaleValues(float, float)

/*
* @Breif Set the cylinder's punch values for launching players
* @Pramas float, float, float
* @NativeName: SetViewPunchValues
* @NativeFunctionAddress 0000000140E662F0
*/

void function SetViewPunchValues(float, float, float)

/*
* @Breif Sets the launch dir of a jump pad
* @Pramas vector
* @NativeName: SetLaunchDir
* @NativeFunctionAddress 0000000140E66210
*/

void function SetLaunchDir(vector)

/*
* @Breif Sets the type of trigger this is
* @Pramas int
* @NativeName: SetTriggerType
* @NativeFunctionAddress 0000000140E66170
*/

void function SetTriggerType(int)

/*
* @Breif Sets the start and end of a tesla trap
* @Pramas entity, entity, vector, float
* @NativeName: SetTeslaLink
* @NativeFunctionAddress 0000000140E660B0
*/

void function SetTeslaLink(entity, entity, vector, float)

/*
* @Breif Sets the custom vertical override used for a variety of things
* @Pramas float
* @NativeName: SetVertOverride
* @NativeFunctionAddress 0000000140E66000
*/

void function SetVertOverride(float)

/*
* @Breif Sets how long the tesla trap is obstructed for
* @Pramas float
* @NativeName: SetObstructedEndTime
* @NativeFunctionAddress 0000000140E65F90
*/

void function SetObstructedEndTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetObstructedEndTime
* @NativeFunctionAddress 0000000140E65EE0
*/

float function GetObstructedEndTime()

/*
* @Breif Sets trigger to use point collision for detection
* @Pramas 
* @NativeName: UsePointCollision
* @NativeFunctionAddress 0000000140E65E80
*/

void function UsePointCollision()

/*
* @Breif Determines whether the spawnpoint is visible to any enemy players of the given team
* @Pramas int
* @NativeName: ScriptIsVisibleToEnemies
* @NativeFunctionAddress 0000000140E67300
*/

bool function IsVisibleToEnemies(int)

/*
* @Breif Returns the nearby enemies scored by distance using spawnpoint_near_dist and spawnpoint_far_dist
* @Pramas int, string
* @NativeName: ScriptNearbyEnemyScore
* @NativeFunctionAddress 0000000140E67230
*/

float function NearbyEnemyScore(int, string)

/*
* @Breif Returns the distance of the nearest enemy
* @Pramas int, string
* @NativeName: ScriptNearestEnemyDistance
* @NativeFunctionAddress 0000000140E67160
*/

float function NearbyEnemyDistance(int, string)

/*
* @Breif Returns the nearby allies scored by distance using spawnpoint_near_dist and spawnpoint_far_dist
* @Pramas int, string
* @NativeName: ScriptNearbyAllyScore
* @NativeFunctionAddress 0000000140E67090
*/

float function NearbyAllyScore(int, string)

/*
* @Breif Returns the distance of the nearest ally
* @Pramas int, string
* @NativeName: ScriptNearestAllyDistance
* @NativeFunctionAddress 0000000140E66FC0
*/

float function NearbyAllyDistance(int, string)

/*
* @Breif Calculate the final rating and with additional value from script
* @Pramas int, int, float, float
* @NativeName: CalculateRating
* @NativeFunctionAddress 0000000140E66EB0
*/

float function CalculateRating(int, int, float, float)

/*
* @Breif Calculate the final rating, but don't use or modify saved state from earlier calls this frame
* @Pramas int, int, float, float
* @NativeName: CalculateRatingDontCache
* @NativeFunctionAddress 0000000140E66DA0
*/

float function CalculateRatingDontCache(int, int, float, float)

/*
* @Breif Calculate frontline rating
* @Pramas 
* @NativeName: CalculateFrontlineRating
* @NativeFunctionAddress 0000000140E66CF0
*/

float function CalculateFrontlineRating()

/*
* @Breif Determines whether any entities are inside of this spawnpoint
* @Pramas 
* @NativeName: ScriptIsOccupied
* @NativeFunctionAddress 0000000140E66C90
*/

bool function IsOccupied()

/*
* @Breif Returns table of spawn point rating data
* @Pramas 
* @NativeName: ScriptGetRatingData
* @NativeFunctionAddress 0000000140E5D410
*/

table function GetRatingData(var)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetHardpointState
* @NativeFunctionAddress 0000000140E67EA0
*/

void function SetHardpointState(int)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetHardpointEstimatedCaptureTime
* @NativeFunctionAddress 0000000140E67DF0
*/

void function SetHardpointEstimatedCaptureTime(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetHardpointProgressRefPoint
* @NativeFunctionAddress 0000000140E67D40
*/

void function SetHardpointProgressRefPoint(float)

/*
* @Breif 
* @Pramas int, int
* @NativeName: Script_SetHardpointAICount
* @NativeFunctionAddress 0000000140E67CC0
*/

void function SetHardpointAICount(int, int)

/*
* @Breif 
* @Pramas int, int
* @NativeName: Script_SetHardpointPlayerCount
* @NativeFunctionAddress 0000000140E67C40
*/

void function SetHardpointPlayerCount(int, int)

/*
* @Breif 
* @Pramas int, int
* @NativeName: Script_SetHardpointPlayerTitanCount
* @NativeFunctionAddress 0000000140E67BC0
*/

void function SetHardpointPlayerTitanCount(int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointState
* @NativeFunctionAddress 0000000140C8B040
*/

int function GetHardpointState()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointEstimatedCaptureTime
* @NativeFunctionAddress 0000000140E67B10
*/

float function GetHardpointEstimatedCaptureTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointProgressRefPoint
* @NativeFunctionAddress 0000000140E67A60
*/

float function GetHardpointProgressRefPoint()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointAICount
* @NativeFunctionAddress 0000000140E67970
*/

int function GetHardpointAICount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointPlayerCount
* @NativeFunctionAddress 0000000140E67880
*/

int function GetHardpointPlayerCount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointPlayerTitanCount
* @NativeFunctionAddress 0000000140E67790
*/

int function GetHardpointPlayerTitanCount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetHardpointID
* @NativeFunctionAddress 0000000140D24050
*/

void function SetHardpointID(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetHardpointID
* @NativeFunctionAddress 0000000140D23FA0
*/

int function GetHardpointID()

/*
* @Breif 
* @Pramas entity
* @NativeName: SetTerminal
* @NativeFunctionAddress 0000000140E67690
*/

void function SetTerminal(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTerminal
* @NativeFunctionAddress 0000000140E67600
*/

entity function GetTerminal()

/*
* @Breif Spawn the entity associated with this spawner
* @Pramas 
* @NativeName: SpawnEntity
* @NativeFunctionAddress 0000000140E68220
*/

entity function SpawnEntity()

/*
* @Breif Return the number of times SpawnEntity() has been called
* @Pramas 
* @NativeName: GetSpawnCount
* @NativeFunctionAddress 0000000140C8B040
*/

int function GetSpawnCount()

/*
* @Breif Set a script callback that will be called each time this spawner spawns something
* @Pramas void functionref( entity spawned ) spawnCallback
* @NativeName: SetSpawnCallback
* @NativeFunctionAddress 0000000140E681A0
*/

void function SetSpawnCallback(void functionref( entity spawned ) spawnCallback)

/*
* @Breif Return the class name of the entity that will be spawned by this spawner
* @Pramas 
* @NativeName: GetSpawnEntityClassName
* @NativeFunctionAddress 0000000140E68100
*/

string function GetSpawnEntityClassName()

/*
* @Breif Return a table of the key-values that will be applied to the spawned entity
* @Pramas 
* @NativeName: GetSpawnEntityKeyValues
* @NativeFunctionAddress 0000000140E68030
*/

table function GetSpawnEntityKeyValues()

/*
* @Breif Return the model key as an asset.
* @Pramas 
* @NativeName: GetSpawnerModelName
* @NativeFunctionAddress 0000000140E67FA0
*/

asset function GetSpawnerModelName()

/*
* @Breif Makes the rope wiggle, straightening as it reaches a max length or max time, to simulate fast motion. maxlen, magnitude, speed, duration, fadeDuration. Wiggle fades as length reaches maxlen and within fadeDuration seconds of duration. Magnitude scales with rope length.
* @Pramas float, float, float, float, float
* @NativeName: RopeWiggle
* @NativeFunctionAddress 0000000140E68E70
*/

void function RopeWiggle(float, float, float, float, float)

/*
* @Breif Allows the zipline to be used
* @Pramas 
* @NativeName: RopeZipline_Enable
* @NativeFunctionAddress 0000000140E68DE0
*/

void function RopeZipline_Enable()

/*
* @Breif Disallow using the zipline
* @Pramas 
* @NativeName: RopeZipline_Disable
* @NativeFunctionAddress 0000000140E68D50
*/

void function RopeZipline_Disable()

/*
* @Breif Enables/Disable automatic resting state for ropes. Can be used to disable resting for entities that will constantly move.
* @Pramas bool
* @NativeName: Script_SetCanEnterRestingState
* @NativeFunctionAddress 0000000140E68CB0
*/

void function Rope_SetCanEnterRestingState(bool)

/*
* @Breif Sets the falloff length for the directional constraint for endpoint attachments.
* @Pramas int
* @NativeName: Script_SetDirectionConstraintFalloff
* @NativeFunctionAddress 0000000140E68C10
*/

void function Rope_SetDirectionConstraintFalloff(int)

/*
* @Breif Sets the directional constraint strength for endpoint attachments. [0, 1] Higher values will keep the rope endpoints aligned with the start/end attachments.
* @Pramas float
* @NativeName: Script_SetDirectionConstraintStrength
* @NativeFunctionAddress 0000000140E68BA0
*/

void function Rope_SetDirectionConstraintStrength(float)

/*
* @Breif Sets the dampening factor applied to rope node velocities during physics simulation. [0,1] Lower values will make the rope seem more floaty/weightless.
* @Pramas float
* @NativeName: Script_SetPhysicsDampening
* @NativeFunctionAddress 0000000140E68B30
*/

void function Rope_SetPhysicsDampening(float)

/*
* @Breif Sets the tension of the rope. (default is 3)
* @Pramas float
* @NativeName: Script_SetTension
* @NativeFunctionAddress 0000000140E68AC0
*/

void function Rope_SetTension(float)

/*
* @Breif Sets the amount of slack the rope is given.
* @Pramas int
* @NativeName: Script_SetSlack
* @NativeFunctionAddress 0000000140E68A20
*/

void function Rope_SetSlack(int)

/*
* @Breif Sets the subdivision slice count, around its' circumference, for the rope mesh. This will increase the roundness of the rope when not using a billboarded material. (default is 4) 
* @Pramas int
* @NativeName: Script_SetSubdivisionSliceCount
* @NativeFunctionAddress 0000000140E689B0
*/

void function Rope_SetSubdivisionSliceCount(int)

/*
* @Breif Sets the subdivision stack count, along the length of the rope. This will increase the smoothness along the rope segments. (default is6 ) 
* @Pramas int
* @NativeName: Script_SetSubdivisionStackCount
* @NativeFunctionAddress 0000000140E68940
*/

void function Rope_SetSubdivisionStackCount(int)

/*
* @Breif Activates/Deactivates directional constraints for the start point based on the attachment. This will make the rope start point align with the attachment.
* @Pramas bool
* @NativeName: ActivateStartDirectionConstraints
* @NativeFunctionAddress 0000000140E688A0
*/

void function Rope_ActivateStartDirectionConstraints(bool)

/*
* @Breif Activates/Deactivates directional constraints for the end point based on the attachment. This will make the rope end point align with the attachment.
* @Pramas bool
* @NativeName: ActivateEndDirectionConstraints
* @NativeFunctionAddress 0000000140E68800
*/

void function Rope_ActivateEndDirectionConstraints(bool)

/*
* @Breif Attaches the rope to the set attachment. 0: Start point 1: End point
* @Pramas int
* @NativeName: AttachPoint
* @NativeFunctionAddress 0000000140E68750
*/

void function Rope_AttachPoint(int)

/*
* @Breif Detaches the rope to the set attachment. 0: Start point 1: End point
* @Pramas int
* @NativeName: DetachPoint
* @NativeFunctionAddress 0000000140E686A0
*/

void function Rope_DetachPoint(int)

/*
* @Breif Enables/Disables collision on the rope. Only collides with the world and static props.
* @Pramas bool
* @NativeName: SetCollisionEnabled
* @NativeFunctionAddress 0000000140E68600
*/

void function Rope_SetCollisionEnabled(bool)

/*
* @Breif Enables/Disables rope gravity.
* @Pramas bool
* @NativeName: SetGravityEnabled
* @NativeFunctionAddress 0000000140E68560
*/

void function Rope_SetGravityEnabled(bool)

/*
* @Breif Sets the length of the rope.
* @Pramas float
* @NativeName: SetLength
* @NativeFunctionAddress 0000000140E684B0
*/

void function Rope_SetLength(float)

/*
* @Breif Gets the length of the rope.
* @Pramas 
* @NativeName: GetLength
* @NativeFunctionAddress 0000000140E68400
*/

int function Rope_GetLength()

/*
* @Breif 
* @Pramas string
* @NativeName: GetBoneFollowerForBone
* @NativeFunctionAddress 0000000140E69D60
*/

entity function GetBoneFollowerForBone(string)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetBoneFollowersSolid
* @NativeFunctionAddress 0000000140E69D00
*/

void function SetBoneFollowersSolid(bool)

/*
* @Breif Remove ourselves if we move more than one unit from our current position
* @Pramas 
* @NativeName: RemoveOnMovement
* @NativeFunctionAddress 0000000140E69CB0
*/

void function RemoveOnMovement()

/*
* @Breif Lets the prop be highlighted by threat scopes
* @Pramas 
* @NativeName: EnablePropScopeHighlight
* @NativeFunctionAddress 0000000140E69C60
*/

void function EnablePropScopeHighlight()

/*
* @Breif Disables the threat scope highlight on a prop
* @Pramas 
* @NativeName: DisablePropScopeHighlight
* @NativeFunctionAddress 0000000140E69C10
*/

void function DisablePropScopeHighlight()

/*
* @Breif Gets an array of all of this prop's bone followers
* @Pramas 
* @NativeName: GetBoneFollowers
* @NativeFunctionAddress 0000000140E5CE60
*/

var function GetBoneFollowers()

/*
* @Breif 
* @Pramas 
* @NativeName: GetImpactEffectColorID
* @NativeFunctionAddress 0000000140E68F50
*/

int function GetImpactEffectColorID()

/*
* @Breif 
* @Pramas string
* @NativeName: SetCustomOwnerName
* @NativeFunctionAddress 0000000140E69090
*/

void function SetCustomOwnerName(string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCustomOwnerName
* @NativeFunctionAddress 0000000140E69000
*/

string function GetCustomOwnerName()

/*
* @Breif 
* @Pramas int
* @NativeName: SetArmorType
* @NativeFunctionAddress 0000000140E69390
*/

void function SetArmorType(int)

/*
* @Breif Set custom footstep type to use
* @Pramas string
* @NativeName: SetFootstepType
* @NativeFunctionAddress 0000000140E69330
*/

void function SetFootstepType(string)

/*
* @Breif 
* @Pramas int flags
* @NativeName: Script_SetScriptPropFlags
* @NativeFunctionAddress 0000000140E692C0
*/

void function SetScriptPropFlags(int flags)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptPropFlags
* @NativeFunctionAddress 0000000140E69210
*/

int function GetScriptPropFlags()

/*
* @Breif Sets the type of custom smart ammo target this is
* @Pramas int
* @NativeName: Script_SetSmartAmmoLockType
* @NativeFunctionAddress 0000000140E691A0
*/

void function SetSmartAmmoLockType(int)

/*
* @Breif Gets the type of custom smart ammo target this is
* @Pramas 
* @NativeName: Script_GetSmartAmmoLockType
* @NativeFunctionAddress 0000000140E690F0
*/

int function GetSmartAmmoLockType()

/*
* @Breif Sets the custom int script can put on survival props
* @Pramas int
* @NativeName: Script_SetSurvivalInt
* @NativeFunctionAddress 0000000140E69A50
*/

void function SetSurvivalInt(int)

/*
* @Breif Gets the custom int script can put on survival props
* @Pramas 
* @NativeName: Script_GetSurvivalInt
* @NativeFunctionAddress 0000000140E699A0
*/

int function GetSurvivalInt()

/*
* @Breif Sets whether this survival prop can be culled for network transmit. See sv_distanceCull
* @Pramas bool
* @NativeName: Script_SetNetworkDistanceCull
* @NativeFunctionAddress 0000000140E69910
*/

void function SetNetworkDistanceCull(bool)

/*
* @Breif Gets the weapon name for a survival pickup
* @Pramas 
* @NativeName: GetWeaponName
* @NativeFunctionAddress 0000000140E69850
*/

string function GetWeaponName()

/*
* @Breif Sets the weapon name for a survival pickup
* @Pramas string
* @NativeName: SetWeaponName
* @NativeFunctionAddress 0000000140E697F0
*/

void function SetWeaponName(string)

/*
* @Breif Gets the clip count for a survival weapon pickup
* @Pramas 
* @NativeName: GetClipCount
* @NativeFunctionAddress 0000000140E69740
*/

int function GetClipCount()

/*
* @Breif Sets the clip count for a survival weapon pickup
* @Pramas int
* @NativeName: SetClipCount
* @NativeFunctionAddress 0000000140E696A0
*/

void function SetClipCount(int)

/*
* @Breif Sets mods bit field
* @Pramas int
* @NativeName: Script_SetModBitField
* @NativeFunctionAddress 0000000140E69600
*/

void function SetWeaponModBitField(int)

/*
* @Breif Gets mods bit field
* @Pramas 
* @NativeName: Script_GetModBitField
* @NativeFunctionAddress 0000000140E69550
*/

int function GetWeaponModBitField()

/*
* @Breif Gets the integer that represents this survival pickup's custom property
* @Pramas 
* @NativeName: GetSurvivalProperty
* @NativeFunctionAddress 0000000140E694A0
*/

int function GetSurvivalProperty()

/*
* @Breif Sets the integer that represents this survival pickup's custom property
* @Pramas int
* @NativeName: SetSurvivalProperty
* @NativeFunctionAddress 0000000140E69400
*/

void function SetSurvivalProperty(int)

/*
* @Breif Get an array of mods on this weapon pickup
* @Pramas 
* @NativeName: Script_GetMods
* @NativeFunctionAddress 0000000140E5CEB0
*/

var function GetWeaponMods()

/*
* @Breif Set an array of mods on this weapon pickup
* @Pramas array< string > mods
* @NativeName: Script_SetMods
* @NativeFunctionAddress 0000000140E5CF00
*/

var function SetWeaponMods()

/*
* @Breif Does this prop physics ignores players or not
* @Pramas 
* @NativeName: IgnoresPlayers
* @NativeFunctionAddress 0000000140E69BB0
*/

bool function IgnoresPlayers()

/*
* @Breif Sets whether this prop physics ignores players or not
* @Pramas bool
* @NativeName: SetIgnorePlayers
* @NativeFunctionAddress 0000000140E69B50
*/

void function SetIgnorePlayers(bool)

/*
* @Breif Sets the name of the sound to play when this physics prop rolls
* @Pramas string
* @NativeName: SetRollSoundName
* @NativeFunctionAddress 0000000140E69AF0
*/

void function SetRollSoundName(string)

/*
* @Breif Returns the view model entity.
* @Pramas 
* @NativeName: GetViewModelEntity_Script
* @NativeFunctionAddress 0000000140E7C880
*/

entity function GetViewModelEntity()

/*
* @Breif Returns true if the player is in noclip mode.
* @Pramas 
* @NativeName: ScriptIsPlayerNoclipping
* @NativeFunctionAddress 0000000140E7C810
*/

bool function IsNoclipping()

/*
* @Breif Returns true if the player will not be stuck if teleported to given position.
* @Pramas vector
* @NativeName: Script_IsFreeSpace
* @NativeFunctionAddress 0000000140E7C7A0
*/

bool function IsFreeSpace(vector)

/*
* @Breif Get the player's first person proxy
* @Pramas 
* @NativeName: ScriptGetFirstPersonProxy
* @NativeFunctionAddress 0000000140E7C710
*/

entity function GetFirstPersonProxy()

/*
* @Breif Get the player's predicted first person proxy
* @Pramas 
* @NativeName: ScriptGetPredictedFirstPersonProxy
* @NativeFunctionAddress 0000000140E7C680
*/

entity function GetPredictedFirstPersonProxy()

/*
* @Breif Sets an entity to be viewed by this player in third person.
* @Pramas entity
* @NativeName: ScriptSetThirdPersonEntity
* @NativeFunctionAddress 0000000140E7C600
*/

void function SetTrackEntity(entity)

/*
* @Breif Gets the current entity to be viewed by this player in third person.
* @Pramas 
* @NativeName: GetThirdPersonEntity
* @NativeFunctionAddress 0000000140E7C570
*/

entity function GetTrackEntity()

/*
* @Breif Sets the blend times used for blending to a tracked ent (or third-person ent).
* @Pramas float, float, float
* @NativeName: SetTrackEntityBlendTimes
* @NativeFunctionAddress 0000000140E7C4D0
*/

void function SetTrackEntityBlendTimes(float, float, float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetTrackEntityOffsetDistance
* @NativeFunctionAddress 0000000140E7C420
*/

void function SetTrackEntityOffsetDistance(float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetTrackEntityOffsetHeight
* @NativeFunctionAddress 0000000140E7C370
*/

void function SetTrackEntityOffsetHeight(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTrackEntityOffsetDistance
* @NativeFunctionAddress 0000000140E7C2C0
*/

float function GetTrackEntityOffsetDistance()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTrackEntityOffsetHeight
* @NativeFunctionAddress 0000000140E7C210
*/

float function GetTrackEntityOffsetHeight()

/*
* @Breif Sets what the pitch axis does. "orbit": right stick orbits around the entity. "freelook": right stick rotates the camera in place
* @Pramas string
* @NativeName: SetTrackEntityPitchLookMode
* @NativeFunctionAddress 0000000140E7C1B0
*/

void function SetTrackEntityPitchLookMode(string)

/*
* @Breif Gets what the pitch axis does. "orbit": right stick orbits around the entity. "freelook": right stick rotates the camera in place
* @Pramas 
* @NativeName: GetTrackEntityPitchLookMode
* @NativeFunctionAddress 0000000140E7C110
*/

string function GetTrackEntityPitchLookMode()

/*
* @Breif If set to true, when we have a third person track entity, camera angles are clamped based off of the third person entity's angles
* @Pramas bool
* @NativeName: SetTrackEntityShouldViewAnglesFollowTrackedEntity
* @NativeFunctionAddress 0000000140E7C080
*/

void function SetTrackEntityShouldViewAnglesFollowTrackedEntity(bool)

/*
* @Breif If set to true, when we have a third person track entity, camera angles are clamped based off of the third person entity's angles
* @Pramas 
* @NativeName: GetTrackEntityShouldViewAnglesFollowTrackedEntity
* @NativeFunctionAddress 0000000140E7C020
*/

bool function GetTrackEntityShouldViewAnglesFollowTrackedEntity()

/*
* @Breif Sets what the yaw axis does. "orbit": right stick orbits around the entity. "freelook": right stick rotates the camera in place
* @Pramas string
* @NativeName: SetTrackEntityYawLookMode
* @NativeFunctionAddress 0000000140E7BFC0
*/

void function SetTrackEntityYawLookMode(string)

/*
* @Breif Gets what the yaw axis does. "orbit": right stick orbits around the entity. "freelook": right stick rotates the camera in place
* @Pramas 
* @NativeName: GetTrackEntityYawLookMode
* @NativeFunctionAddress 0000000140E7BF20
*/

string function GetTrackEntityYawLookMode()

/*
* @Breif "scriptOffset", "scriptOffsetClientOnly" or "convar". Selects whether it uses the old method: distance set by convars c_maxdistance and cam_idealdist, or uses the new offset set by SetTrackEntityOffset.
* @Pramas string
* @NativeName: SetTrackEntityDistanceMode
* @NativeFunctionAddress 0000000140E7BEC0
*/

void function SetTrackEntityDistanceMode(string)

/*
* @Breif "scriptOffset", "scriptOffsetClientOnly" or "convar". Returns whether it uses the old method: distance set by convars c_maxdistance and cam_idealdist, or uses the new offset set by SetTrackEntityOffset.
* @Pramas 
* @NativeName: GetTrackEntityDistanceMode
* @NativeFunctionAddress 0000000140E7BE10
*/

string function GetTrackEntityDistanceMode()

/*
* @Breif Sets camera min yaw when tracking entity.
* @Pramas float
* @NativeName: SetTrackEntityMinYaw
* @NativeFunctionAddress 0000000140E7BD60
*/

void function SetTrackEntityMinYaw(float)

/*
* @Breif Sets camera max yaw when tracking entity.
* @Pramas float
* @NativeName: SetTrackEntityMaxYaw
* @NativeFunctionAddress 0000000140E7BCB0
*/

void function SetTrackEntityMaxYaw(float)

/*
* @Breif Sets camera min pitch when tracking entity.
* @Pramas float
* @NativeName: SetTrackEntityMinPitch
* @NativeFunctionAddress 0000000140E7BC00
*/

void function SetTrackEntityMinPitch(float)

/*
* @Breif Sets camera max pitch when tracking entity.
* @Pramas float
* @NativeName: SetTrackEntityMaxPitch
* @NativeFunctionAddress 0000000140E7BB50
*/

void function SetTrackEntityMaxPitch(float)

/*
* @Breif Gets camera min yaw when tracking entity.
* @Pramas 
* @NativeName: GetTrackEntityMinYaw
* @NativeFunctionAddress 0000000140E7BAA0
*/

float function GetTrackEntityMinYaw()

/*
* @Breif Gets camera max yaw when tracking entity.
* @Pramas 
* @NativeName: GetTrackEntityMaxYaw
* @NativeFunctionAddress 0000000140E7B9F0
*/

float function GetTrackEntityMaxYaw()

/*
* @Breif Gets camera min pitch when tracking entity.
* @Pramas 
* @NativeName: GetTrackEntityMinPitch
* @NativeFunctionAddress 0000000140E7B940
*/

float function GetTrackEntityMinPitch()

/*
* @Breif Gets camera max pitch when tracking entity.
* @Pramas 
* @NativeName: GetTrackEntityMaxPitch
* @NativeFunctionAddress 0000000140E7B890
*/

float function GetTrackEntityMaxPitch()

/*
* @Breif Resets track entity settings to the defaults.
* @Pramas 
* @NativeName: ClearTrackEntitySettings
* @NativeFunctionAddress 0000000140E7B840
*/

void function ClearTrackEntitySettings()

/*
* @Breif Sets rate at which the camera rotates back to center when player isn't looking around.
* @Pramas float
* @NativeName: SetTrackEntitySpringViewToCenterRate
* @NativeFunctionAddress 0000000140E7B790
*/

void function SetTrackEntitySpringViewToCenterRate(float)

/*
* @Breif Gets rate at which the camera rotates back to center when player isn't looking around.
* @Pramas 
* @NativeName: GetTrackEntitySpringViewToCenterRate
* @NativeFunctionAddress 0000000140E7B6E0
*/

float function GetTrackEntitySpringViewToCenterRate()

/*
* @Breif The tracked ent speed above which the camera begins to look ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadLowerEntSpeed
* @NativeFunctionAddress 0000000140E7B630
*/

void function SetTrackEntityLookaheadLowerEntSpeed(float)

/*
* @Breif The tracked ent speed at which the camera has maximum look ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadUpperEntSpeed
* @NativeFunctionAddress 0000000140E7B580
*/

void function SetTrackEntityLookaheadUpperEntSpeed(float)

/*
* @Breif The maximum angle the camera can turn to look ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadMaxAngle
* @NativeFunctionAddress 0000000140E7B4D0
*/

void function SetTrackEntityLookaheadMaxAngle(float)

/*
* @Breif To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning to look ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadLerpAheadRate
* @NativeFunctionAddress 0000000140E7B420
*/

void function SetTrackEntityLookaheadLerpAheadRate(float)

/*
* @Breif To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning back toward center from looking ahead.
* @Pramas float
* @NativeName: SetTrackEntityLookaheadLerpToCenterRate
* @NativeFunctionAddress 0000000140E7B370
*/

void function SetTrackEntityLookaheadLerpToCenterRate(float)

/*
* @Breif The tracked ent speed above which the camera begins to look ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadLowerEntSpeed
* @NativeFunctionAddress 0000000140E7B2C0
*/

float function GetTrackEntityLookaheadLowerEntSpeed()

/*
* @Breif The tracked ent speed at which the camera has maximum look ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadUpperEntSpeed
* @NativeFunctionAddress 0000000140E7B210
*/

float function GetTrackEntityLookaheadUpperEntSpeed()

/*
* @Breif The maximum angle the camera can turn to look ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadMaxAngle
* @NativeFunctionAddress 0000000140E7B160
*/

float function GetTrackEntityLookaheadMaxAngle()

/*
* @Breif To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning to look ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadLerpAheadRate
* @NativeFunctionAddress 0000000140E7B0B0
*/

float function GetTrackEntityLookaheadLerpAheadRate()

/*
* @Breif To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning back toward center from looking ahead.
* @Pramas 
* @NativeName: GetTrackEntityLookaheadLerpToCenterRate
* @NativeFunctionAddress 0000000140E7B000
*/

float function GetTrackEntityLookaheadLerpToCenterRate()

/*
* @Breif If true, the camera tries to back up from the entity until it hits geo or reaches its desired position. If false, geo is ignored. Enabled by default.
* @Pramas bool
* @NativeName: SetTrackEntityPushedInByGeo
* @NativeFunctionAddress 0000000140E7AF70
*/

void function SetTrackEntityPushedInByGeo(bool)

/*
* @Breif Inform clients that they've damaged another player or entity.
* @Pramas entity, int, vector, int, float, int, int, entity, float
* @NativeName: ScriptNotifyDidDamage
* @NativeFunctionAddress 0000000140E7ADE0
*/

void function NotifyDidDamage(entity, int, vector, int, float, int, int, entity, float)

/*
* @Breif Start disembarking from cockpit.
* @Pramas 
* @NativeName: CockpitStartDisembark
* @NativeFunctionAddress 0000000140E7AD90
*/

void function CockpitStartDisembark()

/*
* @Breif Start ejecting from cockpit.
* @Pramas 
* @NativeName: CockpitStartEject
* @NativeFunctionAddress 0000000140E7AD40
*/

void function CockpitStartEject()

/*
* @Breif Start cockpit boot up.
* @Pramas 
* @NativeName: CockpitStartBoot
* @NativeFunctionAddress 0000000140E7ACF0
*/

void function CockpitStartBoot()

/*
* @Breif Time in seconds until hot drop impact.
* @Pramas float
* @NativeName: SetHotDropImpactDelay
* @NativeFunctionAddress 0000000140E7AC30
*/

void function SetHotDropImpactDelay(float)

/*
* @Breif Clear out the active hot drop impact.
* @Pramas 
* @NativeName: ClearHotDropImpactTime
* @NativeFunctionAddress 0000000140E7AB90
*/

void function ClearHotDropImpactTime()

/*
* @Breif Sets the player's value for the given game stat. Stat indices start with PGS, such as PGS_KILLS.
* @Pramas int, int
* @NativeName: Script_SetPlayerGameStat
* @NativeFunctionAddress 0000000140E7AB10
*/

void function SetPlayerGameStat(int, int)

/*
* @Breif Adds to the player's value for the given game stat. Stat indices start with PGS, such as PGS_KILLS.
* @Pramas int, int
* @NativeName: Script_AddToPlayerGameStat
* @NativeFunctionAddress 0000000140E7AA90
*/

void function AddToPlayerGameStat(int, int)

/*
* @Breif Gets the player's value for the given game stat. Stat indices start with PGS, such as PGS_KILLS. Call with -1 for list of valid values. (stat index)
* @Pramas int
* @NativeName: Script_GetPlayerGameStat
* @NativeFunctionAddress 0000000140E7A9B0
*/

int function GetPlayerGameStat(int)

/*
* @Breif Check if player has an entitlement
* @Pramas int
* @NativeName: HasEntitlement
* @NativeFunctionAddress 0000000140E7A930
*/

bool function HasEntitlement(int)

/*
* @Breif Sets whether this player should use "fast" viewmodel animations
* @Pramas bool
* @NativeName: Script_SetHighSpeedViewmodelAnims
* @NativeFunctionAddress 0000000140E7A8A0
*/

void function Script_SetHighSpeedViewmodelAnims(bool)

/*
* @Breif Sets whether this player is using "fast" viewmodel animations
* @Pramas bool
* @NativeName: Script_GetHighSpeedViewmodelAnims
* @NativeFunctionAddress 0000000140E7A840
*/

bool function Script_GetHighSpeedViewmodelAnims(bool)

/*
* @Breif Get current camera position
* @Pramas 
* @NativeName: CameraPosition
* @NativeFunctionAddress 0000000140E7A7E0
*/

vector function CameraPosition()

/*
* @Breif Get current camera angles
* @Pramas 
* @NativeName: CameraAngles
* @NativeFunctionAddress 0000000140E7A780
*/

vector function CameraAngles()

/*
* @Breif pass in ent you want to get player eye position for
* @Pramas entity
* @NativeName: UseableEyePosition
* @NativeFunctionAddress 0000000140E7A660
*/

vector function UseableEyePosition(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_HasThirdPersonAttackFocus
* @NativeFunctionAddress 0000000140E7A5D0
*/

bool function HasThirdPersonAttackFocus()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetThirdPersonAttackFocus
* @NativeFunctionAddress 0000000140E7A570
*/

vector function GetThirdPersonAttackFocus()

/*
* @Breif Snaps the player's eye angles to the given angles
* @Pramas vector
* @NativeName: Script_SnapEyeAngles
* @NativeFunctionAddress 0000000140E7A4F0
*/

void function SnapEyeAngles(vector)

/*
* @Breif Snaps the player's feet to the direction they are looking
* @Pramas 
* @NativeName: SnapFeetToEyes
* @NativeFunctionAddress 0000000140E7A460
*/

void function SnapFeetToEyes()

/*
* @Breif Snaps the player's eyes to the direction of their feet
* @Pramas 
* @NativeName: SnapEyesToFeet
* @NativeFunctionAddress 0000000140E7A3D0
*/

void function SnapEyesToFeet()

/*
* @Breif Smoothly sets the player's feet to the given angles (without affecting the player's view angle)
* @Pramas vector
* @NativeName: Script_SetFeetAngles
* @NativeFunctionAddress 0000000140E7A370
*/

void function SetFeetAngles(vector)

/*
* @Breif Snaps the player's feet to the given angles (without affecting the player's view angle)
* @Pramas vector
* @NativeName: Script_SnapFeetAngles
* @NativeFunctionAddress 0000000140E7A310
*/

void function SnapFeetAngles(vector)

/*
* @Breif Get the players pet titan
* @Pramas 
* @NativeName: Script_GetPetTitan
* @NativeFunctionAddress 0000000140E7A280
*/

entity function GetPetTitan()

/*
* @Breif Get the players pet titan
* @Pramas entity
* @NativeName: Script_SetPetTitan
* @NativeFunctionAddress 0000000140E7A200
*/

void function SetPetTitan(entity)

/*
* @Breif Get the players pet titan mode
* @Pramas 
* @NativeName: Script_GetPetTitanMode
* @NativeFunctionAddress 0000000140E7A150
*/

int function GetPetTitanMode()

/*
* @Breif Get the players pet titan mode
* @Pramas int
* @NativeName: Script_SetPetTitanMode
* @NativeFunctionAddress 0000000140E7A0B0
*/

void function SetPetTitanMode(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlayerModHealthPerSegment
* @NativeFunctionAddress 0000000140E79FF0
*/

float function GetPlayerModHealthPerSegment()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlayerModHealth
* @NativeFunctionAddress 0000000140E79F30
*/

float function GetPlayerModHealth()

/*
* @Breif 
* @Pramas entity
* @NativeName: IgnoreEntityForMovementUntilNotTouching
* @NativeFunctionAddress 0000000140E79E40
*/

void function IgnoreEntityForMovementUntilNotTouching(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetNextTitanRespawnAvailable
* @NativeFunctionAddress 0000000140E79D90
*/

float function GetNextTitanRespawnAvailable()

/*
* @Breif 
* @Pramas float
* @NativeName: SetNextTitanRespawnAvailable
* @NativeFunctionAddress 0000000140E79D20
*/

void function SetNextTitanRespawnAvailable(float)

/*
* @Breif Get the players hardpoint entity
* @Pramas 
* @NativeName: Script_GetHardpointEntity
* @NativeFunctionAddress 0000000140E79C90
*/

entity function GetHardpointEntity()

/*
* @Breif Get the players hardpoint entity
* @Pramas entity
* @NativeName: Script_SetHardpointEntity
* @NativeFunctionAddress 0000000140E79BA0
*/

void function SetHardpointEntity(entity)

/*
* @Breif Get the ammo count of the ammo pool
* @Pramas int
* @NativeName: Script_AmmoPool_GetCount
* @NativeFunctionAddress 0000000140E79AC0
*/

int function AmmoPool_GetCount(int)

/*
* @Breif Set the ammo count of the ammo pool
* @Pramas int, int
* @NativeName: Script_AmmoPool_SetCount
* @NativeFunctionAddress 0000000140E79A40
*/

void function AmmoPool_SetCount(int, int)

/*
* @Breif Get the capacity of the ammo pool
* @Pramas 
* @NativeName: Script_AmmoPool_GetCapacity
* @NativeFunctionAddress 0000000140E79990
*/

int function AmmoPool_GetCapacity()

/*
* @Breif Set the capacity of the ammo pool
* @Pramas int
* @NativeName: Script_AmmoPool_SetCapacity
* @NativeFunctionAddress 0000000140E79920
*/

void function AmmoPool_SetCapacity(int)

/*
* @Breif Disable the player's weapon
* @Pramas 
* @NativeName: Weapon_Disable_Script
* @NativeFunctionAddress 0000000140E797E0
*/

void function DisableWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_DisableWithSlowHolster_Script
* @NativeFunctionAddress 0000000140E796A0
*/

void function DisableWeaponWithSlowHolster()

/*
* @Breif Enable the player's weapon
* @Pramas 
* @NativeName: Weapon_Enable_Script
* @NativeFunctionAddress 0000000140E79550
*/

void function EnableWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_EnableWithSlowDeploy_Script
* @NativeFunctionAddress 0000000140E79400
*/

void function EnableWeaponWithSlowDeploy()

/*
* @Breif 
* @Pramas float
* @NativeName: Weapon_DelayEnableWithSlowDeploy_Script
* @NativeFunctionAddress 0000000140E79390
*/

void function DelayEnableWeaponWithSlowDeploy(float)

/*
* @Breif Holster player's weapon with slower holster animation
* @Pramas 
* @NativeName: Weapon_Holster_Script
* @NativeFunctionAddress 0000000140E79270
*/

void function HolsterWeapon()

/*
* @Breif Pull out the player's weapon using slow deploy animation
* @Pramas 
* @NativeName: Weapon_Deploy_Script
* @NativeFunctionAddress 0000000140E79140
*/

void function DeployWeapon()

/*
* @Breif Disable the player's weapon viewmodel
* @Pramas 
* @NativeName: Weapon_DisableViewModel
* @NativeFunctionAddress 0000000140E790A0
*/

void function DisableWeaponViewModel()

/*
* @Breif Enable the player's weapon viewmodel
* @Pramas 
* @NativeName: Weapon_EnableViewModel
* @NativeFunctionAddress 0000000140E78FF0
*/

void function EnableWeaponViewModel()

/*
* @Breif Remove all the player's items
* @Pramas 
* @NativeName: RemoveAllItems
* @NativeFunctionAddress 0000000140E78FA0
*/

void function RemoveAllItems()

/*
* @Breif Is player in god mode.
* @Pramas 
* @NativeName: ScriptIsGodMode
* @NativeFunctionAddress 0000000140E78F30
*/

bool function IsGodMode()

/*
* @Breif Is player in Buddha mode.
* @Pramas 
* @NativeName: ScriptIsBuddhaMode
* @NativeFunctionAddress 0000000140E78EC0
*/

bool function IsBuddhaMode()

/*
* @Breif Adds a mod item to the inventory. Use empty weapon name for universal mods.
* @Pramas string, string, int
* @NativeName: Script_ModInventory_Add
* @NativeFunctionAddress 0000000140E78E40
*/

void function ModInventory_Add(string, string, int)

/*
* @Breif Removes a mod item in a slot of the inventory.
* @Pramas int, int
* @NativeName: Script_ModInventory_Remove
* @NativeFunctionAddress 0000000140E78DC0
*/

void function ModInventory_Remove(int, int)

/*
* @Breif Get the number of filled slots in the mod inventory.
* @Pramas 
* @NativeName: Script_ModInventory_GetCount
* @NativeFunctionAddress 0000000140E78CF0
*/

int function ModInventory_GetCount()

/*
* @Breif Adds a consumable item to the inventory.
* @Pramas int, int
* @NativeName: Script_ConsumableInventory_Add
* @NativeFunctionAddress 0000000140E78C70
*/

void function ConsumableInventory_Add(int, int)

/*
* @Breif Removes a consumable item in a slot of the inventory.
* @Pramas int, int
* @NativeName: Script_ConsumableInventory_Remove
* @NativeFunctionAddress 0000000140E78BF0
*/

void function ConsumableInventory_Remove(int, int)

/*
* @Breif Get the number of filled slots in the consumable inventory.
* @Pramas 
* @NativeName: Script_ConsumableInventory_GetCount
* @NativeFunctionAddress 0000000140E78B20
*/

int function ConsumableInventory_GetCount()

/*
* @Breif Tell code the player's inventory screen was opened
* @Pramas 
* @NativeName: SetInventoryIsOpen
* @NativeFunctionAddress 0000000140E78A90
*/

void function SetInventoryIsOpen()

/*
* @Breif Tell code the player's inventory screen was closed
* @Pramas 
* @NativeName: ClearInventoryIsOpen
* @NativeFunctionAddress 0000000140E78A00
*/

void function ClearInventoryIsOpen()

/*
* @Breif Returns true if code thinks the player's inventory screen is open
* @Pramas 
* @NativeName: IsInventoryOpen
* @NativeFunctionAddress 0000000140E789A0
*/

bool function IsInventoryOpen()

/*
* @Breif Gets the use entity that would be found if the player tried to use something this frame
* @Pramas 
* @NativeName: Script_GetUseEntity
* @NativeFunctionAddress 0000000140E78910
*/

entity function GetUseEntity()

/*
* @Breif Forces a user to use an entity. Does not do any validity check
* @Pramas entity, int
* @NativeName: ScriptForceUseEntity
* @NativeFunctionAddress 0000000140E78880
*/

void function ForceUseEntity(entity, int)

/*
* @Breif Disable the player view-limiting cone.
* @Pramas 
* @NativeName: Script_PlayerCone_Disable
* @NativeFunctionAddress 0000000140E787B0
*/

void function PlayerCone_Disable()

/*
* @Breif Player view-limiting cone provided by scriptanim.
* @Pramas 
* @NativeName: Script_PlayerCone_FromAnim
* @NativeFunctionAddress 0000000140E78740
*/

void function PlayerCone_FromAnim()

/*
* @Breif Directly specify center of view-limiting cone.
* @Pramas vector
* @NativeName: Script_PlayerCone_SetSpecific
* @NativeFunctionAddress 0000000140E786A0
*/

void function PlayerCone_SetSpecific(vector)

/*
* @Breif Set the number of seconds to lerp out a 180 degree error into the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetLerpTime
* @NativeFunctionAddress 0000000140E78630
*/

void function PlayerCone_SetLerpTime(float)

/*
* @Breif Set the minimum yaw of the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetMinYaw
* @NativeFunctionAddress 0000000140E785B0
*/

void function PlayerCone_SetMinYaw(float)

/*
* @Breif Set the maximum yaw of the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetMaxYaw
* @NativeFunctionAddress 0000000140E78530
*/

void function PlayerCone_SetMaxYaw(float)

/*
* @Breif Set the minimum pitch of the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetMinPitch
* @NativeFunctionAddress 0000000140E784B0
*/

void function PlayerCone_SetMinPitch(float)

/*
* @Breif Set the maximum pitch of the player view-limiting cone.
* @Pramas float
* @NativeName: Script_PlayerCone_SetMaxPitch
* @NativeFunctionAddress 0000000140E78430
*/

void function PlayerCone_SetMaxPitch(float)

/*
* @Breif Hides the player.
* @Pramas 
* @NativeName: ScriptHidePlayer
* @NativeFunctionAddress 0000000140E783E0
*/

void function HidePlayer()

/*
* @Breif Undoes the effects of .HidePlayer()
* @Pramas 
* @NativeName: ScriptUnhidePlayer
* @NativeFunctionAddress 0000000140E78390
*/

void function UnhidePlayer()

/*
* @Breif Set view offset entity for first-person animation.
* @Pramas entity
* @NativeName: Script_ViewOffsetEntity_SetEntity
* @NativeFunctionAddress 0000000140E78310
*/

void function ViewOffsetEntity_SetEntity(entity)

/*
* @Breif Clear view offset entity for first-person animation.
* @Pramas 
* @NativeName: ViewOffsetEntity_Clear
* @NativeFunctionAddress 0000000140E782C0
*/

void function ViewOffsetEntity_Clear()

/*
* @Breif Sets the lerp-in duration for the view offset entity. Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: ViewOffsetEntity_SetLerpInTime
* @NativeFunctionAddress 0000000140E78210
*/

void function ViewOffsetEntity_SetLerpInTime(float)

/*
* @Breif Sets the lerp-out duration for the view offset entity. Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: ViewOffsetEntity_SetLerpOutTime
* @NativeFunctionAddress 0000000140E78160
*/

void function ViewOffsetEntity_SetLerpOutTime(float)

/*
* @Breif Set view entity for first-person animation.
* @Pramas entity
* @NativeName: Script_AnimViewEntity_SetEntity
* @NativeFunctionAddress 0000000140E780B0
*/

void function AnimViewEntity_SetEntity(entity)

/*
* @Breif Clear view entity for first-person animation.
* @Pramas 
* @NativeName: AnimViewEntity_Clear
* @NativeFunctionAddress 0000000140E78060
*/

void function AnimViewEntity_Clear()

/*
* @Breif Make the third person camera try to slide around collision rather than going right through it. And also change camera attachments to get a better view.
* @Pramas 
* @NativeName: AnimViewEntity_EnableThirdPersonCameraVisibilityChecks
* @NativeFunctionAddress 0000000140E77FE0
*/

void function AnimViewEntity_EnableThirdPersonCameraVisibilityChecks()

/*
* @Breif 
* @Pramas 
* @NativeName: AnimViewEntity_DrawPlayer
* @NativeFunctionAddress 0000000140E77F60
*/

void function AnimViewEntity_DrawPlayer()

/*
* @Breif Sets the lerp-in duration for the anim view entity. Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: AnimViewEntity_SetLerpInTime
* @NativeFunctionAddress 0000000140E77EF0
*/

void function AnimViewEntity_SetLerpInTime(float)

/*
* @Breif Sets the lerp-out duration for the anim view entity. Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: AnimViewEntity_SetLerpOutTime
* @NativeFunctionAddress 0000000140E77E40
*/

void function AnimViewEntity_SetLerpOutTime(float)

/*
* @Breif Gets the raw dodge power of the suit
* @Pramas 
* @NativeName: Script_GetDodgePower
* @NativeFunctionAddress 0000000140E77D90
*/

float function GetDodgePower()

/*
* @Breif Sets the power of the suit to whatever value you want (100 = max).
* @Pramas float
* @NativeName: Script_SetDodgePower
* @NativeFunctionAddress 0000000140E77B80
*/

void function Server_SetDodgePower(float)

/*
* @Breif Gets the percentage of "suit power" remaining (used for sprint, etc) (100 = max)
* @Pramas 
* @NativeName: Script_GetSuitPower
* @NativeFunctionAddress 0000000140E77D90
*/

float function GetSuitPower()

/*
* @Breif Gets the percentage of "suit jump power" remaining (used for double jump) (100 = max)
* @Pramas 
* @NativeName: Script_GetSuitJumpPower
* @NativeFunctionAddress 0000000140E77CE0
*/

float function GetSuitJumpPower()

/*
* @Breif Gets the percentage of "grapple power" remaining (100 = max)
* @Pramas 
* @NativeName: Script_GetSuitGrapplePower
* @NativeFunctionAddress 0000000140E77C30
*/

float function GetSuitGrapplePower()

/*
* @Breif Sets the percentage of "suit power" remaining (used for sprint, etc) (100 = max)
* @Pramas float
* @NativeName: Script_SetSuitPower
* @NativeFunctionAddress 0000000140E77B80
*/

void function SetSuitPower(float)

/*
* @Breif Sets the percentage of "suit jump power" remaining (used for double jump) (100 = max)
* @Pramas float
* @NativeName: Script_SetSuitJumpPower
* @NativeFunctionAddress 0000000140E77AD0
*/

void function SetSuitJumpPower(float)

/*
* @Breif Sets the percentage of "grapple power" remaining (100 = max)
* @Pramas float
* @NativeName: Script_SetSuitGrapplePower
* @NativeFunctionAddress 0000000140E77A20
*/

void function SetSuitGrapplePower(float)

/*
* @Breif Creates a decoy of this player
* @Pramas asset settingsName, asset modelName, int reserve, int camo, float stickPercentToRun, bool hasMovement
* @NativeName: Script_CreatePlayerDecoy
* @NativeFunctionAddress 0000000140E77940
*/

entity function CreatePlayerDecoy(asset settingsName, asset modelName, int reserve, int camo, float stickPercentToRun, bool hasMovement)

/*
* @Breif Creates a decoy that plays an animation
* @Pramas string
* @NativeName: Script_CreateAnimatedPlayerDecoy
* @NativeFunctionAddress 0000000140E778D0
*/

entity function CreateAnimatedPlayerDecoy(string)

/*
* @Breif Creates a decoy that moves to a location
* @Pramas vector targetPos, asset settingsName, asset modelName, int reserve, int camo
* @NativeName: Script_CreateTargetedPlayerDecoy
* @NativeFunctionAddress 0000000140E77810
*/

entity function CreateTargetedPlayerDecoy(vector targetPos, asset settingsName, asset modelName, int reserve, int camo)

/*
* @Breif Creates a decoy that mimics the player's movement, offset in yaw by the specified degrees
* @Pramas float yawOffset
* @NativeName: Script_CreateMimicPlayerDecoy
* @NativeFunctionAddress 0000000140E776A0
*/

entity function CreateMimicPlayerDecoy(float yawOffset)

/*
* @Breif Returns whether the player is wallrunning
* @Pramas 
* @NativeName: IsWallRunning
* @NativeFunctionAddress 0000000140E775F0
*/

bool function IsWallRunning()

/*
* @Breif Returns whether the player is wall-hanging.
* @Pramas 
* @NativeName: IsWallHanging
* @NativeFunctionAddress 0000000140E77590
*/

bool function IsWallHanging()

/*
* @Breif Returns whether the player is sprinting
* @Pramas 
* @NativeName: IsSprinting
* @NativeFunctionAddress 0000000140E77530
*/

bool function IsSprinting()

/*
* @Breif Returns whether the player is in the middle of a double-jump.
* @Pramas 
* @NativeName: IsDoubleJumping
* @NativeFunctionAddress 0000000140E774C0
*/

bool function IsDoubleJumping()

/*
* @Breif Returns whether the player is dodging.
* @Pramas 
* @NativeName: IsDodging
* @NativeFunctionAddress 0000000140E77460
*/

bool function IsDodging()

/*
* @Breif Returns whether the player is traversing (i.e. mantle or window anims).
* @Pramas 
* @NativeName: IsTraversing
* @NativeFunctionAddress 0000000140E773F0
*/

bool function IsTraversing()

/*
* @Breif Returns whether the player is mantling.
* @Pramas 
* @NativeName: IsMantling
* @NativeFunctionAddress 0000000140E77360
*/

bool function IsMantling()

/*
* @Breif Returns the position the player is going to finish mantling.
* @Pramas 
* @NativeName: GetMantlingEndPosition
* @NativeFunctionAddress 0000000140E772D0
*/

vector function GetMantlingEndPosition()

/*
* @Breif Returns whether this player has prediction enabled.
* @Pramas 
* @NativeName: IsPredicting
* @NativeFunctionAddress 0000000140E77270
*/

bool function IsPredicting()

/*
* @Breif Returns whether this player has grapple available in general.
* @Pramas 
* @NativeName: HasGrapple
* @NativeFunctionAddress 0000000140E77210
*/

bool function HasGrapple()

/*
* @Breif Returns whether this player can grapple the surface they're looking at.
* @Pramas 
* @NativeName: MayGrapple
* @NativeFunctionAddress 0000000140E771B0
*/

bool function MayGrapple()

/*
* @Breif Returns whether the player is sliding
* @Pramas 
* @NativeName: IsSliding
* @NativeFunctionAddress 0000000140E77150
*/

bool function IsSliding()

/*
* @Breif Begin freefalling
* @Pramas vector
* @NativeName: Player_BeginFreefall
* @NativeFunctionAddress 0000000140E770F0
*/

void function Player_BeginFreefall(vector)

/*
* @Breif End freefalling
* @Pramas 
* @NativeName: Player_EndFreefall
* @NativeFunctionAddress 0000000140E770A0
*/

void function Player_EndFreefall()

/*
* @Breif Return time freefall started
* @Pramas 
* @NativeName: Player_GetFreefallStartTime
* @NativeFunctionAddress 0000000140E76FF0
*/

float function Player_GetFreefallStartTime()

/*
* @Breif Return time freefall started
* @Pramas 
* @NativeName: Player_GetFreefallEndTime
* @NativeFunctionAddress 0000000140E76F40
*/

float function Player_GetFreefallEndTime()

/*
* @Breif Begin anticipating freefalling
* @Pramas 
* @NativeName: Player_BeginFreefallAnticipate
* @NativeFunctionAddress 0000000140E76EF0
*/

void function Player_BeginFreefallAnticipate()

/*
* @Breif End anticipating freefalling
* @Pramas 
* @NativeName: Player_EndFreefallAnticipate
* @NativeFunctionAddress 0000000140E76EA0
*/

void function Player_EndFreefallAnticipate()

/*
* @Breif Returns true if the player is freefalling
* @Pramas 
* @NativeName: Player_IsFreefalling
* @NativeFunctionAddress 0000000140E76E30
*/

bool function Player_IsFreefalling()

/*
* @Breif Returns true if the player is freefalling and about to land
* @Pramas 
* @NativeName: Player_IsFreefallAnticipating
* @NativeFunctionAddress 0000000140E76DC0
*/

bool function Player_IsFreefallAnticipating()

/*
* @Breif 
* @Pramas 
* @NativeName: Player_GetFreefallDistanceToLand
* @NativeFunctionAddress 0000000140E76D10
*/

float function Player_GetFreefallDistanceToLand()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetStrafeAngle
* @NativeFunctionAddress 0000000140E76C60
*/

float function Skydive_GetStrafeAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetSpeed
* @NativeFunctionAddress 0000000140E76BB0
*/

float function Skydive_GetSpeed()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetDiveAngle
* @NativeFunctionAddress 0000000140E76B00
*/

float function Skydive_GetDiveAngle()

/*
* @Breif 
* @Pramas bool
* @NativeName: Skydive_SetFreelookMode
* @NativeFunctionAddress 0000000140E76AA0
*/

void function Skydive_SetFreelookMode(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_IsFreelooking
* @NativeFunctionAddress 0000000140E76A40
*/

bool function Skydive_IsFreelooking()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetFreelookLockedAngle
* @NativeFunctionAddress 0000000140E76970
*/

vector function Skydive_GetFreelookLockedAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_IsFollowing
* @NativeFunctionAddress 0000000140E76900
*/

bool function Skydive_IsFollowing()

/*
* @Breif 
* @Pramas entity
* @NativeName: Skydive_FollowPlayer
* @NativeFunctionAddress 0000000140E76880
*/

void function Skydive_FollowPlayer(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_StopFollowing
* @NativeFunctionAddress 0000000140E76830
*/

void function Skydive_StopFollowing()

/*
* @Breif Ends traversals such as mantle. Moves the player to the nearest nonsolid location.
* @Pramas 
* @NativeName: Script_ClearTraverse
* @NativeFunctionAddress 0000000140E767D0
*/

void function ClearTraverse()

/*
* @Breif Returns the player's origin, or, if the player is traversing / mantling, returns a safe nearby position that is not in solid.
* @Pramas 
* @NativeName: Script_GetOriginOutOfTraversal
* @NativeFunctionAddress 0000000140E766C0
*/

vector function GetOriginOutOfTraversal()

/*
* @Breif Get the forward view vector of the player
* @Pramas 
* @NativeName: GetViewVector
* @NativeFunctionAddress 0000000140E765E0
*/

vector function GetViewVector()

/*
* @Breif Get the forward view vector of the player
* @Pramas 
* @NativeName: GetViewVector
* @NativeFunctionAddress 0000000140E765E0
*/

vector function GetViewForward()

/*
* @Breif Get the right view vector of the player
* @Pramas 
* @NativeName: GetViewRight
* @NativeFunctionAddress 0000000140E76500
*/

vector function GetViewRight()

/*
* @Breif Get the up view vector of the player
* @Pramas 
* @NativeName: GetViewUp
* @NativeFunctionAddress 0000000140E76420
*/

vector function GetViewUp()

/*
* @Breif Returns the size of the party this player was in when they connected
* @Pramas 
* @NativeName: GetPartySize
* @NativeFunctionAddress 0000000140E6AE70
*/

int function GetPartySize()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPartyLeaderClientIndex
* @NativeFunctionAddress 0000000140E76360
*/

int function GetPartyLeaderClientIndex()

/*
* @Breif Gets the code name of this player's party
* @Pramas 
* @NativeName: GetPartyRoomName
* @NativeFunctionAddress 0000000140E762C0
*/

string function GetPartyRoomName()

/*
* @Breif Get the players current viewpunch amount, squared
* @Pramas 
* @NativeName: Script_GetViewPunchSqrd
* @NativeFunctionAddress 0000000140E76200
*/

float function GetViewPunchSqrd()

/*
* @Breif Punch the players view from the specified origin. Takes arguments: origin, softAmount, hardAmount, randomBoost
* @Pramas vector, float, float, float
* @NativeName: Script_ViewPunch
* @NativeFunctionAddress 0000000140E76150
*/

void function ViewPunch(vector, float, float, float)

/*
* @Breif Track that this player relinquished jumpmaster (non-cumulative)
* @Pramas 
* @NativeName: TrackPlayerRelinquished
* @NativeFunctionAddress 0000000140E760F0
*/

void function TrackPlayerRelinquished()

/*
* @Breif Track that this player hot dropped (non-cumulative)
* @Pramas 
* @NativeName: TrackPlayerHotDropped
* @NativeFunctionAddress 0000000140E76090
*/

void function TrackPlayerHotDropped()

/*
* @Breif Track which character they picked
* @Pramas int, string
* @NativeName: TrackPlayerCharacter
* @NativeFunctionAddress 0000000140E75FF0
*/

void function TrackPlayerCharacter(int, string)

/*
* @Breif Track that player just pinged something
* @Pramas 
* @NativeName: TrackPlayerPing
* @NativeFunctionAddress 0000000140E75F90
*/

void function TrackPlayerPing()

/*
* @Breif Track that player just pinged an enemy
* @Pramas 
* @NativeName: TrackPlayerEnemyPing
* @NativeFunctionAddress 0000000140E75F30
*/

void function TrackPlayerEnemyPing()

/*
* @Breif Track that player just pinged a location
* @Pramas 
* @NativeName: TrackPlayerLocationPing
* @NativeFunctionAddress 0000000140E75ED0
*/

void function TrackPlayerLocationPing()

/*
* @Breif Track shots fired and hits
* @Pramas int, int
* @NativeName: TrackPlayerShots
* @NativeFunctionAddress 0000000140E75E40
*/

void function TrackPlayerShots(int, int)

/*
* @Breif Track what level the player is
* @Pramas int
* @NativeName: TrackPlayerLevel
* @NativeFunctionAddress 0000000140E75DD0
*/

void function TrackPlayerLevel(int)

/*
* @Breif Track matches for this player
* @Pramas int, int, int, int, int
* @NativeName: TrackPlayerMatches
* @NativeFunctionAddress 0000000140E75CF0
*/

void function TrackPlayerMatches(int, int, int, int, int)

/*
* @Breif Track kills for this player
* @Pramas int, int
* @NativeName: TrackPlayerKills
* @NativeFunctionAddress 0000000140E75C60
*/

void function TrackPlayerKills(int, int)

/*
* @Breif Track damage for this player
* @Pramas int, int
* @NativeName: TrackPlayerDamage
* @NativeFunctionAddress 0000000140E75BD0
*/

void function TrackPlayerDamage(int, int)

/*
* @Breif Track how many times this player has revived an ally
* @Pramas int
* @NativeName: TrackPlayerAllyRevives
* @NativeFunctionAddress 0000000140E75B60
*/

void function TrackPlayerAllyRevives(int)

/*
* @Breif Track the player's current rank score
* @Pramas string, int
* @NativeName: TrackRankScore
* @NativeFunctionAddress 0000000140E75AC0
*/

void function TrackRankScore(string, int)

/*
* @Breif Sets the current player class
* @Pramas string
* @NativeName: SetClass_Script
* @NativeFunctionAddress 0000000140E75A60
*/

void function Code_SetPlayerSettings(string)

/*
* @Breif Given (string), returns true if mod is active on this player
* @Pramas string
* @NativeName: HasClassMod_Script
* @NativeFunctionAddress 0000000140E759F0
*/

bool function HasClassMod(string)

/*
* @Breif Given (string), returns true if given mod is available to use for this player
* @Pramas string, string
* @NativeName: IsClassModAvailableForPlayerSetting_Script
* @NativeFunctionAddress 00000001406A3B40
*/

bool function IsClassModAvailableForPlayerSetting(string, string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetClassPosCount_Script
* @NativeFunctionAddress 0000000140E75950
*/

int function GetClassPosCount()

/*
* @Breif Sets the requested player class
* @Pramas asset requestedClass
* @NativeName: SetRequestedClass
* @NativeFunctionAddress 0000000140E758F0
*/

void function SetPlayerRequestedSettings(asset requestedClass)

/*
* @Breif What class has the player requested
* @Pramas 
* @NativeName: ScriptGetPlayerRequestedClassName
* @NativeFunctionAddress 0000000140E757F0
*/

asset function GetPlayerRequestedClass()

/*
* @Breif What class is the player
* @Pramas 
* @NativeName: GetPlayerClassName
* @NativeFunctionAddress 0000000140E75760
*/

asset function GetPlayerSettings()

/*
* @Breif What class has the player requested
* @Pramas 
* @NativeName: GetPlayerRequestedClassName
* @NativeFunctionAddress 0000000140E75670
*/

asset function GetPlayerRequestedSettings()

/*
* @Breif What general class is the player (pilot/titan)
* @Pramas 
* @NativeName: GetPlayerGeneralClassName
* @NativeFunctionAddress 0000000140E755C0
*/

string function GetPlayerClass()

/*
* @Breif What general subclass is the player (wallrun/boost)
* @Pramas 
* @NativeName: GetPlayerSubClassName
* @NativeFunctionAddress 0000000140E75530
*/

string function GetPlayerSubClass()

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingBool
* @NativeFunctionAddress 0000000140E754B0
*/

bool function GetPlayerSettingBool(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingInt
* @NativeFunctionAddress 0000000140E753E0
*/

int function GetPlayerSettingInt(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingFloat
* @NativeFunctionAddress 0000000140E75310
*/

float function GetPlayerSettingFloat(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingVector
* @NativeFunctionAddress 0000000140E75230
*/

vector function GetPlayerSettingVector(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingString
* @NativeFunctionAddress 0000000140E75190
*/

string function GetPlayerSettingString(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingAsset
* @NativeFunctionAddress 0000000140E750F0
*/

asset function GetPlayerSettingAsset(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingStringAsAsset
* @NativeFunctionAddress 0000000140E75050
*/

asset function GetPlayerSettingStringAsAsset(string)

/*
* @Breif Set player's view entity.
* @Pramas entity, bool
* @NativeName: ScriptSetViewEntity
* @NativeFunctionAddress 0000000140E74FD0
*/

void function SetViewEntity(entity, bool)

/*
* @Breif Clear view entity.
* @Pramas 
* @NativeName: ScriptClearViewEntity
* @NativeFunctionAddress 0000000140E74F70
*/

void function ClearViewEntity()

/*
* @Breif Set the view entity to index from GetViewIndexForEntity.
* @Pramas int
* @NativeName: SetViewIndex
* @NativeFunctionAddress 0000000140E74F00
*/

void function SetViewIndex(int)

/*
* @Breif Return player's index number (which is entindex() -1 )
* @Pramas 
* @NativeName: GetPlayerIndex
* @NativeFunctionAddress 0000000140E74E50
*/

int function GetPlayerIndex()

/*
* @Breif Makes player controls not affect movement, etc.
* @Pramas 
* @NativeName: ScriptFreezeControlsOnServer
* @NativeFunctionAddress 0000000140E74DD0
*/

void function FreezeControlsOnServer()

/*
* @Breif Makes player controls not affect movement, etc.
* @Pramas 
* @NativeName: ScriptUnfreezeControlsOnServer
* @NativeFunctionAddress 0000000140E74D50
*/

void function UnfreezeControlsOnServer()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptSetThirdPersonModeOn
* @NativeFunctionAddress 0000000140E74D00
*/

void function SetThirdPersonModeOn()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptSetThirdPersonModeOff
* @NativeFunctionAddress 0000000140E74C80
*/

void function SetThirdPersonModeOff()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptSetThirdPersonShoulderModeOn
* @NativeFunctionAddress 0000000140E74C30
*/

void function SetThirdPersonShoulderModeOn()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptSetThirdPersonShoulderModeOff
* @NativeFunctionAddress 0000000140E74BE0
*/

void function SetThirdPersonShoulderModeOff()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsThirdPersonShoulderModeOn
* @NativeFunctionAddress 0000000140E74B80
*/

bool function IsThirdPersonShoulderModeOn()

/*
* @Breif Makes the Black and white screen on low health enabled
* @Pramas 
* @NativeName: ScriptTurnLowHealthEffectsOff
* @NativeFunctionAddress 0000000140E74B00
*/

void function TurnLowHealthEffectsOff()

/*
* @Breif Stops the Black and white screen on low health from happening
* @Pramas 
* @NativeName: ScriptTurnLowHealthEffectsOn
* @NativeFunctionAddress 0000000140E74A80
*/

void function TurnLowHealthEffectsOn()

/*
* @Breif 
* @Pramas int
* @NativeName: ScriptSetBleedoutState
* @NativeFunctionAddress 0000000140E74A10
*/

void function SetBleedoutState(int)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetBleedoutState
* @NativeFunctionAddress 0000000140E74960
*/

int function GetBleedoutState()

/*
* @Breif stops the player from auto reloading on no ammo
* @Pramas 
* @NativeName: ScriptDisableAutoReloadNoAmmo
* @NativeFunctionAddress 0000000140E748E0
*/

void function DisableAutoReloadNoAmmo()

/*
* @Breif lets the player auto reload on no ammo
* @Pramas 
* @NativeName: ScriptEnableAutoReloadNoAmmo
* @NativeFunctionAddress 0000000140E74860
*/

void function EnableAutoReloadNoAmmo()

/*
* @Breif Disallows weapon changes.
* @Pramas 
* @NativeName: ScriptLockWeaponChange
* @NativeFunctionAddress 0000000140E747E0
*/

void function LockWeaponChange()

/*
* @Breif Allows weapon changes.
* @Pramas 
* @NativeName: ScriptUnlockWeaponChange
* @NativeFunctionAddress 0000000140E74760
*/

void function UnlockWeaponChange()

/*
* @Breif Query the weapon change allowed state.
* @Pramas 
* @NativeName: ScriptIsWeaponChangeLocked
* @NativeFunctionAddress 0000000140E746F0
*/

bool function IsWeaponChangeLocked()

/*
* @Breif Enable player movement
* @Pramas 
* @NativeName: MovementEnable
* @NativeFunctionAddress 0000000140E74660
*/

void function MovementEnable()

/*
* @Breif Disable player movement
* @Pramas 
* @NativeName: MovementDisable
* @NativeFunctionAddress 0000000140E745D0
*/

void function MovementDisable()

/*
* @Breif Invalidate a player's lag compensation records to ensure client's aren't shooting the player's past.
* @Pramas 
* @NativeName: Script_InvalidateLagCompensationRecords
* @NativeFunctionAddress 0000000140E74570
*/

void function Server_InvalidateLagCompensationRecords()

/*
* @Breif Turns the disable offhand weapons flag on.
* @Pramas 
* @NativeName: Script_TurnOffhandWeaponsDisabledOn
* @NativeFunctionAddress 0000000140E744F0
*/

void function Server_TurnOffhandWeaponsDisabledOn()

/*
* @Breif Turns the disable offhand weapons flag off.
* @Pramas 
* @NativeName: Script_TurnOffhandWeaponsDisabledOff
* @NativeFunctionAddress 0000000140E74470
*/

void function Server_TurnOffhandWeaponsDisabledOff()

/*
* @Breif Returns true if the disable offhand weapons flag is on.
* @Pramas 
* @NativeName: Script_IsOffhandWeaponsDisabled
* @NativeFunctionAddress 0000000140E74400
*/

bool function Server_IsOffhandWeaponsDisabled()

/*
* @Breif Turns on the disable abilities weapons flag
* @Pramas 
* @NativeName: Script_DisableAbilities
* @NativeFunctionAddress 0000000140E74380
*/

void function Server_DisableAbilities()

/*
* @Breif Turns off the disable abilities weapons flag
* @Pramas 
* @NativeName: Script_EnableAbilities
* @NativeFunctionAddress 0000000140E74300
*/

void function Server_EnableAbilities()

/*
* @Breif Returns true if the disable abilities flag is on.
* @Pramas 
* @NativeName: Script_IsAbilitiesDisabled
* @NativeFunctionAddress 0000000140E74290
*/

bool function Server_IsAbilitiesDisabled()

/*
* @Breif Enter Shadow Form
* @Pramas 
* @NativeName: Script_EnterShadowForm
* @NativeFunctionAddress 0000000140E74210
*/

void function EnterShadowForm()

/*
* @Breif Leave Shadow Form
* @Pramas 
* @NativeName: Script_LeaveShadowForm
* @NativeFunctionAddress 0000000140E74190
*/

void function LeaveShadowForm()

/*
* @Breif Is the player in Shadow Form?
* @Pramas 
* @NativeName: Script_IsShadowForm
* @NativeFunctionAddress 0000000140E74120
*/

bool function IsShadowForm()

/*
* @Breif Turns the disable dodge flag on.
* @Pramas 
* @NativeName: Script_TurnDodgeDisabledOn
* @NativeFunctionAddress 0000000140E740A0
*/

void function Server_TurnDodgeDisabledOn()

/*
* @Breif Turns the diable dodge flag off.
* @Pramas 
* @NativeName: Script_TurnDodgeDisabledOff
* @NativeFunctionAddress 0000000140E74020
*/

void function Server_TurnDodgeDisabledOff()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ForceMPAimassist
* @NativeFunctionAddress 0000000140E73FA0
*/

void function ForceMPAimassist()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PreventWeaponDestroyNoAmmo
* @NativeFunctionAddress 0000000140E73F20
*/

void function PreventWeaponDestroyNoAmmo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableWeaponDestroyNoAmmo
* @NativeFunctionAddress 0000000140E73EA0
*/

void function EnableWeaponDestroyNoAmmo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableAllIDLightsFriendly
* @NativeFunctionAddress 0000000140E73E20
*/

void function EnableAllIDLightsFriendly()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableAllIDLightsFriendly
* @NativeFunctionAddress 0000000140E73DA0
*/

void function DisableAllIDLightsFriendly()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableMantle
* @NativeFunctionAddress 0000000140E73D20
*/

void function DisableMantle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableMantle
* @NativeFunctionAddress 0000000140E73CA0
*/

void function EnableMantle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableVelocityShakeAlwaysOn
* @NativeFunctionAddress 0000000140E73C20
*/

void function EnableVelocityShakeAlwaysOn()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableVelocityShakeAlwaysOn
* @NativeFunctionAddress 0000000140E73BA0
*/

void function DisableVelocityShakeAlwaysOn()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_TargetInfoDisableOn
* @NativeFunctionAddress 0000000140E73B20
*/

void function TargetInfoDisableOn()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_TargetInfoDisableOff
* @NativeFunctionAddress 0000000140E73AA0
*/

void function TargetInfoDisableOff()

/*
* @Breif Respawns the player.
* @Pramas entity
* @NativeName: ScriptRespawnPlayer
* @NativeFunctionAddress 0000000140E73A20
*/

void function Code_RespawnPlayer(entity)

/*
* @Breif Reserves a spawn point for a player.
* @Pramas entity
* @NativeName: ScriptReserveSpawnPoint
* @NativeFunctionAddress 0000000140E739A0
*/

void function ReserveSpawnPoint(entity)

/*
* @Breif Clears a spawn point reservation.
* @Pramas 
* @NativeName: ScriptClearSpawnPoint
* @NativeFunctionAddress 0000000140E73940
*/

void function ClearSpawnPoint()

/*
* @Breif Sets the last spawn point used by the player.
* @Pramas entity
* @NativeName: ScriptSetLastSpawnPoint
* @NativeFunctionAddress 0000000140E738C0
*/

void function SetLastSpawnPoint(entity)

/*
* @Breif Returns if player is a fake player for replays
* @Pramas 
* @NativeName: IsReplay
* @NativeFunctionAddress 0000000140E73860
*/

bool function IsReplay()

/*
* @Breif Returns whether the player is in an observer mode
* @Pramas 
* @NativeName: IsObserver
* @NativeFunctionAddress 0000000140E737F0
*/

bool function IsObserver()

/*
* @Breif Returns the player's observer mode. OBS_MODE_NONE if they are not observing
* @Pramas 
* @NativeName: GetObserverMode
* @NativeFunctionAddress 0000000140E73740
*/

int function GetObserverMode()

/*
* @Breif Put player into the given observer mode
* @Pramas int
* @NativeName: ScriptStartObserverMode
* @NativeFunctionAddress 0000000140E736D0
*/

void function StartObserverMode(int)

/*
* @Breif Clears observer mode to OBS_MODE_NONE.
* @Pramas 
* @NativeName: ScriptStopObserverMode
* @NativeFunctionAddress 0000000140E73680
*/

void function StopObserverMode()

/*
* @Breif Set target entity for player's observer mode
* @Pramas entity
* @NativeName: ScriptSetObserverTarget
* @NativeFunctionAddress 0000000140E73600
*/

void function SetObserverTarget(entity)

/*
* @Breif Gets the target entity for player's observer mode
* @Pramas 
* @NativeName: ScriptGetObserverTarget
* @NativeFunctionAddress 0000000140E73570
*/

entity function GetObserverTarget()

/*
* @Breif Gets the first target entity in the cycle for player's observer mode
* @Pramas 
* @NativeName: ScriptGetFirstObserverTarget
* @NativeFunctionAddress 0000000140E73510
*/

entity function GetFirstObserverTarget()

/*
* @Breif Sets the position that this player will use when they are in OBS_MODE_STATIC or OBS_MODE_STATIC_LOCKED
* @Pramas vector
* @NativeName: ScriptSetObserverModeStaticPosition
* @NativeFunctionAddress 0000000140E734B0
*/

void function SetObserverModeStaticPosition(vector)

/*
* @Breif Sets the angles that this player will use when they are in OBS_MODE_STATIC or OBS_MODE_STATIC_LOCKED
* @Pramas vector
* @NativeName: ScriptSetObserverModeStaticAngles
* @NativeFunctionAddress 0000000140E73450
*/

void function SetObserverModeStaticAngles(vector)

/*
* @Breif Sets the fov that this player will use when they are in OBS_MODE_STATIC or OBS_MODE_STATIC_LOCKED. Set to 0.0 to disable.
* @Pramas float
* @NativeName: ScriptSetObserverModeStaticFOVOverride
* @NativeFunctionAddress 0000000140E733E0
*/

void function SetObserverModeStaticFOVOverride(float)

/*
* @Breif Sets whether this player is a valid observer target for other players who are using OBS_MODE_CHASE
* @Pramas bool
* @NativeName: ScriptSetIsValidChaseObserverTarget
* @NativeFunctionAddress 0000000140E73380
*/

void function SetIsValidChaseObserverTarget(bool)

/*
* @Breif Set true to allow player to switch between first and third person. False to disallow.
* @Pramas bool
* @NativeName: SetPlayerCanToggleObserverMode
* @NativeFunctionAddress 0000000140E73320
*/

void function SetPlayerCanToggleObserverMode(bool)

/*
* @Breif Start using another player for you first person view.
* @Pramas entity
* @NativeName: StartObservingPlayerInFirstPerson
* @NativeFunctionAddress 0000000140E732A0
*/

void function StartObservingPlayerInFirstPerson(entity)

/*
* @Breif Stop observing another player in first person.
* @Pramas 
* @NativeName: StopObservingPlayerInFirstPerson
* @NativeFunctionAddress 0000000140E73240
*/

void function StopObservingPlayerInFirstPerson()

/*
* @Breif Get how zoomed-in a player is. Result is between (0.0, 1.0).
* @Pramas 
* @NativeName: GetZoomFrac
* @NativeFunctionAddress 0000000140E73190
*/

float function GetZoomFrac()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDamagedByOtherPlayer
* @NativeFunctionAddress 0000000140E730E0
*/

float function GetLastTimeDamagedByOtherPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDamagedByNPC
* @NativeFunctionAddress 0000000140E73030
*/

float function GetLastTimeDamagedByNPC()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDidDamageToOtherPlayer
* @NativeFunctionAddress 0000000140E72F80
*/

float function GetLastTimeDidDamageToOtherPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDidDamageToNPC
* @NativeFunctionAddress 0000000140E72ED0
*/

float function GetLastTimeDidDamageToNPC()

/*
* @Breif Returns player's minimum bounds
* @Pramas 
* @NativeName: GetPlayerMins
* @NativeFunctionAddress 0000000140E72E30
*/

vector function GetPlayerMins()

/*
* @Breif Returns player's maximum bounds
* @Pramas 
* @NativeName: GetPlayerMaxs
* @NativeFunctionAddress 0000000140E72D90
*/

vector function GetPlayerMaxs()

/*
* @Breif Returns whether player has use button pressed
* @Pramas 
* @NativeName: UseButtonPressed
* @NativeFunctionAddress 0000000140E72D20
*/

bool function UseButtonPressed()

/*
* @Breif Get the player's name.
* @Pramas 
* @NativeName: GetPlayerName
* @NativeFunctionAddress 0000000140E72C90
*/

string function GetPlayerName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerNameOriginal
* @NativeFunctionAddress 0000000140E72BF0
*/

string function GetPlayerNameOriginal()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerMachineName
* @NativeFunctionAddress 0000000140E72B50
*/

string function GetPlayerMachineName()

/*
* @Breif Get the player's platform name.
* @Pramas 
* @NativeName: GetPlayerPlatformName
* @NativeFunctionAddress 0000000140E72AB0
*/

string function GetPlayerPlatformName()

/*
* @Breif Let code know a melee attack has started
* @Pramas int
* @NativeName: PlayerMelee_StartAttack
* @NativeFunctionAddress 0000000140E72A40
*/

void function PlayerMelee_StartAttack(int)

/*
* @Breif Let code know a melee attack has ended
* @Pramas 
* @NativeName: PlayerMelee_EndAttack
* @NativeFunctionAddress 0000000140E729F0
*/

void function PlayerMelee_EndAttack()

/*
* @Breif Let script query whether a melee attack is currently in progress
* @Pramas 
* @NativeName: PlayerMelee_IsAttackActive
* @NativeFunctionAddress 0000000140E72990
*/

bool function PlayerMelee_IsAttackActive()

/*
* @Breif Returns true if currently doing a melee attack and the attack was started while sprinting
* @Pramas 
* @NativeName: PlayerMelee_IsSprintAttack
* @NativeFunctionAddress 0000000140E72920
*/

bool function PlayerMelee_IsSprintAttack()

/*
* @Breif Let code know the melee attack hit something (so code will stop the lunge movement)
* @Pramas entity
* @NativeName: PlayerMelee_SetAttackHitEntity
* @NativeFunctionAddress 0000000140E728A0
*/

void function PlayerMelee_SetAttackHitEntity(entity)

/*
* @Breif 
* @Pramas bool
* @NativeName: PlayerMelee_SetAttackRecoveryShouldBeQuick
* @NativeFunctionAddress 0000000140E72810
*/

void function PlayerMelee_SetAttackRecoveryShouldBeQuick(bool)

/*
* @Breif Let script query whether the melee attack hit flag has been set
* @Pramas 
* @NativeName: PlayerMelee_GetAttackHitEntity
* @NativeFunctionAddress 0000000140E727B0
*/

entity function PlayerMelee_GetAttackHitEntity()

/*
* @Breif Sets scripted melee state (arbitrary integer)
* @Pramas int
* @NativeName: PlayerMelee_Script_SetState
* @NativeFunctionAddress 0000000140E726F0
*/

void function PlayerMelee_SetState(int)

/*
* @Breif Gets scripted melee state (arbitrary integer)
* @Pramas 
* @NativeName: PlayerMelee_Script_GetState
* @NativeFunctionAddress 0000000140E72640
*/

int function PlayerMelee_GetState()

/*
* @Breif Increments disabled melee counter
* @Pramas 
* @NativeName: Script_SetMeleeDisabled
* @NativeFunctionAddress 0000000140E725B0
*/

void function SetMeleeDisabled()

/*
* @Breif Decrements disabled melee counter
* @Pramas 
* @NativeName: Script_ClearMeleeDisabled
* @NativeFunctionAddress 0000000140E72520
*/

void function ClearMeleeDisabled()

/*
* @Breif Gets the disabled melee counter
* @Pramas 
* @NativeName: Script_GetMeleeDisabled
* @NativeFunctionAddress 0000000140E72470
*/

int function GetMeleeDisabled()

/*
* @Breif Queue a melee attack (useful for dev)
* @Pramas 
* @NativeName: QueueMeleeAttack
* @NativeFunctionAddress 0000000140E72420
*/

void function QueueMeleeAttack()

/*
* @Breif Have the player lerp towards the given target as they wind up for their attack
* @Pramas entity
* @NativeName: Lunge_SetTargetEntity
* @NativeFunctionAddress 0000000140E723A0
*/

bool function Lunge_SetTargetEntity(entity)

/*
* @Breif Get the current lunge target
* @Pramas 
* @NativeName: Lunge_GetTargetEntity
* @NativeFunctionAddress 0000000140E72340
*/

entity function Lunge_GetTargetEntity()

/*
* @Breif Make the player lerp towards the given position
* @Pramas vector
* @NativeName: Lunge_SetTargetPosition
* @NativeFunctionAddress 0000000140E722E0
*/

void function Lunge_SetTargetPosition(vector)

/*
* @Breif Get the position the player is lunging towards
* @Pramas 
* @NativeName: Lunge_GetTargetPosition
* @NativeFunctionAddress 0000000140E721B0
*/

vector function Lunge_GetTargetPosition()

/*
* @Breif 
* @Pramas vector
* @NativeName: Lunge_SetEndPositionOffset
* @NativeFunctionAddress 0000000140E720D0
*/

void function Lunge_SetEndPositionOffset(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: Lunge_GetEndPositionOffset
* @NativeFunctionAddress 0000000140E72000
*/

vector function Lunge_GetEndPositionOffset()

/*
* @Breif Clears any lunging currently going on
* @Pramas 
* @NativeName: Lunge_ClearTarget
* @NativeFunctionAddress 0000000140E71FB0
*/

void function Lunge_ClearTarget()

/*
* @Breif Allow the lunge to fly into the air, if it needs to
* @Pramas 
* @NativeName: Lunge_EnableFlying
* @NativeFunctionAddress 0000000140E71F60
*/

void function Lunge_EnableFlying()

/*
* @Breif Whether lunging to adjust the player's view pitch
* @Pramas bool
* @NativeName: Lunge_LockPitch
* @NativeFunctionAddress 0000000140E71F00
*/

void function Lunge_LockPitch(bool)

/*
* @Breif Sets how long it takes to lunge to the target. Default is 0.5 seconds.
* @Pramas float
* @NativeName: Lunge_SetSmoothTime
* @NativeFunctionAddress 0000000140E71E90
*/

void function Lunge_SetSmoothTime(float)

/*
* @Breif Sets maximum time for how long a lunge will go on for
* @Pramas float
* @NativeName: Lunge_SetMaxTime
* @NativeFunctionAddress 0000000140E71E20
*/

void function Lunge_SetMaxTime(float)

/*
* @Breif Sets the maximum speed the player can end lunging with. Defaults to 0.
* @Pramas float
* @NativeName: Lunge_SetMaxEndSpeed
* @NativeFunctionAddress 0000000140E71DB0
*/

void function Lunge_SetMaxEndSpeed(float)

/*
* @Breif Is the player lunging.
* @Pramas 
* @NativeName: Lunge_IsActive
* @NativeFunctionAddress 0000000140E71D50
*/

bool function Lunge_IsActive()

/*
* @Breif Is the player lunging towards an entity
* @Pramas 
* @NativeName: Lunge_IsLungingToEntity
* @NativeFunctionAddress 0000000140E71CD0
*/

bool function Lunge_IsLungingToEntity()

/*
* @Breif Is the player lunging towards a position
* @Pramas 
* @NativeName: Lunge_IsLungingToPosition
* @NativeFunctionAddress 0000000140E71C50
*/

bool function Lunge_IsLungingToPosition()

/*
* @Breif Is the player lunging to ground execute
* @Pramas 
* @NativeName: Lunge_IsGroundExecute
* @NativeFunctionAddress 0000000140E71BF0
*/

bool function Lunge_IsGroundExecute()

/*
* @Breif Returns the initial relative position of the player from the lunge target
* @Pramas 
* @NativeName: Lunge_GetStartPositionOffset
* @NativeFunctionAddress 0000000140E71AC0
*/

vector function Lunge_GetStartPositionOffset()

/*
* @Breif Plays a controller rumble on the current player. Takes three parameters: rumble index (the wave pattern of the vibration or 0 to stop all rumbles), rumble data (optional data for the rumble flags parameter that follows), and rumble flags (additional flags for the rumble). See rumble_shared.h for further details.
* @Pramas int, int, int
* @NativeName: Script_RumbleEffect
* @NativeFunctionAddress 0000000140E71A20
*/

void function RumbleEffect(int, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableSlowMo
* @NativeFunctionAddress 0000000140E71990
*/

void function EnableSlowMo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableSlowMo
* @NativeFunctionAddress 0000000140E71900
*/

void function DisableSlowMo()

/*
* @Breif Force things (like superjump and wallrunning) to reset as if the player touched ground.
* @Pramas 
* @NativeName: TouchGround
* @NativeFunctionAddress 0000000140E718B0
*/

void function TouchGround()

/*
* @Breif Makes the player unable to double jump until they touch the ground again.
* @Pramas 
* @NativeName: ConsumeDoubleJump
* @NativeFunctionAddress 0000000140E71810
*/

void function ConsumeDoubleJump()

/*
* @Breif Set this entity to use staggered walk and run animations
* @Pramas 
* @NativeName: ScriptSetStaggering
* @NativeFunctionAddress 0000000140E717B0
*/

void function SetStaggering()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGPTrustFailsRspn
* @NativeFunctionAddress 0000000140E71700
*/

int function GetGPTrustFailsRspn()

/*
* @Breif Sets the near Z to use when playing scripted animations
* @Pramas float
* @NativeName: Script_SetAnimNearZ
* @NativeFunctionAddress 0000000140E71690
*/

void function SetAnimNearZ(float)

/*
* @Breif Resets the near Z to default when playing scripted animations
* @Pramas 
* @NativeName: Script_ClearAnimNearZ
* @NativeFunctionAddress 0000000140E715F0
*/

void function ClearAnimNearZ()

/*
* @Breif Scales the movement speed of the player
* @Pramas float
* @NativeName: Script_SetMoveSpeedScale
* @NativeFunctionAddress 0000000140E71540
*/

void function SetMoveSpeedScale(float)

/*
* @Breif Scales the movement acceleration of the player
* @Pramas float
* @NativeName: Script_SetAccelerationScale
* @NativeFunctionAddress 0000000140E71490
*/

void function SetAccelerationScale(float)

/*
* @Breif Scales the power regen rate of the player (e.g. for dodge use)
* @Pramas float
* @NativeName: Script_SetPowerRegenRateScale
* @NativeFunctionAddress 0000000140E713E0
*/

void function SetPowerRegenRateScale(float)

/*
* @Breif Scales the dodge power delay of the player
* @Pramas float
* @NativeName: Script_SetDodgePowerDelayScale
* @NativeFunctionAddress 0000000140E71330
*/

void function SetDodgePowerDelayScale(float)

/*
* @Breif Returns true if the player wants to be actively matchmaking
* @Pramas 
* @NativeName: Script_DoesPlayerWantToMatchmake
* @NativeFunctionAddress 0000000140E712A0
*/

bool function WantsMatchmaking()

/*
* @Breif Kills the player (without leaving a corpse)
* @Pramas 
* @NativeName: Despawn
* @NativeFunctionAddress 0000000140E71250
*/

void function Despawn()

/*
* @Breif Returns true if the player is ziplining (in either direction)
* @Pramas 
* @NativeName: Zipline_IsZiplining
* @NativeFunctionAddress 0000000140E711B0
*/

bool function IsZiplining()

/*
* @Breif Returns true if the player is ziplining in reverse
* @Pramas 
* @NativeName: Zipline_IsZipliningInReverse
* @NativeFunctionAddress 0000000140E71110
*/

bool function IsZipliningInReverse()

/*
* @Breif Returns true if the player is ziplining vertically
* @Pramas 
* @NativeName: Zipline_IsZipliningVertically
* @NativeFunctionAddress 0000000140E710B0
*/

bool function Zipline_IsZipliningVertically()

/*
* @Breif Returns true if the player is mounting a zipline
* @Pramas 
* @NativeName: Zipline_IsMountingZipline
* @NativeFunctionAddress 0000000140E71000
*/

bool function IsMountingZipline()

/*
* @Breif Try use the closest zipline, if there is one available. Returns true on success.
* @Pramas 
* @NativeName: Zipline_TryUse
* @NativeFunctionAddress 0000000140E70FA0
*/

bool function Zipline_TryUse()

/*
* @Breif Forces the player to detach from their zipline
* @Pramas 
* @NativeName: Zipline_Stop
* @NativeFunctionAddress 0000000140E70F50
*/

void function Zipline_Stop()

/*
* @Breif Get the zipline entity the player is currently using
* @Pramas 
* @NativeName: Zipline_GetActiveZipline
* @NativeFunctionAddress 0000000140E70EC0
*/

entity function Zipline_GetActiveZipline()

/*
* @Breif Get the zipline entity the player was last using
* @Pramas 
* @NativeName: Zipline_GetLastZipline
* @NativeFunctionAddress 0000000140E70E30
*/

entity function Zipline_GetLastZipline()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_Allow
* @NativeFunctionAddress 0000000140E70DB0
*/

void function Zipline_Allow()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_Disallow
* @NativeFunctionAddress 0000000140E70D30
*/

void function Zipline_Disallow()

/*
* @Breif Returns the highest fraction value a smart-ammo-enabled weapon has locked onto this entity right now
* @Pramas 
* @NativeName: SmartAmmo_GetHighestLockOnMeFraction
* @NativeFunctionAddress 0000000140E70C80
*/

float function SmartAmmo_GetHighestLockOnMeFraction()

/*
* @Breif Returns the previous highest fraction value
* @Pramas 
* @NativeName: SmartAmmo_GetPreviousHighestLockOnMeFraction
* @NativeFunctionAddress 0000000140E70BD0
*/

float function SmartAmmo_GetPreviousHighestLockOnMeFraction()

/*
* @Breif Returns an array of the weapon entities with the highest fraction/locks on us
* @Pramas 
* @NativeName: SmartAmmo_Script_GetHighestLocksOnMeEntities
* @NativeFunctionAddress 0000000140E70B00
*/

array< entity > function SmartAmmo_GetHighestLocksOnMeEntities()

/*
* @Breif Enable one-handed weapon anims.
* @Pramas 
* @NativeName: Script_SetOneHandedWeaponUsageOn
* @NativeFunctionAddress 0000000140E70AB0
*/

void function SetOneHandedWeaponUsageOn()

/*
* @Breif Disable one-handed weapon anims.
* @Pramas 
* @NativeName: Script_SetOneHandedWeaponUsageOff
* @NativeFunctionAddress 0000000140E70A60
*/

void function SetOneHandedWeaponUsageOff()

/*
* @Breif Set the skycamera entity that this player should use.
* @Pramas entity
* @NativeName: Script_SetSkyCamera
* @NativeFunctionAddress 0000000140E709E0
*/

void function SetSkyCamera(entity)

/*
* @Breif Set if boost should be activated
* @Pramas bool
* @NativeName: Script_SetActivateBoost
* @NativeFunctionAddress 0000000140E70950
*/

void function SetActivateBoost(bool)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetBoostMeter
* @NativeFunctionAddress 0000000140E708E0
*/

void function SetBoostMeter(float)

/*
* @Breif 
* @Pramas vector
* @NativeName: Script_CanUseJetpack
* @NativeFunctionAddress 0000000140E70870
*/

bool function CanUseJetpack(vector)

/*
* @Breif Set if jetpack should be activated
* @Pramas bool
* @NativeName: Script_SetActivateJetpack
* @NativeFunctionAddress 0000000140E707E0
*/

void function SetActivateJetpack(bool)

/*
* @Breif Sets an entity that should be time-aligned with the player
* @Pramas entity
* @NativeName: Script_SetSyncedEntity
* @NativeFunctionAddress 0000000140E70760
*/

void function SetSyncedEntity(entity)

/*
* @Breif Gets the entity that should be time-aligned with the player
* @Pramas 
* @NativeName: Script_GetSyncedEntity
* @NativeFunctionAddress 0000000140E706D0
*/

entity function GetSyncedEntity()

/*
* @Breif Gets the player's replay delay
* @Pramas 
* @NativeName: GetReplayDelay
* @NativeFunctionAddress 0000000140E70600
*/

float function GetReplayDelay()

/*
* @Breif Returns true if the local client is watching a kill replay.
* @Pramas 
* @NativeName: IsWatchingKillReplay
* @NativeFunctionAddress 0000000140E705A0
*/

bool function IsWatchingKillReplay()

/*
* @Breif Returns true if the local client is watching a spectator replay.
* @Pramas 
* @NativeName: IsWatchingSpecReplay
* @NativeFunctionAddress 0000000140E70540
*/

bool function IsWatchingSpecReplay()

/*
* @Breif Sets the player's delay for kill replay (starts/ends kill replay)
* @Pramas float delay, bool forceThirdPerson
* @NativeName: SetKillReplayDelay
* @NativeFunctionAddress 0000000140E704C0
*/

void function SetKillReplayDelay(float delay, bool forceThirdPerson)

/*
* @Breif Sets the player's delay for 1st person spectator (starts/ends spectator replay)
* @Pramas float
* @NativeName: SetSpecReplayDelay
* @NativeFunctionAddress 0000000140E70450
*/

void function SetSpecReplayDelay(float)

/*
* @Breif Clear's the player's delay for replay, whether kill or spectator
* @Pramas 
* @NativeName: ClearReplayDelay
* @NativeFunctionAddress 0000000140E703F0
*/

void function ClearReplayDelay()

/*
* @Breif Who was killed. Used for non-player killers, to aim the camera toward the victim. It is cleared automatically by code when a replay ends (when replay delay is set to 0).
* @Pramas entity
* @NativeName: SetKillReplayVictim
* @NativeFunctionAddress 0000000140E70330
*/

void function SetKillReplayVictim(entity)

/*
* @Breif 
* @Pramas int encodedEHandle
* @NativeName: Script_SetKillReplayInflictorEHandle
* @NativeFunctionAddress 0000000140E702B0
*/

void function SetKillReplayInflictorEHandle(int encodedEHandle)

/*
* @Breif Sets a bool that is sent to the client. Call after calling SetKillReplayDelay(). The value clears to false on start/end of any replay. Read on the client with IsReplayRoundWinning(). 
* @Pramas bool
* @NativeName: SetIsReplayRoundWinning
* @NativeFunctionAddress 0000000140E70250
*/

void function SetIsReplayRoundWinning(bool)

/*
* @Breif Allow enabling and disable prediction...useful for death cam.
* @Pramas bool
* @NativeName: SetPredictionEnabled
* @NativeFunctionAddress 0000000140E701C0
*/

void function SetPredictionEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetUID
* @NativeFunctionAddress 0000000140E70120
*/

string function GetUID()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlatformUID
* @NativeFunctionAddress 0000000140E6FFF0
*/

string function GetPlatformUID()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardware
* @NativeFunctionAddress 0000000140E6FF60
*/

string function GetHardware()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSkill
* @NativeFunctionAddress 0000000140E6FEB0
*/

float function GetSkill()

/*
* @Breif Get debug flags that clients have set on themselves.
* @Pramas 
* @NativeName: Script_GetMMDbgFlags
* @NativeFunctionAddress 0000000140E6FDF0
*/

int function GetMMDbgFlags()

/*
* @Breif Gets the duration of the most recent network round trip to the player
* @Pramas 
* @NativeName: Script_GetLatency
* @NativeFunctionAddress 0000000140E6FD20
*/

float function GetLatency()

/*
* @Breif Gets the average latency of the player's connection
* @Pramas 
* @NativeName: Script_GetGameAverageLatency
* @NativeFunctionAddress 0000000140E6FC40
*/

float function GetGameAverageLatency()

/*
* @Breif Gets the maximum latency of the player's connection
* @Pramas 
* @NativeName: Script_GetGameMaxLatency
* @NativeFunctionAddress 0000000140E6FB60
*/

float function GetGameMaxLatency()

/*
* @Breif Gets the fraction of packets the player has dropped
* @Pramas 
* @NativeName: Script_GetGamePacketLoss
* @NativeFunctionAddress 0000000140E6FA90
*/

float function GetGamePacketLoss()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanBuildTime
* @NativeFunctionAddress 0000000140E6F9E0
*/

float function GetTitanBuildTime()

/*
* @Breif 
* @Pramas float
* @NativeName: SetTitanBuildTime
* @NativeFunctionAddress 0000000140E6F930
*/

void function SetTitanBuildTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanBubbleShieldTime
* @NativeFunctionAddress 0000000140E6F880
*/

float function GetTitanBubbleShieldTime()

/*
* @Breif 
* @Pramas float
* @NativeName: SetTitanBubbleShieldTime
* @NativeFunctionAddress 0000000140E6F7D0
*/

void function SetTitanBubbleShieldTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetCinematicEventFlags
* @NativeFunctionAddress 0000000140E6F720
*/

int function GetCinematicEventFlags()

/*
* @Breif 
* @Pramas int
* @NativeName: SetCinematicEventFlags
* @NativeFunctionAddress 0000000140E6F680
*/

void function SetCinematicEventFlags(int)

/*
* @Breif 
* @Pramas int
* @NativeName: GivePassive
* @NativeFunctionAddress 0000000140E6F610
*/

void function GivePassive(int)

/*
* @Breif 
* @Pramas int
* @NativeName: RemovePassive
* @NativeFunctionAddress 0000000140E6F5A0
*/

void function RemovePassive(int)

/*
* @Breif 
* @Pramas int
* @NativeName: HasPassive
* @NativeFunctionAddress 0000000140E6F4E0
*/

bool function HasPassive(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetForcedDialogueOnly
* @NativeFunctionAddress 0000000140E6F480
*/

bool function GetForcedDialogueOnly()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetForcedDialogueOnly
* @NativeFunctionAddress 0000000140E6F3F0
*/

void function SetForcedDialogueOnly(bool)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetTitanEmbarkEnabled
* @NativeFunctionAddress 0000000140E6F360
*/

void function SetTitanEmbarkEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanEmbarkEnabled
* @NativeFunctionAddress 0000000140E6F300
*/

bool function GetTitanEmbarkEnabled()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetTitanDisembarkEnabled
* @NativeFunctionAddress 0000000140E6F270
*/

void function SetTitanDisembarkEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanDisembarkEnabled
* @NativeFunctionAddress 0000000140E6F210
*/

bool function GetTitanDisembarkEnabled()

/*
* @Breif Set index that client script can use for objective info
* @Pramas int
* @NativeName: SetObjectiveIndex
* @NativeFunctionAddress 0000000140E6F170
*/

void function SetObjectiveIndex(int)

/*
* @Breif Set entity that client script can use for objectives
* @Pramas entity
* @NativeName: SetObjectiveEntity
* @NativeFunctionAddress 0000000140E6F0F0
*/

void function SetObjectiveEntity(entity)

/*
* @Breif Set time when the object will expire
* @Pramas float
* @NativeName: SetObjectiveEndTime
* @NativeFunctionAddress 0000000140E6F040
*/

void function SetObjectiveEndTime(float)

/*
* @Breif Get index that client script can use for objective info
* @Pramas 
* @NativeName: GetObjectiveIndex
* @NativeFunctionAddress 0000000140E6EF90
*/

int function GetObjectiveIndex()

/*
* @Breif Get entity that client script can use for objectives
* @Pramas 
* @NativeName: GetObjectiveEntity
* @NativeFunctionAddress 0000000140E6EF00
*/

entity function GetObjectiveEntity()

/*
* @Breif Get time when the object will expire
* @Pramas 
* @NativeName: GetObjectiveEndTime
* @NativeFunctionAddress 0000000140E6EE50
*/

float function GetObjectiveEndTime()

/*
* @Breif Set index that client script can use for voice pack info
* @Pramas int
* @NativeName: SetVoicePackIndex
* @NativeFunctionAddress 0000000140E6EDB0
*/

void function SetVoicePackIndex(int)

/*
* @Breif Get index that client script can use for voice pack info
* @Pramas 
* @NativeName: GetVoicePackIndex
* @NativeFunctionAddress 0000000140E6ED00
*/

int function GetVoicePackIndex()

/*
* @Breif Call when XP changes to refresh code XP value
* @Pramas 
* @NativeName: Script_XPChanged
* @NativeFunctionAddress 0000000140E6ECB0
*/

void function XPChanged()

/*
* @Breif Call when generation changes to refresh code GEN value
* @Pramas 
* @NativeName: Script_GenChanged
* @NativeFunctionAddress 0000000140E6EC10
*/

void function GenChanged()

/*
* @Breif Call when rank-related persistence variables are changed
* @Pramas 
* @NativeName: Script_RankedChanged
* @NativeFunctionAddress 0000000140E6EBC0
*/

void function RankedChanged()

/*
* @Breif Gets the player's XP rate
* @Pramas 
* @NativeName: GetXPRate
* @NativeFunctionAddress 0000000140E6EB10
*/

float function GetXPRate()

/*
* @Breif Adds XP to player
* @Pramas int, int
* @NativeName: AddXP
* @NativeFunctionAddress 0000000140E6EA90
*/

void function AddXP(int, int)

/*
* @Breif Gets the player's XP
* @Pramas 
* @NativeName: GetXP
* @NativeFunctionAddress 0000000140E6E9E0
*/

int function GetXP()

/*
* @Breif Gets the player's Level
* @Pramas 
* @NativeName: GetLevel
* @NativeFunctionAddress 0000000140E6E930
*/

int function GetLevel()

/*
* @Breif Gets the player's generation
* @Pramas 
* @NativeName: GetGen
* @NativeFunctionAddress 0000000140E6E880
*/

int function GetGen()

/*
* @Breif Gets the player's rank
* @Pramas 
* @NativeName: GetRank
* @NativeFunctionAddress 0000000140E6E7D0
*/

int function GetRank()

/*
* @Breif Find out if the player is playing in ranked mode
* @Pramas 
* @NativeName: IsPlayingRanked
* @NativeFunctionAddress 0000000140E6E770
*/

bool function IsPlayingRanked()

/*
* @Breif Gets the player's current community name
* @Pramas 
* @NativeName: GetCommunityName
* @NativeFunctionAddress 0000000140E6E6E0
*/

string function GetCommunityName()

/*
* @Breif Gets the player's current community clan tag
* @Pramas 
* @NativeName: GetCommunityClanTag
* @NativeFunctionAddress 0000000140E6E650
*/

string function GetCommunityClanTag()

/*
* @Breif Gets the player's current community id
* @Pramas 
* @NativeName: GetCommunityId
* @NativeFunctionAddress 0000000140E6E5A0
*/

int function GetCommunityId()

/*
* @Breif Gets the player's faction
* @Pramas 
* @NativeName: GetFaction
* @NativeFunctionAddress 0000000140E6E510
*/

string function GetFaction()

/*
* @Breif Marks the player as active to prevent being kicked for no activity
* @Pramas 
* @NativeName: ResetIdleTimer
* @NativeFunctionAddress 0000000140E6E4A0
*/

void function ResetIdleTimer()

/*
* @Breif Returns true if this player has a bad reputation
* @Pramas 
* @NativeName: HasBadReputation
* @NativeFunctionAddress 0000000140E6E440
*/

bool function HasBadReputation()

/*
* @Breif Returns true if this player has a Twitch Prime reward
* @Pramas string
* @NativeName: DoesUserHaveTwitchPrimeReward
* @NativeFunctionAddress 0000000140E6E3B0
*/

bool function DoesUserHaveTwitchPrimeReward(string)

/*
* @Breif Go tell Twitch that this user has received their reward
* @Pramas string
* @NativeName: UserWasGivenTwitchPrimeReward
* @NativeFunctionAddress 0000000140D1E660
*/

void function UserWasGivenTwitchPrimeReward(string)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_TrueTeamSwitch
* @NativeFunctionAddress 0000000140E6E330
*/

void function TrueTeamSwitch()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetIdleTime
* @NativeFunctionAddress 0000000140E6E270
*/

float function GetIdleTime()

/*
* @Breif Gets the time since we first heard from this player this game. Real time; not affected by timescale.
* @Pramas 
* @NativeName: Script_GetTimeSinceLoadStart
* @NativeFunctionAddress 0000000140E6E180
*/

float function GetTimeSinceLoadStart()

/*
* @Breif Returns the view height when standing
* @Pramas 
* @NativeName: GetStandingViewHeight
* @NativeFunctionAddress 0000000140E6E0C0
*/

float function GetStandingViewHeight()

/*
* @Breif Returns the view height when crouching
* @Pramas 
* @NativeName: GetCrouchingViewHeight
* @NativeFunctionAddress 0000000140E6E000
*/

float function GetCrouchingViewHeight()

/*
* @Breif Returns the min hull vector when standing
* @Pramas 
* @NativeName: GetStandingHullMin
* @NativeFunctionAddress 0000000140E6DFA0
*/

vector function GetStandingHullMin()

/*
* @Breif Returns the max hull vector when standing
* @Pramas 
* @NativeName: GetStandingHullMax
* @NativeFunctionAddress 0000000140E6DF40
*/

vector function GetStandingHullMax()

/*
* @Breif Returns the min hull vector when crouching
* @Pramas 
* @NativeName: GetCrouchingHullMin
* @NativeFunctionAddress 0000000140E6DEE0
*/

vector function GetCrouchingHullMin()

/*
* @Breif Returns the max hull vector when crouching
* @Pramas 
* @NativeName: GetCrouchingHullMax
* @NativeFunctionAddress 0000000140E6DE80
*/

vector function GetCrouchingHullMax()

/*
* @Breif Forces the player to crouch
* @Pramas 
* @NativeName: ForceCrouch
* @NativeFunctionAddress 0000000140E6DE00
*/

void function ForceCrouch()

/*
* @Breif Lets the player stand again
* @Pramas 
* @NativeName: UnforceCrouch
* @NativeFunctionAddress 0000000140E6DD70
*/

void function UnforceCrouch()

/*
* @Breif Forces the player to crouch and slide
* @Pramas 
* @NativeName: ForceSlide
* @NativeFunctionAddress 0000000140E6DCF0
*/

void function ForceSlide()

/*
* @Breif Lets the player stand again
* @Pramas 
* @NativeName: UnforceSlide
* @NativeFunctionAddress 0000000140E6DC60
*/

void function UnforceSlide()

/*
* @Breif Blocks the player from crouching
* @Pramas 
* @NativeName: ForceStand
* @NativeFunctionAddress 0000000140E6DBE0
*/

void function ForceStand()

/*
* @Breif Lets the player crouch again
* @Pramas 
* @NativeName: UnforceStand
* @NativeFunctionAddress 0000000140E6DB50
*/

void function UnforceStand()

/*
* @Breif Returns if the player is standing.
* @Pramas 
* @NativeName: IsStanding
* @NativeFunctionAddress 0000000140E6DAE0
*/

bool function IsStanding()

/*
* @Breif Returns if the player is crouched.
* @Pramas 
* @NativeName: IsCrouched
* @NativeFunctionAddress 0000000140E6DA70
*/

bool function IsCrouched()

/*
* @Breif Returns true if the player is already standing or has space to stand
* @Pramas 
* @NativeName: CanStand
* @NativeFunctionAddress 0000000140E6D9E0
*/

bool function CanStand()

/*
* @Breif Returns true if this player is a bot
* @Pramas 
* @NativeName: IsBot
* @NativeFunctionAddress 0000000140E6D970
*/

bool function IsBot()

/*
* @Breif Returns true if this player is a a bot created to play back a recording from 'bot_record'
* @Pramas 
* @NativeName: IsPlayback
* @NativeFunctionAddress 0000000140E6D900
*/

bool function IsPlayback()

/*
* @Breif Plays the named activity animation as a gesture
* @Pramas string, float, float, float
* @NativeName: Anim_PlayGesture
* @NativeFunctionAddress 0000000140E6D850
*/

void function Anim_PlayGesture(string, float, float, float)

/*
* @Breif Stop gesture from playing
* @Pramas float
* @NativeName: Anim_StopGesture
* @NativeFunctionAddress 0000000140E6D7D0
*/

void function Anim_StopGesture(float)

/*
* @Breif Toggles grapple
* @Pramas vector
* @NativeName: Grapple
* @NativeFunctionAddress 0000000140E6D760
*/

bool function Grapple(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: GrappleDetach
* @NativeFunctionAddress 0000000140E6D710
*/

void function GrappleDetach()

/*
* @Breif Checks if grapple hook is deployed (not necesssarily attached).
* @Pramas 
* @NativeName: IsGrappleActive
* @NativeFunctionAddress 0000000140E6D6B0
*/

bool function IsGrappleActive()

/*
* @Breif Checks if grapple hook is attached (not necessarily pulling yet).
* @Pramas 
* @NativeName: IsGrappleAttached
* @NativeFunctionAddress 0000000140E6D620
*/

bool function IsGrappleAttached()

/*
* @Breif Checks if grapple hook is pulling the player.
* @Pramas 
* @NativeName: IsGrapplePulling
* @NativeFunctionAddress 0000000140E6D590
*/

bool function IsGrapplePulling()

/*
* @Breif 
* @Pramas 
* @NativeName: IsGrapplingZipline
* @NativeFunctionAddress 0000000140E6D530
*/

bool function IsGrapplingZipline()

/*
* @Breif Gets the grapple hook entity for this player.
* @Pramas 
* @NativeName: Script_GetGrappleHook
* @NativeFunctionAddress 0000000140E6D4A0
*/

entity function GetGrappleHook()

/*
* @Breif Make grapple seek out this target when it is fired
* @Pramas entity
* @NativeName: SetGrappleAutoAimTarget
* @NativeFunctionAddress 0000000140E6D420
*/

void function SetGrappleAutoAimTarget(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetGrappleAutoAimTarget
* @NativeFunctionAddress 0000000140E6D390
*/

entity function GetGrappleAutoAimTarget()

/*
* @Breif Get the players pilot class index.
* @Pramas 
* @NativeName: GetPilotClassIndex
* @NativeFunctionAddress 0000000140E6D2E0
*/

int function GetPilotClassIndex()

/*
* @Breif Set the players pilot class index.
* @Pramas int
* @NativeName: SetPilotClassIndex
* @NativeFunctionAddress 0000000140E6D240
*/

void function SetPilotClassIndex(int)

/*
* @Breif Returns true if the player is currently boosting
* @Pramas 
* @NativeName: IsBoosting
* @NativeFunctionAddress 0000000140E6D1E0
*/

bool function IsBoosting()

/*
* @Breif Returns true if the player is currently using the jetpack
* @Pramas 
* @NativeName: IsJetpack
* @NativeFunctionAddress 0000000140E6D180
*/

bool function IsJetpack()

/*
* @Breif Returns true if the player is currently gliding
* @Pramas 
* @NativeName: IsGliding
* @NativeFunctionAddress 0000000140E6D120
*/

bool function IsGliding()

/*
* @Breif Returns current glide meter value
* @Pramas 
* @NativeName: GetGlideMeter
* @NativeFunctionAddress 0000000140E6D070
*/

float function GetGlideMeter()

/*
* @Breif Returns true if the player is currently hovering
* @Pramas 
* @NativeName: IsHovering
* @NativeFunctionAddress 0000000140E6D010
*/

bool function IsHovering()

/*
* @Breif Returns true if the player can hover
* @Pramas 
* @NativeName: IsHoverEnabled
* @NativeFunctionAddress 0000000140E6CFA0
*/

bool function IsHoverEnabled()

/*
* @Breif Returns true if the player is in air slowmo
* @Pramas 
* @NativeName: IsInAirSlowMo
* @NativeFunctionAddress 0000000140E6CF30
*/

bool function IsInAirSlowMo()

/*
* @Breif Get a titan available for smart targetting type uses.
* @Pramas bool, float, float
* @NativeName: Script_GetTitanTarget
* @NativeFunctionAddress 0000000140E6CE90
*/

entity function GetTitanTarget(bool, float, float)

/*
* @Breif Returns if movement callbacks are being dispatched for the player.
* @Pramas 
* @NativeName: GetSendMovementCallbacks
* @NativeFunctionAddress 0000000140E6CE30
*/

bool function GetSendMovementCallbacks()

/*
* @Breif Sets if movement callbacks are being dispatched for the player.
* @Pramas bool
* @NativeName: SetSendMovementCallbacks
* @NativeFunctionAddress 0000000140E6CDD0
*/

void function SetSendMovementCallbacks(bool)

/*
* @Breif Returns if input callbacks are being dispatched for the player.
* @Pramas 
* @NativeName: GetSendInputCallbacks
* @NativeFunctionAddress 0000000140E6CD70
*/

bool function GetSendInputCallbacks()

/*
* @Breif Sets if input callbacks are being dispatched for the player.
* @Pramas bool
* @NativeName: SetSendInputCallbacks
* @NativeFunctionAddress 0000000140E6CD10
*/

void function SetSendInputCallbacks(bool)

/*
* @Breif Indicates if the specified input command is being pressed. May be inaccurate as the server does not update as often as the client.
* @Pramas int
* @NativeName: IsInputCommandHeld
* @NativeFunctionAddress 0000000140E6CC90
*/

bool function IsInputCommandHeld(int)

/*
* @Breif Indicates if the specified input command was pressed this frame. May be inaccurate as the server does not update as often as the client.
* @Pramas int
* @NativeName: IsInputCommandPressed
* @NativeFunctionAddress 0000000140E6CC10
*/

bool function IsInputCommandPressed(int)

/*
* @Breif Indicates if the specified input command was released this frame. May be inaccurate as the server does not update as often as the client.
* @Pramas int
* @NativeName: IsInputCommandReleased
* @NativeFunctionAddress 0000000140E6CB90
*/

bool function IsInputCommandReleased(int)

/*
* @Breif Gets the amount the left stick or WASD keys are pressed forward between -1 to 1.
* @Pramas 
* @NativeName: ScriptGetInputAxisForward
* @NativeFunctionAddress 0000000140E6CAC0
*/

float function GetInputAxisForward()

/*
* @Breif Gets the amount the left stick or WASD keys are pressed right between -1 to 1.
* @Pramas 
* @NativeName: ScriptGetInputAxisRight
* @NativeFunctionAddress 0000000140E6C9F0
*/

float function GetInputAxisRight()

/*
* @Breif Begins recording the player's animation for playback later.
* @Pramas vector, vector
* @NativeName: Script_StartRecordingAnimation
* @NativeFunctionAddress 0000000140E6C940
*/

void function StartRecordingAnimation(vector, vector)

/*
* @Breif Gets the ground friction scale for the player.
* @Pramas 
* @NativeName: GetGroundFrictionScale
* @NativeFunctionAddress 0000000140E6C890
*/

float function GetGroundFrictionScale()

/*
* @Breif Sets the ground friction scale for the player. Default is 1.0.
* @Pramas float
* @NativeName: SetGroundFrictionScale
* @NativeFunctionAddress 0000000140E6C7E0
*/

void function SetGroundFrictionScale(float)

/*
* @Breif Gets the wallrun friction scale for the player.
* @Pramas 
* @NativeName: GetWallrunFrictionScale
* @NativeFunctionAddress 0000000140E6C730
*/

float function GetWallrunFrictionScale()

/*
* @Breif Sets the wallrun friction scale for the player. Default is 1.0.
* @Pramas float
* @NativeName: SetWallrunFrictionScale
* @NativeFunctionAddress 0000000140E6C680
*/

void function SetWallrunFrictionScale(float)

/*
* @Breif Player eye angles remain independent of their move parent's angles.
* @Pramas 
* @NativeName: EnableWorldSpacePlayerEyeAngles
* @NativeFunctionAddress 0000000140E6C630
*/

void function EnableWorldSpacePlayerEyeAngles()

/*
* @Breif Player eye angles are based off their move parent's angles.
* @Pramas 
* @NativeName: DisableWorldSpacePlayerEyeAngles
* @NativeFunctionAddress 0000000140E6C5E0
*/

void function DisableWorldSpacePlayerEyeAngles()

/*
* @Breif Returns true if the player eye angles are independent of their move parent's angles.
* @Pramas 
* @NativeName: IsWorldSpacePlayerEyeAngles
* @NativeFunctionAddress 0000000140E6C580
*/

bool function IsWorldSpacePlayerEyeAngles()

/*
* @Breif Sets the calling card of the current player on stryder
* @Pramas int
* @NativeName: SetCallingCard
* @NativeFunctionAddress 0000000140E6C4E0
*/

void function SetCallingCard(int)

/*
* @Breif Sets the calling card of the current player on stryder
* @Pramas int
* @NativeName: SetCallSign
* @NativeFunctionAddress 0000000140E6C440
*/

void function SetCallSign(int)

/*
* @Breif Sets the calling card of the current player on stryder
* @Pramas int
* @NativeName: SetCallSignStyle
* @NativeFunctionAddress 0000000140E6C3A0
*/

void function SetCallSignStyle(int)

/*
* @Breif Sets a bool network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, bool
* @NativeName: Script_SetPlayerNetBool
* @NativeFunctionAddress 0000000140E6C330
*/

void function SetPlayerNetBool(string, bool)

/*
* @Breif Sets an int network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, int
* @NativeName: Script_SetPlayerNetInt
* @NativeFunctionAddress 0000000140E6C2B0
*/

void function SetPlayerNetInt(string, int)

/*
* @Breif Sets a float network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetPlayerNetFloat
* @NativeFunctionAddress 0000000140E6C230
*/

void function SetPlayerNetFloat(string, float)

/*
* @Breif Changes a float network variable on the player gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)
* @Pramas string, float, float
* @NativeName: Script_SetPlayerNetFloatOverTime
* @NativeFunctionAddress 0000000140E6C1A0
*/

void function SetPlayerNetFloatOverTime(string, float, float)

/*
* @Breif Sets a time (float) network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, float
* @NativeName: Script_SetPlayerNetTime
* @NativeFunctionAddress 0000000140E6C120
*/

void function SetPlayerNetTime(string, float)

/*
* @Breif Sets an entity network variable on the player (see RegisterNetworkedVariable)
* @Pramas string, entity
* @NativeName: Script_SetPlayerNetEnt
* @NativeFunctionAddress 0000000140E6C0A0
*/

void function SetPlayerNetEnt(string, entity)

/*
* @Breif Gets a bool network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetBool
* @NativeFunctionAddress 0000000140E6C030
*/

bool function GetPlayerNetBool(string)

/*
* @Breif Gets an int network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetInt
* @NativeFunctionAddress 0000000140E6BF70
*/

int function GetPlayerNetInt(string)

/*
* @Breif Gets a float network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetFloat
* @NativeFunctionAddress 0000000140E6BEB0
*/

float function GetPlayerNetFloat(string)

/*
* @Breif Gets a time (float) network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetTime
* @NativeFunctionAddress 0000000140E6BDF0
*/

float function GetPlayerNetTime(string)

/*
* @Breif Gets an entity network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetEnt
* @NativeFunctionAddress 0000000140E6BD80
*/

entity function GetPlayerNetEnt(string)

/*
* @Breif ( duration ). Requests CodeCallback_PlayerHasBeenConnectedForDuration() to be called once duration has elapsed since fully connected, or immediately if that amount of time has already elapsed. If there was a previous request that had not yet called the callback, this call will cancel the previous request and set up a new one.
* @Pramas float
* @NativeName: RequestCallbackWhenPlayerHasBeenConnectedForDuration
* @NativeFunctionAddress 0000000140E6BD00
*/

void function RequestCallbackWhenPlayerHasBeenConnectedForDuration(float)

/*
* @Breif Returns eye direction of the 3p player
* @Pramas 
* @NativeName: Player_GetWorldViewAngles
* @NativeFunctionAddress 0000000140E6BC30
*/

vector function Player_GetWorldViewAngles()

/*
* @Breif Forces the autosprint setting to "on"
* @Pramas 
* @NativeName: ForceAutoSprintOn
* @NativeFunctionAddress 0000000140E6BBA0
*/

void function ForceAutoSprintOn()

/*
* @Breif Forces the autosprint setting to "off"
* @Pramas 
* @NativeName: ForceAutoSprintOff
* @NativeFunctionAddress 0000000140E6BB10
*/

void function ForceAutoSprintOff()

/*
* @Breif Returns to user-specified autosprint setting
* @Pramas 
* @NativeName: UnforceAutoSprint
* @NativeFunctionAddress 0000000140E6BA80
*/

void function UnforceAutoSprint()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINNucleusId
* @NativeFunctionAddress 0000000140E6B9D0
*/

string function GetPINNucleusId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINNucleusPid
* @NativeFunctionAddress 0000000140E6B920
*/

string function GetPINNucleusPid()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINSessionId
* @NativeFunctionAddress 0000000140E6B870
*/

string function GetPINSessionId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINPlatformId
* @NativeFunctionAddress 0000000140E6B7C0
*/

string function GetPINPlatformId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerPINPlatformName
* @NativeFunctionAddress 0000000140E6B6E0
*/

string function GetPlayerPINPlatformName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerPINTitleId
* @NativeFunctionAddress 0000000140E6B600
*/

string function GetPlayerPINTitleId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetMinDatacenterPacketLoss
* @NativeFunctionAddress 0000000140E6B550
*/

string function GetMinDatacenterPacketLoss()

/*
* @Breif 
* @Pramas 
* @NativeName: IsConnectionWiFi
* @NativeFunctionAddress 0000000140E6B4A0
*/

int function IsConnectionWiFi()

/*
* @Breif Gets the player's IP address as a string
* @Pramas 
* @NativeName: Script_GetIPString
* @NativeFunctionAddress 0000000140E6B3F0
*/

string function GetIPString()

/*
* @Breif Gets the player's ideal data center according to ping tests
* @Pramas 
* @NativeName: Script_GetIdealDataCenter
* @NativeFunctionAddress 0000000140E6B340
*/

string function GetIdealDataCenter()

/*
* @Breif Gets the player's prefered data center
* @Pramas 
* @NativeName: Script_GetPreferredDataCenter
* @NativeFunctionAddress 0000000140E6B290
*/

string function GetPreferredDataCenter()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPDifficulty
* @NativeFunctionAddress 0000000140E6B1B0
*/

int function GetSPDifficulty()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPStartPoint
* @NativeFunctionAddress 0000000140E6B0D0
*/

int function GetSPStartPoint()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPLastMission
* @NativeFunctionAddress 0000000140E6AFF0
*/

int function GetSPLastMission()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPUnlockedMission
* @NativeFunctionAddress 0000000140E6AF10
*/

int function GetSPUnlockedMission()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPHighestDifficultyCompleted
* @NativeFunctionAddress 0000000140E6AE70
*/

int function GetSPHighestDifficultyCompleted()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPTitanLoadoutsUsed
* @NativeFunctionAddress 0000000140E6AD90
*/

int function GetSPTitanLoadoutsUsed()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPTitanLoadoutsSelected
* @NativeFunctionAddress 0000000140E6ACB0
*/

int function GetSPTitanLoadoutsSelected()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSPTitanLoadoutCurrent
* @NativeFunctionAddress 0000000140E6ABD0
*/

int function GetSPTitanLoadoutCurrent()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalGravityDirection
* @NativeFunctionAddress 0000000140E6AB20
*/

vector function GetLocalGravityDirection()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalGravityStrength
* @NativeFunctionAddress 0000000140E6AA70
*/

float function GetLocalGravityStrength()

/*
* @Breif Gets the scale of the minimap (for this player only)
* @Pramas 
* @NativeName: Script_GetMinimapZoomScale
* @NativeFunctionAddress 0000000140E6A9C0
*/

float function GetMinimapZoomScale()

/*
* @Breif Takes target scale and amount of time to lerp between old scale and new scale. Pass 0 as lerp time to instantly snap minimap zoom
* @Pramas float, float
* @NativeName: Script_SetMinimapZoomScale
* @NativeFunctionAddress 0000000140E6A930
*/

void function SetMinimapZoomScale(float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrappleWeapon
* @NativeFunctionAddress 0000000140E6A8D0
*/

entity function GetGrappleWeapon()

/*
* @Breif Gets the armor type
* @Pramas 
* @NativeName: Script_GetSurvivalArmorType
* @NativeFunctionAddress 0000000140E6A820
*/

int function GetSurvivalArmorType()

/*
* @Breif Gets the helmet type
* @Pramas 
* @NativeName: Script_GetSurvivalHelmetType
* @NativeFunctionAddress 0000000140E6A770
*/

int function GetSurvivalHelmetType()

/*
* @Breif Sets the armor type
* @Pramas int
* @NativeName: Script_SetSurvivalArmorType
* @NativeFunctionAddress 0000000140E6A6D0
*/

void function SetSurvivalArmorType(int)

/*
* @Breif Sets the helmet type
* @Pramas int
* @NativeName: Script_SetSurvivalHelmetType
* @NativeFunctionAddress 0000000140E6A630
*/

void function SetSurvivalHelmetType(int)

/*
* @Breif Force reload of the currently equipped weapon.
* @Pramas 
* @NativeName: Script_ForceWeaponReload
* @NativeFunctionAddress 0000000140E6A5D0
*/

void function ForceWeaponReload()

/*
* @Breif Returns the last main weapon slot that the player had cycled to.
* @Pramas 
* @NativeName: Script_GetLastCycleSlot
* @NativeFunctionAddress 0000000140E6A520
*/

int function GetLastCycleSlot()

/*
* @Breif 
* @Pramas vector, float
* @NativeName: KnockBack
* @NativeFunctionAddress 0000000140E6A4B0
*/

void function KnockBack(vector, float)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptEnablePrediction
* @NativeFunctionAddress 0000000140E6A420
*/

void function EnablePrediction()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptDisablePrediction
* @NativeFunctionAddress 0000000140E6A390
*/

void function DisablePrediction()

/*
* @Breif 
* @Pramas entity, int
* @NativeName: Zipline_SetBeginStation
* @NativeFunctionAddress 0000000140E6A300
*/

void function Zipline_SetBeginStation(entity, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_GetBeginStation
* @NativeFunctionAddress 0000000140E6A270
*/

entity function Zipline_GetBeginStation()

/*
* @Breif  Set override for player arms model to be used instead of the value from player settings. Set to "" to use the model from player settings. 
* @Pramas asset armsModel
* @NativeName: SetArmsModelOverride
* @NativeFunctionAddress 0000000140E6A210
*/

void function SetArmsModelOverride(asset armsModel)

/*
* @Breif  Set override for player body model to be used instead of the value from player settings. Set to "" to use the model from player settings. 
* @Pramas asset bodyModel
* @NativeName: SetBodyModelOverride
* @NativeFunctionAddress 0000000140E6A1B0
*/

void function SetBodyModelOverride(asset bodyModel)

/*
* @Breif Forces a bot player to activate an input (such as IN_ATTACK).
* @Pramas int
* @NativeName: Script_BotButtonPress
* @NativeFunctionAddress 0000000140D1E660
*/

void function BotButtonPress(int)

/*
* @Breif Deactivates a forced bot input (such as IN_ATTACK).
* @Pramas int
* @NativeName: Script_BotButtonRelease
* @NativeFunctionAddress 0000000140D1E660
*/

void function BotButtonRelease(int)

/*
* @Breif Create a weapon of the given classname, and optionally apply active mods or disable first deploy animation.
* @Pramas string weaponname, int inventorySlot, array< string > mods = null, bool doFirstDeploy = true
* @NativeName: Script_GiveWeapon_NoDeploy
* @NativeFunctionAddress 0000000140E5C120
*/

var function GiveWeapon_NoDeploy()

/*
* @Breif Get the mod inventory.
* @Pramas 
* @NativeName: Script_ModInventory_Get
* @NativeFunctionAddress 0000000140E5C270
*/

var function ModInventory_Get()

/*
* @Breif Sets the mod inventory.
* @Pramas array< ModInventoryItem >
* @NativeName: Script_ModInventory_Set
* @NativeFunctionAddress 0000000140E5C2C0
*/

var function ModInventory_Set()

/*
* @Breif Get the consumable inventory.
* @Pramas 
* @NativeName: Script_ConsumableInventory_Get
* @NativeFunctionAddress 0000000140E5C310
*/

var function ConsumableInventory_Get()

/*
* @Breif Sets the consumable inventory.
* @Pramas array< ConsumableInventoryItem >
* @NativeName: Script_ConsumableInventory_Set
* @NativeFunctionAddress 0000000140E5C360
*/

var function ConsumableInventory_Set()

/*
* @Breif Sets the name of the attachment the camera will follow instead of the default ("CAMERA")
* @Pramas array < string >
* @NativeName: Script_AnimViewEntity_SetThirdPersonCameraAttachments
* @NativeFunctionAddress 0000000140E5C3B0
*/

var function AnimViewEntity_SetThirdPersonCameraAttachments()

/*
* @Breif Sets the current player's character and char data so that it is visible to others
* @Pramas int, array< int >
* @NativeName: SetPlayerCharData
* @NativeFunctionAddress 0000000140E5C6E0
*/

var function SetPlayerCharData()

/*
* @Breif Sets the class of the player with given mods applied
* @Pramas asset settingsAsset, array< string > mods
* @NativeName: SetPlayerSettingsWithMods_Script
* @NativeFunctionAddress 0000000140E5C730
*/

var function SetPlayerSettingsWithMods()

/*
* @Breif Get an array of mods active on this player
* @Pramas 
* @NativeName: GetPlayerSettingsMods_Script
* @NativeFunctionAddress 0000000140E5C780
*/

var function GetPlayerSettingsMods()

/*
* @Breif Gets the player's player settings as a settings block for calls into GetSettingsBlockInt/Float/etc
* @Pramas 
* @NativeName: GetPlayerSettingsBlock
* @NativeFunctionAddress 0000000140E5C7D0
*/

var function GetPlayerSettingsBlock()

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: GetPersistentVar
* @NativeFunctionAddress 0000000140E5C8D0
*/

var function GetPersistentVar(var, string)

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: GetPersistentVarAsInt
* @NativeFunctionAddress 0000000140E5C930
*/

int function GetPersistentVarAsInt(var, string)

/*
* @Breif 
* @Pramas "variableName", newVal
* @NativeName: SetPersistentVar
* @NativeFunctionAddress 0000000140E5C980
*/

void function SetPersistentVar(var, string, var)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetExtraWeaponMods
* @NativeFunctionAddress 0000000140E5C9E0
*/

array function GetExtraWeaponMods(var)

/*
* @Breif 
* @Pramas ["modName4", "modname1", ...]
* @NativeName: ScriptSetExtraWeaponMods
* @NativeFunctionAddress 0000000140E5CA30
*/

void function SetExtraWeaponMods(var, array)

/*
* @Breif Ends recording the player's animation for playback later.
* @Pramas 
* @NativeName: Script_StopRecordingAnimation
* @NativeFunctionAddress 0000000140E5CA80
*/

var function StopRecordingAnimation()

/*
* @Breif Gets a table of additional telemetry data sent by code functions for a player.
* @Pramas 
* @NativeName: Script_GetPINAdditionalData
* @NativeFunctionAddress 0000000140E5CAD0
*/

var function GetPINAdditionalData()

/*
* @Breif Gets a table of time and distance stats for different player states
* @Pramas 
* @NativeName: Script_GetPlayerStateStats
* @NativeFunctionAddress 0000000140E5CB20
*/

var function GetPlayerStateStats()

/*
* @Breif Prevent the fx to be re-created on restore
* @Pramas 
* @NativeName: ScriptDoNotCreateFXOnRestore
* @NativeFunctionAddress 0000000140D86730
*/

void function DoNotCreateFXOnRestore()

/*
* @Breif Set this entity to render always
* @Pramas 
* @NativeName: ScriptEnableRenderAlways
* @NativeFunctionAddress 0000000140D866E0
*/

void function FXEnableRenderAlways()

/*
* @Breif Set this entity to not render always
* @Pramas 
* @NativeName: ScriptDisableRenderAlways
* @NativeFunctionAddress 0000000140D86690
*/

void function FXDisableRenderAlways()

/*
* @Breif Determines how the effect will end if you destroy the entity. Options are: "normal" (stops emission); "destroyImmediately" (stops emission and kills existing particles immediately); "playEndcap" (stops emission and play endcap). (default is "playEndcap".)
* @Pramas string
* @NativeName: SetStopType
* @NativeFunctionAddress 0000000140D86630
*/

void function SetStopType(string)

/*
* @Breif Assign the given ent to the given control point index.
* @Pramas int, entity
* @NativeName: ScriptSetControlPointEnt
* @NativeFunctionAddress 0000000140D865A0
*/

void function SetControlPointEnt(int, entity)

/*
* @Breif Fly forward along the path starting with the specified node.
* @Pramas entity
* @NativeName: FlyPath
* @NativeFunctionAddress 0000000140D26410
*/

void function FlyPath(entity)

/*
* @Breif Fly along the path nodes in reverse order, starting with the specified node.
* @Pramas entity
* @NativeName: FlyPathBackward
* @NativeFunctionAddress 0000000140D26390
*/

void function FlyPathBackward(entity)

/*
* @Breif Fly to a node, flying along the path, starting with the node closest to the vehicle's current position.
* @Pramas entity
* @NativeName: FlyToNodeViaPath
* @NativeFunctionAddress 0000000140D26310
*/

void function FlyToNodeViaPath(entity)

/*
* @Breif Fly straight to a node, don't slow to a stop, but maintain the node speed all the way to the node.
* @Pramas entity
* @NativeName: FlyToNodeUseNodeSpeed
* @NativeFunctionAddress 0000000140D26290
*/

void function FlyToNodeUseNodeSpeed(entity)

/*
* @Breif Path to track node, but does not stop at the goal. When approaching the goal, the entity will ramp its speed to match the beginning speed of the specified animation sequence.
* @Pramas vector, string
* @NativeName: FlyToPointToAnim
* @NativeFunctionAddress 0000000140D26230
*/

void function FlyToPointToAnim(vector, string)

/*
* @Breif Fly to a position in space.
* @Pramas vector
* @NativeName: FlyToPoint
* @NativeFunctionAddress 0000000140D261D0
*/

void function FlyToPoint(vector)

/*
* @Breif Set the current and desired speed immediately
* @Pramas float
* @NativeName: SetSpeedImmediate
* @NativeFunctionAddress 0000000140D87190
*/

void function SetSpeedImmediate(float)

/*
* @Breif Set the entity to look at. Set to null to clear.
* @Pramas entity
* @NativeName: SetFacingEntity
* @NativeFunctionAddress 0000000140D87110
*/

void function SetFacingEntity(entity)

/*
* @Breif Clear override. Resume normal desired yaw.
* @Pramas 
* @NativeName: ClearFacingEntity
* @NativeFunctionAddress 0000000140D870C0
*/

void function ClearFacingEntity()

/*
* @Breif Turn off engine sounds and effects.
* @Pramas 
* @NativeName: EngineEffectsDisable
* @NativeFunctionAddress 0000000140D87070
*/

void function EngineEffectsDisable()

/*
* @Breif Turn engine sounds and effects back on.
* @Pramas 
* @NativeName: EngineEffectsEnable
* @NativeFunctionAddress 0000000140D87020
*/

void function EngineEffectsEnable()

/*
* @Breif IsJetWakeFXEnabled
* @Pramas 
* @NativeName: IsJetWakeFXEnabled
* @NativeFunctionAddress 0000000140D867E0
*/

bool function IsJetWakeFXEnabled()

/*
* @Breif SetJetWakeFXEnabled
* @Pramas bool
* @NativeName: SetJetWakeFXEnabled
* @NativeFunctionAddress 0000000140D86780
*/

void function SetJetWakeFXEnabled(bool)

/*
* @Breif Set whether or not to ttack targets
* @Pramas bool
* @NativeName: SetAttackMode
* @NativeFunctionAddress 0000000140D86840
*/

void function SetAttackMode(bool)

/*
* @Breif Play movie (and show it if visibility is true).
* @Pramas 
* @NativeName: Enable
* @NativeFunctionAddress 0000000140D86CE0
*/

void function EnableMovie()

/*
* @Breif Stop movie (and hide it).
* @Pramas 
* @NativeName: Disable
* @NativeFunctionAddress 0000000140D86C90
*/

void function DisableMovie()

/*
* @Breif Toggle between enabled and disabled states.
* @Pramas 
* @NativeName: ToggleEnabled
* @NativeFunctionAddress 0000000140D86C40
*/

void function ToggleMovieEnabled()

/*
* @Breif When set true, makes movie visible (if the movie is enabled).
* @Pramas bool
* @NativeName: ScreenVisible
* @NativeFunctionAddress 0000000140D86BE0
*/

void function SetMovieVisibility(bool)

/*
* @Breif Toggle between visibility states.
* @Pramas 
* @NativeName: ToggleVisibility
* @NativeFunctionAddress 0000000140D86B90
*/

void function ToggleMovieVisibility()

/*
* @Breif Sets the movie to display.
* @Pramas string
* @NativeName: SetMovie
* @NativeFunctionAddress 0000000140D86B30
*/

void function SetMovie(string)

/*
* @Breif Sets the movie and external audio to play.
* @Pramas string, string
* @NativeName: SetMovieAndExternalAudio
* @NativeFunctionAddress 0000000140D86AC0
*/

void function SetMovieAndExternalAudio(string, string)

/*
* @Breif Use custom UVs.
* @Pramas bool
* @NativeName: SetUseCustomUVs
* @NativeFunctionAddress 0000000140D86A60
*/

void function SetUseCustomUVs(bool)

/*
* @Breif Set the minimum U.
* @Pramas float
* @NativeName: SetUMin
* @NativeFunctionAddress 0000000140D869F0
*/

void function SetUMin(float)

/*
* @Breif Set the minimum V.
* @Pramas float
* @NativeName: SetVMin
* @NativeFunctionAddress 0000000140D86980
*/

void function SetVMin(float)

/*
* @Breif Set the maximum U.
* @Pramas float
* @NativeName: SetUMax
* @NativeFunctionAddress 0000000140D86910
*/

void function SetUMax(float)

/*
* @Breif Set the maximum V.
* @Pramas float
* @NativeName: SetVMax
* @NativeFunctionAddress 0000000140D868A0
*/

void function SetVMax(float)

/*
* @Breif Destroys glass in a radius.
* @Pramas vector, float
* @NativeName: BreakSphere
* @NativeFunctionAddress 0000000140D86D30
*/

void function BreakSphere(vector, float)

/*
* @Breif Set whether this ambientgeneric is enabled.
* @Pramas bool
* @NativeName: ScriptSetEnabled
* @NativeFunctionAddress 0000000140D24CD0
*/

void function SetEnabled(bool)

/*
* @Breif Set the sound event name for this ambientgeneric.
* @Pramas string
* @NativeName: ScriptSetSoundName
* @NativeFunctionAddress 0000000140D24C70
*/

void function SetSoundName(string)

/*
* @Breif Set the endpoints for the line segment along which this ambientgeneric will play.
* @Pramas vector, vector
* @NativeName: ScriptSetSegmentEndpoints
* @NativeFunctionAddress 0000000140D24C10
*/

void function SetSegmentEndpoints(vector, vector)

/*
* @Breif Remove the line segment along which this ambientgeneric played.
* @Pramas 
* @NativeName: ScriptRemoveSegmentEndpoints
* @NativeFunctionAddress 0000000140D24B80
*/

void function RemoveSegmentEndpoints()

/*
* @Breif Set the radius (in world units) within which this AmbientGeneric should be audible.
* @Pramas float
* @NativeName: ScriptSetRadius
* @NativeFunctionAddress 0000000140D24B10
*/

void function SetAudibleRadius(float)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetReserved
* @NativeFunctionAddress 0000000140D26170
*/

void function SetReserved(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: IsReserved
* @NativeFunctionAddress 0000000140D26110
*/

bool function IsReserved()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_RegenerateSmoothPoints
* @NativeFunctionAddress 0000000140C87C00
*/

void function RegenerateSmoothPoints()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTotalSmoothDistance
* @NativeFunctionAddress 0000000140C87B40
*/

float function GetTotalSmoothDistance()

/*
* @Breif Returns the 3D position at the given distance along the path from the node.
* @Pramas float
* @NativeName: GetSmoothPositionAtDistance_Script
* @NativeFunctionAddress 0000000140C87A60
*/

vector function GetSmoothPositionAtDistance(float)

/*
* @Breif Returns the next train node in the path.
* @Pramas 
* @NativeName: GetNextTrainNode
* @NativeFunctionAddress 0000000140C87A00
*/

entity function GetNextTrainNode()

/*
* @Breif Returns the previous train node in the path.
* @Pramas 
* @NativeName: GetPreviousTrainNode
* @NativeFunctionAddress 0000000140C879A0
*/

entity function GetPreviousTrainNode()

/*
* @Breif Set desired ground position toward which we will move and stop at, handling moving ground. If the ground entity is changed, the set position will be ignored.
* @Pramas vector, entity
* @NativeName: SetMoveToPositionGround
* @NativeFunctionAddress 0000000140C89AE0
*/

void function SetMoveToPositionGround(vector, entity)

/*
* @Breif Set desired position toward which we will move and stop at.
* @Pramas vector
* @NativeName: SetMoveToPositionWorld
* @NativeFunctionAddress 0000000140C89A80
*/

void function SetMoveToPositionWorld(vector)

/*
* @Breif Get desired position toward which we will move and stop at.
* @Pramas 
* @NativeName: GetMoveToPositionWorld
* @NativeFunctionAddress 0000000140C899B0
*/

vector function GetMoveToPositionWorld()

/*
* @Breif Set max/cruising speed for moving to a desired position.
* @Pramas float
* @NativeName: SetMaxSpeed
* @NativeFunctionAddress 0000000140C89940
*/

void function SetMaxSpeed(float)

/*
* @Breif Get max/cruising speed for moving to a desired position.
* @Pramas 
* @NativeName: GetMaxSpeed
* @NativeFunctionAddress 0000000140C89890
*/

float function GetMaxSpeed()

/*
* @Breif Set the drone's desired velocity.
* @Pramas vector
* @NativeName: SetDesiredVelocityHorizontal
* @NativeFunctionAddress 0000000140C89830
*/

void function SetDesiredVelocityHorizontal(vector)

/*
* @Breif Set the drone's desired velocity.
* @Pramas vector
* @NativeName: SetDesiredVelocity3D
* @NativeFunctionAddress 0000000140C897D0
*/

void function SetDesiredVelocity3D(vector)

/*
* @Breif Get the drone's desired velocity.
* @Pramas 
* @NativeName: GetDesiredVelocity
* @NativeFunctionAddress 0000000140C89770
*/

vector function GetDesiredVelocity()

/*
* @Breif Set drone's desired height.
* @Pramas float
* @NativeName: SetDesiredHeight
* @NativeFunctionAddress 0000000140C89700
*/

void function SetDesiredHeight(float)

/*
* @Breif Get drone's desired height.
* @Pramas 
* @NativeName: GetDesiredHeight
* @NativeFunctionAddress 0000000140C89650
*/

float function GetDesiredHeight()

/*
* @Breif Overrides the direction to face.
* @Pramas float
* @NativeName: SetDesiredYaw
* @NativeFunctionAddress 0000000140C895E0
*/

void function SetDesiredYaw(float)

/*
* @Breif Switches back to code controll of yaw.
* @Pramas 
* @NativeName: ClearDesiredYaw
* @NativeFunctionAddress 0000000140C89590
*/

void function ClearDesiredYaw()

/*
* @Breif Get yaw override.
* @Pramas 
* @NativeName: GetDesiredYaw
* @NativeFunctionAddress 0000000140C894E0
*/

float function GetDesiredYaw()

/*
* @Breif Set the yaw rate.
* @Pramas float
* @NativeName: SetYawRate
* @NativeFunctionAddress 0000000140C89470
*/

void function SetYawRate(float)

/*
* @Breif Get the yaw rate.
* @Pramas 
* @NativeName: GetYawRate
* @NativeFunctionAddress 0000000140C893C0
*/

float function GetYawRate()

/*
* @Breif Set the amplitude of the random bobbing. Zero is no bobbing.
* @Pramas float
* @NativeName: SetBobScale
* @NativeFunctionAddress 0000000140C89350
*/

void function SetBobScale(float)

/*
* @Breif Sets the rate of the random bobbing.
* @Pramas float
* @NativeName: SetBobFrequency
* @NativeFunctionAddress 0000000140C892E0
*/

void function SetBobFrequency(float)

/*
* @Breif Get the amplitude of the random bobbing. Zero is no bobbing.
* @Pramas 
* @NativeName: GetBobScale
* @NativeFunctionAddress 0000000140C89230
*/

float function GetBobScale()

/*
* @Breif Gets the rate of the random bobbing.
* @Pramas 
* @NativeName: GetBobFrequency
* @NativeFunctionAddress 0000000140C89180
*/

float function GetBobFrequency()

/*
* @Breif When you have a desired velocity set, this controls how fast we accelerate to the desired velocity.
* @Pramas float
* @NativeName: SetAccelScale
* @NativeFunctionAddress 0000000140C89110
*/

void function SetAccelScale(float)

/*
* @Breif When you have a desired velocity set, this controls how fast we accelerate to the desired velocity.
* @Pramas 
* @NativeName: GetAccelScale
* @NativeFunctionAddress 0000000140C89060
*/

float function GetAccelScale()

/*
* @Breif Sets an absolute minimal height. Additional velocity will be applied to ensure the mover never goes below this height.
* @Pramas float, float
* @NativeName: SetMinimalHeightWorld
* @NativeFunctionAddress 0000000140C88FD0
*/

void function SetMinimalHeightWorld(float, float)

/*
* @Breif Sets an minimal height above the ground. Additional velocity will be applied to ensure the mover never goes below this height.
* @Pramas float, float
* @NativeName: SetMinimalHeightGround
* @NativeFunctionAddress 0000000140C88F40
*/

void function SetMinimalHeightGround(float, float)

/*
* @Breif Clears any absolute minimal height previously set.
* @Pramas 
* @NativeName: ClearMinimalHeight
* @NativeFunctionAddress 0000000140C88EF0
*/

void function ClearMinimalHeight()

/*
* @Breif Applies a force that makes the entity spin around its forward axis.
* @Pramas float
* @NativeName: SetRollTorque
* @NativeFunctionAddress 0000000140C88E80
*/

void function SetRollTorque(float)

/*
* @Breif Gets the force that makes the entity spin around its forward axis.
* @Pramas 
* @NativeName: GetRollTorque
* @NativeFunctionAddress 0000000140C88DD0
*/

float function GetRollTorque()

/*
* @Breif Applies a force to the entity's left. Combined with SetRollTorque() can create a wobbly trajectory.
* @Pramas float
* @NativeName: SetSideForce
* @NativeFunctionAddress 0000000140C88D60
*/

void function SetSideForce(float)

/*
* @Breif The force to the entity's left. Combined with SetRollTorque() can create a wobbly trajectory.
* @Pramas 
* @NativeName: GetSideForce
* @NativeFunctionAddress 0000000140C88CB0
*/

float function GetSideForce()

/*
* @Breif Sets if this script mover and child entities can be a ground entity for NPCs
* @Pramas bool
* @NativeName: AllowNPCGroundEnt
* @NativeFunctionAddress 0000000140C88C50
*/

void function AllowNPCGroundEnt(bool)

/*
* @Breif Connect/disconnect NPC paths for child entities attached to this, when this moves
* @Pramas bool
* @NativeName: ChangeNPCPathsOnMove
* @NativeFunctionAddress 0000000140C88BF0
*/

void function ChangeNPCPathsOnMove(bool)

/*
* @Breif Move along a train node at a given speed and acceleration
* @Pramas entity, float, float
* @NativeName: Script_Train_MoveToTrainNode
* @NativeFunctionAddress 0000000140C88B40
*/

void function Train_MoveToTrainNode(entity, float, float)

/*
* @Breif Move to the given train node at the given speed.
* @Pramas entity, float, float, float, float
* @NativeName: Script_Train_MoveToTrainNodeEx
* @NativeFunctionAddress 0000000140C88A50
*/

void function Train_MoveToTrainNodeEx(entity, float, float, float, float)

/*
* @Breif Stop train smoothly
* @Pramas 
* @NativeName: Train_StopSmoothly
* @NativeFunctionAddress 0000000140C88A00
*/

void function Train_StopSmoothly()

/*
* @Breif Stop train immediately
* @Pramas 
* @NativeName: Train_StopImmediately
* @NativeFunctionAddress 0000000140C889B0
*/

void function Train_StopImmediately()

/*
* @Breif Follow a mover from a given distance away.
* @Pramas entity, float
* @NativeName: Script_Train_Follow
* @NativeFunctionAddress 0000000140C88920
*/

void function Train_Follow(entity, float)

/*
* @Breif Stop at the given train node
* @Pramas entity
* @NativeName: Script_Train_SetStopNode
* @NativeFunctionAddress 0000000140C888A0
*/

void function Train_SetStopNode(entity)

/*
* @Breif Clear breadcrumb history on the train
* @Pramas 
* @NativeName: Train_ClearBreadcrumbs
* @NativeFunctionAddress 0000000140C88850
*/

void function Train_ClearBreadcrumbs()

/*
* @Breif Clear breadcrumb history on the train
* @Pramas float, float, float
* @NativeName: Train_AutoRoll
* @NativeFunctionAddress 0000000140C887B0
*/

void function Train_AutoRoll(float, float, float)

/*
* @Breif Get node the train is currently set to stop at
* @Pramas 
* @NativeName: Script_Train_GetStopNode
* @NativeFunctionAddress 0000000140C88750
*/

entity function Train_GetStopNode()

/*
* @Breif Returns true if the train is currently moving to a train node
* @Pramas 
* @NativeName: Train_IsMovingToTrainNode
* @NativeFunctionAddress 0000000140C886F0
*/

bool function Train_IsMovingToTrainNode()

/*
* @Breif Stop all movement/rotation immediately
* @Pramas 
* @NativeName: Script_NonPhysicsStop
* @NativeFunctionAddress 0000000140C886A0
*/

void function NonPhysicsStop()

/*
* @Breif Move to a given point over time. Specify total travel time, acceleration time, and deceleration time.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsMoveTo
* @NativeFunctionAddress 0000000140C885F0
*/

void function NonPhysicsMoveTo(vector, float, float, float)

/*
* @Breif Move to a given point over time. The point is specified in the local space (i.e. relative to our parent), but the movement is linear in world space.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsMoveInWorldSpaceToLocalPos
* @NativeFunctionAddress 0000000140C88540
*/

void function NonPhysicsMoveInWorldSpaceToLocalPos(vector, float, float, float)

/*
* @Breif Move with a given starting velocity and apply the given gravity over time
* @Pramas vector, vector
* @NativeName: Script_NonPhysicsMoveWithGravity
* @NativeFunctionAddress 0000000140C884E0
*/

void function NonPhysicsMoveWithGravity(vector, vector)

/*
* @Breif Rotate to given angles over time. Specify total travel time.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsRotateTo
* @NativeFunctionAddress 0000000140C88430
*/

void function NonPhysicsRotateTo(vector, float, float, float)

/*
* @Breif Rotate around the given axis with the given speed. Use an axis or speed of 0 to stop.
* @Pramas vector, float
* @NativeName: Script_NonPhysicsRotate
* @NativeFunctionAddress 0000000140C883C0
*/

void function NonPhysicsRotate(vector, float)

/*
* @Breif When set true, will use local positions.
* @Pramas bool
* @NativeName: Script_NonPhysicsSetMoveModeLocal
* @NativeFunctionAddress 0000000140C88360
*/

void function NonPhysicsSetMoveModeLocal(bool)

/*
* @Breif When set true, will use local rotation.
* @Pramas bool
* @NativeName: Script_NonPhysicsSetRotateModeLocal
* @NativeFunctionAddress 0000000140C88300
*/

void function NonPhysicsSetRotateModeLocal(bool)

/*
* @Breif Get speed train is trying to go at.
* @Pramas 
* @NativeName: Script_Train_GetGoalSpeed
* @NativeFunctionAddress 0000000140C88250
*/

float function Train_GetGoalSpeed()

/*
* @Breif Get time until the train reaches its goal speed.
* @Pramas 
* @NativeName: Script_Train_GetTotalTimeToGoalSpeed
* @NativeFunctionAddress 0000000140C881A0
*/

float function Train_GetTotalTimeToGoalSpeed()

/*
* @Breif Get current speed moving to train node.
* @Pramas 
* @NativeName: Train_GetCurrentSpeed
* @NativeFunctionAddress 0000000140C880F0
*/

float function Train_GetCurrentSpeed()

/*
* @Breif Get the script_mover_train_node the train was traveling on before it stopped.
* @Pramas 
* @NativeName: Script_Train_GetLastNode
* @NativeFunctionAddress 0000000140C88090
*/

entity function Train_GetLastNode()

/*
* @Breif Get the distance the train was at before it stopped.
* @Pramas 
* @NativeName: Script_Train_GetLastDistance
* @NativeFunctionAddress 0000000140C87FE0
*/

float function Train_GetLastDistance()

/*
* @Breif Get the speed the train was moving at before it stopped.
* @Pramas 
* @NativeName: Train_GetLastSpeed
* @NativeFunctionAddress 0000000140C87F30
*/

float function Train_GetLastSpeed()

/*
* @Breif Gets door flags. Really just a networked int.
* @Pramas 
* @NativeName: GetDoorFlags
* @NativeFunctionAddress 0000000140C87E20
*/

int function GetDoorFlags()

/*
* @Breif Sets door flags. Really just a networked int.
* @Pramas int
* @NativeName: SetDoorFlags
* @NativeFunctionAddress 0000000140C87DB0
*/

void function SetDoorFlags(int)

/*
* @Breif Adds door flags. Really just a networked int.
* @Pramas int
* @NativeName: AddDoorFlags
* @NativeFunctionAddress 0000000140C87D40
*/

void function AddDoorFlags(int)

/*
* @Breif Removes door flags. Really just a networked int.
* @Pramas int
* @NativeName: RemoveDoorFlags
* @NativeFunctionAddress 0000000140C87CD0
*/

void function RemoveDoorFlags(int)

/*
* @Breif Clears all door flags. Really just a networked int.
* @Pramas 
* @NativeName: ClearAllDoorFlags
* @NativeFunctionAddress 0000000140C87C80
*/

void function ClearAllDoorFlags()

/*
* @Breif Instead of interpolating between two origins and angles, calculate what the origin and angle should be based on the movement parameters originally given
* @Pramas bool
* @NativeName: EnableNonPhysicsMoveInterpolation
* @NativeFunctionAddress 0000000140C87ED0
*/

void function EnableNonPhysicsMoveInterpolation(bool)

/*
* @Breif 
* @Pramas int teamNum
* @NativeName: SetOnlyTransmitToSingleTeam
* @NativeFunctionAddress 0000000140C8B840
*/

void function SetOnlyTransmitToSingleTeam(int teamNum)

/*
* @Breif 
* @Pramas entity player
* @NativeName: SetOnlyTransmitToOnePlayer
* @NativeFunctionAddress 0000000140C8B790
*/

void function SetOnlyTransmitToOnePlayer(entity player)

/*
* @Breif 
* @Pramas int bitfield
* @NativeName: SetWaypointBitfield
* @NativeFunctionAddress 0000000140C8B6F0
*/

void function SetWaypointBitfield(int bitfield)

/*
* @Breif 
* @Pramas string customType
* @NativeName: SetWaypointCustomType
* @NativeFunctionAddress 0000000140C8B650
*/

void function SetWaypointCustomType(string customType)

/*
* @Breif 
* @Pramas int index, entity ent
* @NativeName: SetWaypointEntity
* @NativeFunctionAddress 0000000140C8B5C0
*/

void function SetWaypointEntity(int index, entity ent)

/*
* @Breif 
* @Pramas int index, vector vec
* @NativeName: SetWaypointVector
* @NativeFunctionAddress 0000000140C8B550
*/

void function SetWaypointVector(int index, vector vec)

/*
* @Breif 
* @Pramas int index, float gametimeVal
* @NativeName: SetWaypointGametime
* @NativeFunctionAddress 0000000140C8B4D0
*/

void function SetWaypointGametime(int index, float gametimeVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetWaypointInt
* @NativeFunctionAddress 0000000140C8B450
*/

void function SetWaypointInt(int index, int intVal)

/*
* @Breif 
* @Pramas int index, float floatVal
* @NativeName: SetWaypointFloat
* @NativeFunctionAddress 0000000140C8B3D0
*/

void function SetWaypointFloat(int index, float floatVal)

/*
* @Breif 
* @Pramas int index, string stringVal
* @NativeName: SetWaypointString
* @NativeFunctionAddress 0000000140C8B350
*/

void function SetWaypointString(int index, string stringVal)

/*
* @Breif 
* @Pramas int index, asset assetVal
* @NativeName: SetWaypointAsset
* @NativeFunctionAddress 0000000140C8B2D0
*/

void function SetWaypointAsset(int index, asset assetVal)

/*
* @Breif 
* @Pramas int packedVal
* @NativeName: SetWaypointObjectivePackedInt
* @NativeFunctionAddress 0000000140C8B230
*/

void function SetWaypointObjectivePackedInt(int packedVal)

/*
* @Breif 
* @Pramas string groupName
* @NativeName: SetWaypointGroupName
* @NativeFunctionAddress 0000000140C8B190
*/

void function SetWaypointGroupName(string groupName)

/*
* @Breif 
* @Pramas int flags
* @NativeName: SetWaypointGroupFlags
* @NativeFunctionAddress 0000000140C8B0F0
*/

void function SetWaypointGroupFlags(int flags)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointType
* @NativeFunctionAddress 0000000140C8B040
*/

int function GetWaypointType()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointBitfield
* @NativeFunctionAddress 0000000140C8AF90
*/

int function GetWaypointBitfield()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointCustomType
* @NativeFunctionAddress 0000000140C8AF00
*/

string function GetWaypointCustomType()

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointEntity
* @NativeFunctionAddress 0000000140C8AE40
*/

entity function GetWaypointEntity(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointVector
* @NativeFunctionAddress 0000000140C8AD20
*/

vector function GetWaypointVector(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointGametime
* @NativeFunctionAddress 0000000140C8AC30
*/

float function GetWaypointGametime(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointInt
* @NativeFunctionAddress 0000000140C8AB50
*/

int function GetWaypointInt(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointFloat
* @NativeFunctionAddress 0000000140C8AA60
*/

float function GetWaypointFloat(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointString
* @NativeFunctionAddress 0000000140C8A990
*/

string function GetWaypointString(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointAsset
* @NativeFunctionAddress 0000000140C8A8C0
*/

asset function GetWaypointAsset(int index)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointObjectivePackedInt
* @NativeFunctionAddress 0000000140C8A810
*/

int function GetWaypointObjectivePackedInt()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointGroupName
* @NativeFunctionAddress 0000000140C8A780
*/

string function GetWaypointGroupName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointGroupFlags
* @NativeFunctionAddress 0000000140C8A6D0
*/

int function GetWaypointGroupFlags()

/*
* @Breif 
* @Pramas int teamNum
* @NativeName: SetTasklistOnlyTransmitToSingleTeam
* @NativeFunctionAddress 0000000140C8C7C0
*/

void function SetTasklistOnlyTransmitToSingleTeam(int teamNum)

/*
* @Breif 
* @Pramas 
* @NativeName: ClearAll
* @NativeFunctionAddress 0000000140C8C770
*/

void function ClearAll()

/*
* @Breif 
* @Pramas 
* @NativeName: SetNotifyTimeUpdate
* @NativeFunctionAddress 0000000140C8C6D0
*/

void function SetNotifyTimeUpdate()

/*
* @Breif 
* @Pramas int intVal
* @NativeName: SetTasklistCustomInt
* @NativeFunctionAddress 0000000140C8B6F0
*/

void function SetTasklistCustomInt(int intVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistStatus
* @NativeFunctionAddress 0000000140C8C650
*/

void function SetTasklistStatus(int index, int intVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistType
* @NativeFunctionAddress 0000000140C8C5D0
*/

void function SetTasklistType(int index, int intVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistCountGoal
* @NativeFunctionAddress 0000000140C8C550
*/

void function SetTasklistCountGoal(int index, int intVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistCountNow
* @NativeFunctionAddress 0000000140C8C4D0
*/

void function SetTasklistCountNow(int index, int intVal)

/*
* @Breif 
* @Pramas int index, int flags
* @NativeName: SetTasklistFlags
* @NativeFunctionAddress 0000000140C8C450
*/

void function SetTasklistFlags(int index, int flags)

/*
* @Breif 
* @Pramas int index, float gametimeVal
* @NativeName: SetTasklistGameTime
* @NativeFunctionAddress 0000000140C8C3D0
*/

void function SetTasklistGameTime(int index, float gametimeVal)

/*
* @Breif 
* @Pramas int index, int intVal
* @NativeName: SetTasklistInt
* @NativeFunctionAddress 0000000140C8C350
*/

void function SetTasklistInt(int index, int intVal)

/*
* @Breif 
* @Pramas int index, float floatVal
* @NativeName: SetTasklistFloat
* @NativeFunctionAddress 0000000140C8C2D0
*/

void function SetTasklistFloat(int index, float floatVal)

/*
* @Breif 
* @Pramas int index, entity ent
* @NativeName: SetTasklistEntity
* @NativeFunctionAddress 0000000140C8C240
*/

void function SetTasklistEntity(int index, entity ent)

/*
* @Breif 
* @Pramas int index, string stringVal
* @NativeName: SetTasklistString
* @NativeFunctionAddress 0000000140C8C180
*/

void function SetTasklistString(int index, string stringVal)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTasklistCustomInt
* @NativeFunctionAddress 0000000140C8AF90
*/

int function GetTasklistCustomInt()

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistStatus
* @NativeFunctionAddress 0000000140C8C0A0
*/

int function GetTasklistStatus(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistType
* @NativeFunctionAddress 0000000140C8BFC0
*/

int function GetTasklistType(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistCountGoal
* @NativeFunctionAddress 0000000140C8BEE0
*/

int function GetTasklistCountGoal(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistCountNow
* @NativeFunctionAddress 0000000140C8BE00
*/

int function GetTasklistCountNow(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistFlags
* @NativeFunctionAddress 0000000140C8BD20
*/

int function GetTasklistFlags(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistGameTime
* @NativeFunctionAddress 0000000140C8BC30
*/

float function GetTasklistGameTime(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistInt
* @NativeFunctionAddress 0000000140C8BB50
*/

int function GetTasklistInt(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistFloat
* @NativeFunctionAddress 0000000140C8BA60
*/

float function GetTasklistFloat(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistEntity
* @NativeFunctionAddress 0000000140C8B9A0
*/

entity function GetTasklistEntity(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistString
* @NativeFunctionAddress 0000000140C8B900
*/

string function GetTasklistString(int index)

/*
* @Breif Kill the player decoy and dissolve at the same time.
* @Pramas 
* @NativeName: Die
* @NativeFunctionAddress 0000000140C8D6E0
*/

void function Decoy_Die()

/*
* @Breif Dissolve out the player decoy without killing it.
* @Pramas 
* @NativeName: Dissolve
* @NativeFunctionAddress 0000000140C8D690
*/

void function Decoy_Dissolve()

/*
* @Breif Sets whether friendly fire is enabled or disabled for this player decoy (default enabled).
* @Pramas bool
* @NativeName: SetFriendlyFire
* @NativeFunctionAddress 0000000140C8D5F0
*/

void function SetFriendlyFire(bool)

/*
* @Breif Returns true if friendly fire is enabled for this player decoy
* @Pramas 
* @NativeName: GetFriendlyFire
* @NativeFunctionAddress 0000000140C8D580
*/

bool function GetFriendlyFire()

/*
* @Breif Sets whether splashes out when it lands from airborne state (default disabled).
* @Pramas bool
* @NativeName: SetLandSplash
* @NativeFunctionAddress 0000000140C8D4E0
*/

void function SetLandSplash(bool)

/*
* @Breif Returns true if land splash is enabled for this player decoy
* @Pramas 
* @NativeName: GetLandSplash
* @NativeFunctionAddress 0000000140C8D480
*/

bool function GetLandSplash()

/*
* @Breif Set timeout in seconds. When timeout finishes the decoy dies. Default is -1 (no timeout)
* @Pramas float
* @NativeName: SetTimeout
* @NativeFunctionAddress 0000000140C8D3F0
*/

void function SetTimeout(float)

/*
* @Breif Sets the delay for when the decoy jumps after created in air
* @Pramas float
* @NativeName: SetJumpDelay
* @NativeFunctionAddress 0000000140C8D340
*/

void function SetJumpDelay(float)

/*
* @Breif Sets the rate at which the decoy flickers after created
* @Pramas float
* @NativeName: SetFlickerRate
* @NativeFunctionAddress 0000000140C8D2C0
*/

void function SetFlickerRate(float)

/*
* @Breif Lets the decoy land in slide or sprint
* @Pramas bool
* @NativeName: SetEnableRandomLanding
* @NativeFunctionAddress 0000000140C8D220
*/

void function SetEnableRandomLanding(bool)

/*
* @Breif Sets whether or not the decoy dies on collisions
* @Pramas bool
* @NativeName: SetKillOnCollision
* @NativeFunctionAddress 0000000140C8D180
*/

void function SetKillOnCollision(bool)

/*
* @Breif Sets whether or not the decoy is killed in 1 shot by a player
* @Pramas bool
* @NativeName: SetPlayerOneHits
* @NativeFunctionAddress 0000000140C8D0E0
*/

void function SetPlayerOneHits(bool)

/*
* @Breif Sets max rate the decoy can pulse at. Randomly pulses at around this rate on the minimap
* @Pramas float
* @NativeName: SetDecoyRandomPulseRateMax
* @NativeFunctionAddress 0000000140C8D070
*/

void function SetDecoyRandomPulseRateMax(float)

/*
* @Breif 
* @Pramas entity activatorOrNull
* @NativeName: Script_OpenDoor
* @NativeFunctionAddress 0000000140BC9990
*/

void function OpenDoor(entity activatorOrNull)

/*
* @Breif 
* @Pramas entity activatorOrNull
* @NativeName: Script_CloseDoor
* @NativeFunctionAddress 0000000140BC9910
*/

void function CloseDoor(entity activatorOrNull)

/*
* @Breif 
* @Pramas bool state
* @NativeName: Script_SetDoorLocked
* @NativeFunctionAddress 0000000140BC98B0
*/

void function SetDoorLocked(bool state)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetDoorIsLocked
* @NativeFunctionAddress 0000000140BC9850
*/

bool function GetDoorIsLocked()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsDoorOpen
* @NativeFunctionAddress 0000000140BC97F0
*/

bool function IsDoorOpen()

/*
* @Breif Get the attached door on a double door
* @Pramas 
* @NativeName: Script_GetOppositeDoor
* @NativeFunctionAddress 0000000140BC9790
*/

entity function GetOppositeDoor()

/*
* @Breif Forces the grenade to ignite immediately.
* @Pramas 
* @NativeName: Script_GrenadeIgnite
* @NativeFunctionAddress 0000000140BCA410
*/

void function GrenadeIgnite()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GrenadeHasIgnited
* @NativeFunctionAddress 0000000140BCA3B0
*/

bool function GrenadeHasIgnited()

/*
* @Breif Forces the grenade to explode immediately.
* @Pramas vector
* @NativeName: Script_GrenadeExplode
* @NativeFunctionAddress 0000000140BCA350
*/

void function GrenadeExplode(vector)

/*
* @Breif Forces the grenade to explode immediately.
* @Pramas vector
* @NativeName: Script_GrenadeExplodeForCollisionCallback
* @NativeFunctionAddress 0000000140BCA2F0
*/

void function ExplodeForCollisionCallback(vector)

/*
* @Breif Gets the damage radius
* @Pramas 
* @NativeName: Script_GetDamageRadius
* @NativeFunctionAddress 0000000140BCA240
*/

float function GetDamageRadius()

/*
* @Breif Gets the explosion radius
* @Pramas 
* @NativeName: Script_GetExplosionRadius
* @NativeFunctionAddress 0000000140BCA180
*/

float function GetExplosionRadius()

/*
* @Breif Gets the maximum damage amount
* @Pramas int
* @NativeName: Script_GetDamageAmount
* @NativeFunctionAddress 0000000140BCA0C0
*/

float function GetDamageAmount(int)

/*
* @Breif Gets the time this grenade was created.
* @Pramas 
* @NativeName: Script_GetCreationTime
* @NativeFunctionAddress 0000000140BCA010
*/

float function GetCreationTime()

/*
* @Breif Gets the fuse time of the grenade
* @Pramas 
* @NativeName: Script_GetFuseTime
* @NativeFunctionAddress 0000000140BC9F60
*/

float function GetFuseTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_MarkAsAttached
* @NativeFunctionAddress 0000000140BC9ED0
*/

void function MarkAsAttached()

/*
* @Breif Gets who through the grenade.
* @Pramas 
* @NativeName: Script_GetThrower
* @NativeFunctionAddress 0000000140BC9E70
*/

entity function GetThrower()

/*
* @Breif Sets whether or not the grenade explodes
* @Pramas bool
* @NativeName: Script_SetDoesExplode
* @NativeFunctionAddress 0000000140BC9DE0
*/

void function SetDoesExplode(bool)

/*
* @Breif Init magnetic grenade parameters
* @Pramas float, string
* @NativeName: InitMagnetic
* @NativeFunctionAddress 0000000140BC9D30
*/

void function InitMagnetic(float, string)

/*
* @Breif 
* @Pramas entity
* @NativeName: Script_SetLauncherOwner
* @NativeFunctionAddress 0000000140BC9CA0
*/

void function SetLauncherOwner(entity)

/*
* @Breif 
* @Pramas float
* @NativeName: SetGrenadeTimer
* @NativeFunctionAddress 0000000140BC9C00
*/

void function SetGrenadeTimer(float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetGrenadeIgnitionDuration
* @NativeFunctionAddress 0000000140BC9B90
*/

void function SetGrenadeIgnitionDuration(float)

/*
* @Breif Returns whether this entity is client only
* @Pramas 
* @NativeName: IsClientOnly
* @NativeFunctionAddress 00000001406ACDB0
*/

bool function IsClientOnly()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsOrigin
* @NativeFunctionAddress 00000001406ACD50
*/

vector function GetOrigin()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalOrigin
* @NativeFunctionAddress 00000001406ACCF0
*/

vector function GetLocalOrigin()

/*
* @Breif 
* @Pramas 
* @NativeName: GetNoTarget
* @NativeFunctionAddress 00000001406ACC90
*/

bool function GetNoTarget()

/*
* @Breif Get whether the smart ammo system can see this target
* @Pramas 
* @NativeName: GetNoTargetSmartAmmo
* @NativeFunctionAddress 00000001406ACC30
*/

bool function GetNoTargetSmartAmmo()

/*
* @Breif Get vector to eye position - absolute coords
* @Pramas 
* @NativeName: ScriptEyePosition
* @NativeFunctionAddress 00000001406ACBD0
*/

vector function EyePosition()

/*
* @Breif The the position between the entity's eyes.
* @Pramas 
* @NativeName: PositionBetweenEyes
* @NativeFunctionAddress 00000001406ACB00
*/

vector function ShipHack_PositionBetweenEyes()

/*
* @Breif Sets the position of the entity
* @Pramas vector
* @NativeName: ScriptSetOrigin
* @NativeFunctionAddress 00000001406ACAA0
*/

void function SetOrigin(vector)

/*
* @Breif Sets the position of the entity relative to parent
* @Pramas vector
* @NativeName: ScriptSetLocalOrigin
* @NativeFunctionAddress 00000001406ACA40
*/

void function SetLocalOrigin(vector)

/*
* @Breif Stops physics for an entity
* @Pramas 
* @NativeName: ScriptStopPhysics
* @NativeFunctionAddress 00000001406AC9F0
*/

void function StopPhysics()

/*
* @Breif Sets the move type.
* @Pramas int
* @NativeName: ScriptSetPhysics
* @NativeFunctionAddress 00000001406AC980
*/

void function SetPhysics(int)

/*
* @Breif Gets the move type.
* @Pramas 
* @NativeName: ScriptGetPhysics
* @NativeFunctionAddress 00000001406AC8D0
*/

int function GetPhysics()

/*
* @Breif Clears the parent of an entity. Must be a clientside entity
* @Pramas 
* @NativeName: ScriptClearParent
* @NativeFunctionAddress 00000001406AC880
*/

void function ClearParent()

/*
* @Breif Sets this entity's move parent to be the same as the given entity's.
* @Pramas entity
* @NativeName: ScriptSetToSameParentAs
* @NativeFunctionAddress 00000001406AC800
*/

void function SetToSameParentAs(entity)

/*
* @Breif Marks this entity as an attachment that never moves away from the attachment point
* @Pramas 
* @NativeName: MarkAsNonMovingAttachment
* @NativeFunctionAddress 00000001406AC7B0
*/

void function MarkAsNonMovingAttachment()

/*
* @Breif Don't create a giant bounding box even though we are attached to an attachment
* @Pramas 
* @NativeName: DontIncludeParentBbox
* @NativeFunctionAddress 00000001406AC760
*/

void function DontIncludeParentBbox()

/*
* @Breif If in hierarchy, retrieves the entity's parent
* @Pramas 
* @NativeName: ScriptGetMoveParent
* @NativeFunctionAddress 00000001406AC700
*/

entity function GetParent()

/*
* @Breif Gives the name of the attachment that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentAttachment
* @NativeFunctionAddress 00000001406AC670
*/

string function GetParentAttachment()

/*
* @Breif Gives the index of the attachment that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentAttachmentIndex
* @NativeFunctionAddress 00000001406AC5C0
*/

int function GetParentAttachmentIndex()

/*
* @Breif Gives the index of the hitbox that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentHitbox
* @NativeFunctionAddress 00000001406AC510
*/

int function GetParentHitbox()

/*
* @Breif Sets the local position offset of an attached entity.
* @Pramas vector
* @NativeName: ScriptSetAttachOffsetOrigin
* @NativeFunctionAddress 00000001406AC4B0
*/

void function SetAttachOffsetOrigin(vector)

/*
* @Breif Sets the local angles offset of an attached entity.
* @Pramas vector
* @NativeName: ScriptSetAttachOffsetAngles
* @NativeFunctionAddress 00000001406AC450
*/

void function SetAttachOffsetAngles(vector)

/*
* @Breif Get entity pitch, yaw, roll as a vector
* @Pramas 
* @NativeName: ScriptGetAngles
* @NativeFunctionAddress 00000001406AC380
*/

vector function GetAngles()

/*
* @Breif Get entity pitch, yaw, roll as a vector relative to parent
* @Pramas 
* @NativeName: ScriptGetLocalAngles
* @NativeFunctionAddress 00000001406AC2B0
*/

vector function GetLocalAngles()

/*
* @Breif Set entity pitch, yaw, roll as a vector
* @Pramas vector
* @NativeName: ScriptSetAngles
* @NativeFunctionAddress 00000001406AC250
*/

void function SetAngles(vector)

/*
* @Breif Set entity pitch, yaw, roll as a vector relative to parent
* @Pramas vector
* @NativeName: ScriptSetLocalAngles
* @NativeFunctionAddress 00000001406AC1F0
*/

void function SetLocalAngles(vector)

/*
* @Breif Get eye angles
* @Pramas 
* @NativeName: ScriptEyeAngles
* @NativeFunctionAddress 00000001406AC120
*/

vector function EyeAngles()

/*
* @Breif Get the forward vector of the entity
* @Pramas 
* @NativeName: ScriptGetForward
* @NativeFunctionAddress 00000001406AC0C0
*/

vector function GetForwardVector()

/*
* @Breif Get the right vector of the entity
* @Pramas 
* @NativeName: ScriptGetRight
* @NativeFunctionAddress 00000001406AC060
*/

vector function GetRightVector()

/*
* @Breif Get the up vector of the entity
* @Pramas 
* @NativeName: ScriptGetUp
* @NativeFunctionAddress 00000001406AC000
*/

vector function GetUpVector()

/*
* @Breif 
* @Pramas vector
* @NativeName: ScriptSetAbsVelocity
* @NativeFunctionAddress 00000001406ABFA0
*/

void function SetVelocity(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTeamNumber
* @NativeFunctionAddress 00000001406ABEF0
*/

int function GetTeam()

/*
* @Breif 
* @Pramas int
* @NativeName: ChangeTeam_Script
* @NativeFunctionAddress 00000001406ABE80
*/

void function Code_SetTeam(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrade
* @NativeFunctionAddress 00000001406ABDD0
*/

int function GetGrade()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTeamMemberIndex
* @NativeFunctionAddress 00000001406ABD20
*/

int function GetTeamMemberIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSquadID
* @NativeFunctionAddress 00000001406ABC70
*/

int function GetSquadID()

/*
* @Breif Gets this entity's health
* @Pramas 
* @NativeName: GetHealth
* @NativeFunctionAddress 00000001406ABBC0
*/

int function GetHealth()

/*
* @Breif Gets this entity's maximum health
* @Pramas 
* @NativeName: GetMaxHealth
* @NativeFunctionAddress 00000001406ABB10
*/

int function GetMaxHealth()

/*
* @Breif Is this entity alive?
* @Pramas 
* @NativeName: ScriptIsAlive
* @NativeFunctionAddress 00000001406ABAB0
*/

bool function IsEntAlive()

/*
* @Breif Get the entity's armor type
* @Pramas 
* @NativeName: ScriptGetArmorType
* @NativeFunctionAddress 00000001406ABA00
*/

int function GetArmorType()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptEntIndex
* @NativeFunctionAddress 00000001406AB950
*/

int function GetEntIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: GetEncodedEHandle
* @NativeFunctionAddress 00000001406AB8A0
*/

int function GetEncodedEHandle()

/*
* @Breif Set the file path of the model
* @Pramas asset
* @NativeName: ScriptSetModel
* @NativeFunctionAddress 00000001406AB830
*/

bool function SetModel(asset)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitleForUI
* @NativeFunctionAddress 00000001406AB7A0
*/

string function GetTitleForUI()

/*
* @Breif Get's the entity's boss player's name
* @Pramas 
* @NativeName: GetBossPlayerName
* @NativeFunctionAddress 00000001406AB710
*/

string function GetBossPlayerName()

/*
* @Breif Gets the boss player for an entity
* @Pramas 
* @NativeName: Script_GetBossPlayer
* @NativeFunctionAddress 00000001406AB6B0
*/

entity function GetBossPlayer()

/*
* @Breif Avoid using outside of debug code.
* @Pramas 
* @NativeName: GetClassname
* @NativeFunctionAddress 00000001406AB620
*/

string function GetCodeClassName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetEntityName
* @NativeFunctionAddress 00000001406AB590
*/

string function GetTargetName()

/*
* @Breif Returns the script_name of this entity
* @Pramas 
* @NativeName: GetScriptName
* @NativeFunctionAddress 00000001406AB500
*/

string function GetScriptName()

/*
* @Breif Sets the script_name of this entity
* @Pramas string
* @NativeName: SetScriptName
* @NativeFunctionAddress 00000001406AB4A0
*/

void function SetScriptName(string)

/*
* @Breif Returns the instance_name of this entity
* @Pramas 
* @NativeName: GetInstanceName
* @NativeFunctionAddress 00000001406AB410
*/

string function GetInstanceName()

/*
* @Breif Works on both server and client. Can return null.
* @Pramas 
* @NativeName: ScriptGetSignifierName
* @NativeFunctionAddress 00000001406AB380
*/

string ornull function GetNetworkedClassName()

/*
* @Breif Get the entity name stripped of template unique decoration
* @Pramas 
* @NativeName: GetPreTemplateName
* @NativeFunctionAddress 00000001406AB2F0
*/

string function GetPreTemplateName()

/*
* @Breif Set sound 'code' controller for sounds attached to entity. Overrides code value (if any). (The client-side version of this script hook is not for server entities!)
* @Pramas float
* @NativeName: SetSoundCodeControllerValue
* @NativeFunctionAddress 00000001406AB280
*/

void function SetSoundCodeControllerValue(float)

/*
* @Breif Unset sound 'code' controller for sounds attached to entity. (The client-side version of this script hook is not for server entities!)
* @Pramas 
* @NativeName: UnsetSoundCodeControllerValue
* @NativeFunctionAddress 00000001406AB230
*/

void function UnsetSoundCodeControllerValue()

/*
* @Breif type safe equivalent of ent.kv.model = model
* @Pramas asset
* @NativeName: SetValueForModelKey
* @NativeFunctionAddress 00000001406AB1D0
*/

void function SetValueForModelKey(asset)

/*
* @Breif type safe equivalent of model = ent.kv.model
* @Pramas 
* @NativeName: GetValueForModelKey
* @NativeFunctionAddress 00000001406AB140
*/

asset function GetValueForModelKey()

/*
* @Breif type safe equivalent of ent.kv.texture = texture
* @Pramas asset
* @NativeName: SetValueForTextureKey
* @NativeFunctionAddress 00000001406AB0E0
*/

void function SetValueForTextureKey(asset)

/*
* @Breif type safe equivalent of texture = ent.kv.texture
* @Pramas 
* @NativeName: GetValueForTextureKey
* @NativeFunctionAddress 00000001406AB050
*/

asset function GetValueForTextureKey()

/*
* @Breif type safe equivalent of ent.kv.effect_name = effect_name
* @Pramas asset
* @NativeName: SetValueForEffectNameKey
* @NativeFunctionAddress 00000001406AAFF0
*/

void function SetValueForEffectNameKey(asset)

/*
* @Breif type safe equivalent of effect_name = ent.kv.effect_name
* @Pramas 
* @NativeName: GetValueForEffectNameKey
* @NativeFunctionAddress 00000001406AAF60
*/

asset function GetValueForEffectNameKey()

/*
* @Breif @
* @Pramas string, var
* @NativeName: ScriptSetValueForKey
* @NativeFunctionAddress 00000001406AAE30
*/

bool function SetValueForKey(string, var)

/*
* @Breif Get a string representation of the specified key's value.
* @Pramas string
* @NativeName: ScriptGetKeyValueAsString
* @NativeFunctionAddress 00000001406AADA0
*/

string function GetValueForKey(string)

/*
* @Breif Shortcut for GetValueForKey( "target" )
* @Pramas 
* @NativeName: Script_GetTarget
* @NativeFunctionAddress 00000001406AAD10
*/

string function GetTarget_Deprecated()

/*
* @Breif Returns true if the specified key exists on the entity.
* @Pramas string
* @NativeName: ScriptDoesKeyExist
* @NativeFunctionAddress 00000001406AACA0
*/

bool function HasKey(string)

/*
* @Breif Takes a key in the entity's key value list and returns the next key. Useful for iterating through key values.
* @Pramas var
* @NativeName: ScriptGetNextKey
* @NativeFunctionAddress 00000001406AAB30
*/

var function GetNextKey(var)

/*
* @Breif Ensure that an entity's script scope has been created
* @Pramas 
* @NativeName: InitializeOrValidateScriptScope
* @NativeFunctionAddress 00000001406AAAD0
*/

bool function ValidateScriptScope()

/*
* @Breif Retrieve the script-side data associated with an entity
* @Pramas 
* @NativeName: GetScriptScope
* @NativeFunctionAddress 00000001406AAA70
*/

var function GetScriptScope()

/*
* @Breif Retrieve the script-side data associated with an entity
* @Pramas 
* @NativeName: GetScriptScope
* @NativeFunctionAddress 00000001406AAA70
*/

var function scope()

/*
* @Breif Retrieve the unique identifier used to refer to the entity within the scripting system
* @Pramas 
* @NativeName: GetScriptId
* @NativeFunctionAddress 00000001406AA9E0
*/

string function GetScriptId()

/*
* @Breif Get the centerpoint of an entity.
* @Pramas 
* @NativeName: RenderedWorldSpaceCenter
* @NativeFunctionAddress 00000001406AA910
*/

vector function GetWorldSpaceCenter()

/*
* @Breif Gets this entity's owner
* @Pramas 
* @NativeName: GetScriptOwnerEntity
* @NativeFunctionAddress 00000001406AA8B0
*/

entity function GetOwner()

/*
* @Breif Returns true if entity is a player.
* @Pramas 
* @NativeName: IsPlayer
* @NativeFunctionAddress 00000001406AA850
*/

bool function IsPlayer()

/*
* @Breif Returns true if entity is an NPC.
* @Pramas 
* @NativeName: IsNPC
* @NativeFunctionAddress 00000001406AA7F0
*/

bool function IsNPC()

/*
* @Breif Returns true if entity is the world entity.
* @Pramas 
* @NativeName: IsWorld
* @NativeFunctionAddress 00000001406AA790
*/

bool function IsWorld()

/*
* @Breif Returns true if entity is a func_brush entity.
* @Pramas 
* @NativeName: IsFuncBrush
* @NativeFunctionAddress 00000001406AA730
*/

bool function IsFuncBrush()

/*
* @Breif Returns true if the entity is a predicted projectile.
* @Pramas 
* @NativeName: IsPredictedProjectile
* @NativeFunctionAddress 00000001406AA6D0
*/

bool function IsPredictedProjectile()

/*
* @Breif Returns true if this is a projectile.
* @Pramas 
* @NativeName: IsProjectile
* @NativeFunctionAddress 00000001406AA670
*/

bool function IsProjectile()

/*
* @Breif Returns the absolute velocity of this entity.
* @Pramas 
* @NativeName: GetAbsVelocity
* @NativeFunctionAddress 00000001406AA610
*/

vector function GetVelocity()

/*
* @Breif Returns the local velocity of this entity.
* @Pramas 
* @NativeName: GetLocalVelocity
* @NativeFunctionAddress 00000001406AA5B0
*/

vector function GetLocalVelocity()

/*
* @Breif Controls whether the given entity is drawn in the view model pass
* @Pramas bool
* @NativeName: RenderWithViewModels
* @NativeFunctionAddress 00000001406AA550
*/

void function RenderWithViewModels(bool)

/*
* @Breif Causes entity to render in the view model pass
* @Pramas 
* @NativeName: EnableRenderWithViewModels
* @NativeFunctionAddress 00000001406AA500
*/

void function EnableRenderWithViewModels()

/*
* @Breif Causes entity to NOT render in the view model pass
* @Pramas 
* @NativeName: DisableRenderWithViewModels
* @NativeFunctionAddress 00000001406AA4B0
*/

void function DisableRenderWithViewModels()

/*
* @Breif Returns true if the entity is rendering in the view model pass
* @Pramas 
* @NativeName: IsRenderingWithViewModels
* @NativeFunctionAddress 00000001406AA450
*/

bool function IsRenderingWithViewModels()

/*
* @Breif Causes entity to render with the cockpit
* @Pramas 
* @NativeName: ScriptEnableRenderWithCockpit
* @NativeFunctionAddress 00000001406AA400
*/

void function EnableRenderWithCockpit()

/*
* @Breif Causes entity to NOT render with the cockpit
* @Pramas 
* @NativeName: ScriptDisableRenderWithCockpit
* @NativeFunctionAddress 00000001406AA3B0
*/

void function DisableRenderWithCockpit()

/*
* @Breif Causes entity to render with the hud
* @Pramas 
* @NativeName: ScriptEnableRenderWithHud
* @NativeFunctionAddress 00000001406AA360
*/

void function EnableRenderWithHud()

/*
* @Breif Causes entity to NOT render with the hud
* @Pramas 
* @NativeName: ScriptDisableRenderWithHud
* @NativeFunctionAddress 00000001406AA310
*/

void function DisableRenderWithHud()

/*
* @Breif Causes entity to render with viewmodels, but doesn't zoom in when ADS
* @Pramas 
* @NativeName: ScriptEnableRenderWithViewModelsNoZoom
* @NativeFunctionAddress 00000001406AA2C0
*/

void function EnableRenderWithViewModelsNoZoom()

/*
* @Breif Causes entity to NOT render with viewmodels, but doesn't zoom in when ADS
* @Pramas 
* @NativeName: ScriptDisableRenderWithViewModelsNoZoom
* @NativeFunctionAddress 00000001406AA270
*/

void function DisableRenderWithViewModelsNoZoom()

/*
* @Breif Returns the name of the model
* @Pramas 
* @NativeName: ScriptGetModelName
* @NativeFunctionAddress 00000001406AA1E0
*/

asset function GetModelName()

/*
* @Breif Returns Body group name from the hitboxid.
* @Pramas int
* @NativeName: GetBodygroupNameFromHitboxId
* @NativeFunctionAddress 00000001406AA130
*/

string ornull function GetBodygroupNameFromHitboxId(int)

/*
* @Breif Destroys the entity
* @Pramas 
* @NativeName: ScriptDestroy
* @NativeFunctionAddress 00000001406AA0E0
*/

void function Destroy()

/*
* @Breif If true, this entity will be do a callback to script before being destroyed
* @Pramas bool
* @NativeName: SetDoDestroyCallback
* @NativeFunctionAddress 00000001406AA080
*/

void function SetDoDestroyCallback(bool)

/*
* @Breif Sets the take damage type, DAMAGE_NO, DAMAGE_YES, DAMAGE_EVENTS_ONLY
* @Pramas int
* @NativeName: ScriptSetTakeDamageType
* @NativeFunctionAddress 00000001406AA010
*/

void function SetTakeDamageType(int)

/*
* @Breif True if this entity is being removed (deleted or killed).
* @Pramas 
* @NativeName: ScriptIsMarkedForDeletion
* @NativeFunctionAddress 00000001406A9FB0
*/

bool function IsMarkedForDeletion()

/*
* @Breif True if this entity is ignored by the aimassist system.
* @Pramas 
* @NativeName: IsIgnoredByAimAssist
* @NativeFunctionAddress 00000001406A9F50
*/

bool function IsIgnoredByAimAssist()

/*
* @Breif Returns whether the entity is invulnerable to damage.
* @Pramas 
* @NativeName: IsInvulnerableToDamage
* @NativeFunctionAddress 00000001406A9EF0
*/

bool function IsInvulnerable()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Minimap_GetZOrder
* @NativeFunctionAddress 00000001406A9E40
*/

int function Minimap_GetZOrder()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Minimap_GetCustomState
* @NativeFunctionAddress 00000001406A9D90
*/

int function Minimap_GetCustomState()

/*
* @Breif Make a client-side entity visible to a local player (0 = first player, 1 = next player, etc.).
* @Pramas int
* @NativeName: Script_SetVisibleForLocalPlayer
* @NativeFunctionAddress 00000001406A9D20
*/

void function SetVisibleForLocalPlayer(int)

/*
* @Breif Make a client-side entity invisible to a local player (0 = first player, 1 = next player, etc.).
* @Pramas int
* @NativeName: Script_SetInvisibleForLocalPlayer
* @NativeFunctionAddress 00000001406A9CB0
*/

void function SetInvisibleForLocalPlayer(int)

/*
* @Breif Make a client-side entity visible to a local player (0 = first player, 1 = next player, etc.).
* @Pramas 
* @NativeName: Script_Show
* @NativeFunctionAddress 00000001406A9C60
*/

void function Show()

/*
* @Breif Make a client-side entity invisible to a local player (0 = first player, 1 = next player, etc.).
* @Pramas 
* @NativeName: Script_Hide
* @NativeFunctionAddress 00000001406A9C10
*/

void function Hide()

/*
* @Breif Force entity to have shadows even if it isn't visible to the client.  Useful for makingt he thirdperson model cast a shadow while in first person.
* @Pramas bool
* @NativeName: Script_ForceShadowVisible
* @NativeFunctionAddress 00000001406A9BB0
*/

void function ForceShadowVisible(bool)

/*
* @Breif True if standing on something
* @Pramas 
* @NativeName: IsOnGround
* @NativeFunctionAddress 00000001406A9B50
*/

bool function IsOnGround()

/*
* @Breif Return ground entity
* @Pramas 
* @NativeName: ScriptGetGroundEntity
* @NativeFunctionAddress 00000001406A9AF0
*/

entity function GetGroundEntity()

/*
* @Breif If entity is parented to a pusher
* @Pramas 
* @NativeName: HasPusherAncestor
* @NativeFunctionAddress 00000001406A9A90
*/

bool function HasPusherAncestor()

/*
* @Breif True if the entity is titan type.
* @Pramas 
* @NativeName: IsTitan
* @NativeFunctionAddress 00000001406A9A30
*/

bool function IsTitan()

/*
* @Breif True if the entity is human type.
* @Pramas 
* @NativeName: IsOperator
* @NativeFunctionAddress 00000001406A99D0
*/

bool function IsOperator()

/*
* @Breif True if the entity is human type.
* @Pramas 
* @NativeName: IsHuman
* @NativeFunctionAddress 00000001406A9970
*/

bool function IsHuman()

/*
* @Breif True if the entity is mechanical type
* @Pramas 
* @NativeName: IsMechanical
* @NativeFunctionAddress 00000001406A9910
*/

bool function IsMechanical()

/*
* @Breif True if the entity has gib models
* @Pramas 
* @NativeName: HasGibModel
* @NativeFunctionAddress 00000001406A98B0
*/

bool function HasGibModel()

/*
* @Breif True if the entity is a zipline type.
* @Pramas 
* @NativeName: IsZipline
* @NativeFunctionAddress 00000001406A9850
*/

bool function IsZipline()

/*
* @Breif True if the entity is a zipline type.
* @Pramas 
* @NativeName: IsRopeZipline
* @NativeFunctionAddress 00000001406A97F0
*/

bool function IsRopeZipline()

/*
* @Breif True if the entity is breakable glass.
* @Pramas 
* @NativeName: IsBreakableGlass
* @NativeFunctionAddress 00000001406A9790
*/

bool function IsBreakableGlass()

/*
* @Breif True if the entity is a player decoy.
* @Pramas 
* @NativeName: IsPlayerDecoy
* @NativeFunctionAddress 00000001406A9730
*/

bool function IsPlayerDecoy()

/*
* @Breif True if the entity is a hologram.
* @Pramas 
* @NativeName: IsHologram
* @NativeFunctionAddress 00000001406A96D0
*/

bool function IsHologram()

/*
* @Breif Return if player is cloaked
* @Pramas bool
* @NativeName: IsCloaked
* @NativeFunctionAddress 00000001406A9660
*/

bool function IsCloaked(bool)

/*
* @Breif Return when cloak ends (ie, when fade-in begins)
* @Pramas 
* @NativeName: GetCloakEndTime
* @NativeFunctionAddress 00000001406A95B0
*/

float function GetCloakEndTime()

/*
* @Breif Return the cloak fade time amount (0 = off, 1 = on)
* @Pramas 
* @NativeName: GetCloakFadeFactor
* @NativeFunctionAddress 00000001406A9500
*/

float function GetCloakFadeFactor()

/*
* @Breif Sets whether the entity can cloak or not
* @Pramas bool
* @NativeName: SetCanCloak
* @NativeFunctionAddress 00000001406A94A0
*/

void function SetCanCloak(bool)

/*
* @Breif Gets whether the entity can cloak or not
* @Pramas 
* @NativeName: CanCloak
* @NativeFunctionAddress 00000001406A9440
*/

bool function CanCloak()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsPhaseShifted
* @NativeFunctionAddress 00000001406A93E0
*/

bool function IsPhaseShifted()

/*
* @Breif Get the current highlight context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentContext
* @NativeFunctionAddress 00000001406A9330
*/

int function Highlight_GetCurrentContext()

/*
* @Breif Get the inside opacity on the current context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentInsideOpacity
* @NativeFunctionAddress 00000001406A9280
*/

float function Highlight_GetCurrentInsideOpacity()

/*
* @Breif Get the outline opacity on the current context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentOutlineOpacity
* @NativeFunctionAddress 00000001406A91D0
*/

float function Highlight_GetCurrentOutlineOpacity()

/*
* @Breif Tells if this entity can inherit the highlighting settings from a parent entity if there is no local settings.
* @Pramas 
* @NativeName: Script_Highlight_GetInheritHighlight
* @NativeFunctionAddress 00000001406A9170
*/

bool function Highlight_GetInheritHighlight()

/*
* @Breif Get the inside function slot on the given context. 0 for a disabled a function.
* @Pramas int
* @NativeName: Script_Highlight_GetInsideFunction
* @NativeFunctionAddress 00000001406A90B0
*/

int function Highlight_GetInsideFunction(int)

/*
* @Breif Get the outline function slot on the given context. 0 for a disabled a function.
* @Pramas int
* @NativeName: Script_Highlight_GetOutlineFunction
* @NativeFunctionAddress 00000001406A8FF0
*/

int function Highlight_GetOutlineFunction(int)

/*
* @Breif Get the outline radius on the given context.
* @Pramas int
* @NativeName: Script_Highlight_GetOutlineRadius
* @NativeFunctionAddress 00000001406A8F30
*/

float function Highlight_GetOutlineRadius(int)

/*
* @Breif Get custom parameters on the given context. Parameters are shared between inside and outline functions.
* @Pramas int, int
* @NativeName: Script_Highlight_GetParam
* @NativeFunctionAddress 00000001406A8E30
*/

vector function Highlight_GetParam(int, int)

/*
* @Breif Get custom state on the given context. Parameters are shared between inside and outline functions.
* @Pramas int
* @NativeName: Script_Highlight_GetState
* @NativeFunctionAddress 00000001406A8D70
*/

int function Highlight_GetState(int)

/*
* @Breif Tells if this entity will be drawn.
* @Pramas int
* @NativeName: Script_Highlight_IsEntityVisible
* @NativeFunctionAddress 00000001406A8CF0
*/

bool function Highlight_IsEntityVisible(int)

/*
* @Breif Tells if this highlight will be drawn after all post-processes.
* @Pramas int
* @NativeName: Script_Highlight_IsAfterPostProcess
* @NativeFunctionAddress 00000001406A8C70
*/

bool function Highlight_IsAfterPostProcess(int)

/*
* @Breif Enable highlighting on this entity.
* @Pramas 
* @NativeName: Script_Highlight_Enable
* @NativeFunctionAddress 00000001406A8C20
*/

void function Highlight_Enable()

/*
* @Breif Set the current highlight context. 0 by default. Server has priority over client. Use context -1 to disable highlighting.
* @Pramas int
* @NativeName: Script_Highlight_SetCurrentContext
* @NativeFunctionAddress 00000001406A8BB0
*/

void function Highlight_SetCurrentContext(int)

/*
* @Breif Set if this entity can inherit the highlighting settings from a parent entity if there is no local settings. False by default. Shared by all contexts.
* @Pramas bool
* @NativeName: Script_Highlight_SetInheritHighlight
* @NativeFunctionAddress 00000001406A8B50
*/

void function Highlight_SetInheritHighlight(bool)

/*
* @Breif Given( contextID, insideSlot, entityVisible, outlineSlot, outlineRadius, state, afterPostProcess ) Set function slots on the given context. Use slot 0 to disable a function
* @Pramas int, int, bool, int, float, int, bool
* @NativeName: Script_Highlight_SetFunctions
* @NativeFunctionAddress 00000001406A8A60
*/

void function Highlight_SetFunctions(int, int, bool, int, float, int, bool)

/*
* @Breif Set custom parameters on the given context. Parameters are shared between inside and outline functions.
* @Pramas int, int, vector
* @NativeName: Script_Highlight_SetParam
* @NativeFunctionAddress 00000001406A89D0
*/

void function Highlight_SetParam(int, int, vector)

/*
* @Breif Hide inside function in a given duration. 0 to hide immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_HideInside
* @NativeFunctionAddress 00000001406A8960
*/

void function Highlight_HideInside(float)

/*
* @Breif Hide outline function in a given duration. 0 to hide immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_HideOutline
* @NativeFunctionAddress 00000001406A88F0
*/

void function Highlight_HideOutline(float)

/*
* @Breif Show inside function in a given duration. 0 to show immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_ShowInside
* @NativeFunctionAddress 00000001406A8880
*/

void function Highlight_ShowInside(float)

/*
* @Breif Show outline function in a given duration. 0 to show immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_ShowOutline
* @NativeFunctionAddress 00000001406A8810
*/

void function Highlight_ShowOutline(float)

/*
* @Breif Sets fade in time for highlight.
* @Pramas float
* @NativeName: Script_Highlight_SetFadeInTime
* @NativeFunctionAddress 00000001406A87A0
*/

void function Highlight_SetFadeInTime(float)

/*
* @Breif Sets fade out time for highlight.
* @Pramas float
* @NativeName: Script_Highlight_SetFadeOutTime
* @NativeFunctionAddress 00000001406A8730
*/

void function Highlight_SetFadeOutTime(float)

/*
* @Breif Sets visibility type for highlight.
* @Pramas int
* @NativeName: Script_Highlight_SetVisibilityType
* @NativeFunctionAddress 00000001406A86C0
*/

void function Highlight_SetVisibilityType(int)

/*
* @Breif Sets how long the highlight lasts for before fading out.
* @Pramas float
* @NativeName: Script_Highlight_SetLifeTime
* @NativeFunctionAddress 00000001406A8650
*/

void function Highlight_SetLifeTime(float)

/*
* @Breif Sets fade dist
* @Pramas float
* @NativeName: Script_Highlight_SetNearFadeDist
* @NativeFunctionAddress 00000001406A85E0
*/

void function Highlight_SetNearFadeDist(float)

/*
* @Breif Sets fade dist
* @Pramas float
* @NativeName: Script_Highlight_SetFarFadeDist
* @NativeFunctionAddress 00000001406A8570
*/

void function Highlight_SetFarFadeDist(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Highlight_GetNearFadeDist
* @NativeFunctionAddress 00000001406A84C0
*/

float function Highlight_GetNearFadeDist()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Highlight_GetFarFadeDist
* @NativeFunctionAddress 00000001406A8410
*/

float function Highlight_GetFarFadeDist()

/*
* @Breif sets a flag to active or not on a highlight
* @Pramas int, bool
* @NativeName: Script_Highlight_SetFlag
* @NativeFunctionAddress 00000001406A83A0
*/

void function Highlight_SetFlag(int, bool)

/*
* @Breif sets the highlight flags back to 0
* @Pramas 
* @NativeName: Script_Highlight_ResetFlags
* @NativeFunctionAddress 00000001406A8350
*/

void function Highlight_ResetFlags()

/*
* @Breif Gets whether or not a flag is active on a highlight
* @Pramas int
* @NativeName: Script_Highlight_GetFlag
* @NativeFunctionAddress 00000001406A82D0
*/

bool function Highlight_GetFlag(int)

/*
* @Breif Starts the highlight as on no matter what.
* @Pramas 
* @NativeName: Script_Highlight_StartOn
* @NativeFunctionAddress 00000001406A8280
*/

void function Highlight_StartOn()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightEnableForTeam
* @NativeFunctionAddress 00000001406A8210
*/

void function HighlightEnableForTeam(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightDisableForTeam
* @NativeFunctionAddress 00000001406A81A0
*/

void function HighlightDisableForTeam(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightSetTeamBitField
* @NativeFunctionAddress 00000001406A8130
*/

void function HighlightSetTeamBitField(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_IsHighlightEnabledForTeam
* @NativeFunctionAddress 00000001406A80B0
*/

bool function IsHighlightEnabledForTeam(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Highlight_PushPingedState
* @NativeFunctionAddress 00000001406A8060
*/

void function Highlight_PushPingedState()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Highlight_PopPingedState
* @NativeFunctionAddress 00000001406A8010
*/

void function Highlight_PopPingedState()

/*
* @Breif Get a vector containing min bounds, centered on object
* @Pramas 
* @NativeName: Script_GetBoundingMins
* @NativeFunctionAddress 00000001406A7F40
*/

vector function GetBoundingMins()

/*
* @Breif Get a vector containing max bounds, centered on object
* @Pramas 
* @NativeName: Script_GetBoundingMaxs
* @NativeFunctionAddress 00000001406A7E70
*/

vector function GetBoundingMaxs()

/*
* @Breif Returns minimum bounds in world-space. This takes into account all movement of the current animation.
* @Pramas 
* @NativeName: WorldSpaceSurroundingMins
* @NativeFunctionAddress 00000001406A7DA0
*/

vector function WorldSpaceSurroundingMins()

/*
* @Breif Returns maximum bounds in world-space. This takes into account all movement of the current animation.
* @Pramas 
* @NativeName: WorldSpaceSurroundingMaxs
* @NativeFunctionAddress 00000001406A7CD0
*/

vector function WorldSpaceSurroundingMaxs()

/*
* @Breif Registers the entity to have the script function ClientCallback_OnHealthChanged called when their health changes
* @Pramas 
* @NativeName: EnableHealthChangedCallback
* @NativeFunctionAddress 00000001406A7C80
*/

void function EnableHealthChangedCallback()

/*
* @Breif Unregisters the entity from having the script function ClientCallback_OnHealthChanged called when their health changes
* @Pramas 
* @NativeName: DisableHealthChangedCallback
* @NativeFunctionAddress 00000001406A7C30
*/

void function DisableHealthChangedCallback()

/*
* @Breif Turn on/off death callback on entity
* @Pramas bool
* @NativeName: DoDeathCallback
* @NativeFunctionAddress 00000001406A7BD0
*/

void function DoDeathCallback(bool)

/*
* @Breif Get the named attachement id
* @Pramas string
* @NativeName: ScriptLookupAttachment
* @NativeFunctionAddress 00000001406A7B10
*/

int function LookupAttachment(string)

/*
* @Breif Set the distance that this entity starts fading.
* @Pramas float
* @NativeName: SetFadeDist
* @NativeFunctionAddress 00000001406A7AA0
*/

void function SetFadeDistance(float)

/*
* @Breif 
* @Pramas entity, vector, vector, vector, int, int, int, int, entity, int
* @NativeName: Script_DispatchImpactEffects
* @NativeFunctionAddress 00000001406A7900
*/

void function DispatchImpactEffects(entity, vector, vector, vector, int, int, int, int, entity, int)

/*
* @Breif Draw this entity
* @Pramas 
* @NativeName: EnableDraw
* @NativeFunctionAddress 00000001406A78B0
*/

void function EnableDraw()

/*
* @Breif Disabling rendering of this entity.  Attached effects with render.
* @Pramas 
* @NativeName: DisableDraw
* @NativeFunctionAddress 00000001406A7860
*/

void function DisableDraw()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetLifeState
* @NativeFunctionAddress 00000001406A77B0
*/

int function GetLifeState()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetShieldHealth
* @NativeFunctionAddress 00000001406A7700
*/

int function GetShieldHealth()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetShieldHealthMax
* @NativeFunctionAddress 00000001406A7650
*/

int function GetShieldHealthMax()

/*
* @Breif Forces an entity to be visible during phase shift.
* @Pramas bool
* @NativeName: Script_SetForceVisibleInPhaseShift
* @NativeFunctionAddress 00000001406A75F0
*/

void function SetForceVisibleInPhaseShift(bool)

/*
* @Breif Allows the shifter to see others while not in phase shift
* @Pramas bool
* @NativeName: Script_SetSeeOtherNonShifters
* @NativeFunctionAddress 00000001406A7590
*/

void function SetSeeOtherNonShifters(bool)

/*
* @Breif Allows ent to have aim assit applied to them on non phased players while they are phased
* @Pramas bool
* @NativeName: Script_SetCanBeAimAssistTrackedWhilePhased
* @NativeFunctionAddress 00000001406A7530
*/

void function SetCanBeAimAssistTrackedWhilePhased(bool)

/*
* @Breif Returns array of entities that this entity is linked to
* @Pramas 
* @NativeName: ScriptGetLinkEntArray
* @NativeFunctionAddress 00000001406A7460
*/

array< entity > function GetLinkEntArray()

/*
* @Breif Returns array of entities that are linked to this entity
* @Pramas 
* @NativeName: ScriptGetLinkParentArray
* @NativeFunctionAddress 00000001406A7390
*/

array< entity > function GetLinkParentArray()

/*
* @Breif Returns the single entity this entity is linked to (if there is one)
* @Pramas 
* @NativeName: ScriptGetLinkEnt
* @NativeFunctionAddress 00000001406A7330
*/

entity function GetLinkEnt()

/*
* @Breif Returns the single entity that connects to this entity (if there is one)
* @Pramas 
* @NativeName: ScriptGetLinkParent
* @NativeFunctionAddress 00000001406A72D0
*/

entity function GetLinkParent()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPassThroughFlags
* @NativeFunctionAddress 00000001406A7220
*/

int function GetPassThroughFlags()

/*
* @Breif Sets flags for when pass through happens on this entity
* @Pramas int
* @NativeName: Script_SetPassThroughFlags
* @NativeFunctionAddress 00000001406A71B0
*/

void function SetPassThroughFlags(int)

/*
* @Breif Sets the thickness of and entity for pass through bullets.
* @Pramas int
* @NativeName: Script_SetPassThroughThickness
* @NativeFunctionAddress 00000001406A7140
*/

void function SetPassThroughThickness(int)

/*
* @Breif Sets the direciton the shot has to come from to pass the ent
* @Pramas float
* @NativeName: Script_SetPassThroughDirection
* @NativeFunctionAddress 00000001406A70D0
*/

void function SetPassThroughDirection(float)

/*
* @Breif Disables Id lights on this entity
* @Pramas 
* @NativeName: Script_DisableIdLights
* @NativeFunctionAddress 00000001406A7080
*/

void function DisableIdLights()

/*
* @Breif Enables Id lights on this entity
* @Pramas 
* @NativeName: Script_EnableIdLights
* @NativeFunctionAddress 00000001406A7030
*/

void function EnableIdLights()

/*
* @Breif Set the visibility flags for a given entity
* @Pramas int
* @NativeName: Script_SetVisibilityFlags
* @NativeFunctionAddress 00000001406A6FC0
*/

void function SetVisibilityFlags(int)

/*
* @Breif Make this client entity alive or dead. Needed for id lights to work.
* @Pramas bool
* @NativeName: SetAlive
* @NativeFunctionAddress 00000001406A6F60
*/

void function SetAlive(bool)

/*
* @Breif 
* @Pramas bool
* @NativeName: Script_SetPreventCrits
* @NativeFunctionAddress 00000001406A6F00
*/

void function SetPreventCrits(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetCritsPrevented
* @NativeFunctionAddress 00000001406A6EA0
*/

bool function GetCritsPrevented()

/*
* @Breif Set this entity to render always
* @Pramas 
* @NativeName: ScriptEnableRenderAlways
* @NativeFunctionAddress 00000001406A6E50
*/

void function EnableRenderAlways()

/*
* @Breif Set this entity to not render always
* @Pramas 
* @NativeName: ScriptDisableRenderAlways
* @NativeFunctionAddress 00000001406A6E00
*/

void function DisableRenderAlways()

/*
* @Breif Check if the entity belongs to the realm.
* @Pramas int realmIndex
* @NativeName: ScriptIsInRealm
* @NativeFunctionAddress 00000001406A6D80
*/

bool function IsInRealm(int realmIndex)

/*
* @Breif Removes the entity from all the realms.
* @Pramas 
* @NativeName: ScriptRemoveFromAllRealms
* @NativeFunctionAddress 00000001406A6D30
*/

void function RemoveFromAllRealms()

/*
* @Breif Copy the highlight state of the entity ent to this entity.
* @Pramas entity ent
* @NativeName: Script_CopyHighlightState
* @NativeFunctionAddress 00000001406A6CB0
*/

void function CopyHighlightState(entity ent)

/*
* @Breif Check if the entity is hidden ( Hide function for client entities ).
* @Pramas 
* @NativeName: Script_IsHidden
* @NativeFunctionAddress 00000001406A6C50
*/

bool function IsHidden()

/*
* @Breif Gets a bool network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetBool
* @NativeFunctionAddress 00000001406A6BE0
*/

bool function GetNetBool(string)

/*
* @Breif Gets an int network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetInt
* @NativeFunctionAddress 00000001406A6B20
*/

int function GetNetInt(string)

/*
* @Breif Gets a float network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetFloat
* @NativeFunctionAddress 00000001406A6A60
*/

float function GetNetFloat(string)

/*
* @Breif Gets a time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetTime
* @NativeFunctionAddress 00000001406A69A0
*/

float function GetNetTime(string)

/*
* @Breif Gets an entity network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetEnt
* @NativeFunctionAddress 00000001406A6930
*/

entity function GetNetEnt(string)

/*
* @Breif Get Whether a script entity can be meleed - Damage and Lunge
* @Pramas 
* @NativeName: Script_CanBeMeleed
* @NativeFunctionAddress 00000001406A68D0
*/

bool function CanBeMeleed()

/*
* @Breif Parents this entity to another entity.
* @Pramas entity parentEnt, string attachment = "", bool maintainOffset = null, float blendTime = 0
* @NativeName: ScriptSetParent
* @NativeFunctionAddress 0000000140699D00
*/

var function SetParent()

/*
* @Breif Parents this entity to another entity's hitbox.
* @Pramas entity parentEnt, int hitboxIdx, bool maintainOffset = null, float blendTime = 0
* @NativeName: ScriptSetParentWithHitbox
* @NativeFunctionAddress 0000000140699D50
*/

var function SetParentWithHitbox()

/*
* @Breif Creates and returns a script table from the entity's model's $keyvalues block.
* @Pramas 
* @NativeName: ScriptCreateTableFromModelKeyValues
* @NativeFunctionAddress 0000000140699F90
*/

table function CreateTableFromModelKeyValues(var)

/*
* @Breif Check if the entity shares a realm with this entity.
* @Pramas entity otherEntity
* @NativeName: ScriptDoesShareRealms
* @NativeFunctionAddress 000000014069A5C0
*/

var function DoesShareRealms()

/*
* @Breif Get list of realms this entity belongs to.
* @Pramas 
* @NativeName: ScriptGetRealms
* @NativeFunctionAddress 000000014069A610
*/

var function GetRealms()

/*
* @Breif Get list of realms this entity shares with the other entity.
* @Pramas entity otherEntity
* @NativeName: ScriptGetSharedRealms
* @NativeFunctionAddress 000000014069A660
*/

var function GetSharedRealms()

/*
* @Breif Add this entity to all the realms the other entity belongs to, in addition to the current realms the entity is in
* @Pramas entity otherEntity
* @NativeName: ScriptAddToOtherEntitysRealms
* @NativeFunctionAddress 000000014069A6B0
*/

var function AddToOtherEntitysRealms()

/*
* @Breif Get list of children entities. ( Entities that have this as the move parent. )
* @Pramas 
* @NativeName: Script_GetChildren
* @NativeFunctionAddress 000000014069A700
*/

var function GetChildren()

/*
* @Breif Set the specified pose parameter to the specified value
* @Pramas string, float
* @NativeName: ScriptSetPoseParameter
* @NativeFunctionAddress 00000001406B1130
*/

void function SetPoseParameter(string, float)

/*
* @Breif Ask whether the main sequence is done playing
* @Pramas 
* @NativeName: IsSequenceFinished
* @NativeFunctionAddress 00000001406B10D0
*/

bool function IsSequenceFinished()

/*
* @Breif Get the attachement id's origin vector
* @Pramas int
* @NativeName: ScriptGetAttachmentOrigin
* @NativeFunctionAddress 00000001406B1050
*/

vector function GetAttachmentOrigin(int)

/*
* @Breif Get the attachement id's angles as a p,y,r vector
* @Pramas int
* @NativeName: ScriptGetAttachmentAngles
* @NativeFunctionAddress 00000001406B0FD0
*/

vector function GetAttachmentAngles(int)

/*
* @Breif Get the attachement id's forward vector
* @Pramas int
* @NativeName: ScriptGetAttachmentForward
* @NativeFunctionAddress 00000001406B0F50
*/

vector function GetAttachmentForward(int)

/*
* @Breif Get the attachement id's right vector
* @Pramas int
* @NativeName: ScriptGetAttachmentRight
* @NativeFunctionAddress 00000001406B0ED0
*/

vector function GetAttachmentRight(int)

/*
* @Breif Get the attachement id's up vector
* @Pramas int
* @NativeName: ScriptGetAttachmentUp
* @NativeFunctionAddress 00000001406B0E50
*/

vector function GetAttachmentUp(int)

/*
* @Breif Get the attachement id's origin vector on a viewmodel entity without the FOV adjustment
* @Pramas int
* @NativeName: ScriptGetAttachmentOrigin_ViewModelNoFOVAdjust
* @NativeFunctionAddress 00000001406B0D60
*/

vector function GetAttachmentOrigin_ViewModelNoFOVAdjust(int)

/*
* @Breif Returns whether this entity is a viewmodel
* @Pramas 
* @NativeName: IsViewModel
* @NativeFunctionAddress 00000001406B0D00
*/

bool function IsViewModel()

/*
* @Breif Returns the hit group of the given hitbox with the current model
* @Pramas int
* @NativeName: GetHitGroupOfHitBox
* @NativeFunctionAddress 00000001406B0C40
*/

int function GetHitGroupOfHitBox(int)

/*
* @Breif Sets the decalIndex.
* @Pramas int decalIndex
* @NativeName: Script_SetDecal
* @NativeFunctionAddress 00000001406B0720
*/

void function SetDecal(int decalIndex)

/*
* @Breif Gets the decalIndex.
* @Pramas 
* @NativeName: GetDecal
* @NativeFunctionAddress 00000001406B0670
*/

int function GetDecal()

/*
* @Breif Set whether this model should do face animations or not
* @Pramas bool
* @NativeName: ScriptSetDoFaceAnimations
* @NativeFunctionAddress 00000001406B0610
*/

void function SetDoFaceAnimations(bool)

/*
* @Breif Given ( groupIndex, modelIndex ), Sets a bodygroup's model by index
* @Pramas int, int
* @NativeName: ScriptSetBodygroupModelByIndex
* @NativeFunctionAddress 00000001406B0590
*/

void function SetBodygroupModelByIndex(int, int)

/*
* @Breif Given ( groupIndex, modelName ), Sets a bodygroup's model by name
* @Pramas int, string
* @NativeName: ScriptSetBodygroupModelByName
* @NativeFunctionAddress 00000001406B0510
*/

void function SetBodygroupModel(int, string)

/*
* @Breif Given ( groupName ), finds the index of the bodygroup with the given name. Returns -1 if it doesn't exist
* @Pramas string
* @NativeName: ScriptFindBodygroup
* @NativeFunctionAddress 00000001406B0450
*/

int function FindBodygroup(string)

/*
* @Breif Given ( groupIndex, modelName ), finds the bodygroup's model index with the given name. Returns -1 if it doesn't exist
* @Pramas int, string
* @NativeName: ScriptFindBodygroupModelIndex
* @NativeFunctionAddress 00000001406B0380
*/

int function FindBodygroupModelIndex(int, string)

/*
* @Breif Given ( groupIndex ), gets the currently active model index of a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModelIndex
* @NativeFunctionAddress 00000001406B02C0
*/

int function GetBodygroupModelIndex(int)

/*
* @Breif Given ( groupIndex ), gets the currently active model name of a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModel
* @NativeFunctionAddress 00000001406B0220
*/

string function GetBodygroupModel(int)

/*
* @Breif Given ( groupIndex, modelIndex ), gets the name of the bodygroup's model at the given index.
* @Pramas int, int
* @NativeName: ScriptGetBodygroupModelNameForIndex
* @NativeFunctionAddress 00000001406B0170
*/

string function GetBodygroupModelNameForIndex(int, int)

/*
* @Breif Given ( groupIndex ), gets the number of models in a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModelCount
* @NativeFunctionAddress 00000001406B00B0
*/

int function GetBodygroupModelCount(int)

/*
* @Breif Given ( groupIndex ), gets the index of the "blank" model, or -1 if none.
* @Pramas int
* @NativeName: ScriptGetBodygroupBlankModelIndex
* @NativeFunctionAddress 00000001406AFFF0
*/

int function GetBodygroupBlankModelIndex(int)

/*
* @Breif Set the ground FX table by name
* @Pramas string
* @NativeName: SetGroundEffectTable
* @NativeFunctionAddress 00000001406AFF90
*/

void function SetGroundEffectTable(string)

/*
* @Breif Play an anim without trying to set origin/angles (unless parented)
* @Pramas string
* @NativeName: Anim_Play
* @NativeFunctionAddress 00000001406AFF30
*/

void function Anim_Play(string)

/*
* @Breif Play an anim without trying to set origin/angles (even if parented
* @Pramas string
* @NativeName: Anim_PlayOnly
* @NativeFunctionAddress 00000001406AFED0
*/

void function Anim_PlayOnly(string)

/*
* @Breif Gets the name of the current sequence
* @Pramas 
* @NativeName: Script_GetCurrentSequenceName
* @NativeFunctionAddress 00000001406AFE40
*/

string function GetCurrentSequenceName()

/*
* @Breif Stops the current animation started by Anim_Play*()
* @Pramas 
* @NativeName: Anim_Stop
* @NativeFunctionAddress 00000001406AFDF0
*/

void function Anim_Stop()

/*
* @Breif Pause the current animtion started by Anim_Play*(). Used by the animation previewer.
* @Pramas bool
* @NativeName: Anim_SetPaused
* @NativeFunctionAddress 00000001406AFD90
*/

void function Anim_SetPaused(bool)

/*
* @Breif Just sets the current sequence, without the entity entering a scripted anim mode.
* @Pramas string
* @NativeName: Anim_NonScriptedPlay
* @NativeFunctionAddress 00000001406AFD30
*/

void function Anim_NonScriptedPlay(string)

/*
* @Breif Plays an animation with a specific ref point.
* @Pramas string, vector, vector, float
* @NativeName: Anim_PlayWithRefPoint
* @NativeFunctionAddress 00000001406AFCA0
*/

void function Anim_PlayWithRefPoint(string, vector, vector, float)

/*
* @Breif Returns true if currently playing an animation from Anim_Play*()
* @Pramas 
* @NativeName: Anim_IsActive
* @NativeFunctionAddress 00000001406AFC40
*/

bool function Anim_IsActive()

/*
* @Breif Returns bool whether the entity's model has the specified sequence.
* @Pramas string
* @NativeName: Anim_HasSequence
* @NativeFunctionAddress 00000001406AFBD0
*/

bool function Anim_HasSequence(string)

/*
* @Breif Returns bool whether the entity's model has the specified activity.
* @Pramas string
* @NativeName: Anim_HasActivity
* @NativeFunctionAddress 00000001406AFB60
*/

bool function Anim_HasActivity(string)

/*
* @Breif By default the REF attachment is checked only the first frame to get the initial offset. Then root motion is added onto that offset. Call this function to position the entity using REF every frame instead of using root motion.
* @Pramas 
* @NativeName: Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion
* @NativeFunctionAddress 00000001406AFB10
*/

void function Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion()

/*
* @Breif Sets the initial time (in seconds) that the given animation will begin playing at
* @Pramas float
* @NativeName: Anim_SetInitialTime
* @NativeFunctionAddress 00000001406AFAA0
*/

void function Anim_SetInitialTime(float)

/*
* @Breif Immediately setup up the animation like as if it had actually already started at the given start time
* @Pramas float
* @NativeName: Anim_SetStartTime
* @NativeFunctionAddress 00000001406AFA30
*/

void function Anim_SetStartTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Anim_GetStartTime
* @NativeFunctionAddress 00000001406AF980
*/

float function Anim_GetStartTime()

/*
* @Breif Ignore parent rotation when playing relative to a parent attachment. Turns off automatically on Anim_Stop
* @Pramas bool
* @NativeName: Anim_IgnoreParentRotation
* @NativeFunctionAddress 00000001406AF920
*/

void function Anim_IgnoreParentRotation(bool)

/*
* @Breif Leave prediction on for the player while the animation is playing.
* @Pramas 
* @NativeName: Anim_EnablePrediction
* @NativeFunctionAddress 00000001406AF8D0
*/

void function Anim_EnablePrediction()

/*
* @Breif Enable sequence transitioner for this client-only entity
* @Pramas 
* @NativeName: AddToClientSideSequenceTransitionerList
* @NativeFunctionAddress 00000001406AF880
*/

void function Anim_EnableSequenceTransitioner()

/*
* @Breif Disable sequence transitioner for this client-only entity
* @Pramas 
* @NativeName: RemoveFromClientSideSequenceTransitionerList
* @NativeFunctionAddress 00000001406AF830
*/

void function Anim_DisableSequenceTransitioner()

/*
* @Breif Get animation sequence duration in seconds
* @Pramas string
* @NativeName: ScriptGetSequenceDuration
* @NativeFunctionAddress 00000001406AF770
*/

float function GetSequenceDuration(string)

/*
* @Breif Get integer index for sequence string
* @Pramas string
* @NativeName: ScriptLookupSequence
* @NativeFunctionAddress 00000001406AF6B0
*/

int function LookupSequence(string)

/*
* @Breif Returns the cycle for the given event in the given animation sequence. Returns -1 on any errors.
* @Pramas string, string
* @NativeName: ScriptGetAnimEventCycleFrac
* @NativeFunctionAddress 00000001406AF5F0
*/

float function GetAnimEventCycleFrac(string, string)

/*
* @Breif Returns the cycle for the given AE_SV/CL_VSCRIPT_CALLBACK event, with the given option name, in the given animation sequence. Returns -1 on any errors.
* @Pramas string, string
* @NativeName: ScriptGetScriptedAnimEventCycleFrac
* @NativeFunctionAddress 00000001406AF530
*/

float function GetScriptedAnimEventCycleFrac(string, string)

/*
* @Breif Sets the sky scale for this entity.  Pass in target skyscale and time to lerp to that value.
* @Pramas float, float
* @NativeName: LerpSkyScale
* @NativeFunctionAddress 00000001406AF4A0
*/

void function LerpSkyScale(float, float)

/*
* @Breif Request this entity to do body group change callback for a specific body group, or -1 for any body group
* @Pramas bool, int
* @NativeName: DoBodyGroupChangeScriptCallback
* @NativeFunctionAddress 00000001406AF430
*/

void function DoBodyGroupChangeScriptCallback(bool, int)

/*
* @Breif Request this entity to do model change callback
* @Pramas bool
* @NativeName: DoModelChangeScriptCallback
* @NativeFunctionAddress 00000001406AF3D0
*/

void function DoModelChangeScriptCallback(bool)

/*
* @Breif Get how far through the animation is.
* @Pramas 
* @NativeName: GetCycle
* @NativeFunctionAddress 00000001406AF320
*/

float function GetCycle()

/*
* @Breif Set how far through the animation is.
* @Pramas float
* @NativeName: ScriptSetCycle
* @NativeFunctionAddress 00000001406AF2B0
*/

void function SetCycle(float)

/*
* @Breif Set the playback rate
* @Pramas float
* @NativeName: Anim_SetPlaybackRate
* @NativeFunctionAddress 00000001406AF240
*/

void function Anim_SetPlaybackRate(float)

/*
* @Breif Get the playback rate
* @Pramas 
* @NativeName: Anim_GetPlaybackRate
* @NativeFunctionAddress 00000001406AF190
*/

float function Anim_GetPlaybackRate()

/*
* @Breif Change the playback rate of an already-playing animation
* @Pramas float
* @NativeName: Anim_ChangePlaybackRate
* @NativeFunctionAddress 00000001406AF120
*/

void function Anim_ChangePlaybackRate(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetSequence
* @NativeFunctionAddress 00000001406AF070
*/

int function GetSequence()

/*
* @Breif 
* @Pramas 
* @NativeName: MakeSafeForUIScriptHack
* @NativeFunctionAddress 00000001406AF020
*/

void function MakeSafeForUIScriptHack()

/*
* @Breif Gets the scale for the model for the animating entity.
* @Pramas 
* @NativeName: GetModelScale
* @NativeFunctionAddress 00000001406AEF70
*/

float function GetModelScale()

/*
* @Breif Sets the scale for the model for the animating entity.
* @Pramas float scale
* @NativeName: SetModelScale
* @NativeFunctionAddress 00000001406AEF00
*/

void function SetModelScale(float scale)

/*
* @Breif Force sync the animation of the created anim prop entity with the parent entity.
* @Pramas entity parentEntity, float startCycle, float endCycle, string windowName
* @NativeName: Script_AnimSyncScriptProp_Begin
* @NativeFunctionAddress 00000001406AEE40
*/

void function AnimSyncScriptProp_Begin(entity parentEntity, float startCycle, float endCycle, string windowName)

/*
* @Breif Force sync the animation of the created anim prop entity with the parent entity.
* @Pramas entity parentEntity
* @NativeName: Script_AnimSyncScriptProp_End
* @NativeFunctionAddress 00000001406AEDC0
*/

void function AnimSyncScriptProp_End(entity parentEntity)

/*
* @Breif Print information about the existing windows on this animating entity.
* @Pramas 
* @NativeName: AnimWindowDebugData
* @NativeFunctionAddress 00000001406A8C20
*/

void function AnimWindowDebugData()

/*
* @Breif Print information about the existing anim props in this animating entity.
* @Pramas 
* @NativeName: AnimPropDebugData
* @NativeFunctionAddress 00000001406A8C20
*/

void function AnimPropDebugData()

/*
* @Breif Gets the starting position for an animation played with a specific ref point.
* @Pramas string animName, vector origin, vector angles
* @NativeName: Anim_GetStartForRefPoint_Script
* @NativeFunctionAddress 0000000140699290
*/

var function Anim_GetStartForRefPoint()

/*
* @Breif Gets the starting position for an animation played with a parent entity and attachment as a ref point.
* @Pramas string animName, entity ent, string attachment
* @NativeName: Anim_GetStartForRefEntity_Script
* @NativeFunctionAddress 00000001406992E0
*/

var function Anim_GetStartForRefEntity()

/*
* @Breif Gets the starting position for an animation played with a specific ref point.
* @Pramas animName, referencePosition, referenceAngles
* @NativeName: Anim_GetStartForRefPoint_ScriptOld
* @NativeFunctionAddress 0000000140699330
*/

table function Anim_GetStartForRefPoint_Old(var, string, vector, vector)

/*
* @Breif Gets the starting position for an animation played with a parent entity and attachment as a ref point.
* @Pramas animName, referenceEntity, referenceAttachment
* @NativeName: Anim_GetStartForRefEntity_ScriptOld
* @NativeFunctionAddress 0000000140699380
*/

table function Anim_GetStartForRefEntity_Old(var, string, entity, string)

/*
* @Breif Returns the position and angle of an attachment at the given time in the given animation
* @Pramas string animName, string attachName, float time
* @NativeName: Script_GetAttachmentAtTime
* @NativeFunctionAddress 00000001406994B0
*/

var function Anim_GetAttachmentAtTime()

/*
* @Breif Returns the display name of the weapon
* @Pramas 
* @NativeName: GetPrintName
* @NativeFunctionAddress 0000000140A68670
*/

string ornull function GetWeaponPrintName()

/*
* @Breif Returns the description of the weapon
* @Pramas 
* @NativeName: GetWeaponDescription
* @NativeFunctionAddress 0000000140A685E0
*/

string ornull function GetWeaponDescription()

/*
* @Breif 
* @Pramas asset
* @NativeName: Script_SetDroppedModel
* @NativeFunctionAddress 0000000140A68580
*/

void function SetDroppedModel(asset)

/*
* @Breif Returns index for the given attachment on the weapon's world model.
* @Pramas string
* @NativeName: ScriptLookupWorldModelAttachment
* @NativeFunctionAddress 0000000140A684C0
*/

int function LookupWorldModelAttachment(string)

/*
* @Breif Returns index for the given attachment on the weapon's view model.
* @Pramas string
* @NativeName: ScriptLookupViewModelAttachment
* @NativeFunctionAddress 0000000140A68400
*/

int function LookupViewModelAttachment(string)

/*
* @Breif Returns entity using the weapon
* @Pramas 
* @NativeName: GetWeaponOwner_Script
* @NativeFunctionAddress 0000000140A683A0
*/

entity function GetWeaponOwner()

/*
* @Breif Returns the position to fire from
* @Pramas 
* @NativeName: GetAttackPosition_Script
* @NativeFunctionAddress 0000000140A682D0
*/

vector function GetAttackPosition()

/*
* @Breif Returns the direction to fire from
* @Pramas 
* @NativeName: GetAttackDirection_Script
* @NativeFunctionAddress 0000000140A68200
*/

vector function GetAttackDirection()

/*
* @Breif Sets whether a weapon can be used or not
* @Pramas bool
* @NativeName: AllowUse
* @NativeFunctionAddress 0000000140A681A0
*/

void function AllowUse(bool)

/*
* @Breif Returns if weapon has a silencer
* @Pramas 
* @NativeName: HasSilencer
* @NativeFunctionAddress 0000000140A68140
*/

bool function HasSilencer()

/*
* @Breif Plays appropriate 1p and 3p sounds
* @Pramas string soundName1p, string soundName3p
* @NativeName: Script_EmitWeaponSound_1p3p
* @NativeFunctionAddress 0000000140A680D0
*/

void function EmitWeaponSound_1p3p(string soundName1p, string soundName3p)

/*
* @Breif Plays the sound on the weapon
* @Pramas string
* @NativeName: EmitWeaponSound_Script
* @NativeFunctionAddress 0000000140A68070
*/

void function EmitWeaponSound(string)

/*
* @Breif Stops the sound on the weapon
* @Pramas string
* @NativeName: StopWeaponSound_Script
* @NativeFunctionAddress 0000000140A68010
*/

void function StopWeaponSound(string)

/*
* @Breif Notifies NPCs of weapon sound
* @Pramas float, float
* @NativeName: EmitWeaponNpcSound
* @NativeFunctionAddress 0000000140A67F80
*/

void function EmitWeaponNpcSound(float, float)

/*
* @Breif Notifies NPCs of weapon sound
* @Pramas float, float
* @NativeName: EmitWeaponNpcSound_DontUpdateLastFiredTime
* @NativeFunctionAddress 0000000140A67F80
*/

void function EmitWeaponNpcSound_DontUpdateLastFiredTime(float, float)

/*
* @Breif Returns true if this weapon is net optimized *and* net weapon optimizations are enabled ('net_optimize_weapons 1')
* @Pramas 
* @NativeName: IsNetOptimized
* @NativeFunctionAddress 0000000140A67F20
*/

bool function IsNetOptimized()

/*
* @Breif Plays the effect on the weapon and return an effect handle to view model effect
* @Pramas asset, asset, string
* @NativeName: PlayWeaponEffectAndReturnViewEffectHandle_Script
* @NativeFunctionAddress 0000000140A67E50
*/

int function PlayWeaponEffectReturnViewEffectHandle(asset, asset, string)

/*
* @Breif Plays the effect on the weapons owner, use this when the weapon does NOT have a world model.
* @Pramas asset, int
* @NativeName: PlayWeaponEffectOnOwner_Script
* @NativeFunctionAddress 0000000140A67DD0
*/

void function PlayWeaponEffectOnOwner(asset, int)

/*
* @Breif Stops the effect on the weapon
* @Pramas asset, asset
* @NativeName: StopWeaponEffect_Script
* @NativeFunctionAddress 0000000140A67D60
*/

void function StopWeaponEffect(asset, asset)

/*
* @Breif Set the burst fire count
* @Pramas int
* @NativeName: SetWeaponBurstFireCount_Script
* @NativeFunctionAddress 0000000140A67CF0
*/

void function SetWeaponBurstFireCount(int)

/*
* @Breif Get the burst fire count
* @Pramas 
* @NativeName: GetWeaponBurstFireCount_Script
* @NativeFunctionAddress 0000000140A67C40
*/

int function GetWeaponBurstFireCount()

/*
* @Breif Fires a bullet
* @Pramas vector, vector, int, int
* @NativeName: FireWeaponBullet_Script
* @NativeFunctionAddress 0000000140A67B40
*/

void function FireWeaponBullet(vector, vector, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: DoDryfire
* @NativeFunctionAddress 0000000140A67AF0
*/

void function DoDryfire()

/*
* @Breif Gets the number of projectiles per shot
* @Pramas 
* @NativeName: GetProjectilesPerShot_Script
* @NativeFunctionAddress 0000000140A67A40
*/

int function GetProjectilesPerShot()

/*
* @Breif Gets the ammo consumed per shot
* @Pramas 
* @NativeName: GetAmmoPerShot_Script
* @NativeFunctionAddress 0000000140A67990
*/

int function GetAmmoPerShot()

/*
* @Breif Gets the display type of the ammo
* @Pramas 
* @NativeName: GetAmmoDisplay_Script
* @NativeFunctionAddress 0000000140A67900
*/

string function GetAmmoDisplay()

/*
* @Breif Returns the max amount of primary ammo that can be in the clip.
* @Pramas 
* @NativeName: GetWeaponPrimaryClipCountMax_Script
* @NativeFunctionAddress 0000000140A67850
*/

int function GetWeaponPrimaryClipCountMax()

/*
* @Breif Set the amount of primary ammo in the clip
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCount_Script
* @NativeFunctionAddress 0000000140A677E0
*/

void function SetWeaponPrimaryClipCount(int)

/*
* @Breif Set the amount of primary ammo in the clip
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCountAbsolute_Script
* @NativeFunctionAddress 0000000140A67770
*/

void function SetWeaponPrimaryClipCountAbsolute(int)

/*
* @Breif Sets primary ammo count, doesn't reset regen
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCountNoRegenReset_Script
* @NativeFunctionAddress 0000000140A67700
*/

void function SetWeaponPrimaryClipCountNoRegenReset(int)

/*
* @Breif gets whether or not the regen ammo on this weapon is draining or not
* @Pramas 
* @NativeName: IsWeaponRegenDraining_Script
* @NativeFunctionAddress 0000000140A676A0
*/

bool function IsWeaponRegenDraining()

/*
* @Breif Returns the amount of primary ammo in the clip.
* @Pramas 
* @NativeName: GetWeaponPrimaryClipCount_Script
* @NativeFunctionAddress 0000000140A675F0
*/

int function GetWeaponPrimaryClipCount()

/*
* @Breif True if the weapon uses clips for ammo
* @Pramas 
* @NativeName: UsesClipsForAmmo
* @NativeFunctionAddress 0000000140A67590
*/

bool function UsesClipsForAmmo()

/*
* @Breif Get the ammo source this weapon is using: AMMOSOURCE_STOCKPILE, AMMOSOURCE_POOL
* @Pramas 
* @NativeName: Script_GetActiveAmmoSource
* @NativeFunctionAddress 0000000140A674E0
*/

int function GetActiveAmmoSource()

/*
* @Breif Gets the ammo pool type this weapon uses.
* @Pramas 
* @NativeName: Script_GetAmmoPoolType
* @NativeFunctionAddress 0000000140A67430
*/

int function GetWeaponAmmoPoolType()

/*
* @Breif Get the max ammo that can be available for this weapon to use
* @Pramas int
* @NativeName: Script_GetWeaponPrimaryAmmoCountMax
* @NativeFunctionAddress 0000000140A67370
*/

int function GetWeaponPrimaryAmmoCountMax(int)

/*
* @Breif Get the amount of ammo available for this weapon to use
* @Pramas int
* @NativeName: Script_GetWeaponPrimaryAmmoCount
* @NativeFunctionAddress 0000000140A672B0
*/

int function GetWeaponPrimaryAmmoCount(int)

/*
* @Breif Set the amount of primary ammo
* @Pramas int, int
* @NativeName: Script_SetWeaponPrimaryAmmoCount
* @NativeFunctionAddress 0000000140A67230
*/

void function SetWeaponPrimaryAmmoCount(int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: ShouldAutoCycleWhenOutOfAmmo
* @NativeFunctionAddress 0000000140A671D0
*/

bool function ShouldAutoCycleWhenOutOfAmmo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_RegenerateAmmoReset
* @NativeFunctionAddress 0000000140A67180
*/

void function RegenerateAmmoReset()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponShieldScale
* @NativeFunctionAddress 000000014069F220
*/

float function GetWeaponShieldScale()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetLifetimeShotsRemaining
* @NativeFunctionAddress 0000000140A1CF90
*/

int function GetLifetimeShotsRemaining()

/*
* @Breif 
* @Pramas int newCount
* @NativeName: Script_SetLifetimeShotsRemaining
* @NativeFunctionAddress 0000000140A67110
*/

void function SetLifetimeShotsRemaining(int newCount)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetLifetimeShotsRemainingInfinite
* @NativeFunctionAddress 0000000140A670C0
*/

void function SetLifetimeShotsRemainingInfinite()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetRechamberMilestone
* @NativeFunctionAddress 0000000140A67010
*/

int function GetRechamberMilestone()

/*
* @Breif 
* @Pramas int newMilestone
* @NativeName: Script_ForceRechamberMilestone
* @NativeFunctionAddress 0000000140A66FA0
*/

void function ForceRechamberMilestone(int newMilestone)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetCooldownMilestone
* @NativeFunctionAddress 0000000140A66EF0
*/

int function GetCooldownMilestone()

/*
* @Breif 
* @Pramas int newMilestone
* @NativeName: Script_ForceCooldownMilestone
* @NativeFunctionAddress 0000000140A66E80
*/

void function ForceCooldownMilestone(int newMilestone)

/*
* @Breif Get the weapon's utility entity
* @Pramas 
* @NativeName: GetWeaponUtilityEntity
* @NativeFunctionAddress 0000000140A66E20
*/

entity function GetWeaponUtilityEntity()

/*
* @Breif Returns true if the weapon is reloading
* @Pramas 
* @NativeName: IsReloading
* @NativeFunctionAddress 0000000140A66DC0
*/

bool function IsReloading()

/*
* @Breif Returns true if the weapon is in ADS
* @Pramas 
* @NativeName: IsWeaponInAds
* @NativeFunctionAddress 0000000140A66D60
*/

bool function IsWeaponInAds()

/*
* @Breif Returns true if the ADS button is pressed, even if the weapon doesn't allow zooming
* @Pramas 
* @NativeName: IsWeaponAdsButtonPressed
* @NativeFunctionAddress 0000000140A66D00
*/

bool function IsWeaponAdsButtonPressed()

/*
* @Breif Return weapon type: WT_DEFAULT, WT_SIDEARM, WT_ANTI_TITAN, WT_SHOULDER
* @Pramas 
* @NativeName: GetWeaponType
* @NativeFunctionAddress 0000000140A66C50
*/

int function GetWeaponType()

/*
* @Breif Returns true if the weapon has a charge ability.
* @Pramas 
* @NativeName: IsChargeWeapon
* @NativeFunctionAddress 0000000140A66BF0
*/

bool function IsChargeWeapon()

/*
* @Breif Returns true if the weapon is currently charging
* @Pramas 
* @NativeName: IsWeaponCharging_Script
* @NativeFunctionAddress 0000000140A66B90
*/

bool function IsWeaponCharging()

/*
* @Breif Returns how long the weapon has been charging
* @Pramas 
* @NativeName: GetWeaponChargeTime_Script
* @NativeFunctionAddress 0000000140A66AE0
*/

float function GetWeaponChargeTime()

/*
* @Breif Returns how long the weapon has left to charge
* @Pramas 
* @NativeName: GetWeaponChargeTimeRemaining_Script
* @NativeFunctionAddress 0000000140A66A30
*/

float function GetWeaponChargeTimeRemaining()

/*
* @Breif Returns fraction [0,1] where the charge level is.
* @Pramas 
* @NativeName: GetWeaponChargeFractionClamped
* @NativeFunctionAddress 0000000140A66980
*/

float function GetWeaponChargeFraction()

/*
* @Breif Sets charge of the weapon as a fraction [0,1].
* @Pramas float
* @NativeName: Script_SetWeaponChargeFraction
* @NativeFunctionAddress 0000000140A66910
*/

void function SetWeaponChargeFraction(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetWeaponChargeFractionForced
* @NativeFunctionAddress 0000000140A668A0
*/

void function SetWeaponChargeFractionForced(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponChargeLevel_Script
* @NativeFunctionAddress 0000000140A667F0
*/

int function GetWeaponChargeLevel()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponChargeLevelMax_Script
* @NativeFunctionAddress 0000000140A66740
*/

int function GetWeaponChargeLevelMax()

/*
* @Breif Gets the total charge duration of the weapon.
* @Pramas 
* @NativeName: GetChargeDuration
* @NativeFunctionAddress 0000000140A66690
*/

float function GetChargeDuration()

/*
* @Breif Returns true if the weapon needs to complete an overheat cooldown.
* @Pramas 
* @NativeName: IsOverheated
* @NativeFunctionAddress 0000000140A66630
*/

bool function IsOverheated()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponReadyToFireProgress
* @NativeFunctionAddress 0000000140A66580
*/

float function GetWeaponReadyToFireProgress()

/*
* @Breif Returns the weapon's attack spread in degrees from one side of the cone to the other.
* @Pramas 
* @NativeName: GetSpread
* @NativeFunctionAddress 0000000140A664D0
*/

float function GetAttackSpreadAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponChargeEnergyCost
* @NativeFunctionAddress 0000000140A66420
*/

int function GetWeaponChargeEnergyCost()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetWeaponDefaultEnergyCost
* @NativeFunctionAddress 0000000140A66360
*/

int function GetWeaponDefaultEnergyCost(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ResetWeaponToDefaultEnergyCost
* @NativeFunctionAddress 0000000140A66310
*/

void function ResetWeaponToDefaultEnergyCost()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponCurrentEnergyCost
* @NativeFunctionAddress 00000001406AD250
*/

int function GetWeaponCurrentEnergyCost()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetWeaponEnergyCost
* @NativeFunctionAddress 0000000140A662A0
*/

void function SetWeaponEnergyCost(int)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string
* @NativeName: GetWeaponInfoFileKeyField
* @NativeFunctionAddress 0000000140A661D0
*/

var function GetWeaponInfoFileKeyField(string)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string key
* @NativeName: GetWeaponInfoFileKeyFieldAsset
* @NativeFunctionAddress 0000000140A66130
*/

asset function GetWeaponInfoFileKeyFieldAsset(string key)

/*
* @Breif takes in a player and checks to see if the weapon is disabled
* @Pramas entity
* @NativeName: IsWeaponDisabled_Script
* @NativeFunctionAddress 0000000140A660B0
*/

bool function CheckWeaponIsDisabled(entity)

/*
* @Breif Gets the activity that the weapon is in.
* @Pramas 
* @NativeName: GetWeaponActivity_Script
* @NativeFunctionAddress 0000000140A66000
*/

int function GetWeaponActivity()

/*
* @Breif Triggers weapon deploy
* @Pramas 
* @NativeName: Script_DeployWeapon
* @NativeFunctionAddress 0000000140A65FA0
*/

bool function Deploy()

/*
* @Breif Triggers weapon deploy
* @Pramas 
* @NativeName: Script_DeployWeaponInstant
* @NativeFunctionAddress 0000000140A65F40
*/

bool function DeployInstant()

/*
* @Breif Triggers weapon raise (or equip)
* @Pramas 
* @NativeName: Raise
* @NativeFunctionAddress 0000000140A65EE0
*/

bool function Raise()

/*
* @Breif True if the weapon is being discarded and will be removed from the owner's inventory.
* @Pramas 
* @NativeName: IsDiscarding
* @NativeFunctionAddress 0000000140A65E80
*/

bool function IsDiscarding()

/*
* @Breif Returns true if it is appropriate to fire predicted projectiles on the client
* @Pramas 
* @NativeName: ShouldPredictProjectiles
* @NativeFunctionAddress 0000000140A65E20
*/

bool function ShouldPredictProjectiles()

/*
* @Breif Returns true if smart ammo tracking is enabled
* @Pramas 
* @NativeName: SmartAmmo_IsEnabled_Script
* @NativeFunctionAddress 0000000140A65DC0
*/

bool function SmartAmmo_IsEnabled()

/*
* @Breif Let script inform code it started locking on a new target in this tick
* @Pramas 
* @NativeName: SmartAmmo_SetNewTargetTime
* @NativeFunctionAddress 0000000140A65D70
*/

void function SmartAmmo_SetNewTargetTime()

/*
* @Breif Returns the last time a new target was acquired
* @Pramas 
* @NativeName: SmartAmmo_GetNewTargetTime
* @NativeFunctionAddress 0000000140A65CC0
*/

float function SmartAmmo_GetNewTargetTime()

/*
* @Breif Returns the angle used by the smart ammo cone search
* @Pramas 
* @NativeName: SmartAmmo_GetSearchAngle
* @NativeFunctionAddress 0000000140A65C10
*/

float function SmartAmmo_GetSearchAngle()

/*
* @Breif Returns a list of targets currently being tracked by the smart ammo system and their current and previous lock fractions
* @Pramas 
* @NativeName: SmartAmmo_Script_GetTargets
* @NativeFunctionAddress 0000000140A65B40
*/

array< SmartAmmoTarget > function SmartAmmo_GetTargets()

/*
* @Breif Appends new smart ammo target if not already in the list
* @Pramas entity, float
* @NativeName: SmartAmmo_Script_SetTarget
* @NativeFunctionAddress 0000000140A65AB0
*/

void function SmartAmmo_SetTarget(entity, float)

/*
* @Breif Stores the current list of smart ammo targets for later retrieval
* @Pramas 
* @NativeName: SmartAmmo_Script_StoreTargets
* @NativeFunctionAddress 0000000140A65A60
*/

void function SmartAmmo_StoreTargets()

/*
* @Breif Returns the list of targets that was last stored
* @Pramas 
* @NativeName: SmartAmmo_Script_GetStoredTargets
* @NativeFunctionAddress 0000000140A65990
*/

array< entity > function SmartAmmo_GetStoredTargets()

/*
* @Breif Clears all current smart ammo targets. Pass in true for the first argument to clear stored targets too. Pass in true for the second argument to clear trackers too.
* @Pramas bool, bool
* @NativeName: SmartAmmo_Clear
* @NativeFunctionAddress 0000000140A65920
*/

void function SmartAmmo_Clear(bool, bool)

/*
* @Breif Returns the position to fire at for this target
* @Pramas entity, int
* @NativeName: SmartAmmo_Script_GetFirePosition
* @NativeFunctionAddress 0000000140A65810
*/

vector function SmartAmmo_GetFirePosition(entity, int)

/*
* @Breif Marks an entity as trackable by the smart ammo system
* @Pramas entity, float
* @NativeName: SmartAmmo_Script_TrackEntity
* @NativeFunctionAddress 0000000140A65780
*/

void function SmartAmmo_TrackEntity(entity, float)

/*
* @Breif Clears an entity as trackable by the smart ammo system
* @Pramas entity
* @NativeName: SmartAmmo_Script_UntrackEntity
* @NativeFunctionAddress 0000000140A65700
*/

void function SmartAmmo_UntrackEntity(entity)

/*
* @Breif Returns number of trackers currently on entity
* @Pramas entity
* @NativeName: SmartAmmo_Script_GetNumTrackersOnEntity
* @NativeFunctionAddress 0000000140A65630
*/

int function SmartAmmo_GetNumTrackersOnEntity(entity)

/*
* @Breif Returns true if the given target is visible to the weapon
* @Pramas entity
* @NativeName: SmartAmmo_IsVisibleTarget
* @NativeFunctionAddress 0000000140A655B0
*/

bool function SmartAmmo_IsVisibleTarget(entity)

/*
* @Breif Returns array of all entities currently tracked by this weapon
* @Pramas 
* @NativeName: SmartAmmo_Script_GetTrackedEntities
* @NativeFunctionAddress 0000000140A654E0
*/

array< entity > function SmartAmmo_GetTrackedEntities()

/*
* @Breif Returns true if weapon is ready to fire (based on next allowed attack time)
* @Pramas 
* @NativeName: IsReadyToFire
* @NativeFunctionAddress 0000000140A65480
*/

bool function IsReadyToFire()

/*
* @Breif Returns true if a burst fire is in progress
* @Pramas 
* @NativeName: IsBurstFireInProgress
* @NativeFunctionAddress 0000000140A65420
*/

bool function IsBurstFireInProgress()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBurstFireShotsPending
* @NativeFunctionAddress 0000000140A65370
*/

int function GetBurstFireShotsPending()

/*
* @Breif Returns time remaining until ready to fire
* @Pramas 
* @NativeName: TimeUntilReadyToFire
* @NativeFunctionAddress 0000000140A652C0
*/

float function TimeUntilReadyToFire()

/*
* @Breif Returns the class name of the weapon
* @Pramas 
* @NativeName: GetWeaponName
* @NativeFunctionAddress 0000000140A65230
*/

string function GetWeaponClassName()

/*
* @Breif Gets the damage source ID for this weapon
* @Pramas 
* @NativeName: GetDamageSourceID
* @NativeFunctionAddress 0000000140A65180
*/

int function GetDamageSourceID()

/*
* @Breif Gets the largest damage far dist for current owner
* @Pramas 
* @NativeName: GetMaxDamageFarDist
* @NativeFunctionAddress 0000000140A650D0
*/

float function GetMaxDamageFarDist()

/*
* @Breif Forces the offhand weapon to release
* @Pramas 
* @NativeName: ForceRelease
* @NativeFunctionAddress 0000000140A65080
*/

void function ForceRelease()

/*
* @Breif Returns true if the offhand weapon was forced to release
* @Pramas 
* @NativeName: IsForceRelease
* @NativeFunctionAddress 0000000140A65020
*/

bool function IsForceRelease()

/*
* @Breif Given (string), returns true if mod is active on this weapon.
* @Pramas string
* @NativeName: HasMod_Script
* @NativeFunctionAddress 0000000140A64FB0
*/

bool function HasMod(string)

/*
* @Breif Given (string), add the mod from this weapon.
* @Pramas string
* @NativeName: AddMod_Script
* @NativeFunctionAddress 0000000140A64F50
*/

void function AddMod(string)

/*
* @Breif Given (string), remove the mod from this weapon.
* @Pramas string
* @NativeName: RemoveMod_Script
* @NativeFunctionAddress 0000000140A64EF0
*/

void function RemoveMod(string)

/*
* @Breif Sets mods bit field
* @Pramas int
* @NativeName: SetModBitfield_Script
* @NativeFunctionAddress 0000000140A64E80
*/

void function SetModBitField(int)

/*
* @Breif Gets mods bit field
* @Pramas 
* @NativeName: GetModBitfield_Script
* @NativeFunctionAddress 0000000140A64DD0
*/

int function GetModBitField()

/*
* @Breif Returns true if the weapon is offhand
* @Pramas 
* @NativeName: IsOffhandWeapon
* @NativeFunctionAddress 0000000140A64D70
*/

bool function IsWeaponOffhand()

/*
* @Breif Returns true if this is a melee weapon
* @Pramas 
* @NativeName: IsOffhandMeleeWeapon
* @NativeFunctionAddress 0000000140A64D10
*/

bool function IsWeaponMelee()

/*
* @Breif Returns true if this is a toss weapon
* @Pramas 
* @NativeName: IsTossWeapon
* @NativeFunctionAddress 0000000140A64CB0
*/

bool function IsTossWeapon()

/*
* @Breif Gets the viewmodel for the weapon. Viewmodels are only valid for active player weapons.
* @Pramas 
* @NativeName: GetWeaponViewmodel_Script
* @NativeFunctionAddress 0000000140A64C50
*/

entity function GetWeaponViewmodel()

/*
* @Breif Given (activityName, WeaponActivityFlags), Plays the given activity on the weapon viewmodel
* @Pramas string, int
* @NativeName: StartCustomActivity_Script
* @NativeFunctionAddress 0000000140A64BD0
*/

bool function StartCustomActivity(string, int)

/*
* @Breif Stops any custom activities currently playing on the weapon viewmodel
* @Pramas 
* @NativeName: StopCustomActivity_Script
* @NativeFunctionAddress 0000000140A64B80
*/

void function StopCustomActivity()

/*
* @Breif Queries whether the weapon viewmodel is currently playing a custom activity
* @Pramas 
* @NativeName: IsInCustomActivity
* @NativeFunctionAddress 0000000140A64B20
*/

bool function IsInCustomActivity()

/*
* @Breif Returns the fraction of the current custom weapon activity that is complete.
* @Pramas 
* @NativeName: GetCustomActivityFraction_Script
* @NativeFunctionAddress 0000000140A64A70
*/

float function GetCustomActivityFraction()

/*
* @Breif Returns the duration of the current custom weapon activity.
* @Pramas 
* @NativeName: GetCustomActivityDuration_Script
* @NativeFunctionAddress 0000000140A649C0
*/

float function GetCustomActivityDuration()

/*
* @Breif Specifies a model to be attached to the viewmodel during the current custom activity, as well as an attachment index.
* @Pramas string, string
* @NativeName: CustomActivityAttachModel_Script
* @NativeFunctionAddress 0000000140A64950
*/

void function CustomActivityAttachModel(string, string)

/*
* @Breif Clears the attached custom activity model.
* @Pramas 
* @NativeName: CustomActivityClearAttachedModel_Script
* @NativeFunctionAddress 0000000140A64900
*/

void function CustomActivityClearAttachedModel()

/*
* @Breif Get this weapon's internal when-can-I-shoot-next time.
* @Pramas 
* @NativeName: GetNextAttackAllowedTime_Script
* @NativeFunctionAddress 0000000140A64850
*/

float function GetNextAttackAllowedTime()

/*
* @Breif Get this weapon's internal when-can-I-shoot-next time, ignoring the "ready" timer
* @Pramas 
* @NativeName: GetNextAttackAllowedTimeRaw_Script
* @NativeFunctionAddress 0000000140A647A0
*/

float function GetNextAttackAllowedTimeRaw()

/*
* @Breif Set this weapon's internal when-can-I-shoot-next time.
* @Pramas float
* @NativeName: SetNextAttackAllowedTime_Script
* @NativeFunctionAddress 0000000140A1CBD0
*/

void function SetNextAttackAllowedTime(float)

/*
* @Breif 
* @Pramas float
* @NativeName: OverrideNextAttackTime_Script
* @NativeFunctionAddress 0000000140A64730
*/

void function OverrideNextAttackTime(float)

/*
* @Breif Get the damage amount this weapon should do to a titan that the player is rodeoing.
* @Pramas 
* @NativeName: GetRodeoDamage_Script
* @NativeFunctionAddress 000000014069F620
*/

int function GetRodeoDamage()

/*
* @Breif 
* @Pramas 
* @NativeName: GetShotCount_Script
* @NativeFunctionAddress 0000000140A64680
*/

int function GetShotCount()

/*
* @Breif Gets the string specified in the weapon's .txt file for 'weaponClass'.
* @Pramas 
* @NativeName: GetWeaponClass
* @NativeFunctionAddress 0000000140A645F0
*/

string function GetWeaponClass()

/*
* @Breif Returns true if weapon is in a cooldown state.
* @Pramas 
* @NativeName: IsInCooldown
* @NativeFunctionAddress 0000000140A64590
*/

bool function IsInCooldown()

/*
* @Breif Returns true if weapon is has a cooldown state pending.
* @Pramas 
* @NativeName: IsCooldownPending
* @NativeFunctionAddress 0000000140A64530
*/

bool function IsCooldownPending()

/*
* @Breif Get Weapon Type Flags
* @Pramas 
* @NativeName: GetWeaponTypeFlags
* @NativeFunctionAddress 00000001406A5FB0
*/

int function GetWeaponTypeFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponDamageFlags
* @NativeFunctionAddress 00000001406B23F0
*/

int function GetWeaponDamageFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponExplosionDamageFlags
* @NativeFunctionAddress 0000000140A64480
*/

int function GetWeaponExplosionDamageFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetImpactTableIndex
* @NativeFunctionAddress 0000000140A643D0
*/

int function GetImpactTableIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetNPCMissFastPlayer
* @NativeFunctionAddress 0000000140A64370
*/

bool function GetNPCMissFastPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeLungeTargetRange
* @NativeFunctionAddress 0000000140A642C0
*/

float function GetMeleeLungeTargetRange()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeLungeTargetAngle
* @NativeFunctionAddress 0000000140A64210
*/

float function GetMeleeLungeTargetAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeCanHitHumanSized
* @NativeFunctionAddress 0000000140A641B0
*/

bool function GetMeleeCanHitHumanSized()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeCanHitTitans
* @NativeFunctionAddress 0000000140A64150
*/

bool function GetMeleeCanHitTitans()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetDamageAmountForArmorType
* @NativeFunctionAddress 0000000140A64090
*/

int function GetDamageAmountForArmorType(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAttackRange
* @NativeFunctionAddress 0000000140A63FE0
*/

float function GetMeleeAttackRange()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAttackAngle
* @NativeFunctionAddress 0000000140A63F30
*/

float function GetMeleeAttackAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAnim3p
* @NativeFunctionAddress 0000000140A63EA0
*/

string function GetMeleeAnim3p()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponReadyMsg
* @NativeFunctionAddress 0000000140A63E10
*/

string function GetWeaponReadyMsg()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponReadyHint
* @NativeFunctionAddress 0000000140A63D80
*/

string function GetWeaponReadyHint()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrenadeFuseTime
* @NativeFunctionAddress 0000000140A63CD0
*/

float function GetGrenadeFuseTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrenadeIgnitionTime
* @NativeFunctionAddress 0000000140A63C20
*/

float function GetGrenadeIgnitionTime()

/*
* @Breif 
* @Pramas 
* @NativeName: ZiplineGrenadeHasValidSpot
* @NativeFunctionAddress 0000000140A63BC0
*/

bool function ZiplineGrenadeHasValidSpot()

/*
* @Breif Returns the exact origin the begin station should be placed at for the zipline grenade/gun
* @Pramas entity
* @NativeName: Script_GetBeginStationOriginForZiplineGrenade
* @NativeFunctionAddress 0000000140A63AD0
*/

vector function GetBeginStationOriginForZiplineGrenade(entity)

/*
* @Breif Returns the exact angle the begin station should be placed at for the zipline grenade/gun
* @Pramas entity
* @NativeName: Script_GetBeginStationAnglesForZiplineGrenade
* @NativeFunctionAddress 0000000140A639E0
*/

vector function GetBeginStationAnglesForZiplineGrenade(entity)

/*
* @Breif Does this weapon allow for headshot damage
* @Pramas 
* @NativeName: Script_GetAllowHeadShots
* @NativeFunctionAddress 0000000140A63980
*/

bool function GetAllowHeadShots()

/*
* @Breif Gets the index for the next shot to be fired
* @Pramas 
* @NativeName: Script_GetCurrentAltFireIndex
* @NativeFunctionAddress 0000000140A638D0
*/

int function GetCurrentAltFireIndex()

/*
* @Breif Gets the current zoom FOV of the weapon
* @Pramas 
* @NativeName: Script_GetWeaponZoomFOV
* @NativeFunctionAddress 0000000140A63820
*/

float function GetWeaponZoomFOV()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetReloadMilestoneIndex
* @NativeFunctionAddress 0000000140A63770
*/

int function GetReloadMilestoneIndex()

/*
* @Breif Forces the player to ads
* @Pramas 
* @NativeName: Script_SetForcedADS
* @NativeFunctionAddress 0000000140A63720
*/

void function SetForcedADS()

/*
* @Breif Lets the player choose whether or not to ads
* @Pramas 
* @NativeName: Script_ClearForcedADS
* @NativeFunctionAddress 0000000140A636D0
*/

void function ClearForcedADS()

/*
* @Breif Gets whether or not the player is forced into ads
* @Pramas 
* @NativeName: Script_GetForcedADS
* @NativeFunctionAddress 0000000140A63620
*/

int function GetForcedADS()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetInventoryIndex
* @NativeFunctionAddress 0000000140A63570
*/

int function GetInventoryIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetChargeAnimIndex
* @NativeFunctionAddress 0000000140A634C0
*/

int function GetChargeAnimIndex()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetChargeAnimIndex
* @NativeFunctionAddress 0000000140A63450
*/

void function SetChargeAnimIndex(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponDamageForce
* @NativeFunctionAddress 0000000140A633A0
*/

float function GetWeaponDamageForce()

/*
* @Breif Gets the core duration
* @Pramas 
* @NativeName: GetCoreDuration
* @NativeFunctionAddress 0000000140A632F0
*/

float function GetCoreDuration()

/*
* @Breif Indicates if this is a sustained discharge weapon.
* @Pramas 
* @NativeName: IsSustainedDischargeWeapon
* @NativeFunctionAddress 0000000140A63290
*/

bool function IsSustainedDischargeWeapon()

/*
* @Breif Indicates if the weapon is currently performing a sustained discharge
* @Pramas 
* @NativeName: IsDischarging
* @NativeFunctionAddress 0000000140A63230
*/

bool function IsDischarging()

/*
* @Breif Gets the total duration of a sustained discharge.
* @Pramas 
* @NativeName: GetSustainedDischargeDuration
* @NativeFunctionAddress 0000000140A63180
*/

float function GetSustainedDischargeDuration()

/*
* @Breif Gets the time remaining for the current sustained discharge between.
* @Pramas 
* @NativeName: GetSustainedDischargeRemainder
* @NativeFunctionAddress 0000000140A630D0
*/

float function GetSustainedDischargeRemainder()

/*
* @Breif Gets the fraction of completion for the current sustained discharge between [0, 1].
* @Pramas 
* @NativeName: GetSustainedDischargeFraction
* @NativeFunctionAddress 0000000140A63020
*/

float function GetSustainedDischargeFraction()

/*
* @Breif Gets the frequency at which pulse callbacks are dispatched if enabled. Also controls frequency of sustained laser damage.
* @Pramas 
* @NativeName: GetSustainedDischargePulseFrequency
* @NativeFunctionAddress 0000000140A62F70
*/

float function GetSustainedDischargePulseFrequency()

/*
* @Breif Forces the discharge to be at a certain fraction
* @Pramas float
* @NativeName: SetSustainedDischargeFractionForced
* @NativeFunctionAddress 0000000140A62F00
*/

void function SetSustainedDischargeFractionForced(float)

/*
* @Breif Indicates if this is a sustained laser weapon.
* @Pramas 
* @NativeName: IsSustainedLaserWeapon
* @NativeFunctionAddress 0000000140A62EA0
*/

bool function IsSustainedLaserWeapon()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_DoMeleeHitConfirmation
* @NativeFunctionAddress 0000000140A62E30
*/

void function DoMeleeHitConfirmation(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetScriptTime0
* @NativeFunctionAddress 0000000140A62DC0
*/

void function SetScriptTime0(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptTime0
* @NativeFunctionAddress 0000000140A62D10
*/

float function GetScriptTime0()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetScriptFlags0
* @NativeFunctionAddress 0000000140A62CA0
*/

void function SetScriptFlags0(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptFlags0
* @NativeFunctionAddress 0000000140A62BF0
*/

int function GetScriptFlags0()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetScriptInt0
* @NativeFunctionAddress 0000000140A62B80
*/

void function SetScriptInt0(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptInt0
* @NativeFunctionAddress 0000000140A62AD0
*/

int function GetScriptInt0()

/*
* @Breif 
* @Pramas 
* @NativeName: IsLoadoutPickup
* @NativeFunctionAddress 0000000140A62A70
*/

bool function IsLoadoutPickup()

/*
* @Breif Hide the weapon
* @Pramas 
* @NativeName: HideWeapon
* @NativeFunctionAddress 0000000140A62A20
*/

void function HideWeapon()

/*
* @Breif Show the weapon
* @Pramas 
* @NativeName: ShowWeapon
* @NativeFunctionAddress 0000000140A629D0
*/

void function ShowWeapon()

/*
* @Breif Set the index for bodygroup "ammo", if it exists.
* @Pramas int
* @NativeName: SetViewmodelAmmoModelIndex_Script
* @NativeFunctionAddress 0000000140A62960
*/

void function SetViewmodelAmmoModelIndex(int)

/*
* @Breif 
* @Pramas string, vector, vector, bool
* @NativeName: Weapon_CreateClientOnlyModel
* @NativeFunctionAddress 0000000140A628E0
*/

entity function Weapon_CreateClientOnlyModel(string, vector, vector, bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_GetClientOnlyModel
* @NativeFunctionAddress 0000000140A62880
*/

entity function Weapon_GetClientOnlyModel()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_DestroyClientOnlyModel
* @NativeFunctionAddress 0000000140A62830
*/

void function Weapon_DestroyClientOnlyModel()

/*
* @Breif 
* @Pramas int index
* @NativeName: Script_GetProScreenIntValForIndex
* @NativeFunctionAddress 0000000140A62770
*/

int function GetProScreenIntValForIndex(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: Script_GetProScreenFloatValForIndex
* @NativeFunctionAddress 0000000140A626B0
*/

float function GetProScreenFloatValForIndex(int index)

/*
* @Breif Get weapon charm for the weapon.
* @Pramas 
* @NativeName: Script_GetCurrentWeaponCharm
* @NativeFunctionAddress 0000000140A62650
*/

entity function GetCurrentWeaponCharm()

/*
* @Breif Get weapon charm model name for the weapon.
* @Pramas 
* @NativeName: Script_GetCharmModelName
* @NativeFunctionAddress 0000000140A625C0
*/

string function GetCharmModelName()

/*
* @Breif Set the legendary weapon model index for this instance of the weapon. The weapon will use the dafault model from weapon info if a negative index is set.
* @Pramas int legendaryIndex
* @NativeName: Script_SetLegendaryModelIndex
* @NativeFunctionAddress 0000000140A62550
*/

void function SetLegendaryModelIndex(int legendaryIndex)

/*
* @Breif Set weapon charm for the model. This spawns an entity with the provided model and attach it to the CHARM attachment on the weapon.
* @Pramas asset weaponCharmModel, string attachmentName
* @NativeName: Script_SetWeaponCharm
* @NativeFunctionAddress 0000000140A624E0
*/

void function SetWeaponCharm(asset weaponCharmModel, string attachmentName)

/*
* @Breif Set script index for weapon charm.
* @Pramas int charmScriptIndex
* @NativeName: Script_SetWeaponCharmIndex
* @NativeFunctionAddress 0000000140A62470
*/

void function SetWeaponCharmIndex(int charmScriptIndex)

/*
* @Breif Get script index for the weapon charm.
* @Pramas 
* @NativeName: Script_GetWeaponCharmIndex
* @NativeFunctionAddress 0000000140A623C0
*/

int function GetWeaponCharmIndex()

/*
* @Breif Clear the wepaon charm entity for the current weapon.
* @Pramas 
* @NativeName: ClearWeaponCharm
* @NativeFunctionAddress 0000000140A62370
*/

void function ClearWeaponCharm()

/*
* @Breif Plays the effect on the weapon, always spawn even if out of view
* @Pramas asset, asset, string, bool persistent = false
* @NativeName: PlayWeaponEffectNoCull_Script
* @NativeFunctionAddress 0000000140A61900
*/

var function PlayWeaponEffectNoCull()

/*
* @Breif Plays the effect on the weapon
* @Pramas asset, asset, string, bool persistent = false
* @NativeName: PlayWeaponEffect_Script
* @NativeFunctionAddress 0000000140A61950
*/

var function PlayWeaponEffect()

/*
* @Breif Fires a bullet, can set to skip lag compensation, have zero spread, dryfire, or only cause a whizby sound.
* @Pramas WeaponFireBulletSpecialParams
* @NativeName: FireWeaponBulletSpecial_Script
* @NativeFunctionAddress 0000000140A61AA0
*/

var function FireWeaponBullet_Special()

/*
* @Breif Fires a bolt projectile
* @Pramas WeaponFireBoltParams
* @NativeName: FireWeaponBolt_Script
* @NativeFunctionAddress 0000000140A61AF0
*/

var function FireWeaponBolt()

/*
* @Breif Fires a bolt projectile and returns the entity to script
* @Pramas WeaponFireBoltParams
* @NativeName: FireWeaponBoltAndReturnEntity_Script
* @NativeFunctionAddress 0000000140A61B40
*/

var function FireWeaponBoltAndReturnEntity()

/*
* @Breif Fires the weapon once as per weaponsettings, in a scaled blast pattern (if one is specified).
* @Pramas vector pos, vector dir, float speed, float patternScale, bool ignoreSpread
* @NativeName: FireWeapon_Default_Script
* @NativeFunctionAddress 0000000140A61B90
*/

var function FireWeapon_Default()

/*
* @Breif Fires a grenade projectile
* @Pramas WeaponFireGrenadeParams
* @NativeName: FireWeaponGrenade_Script
* @NativeFunctionAddress 0000000140A61BE0
*/

var function FireWeaponGrenade()

/*
* @Breif Fires a missile projectile
* @Pramas WeaponFireMissileParams
* @NativeName: FireWeaponMissile_Script
* @NativeFunctionAddress 0000000140A61C30
*/

var function FireWeaponMissile()

/*
* @Breif Get an array of mods active on this weapon.
* @Pramas 
* @NativeName: GetMods_Script
* @NativeFunctionAddress 0000000140A61E60
*/

var function GetMods()

/*
* @Breif Get an array of mods active or queued on this weapon.
* @Pramas 
* @NativeName: GetMods_WithQueued_Script
* @NativeFunctionAddress 0000000140A61EB0
*/

var function GetMods_WithQueued()

/*
* @Breif Reset and apply active mods on a weapon.
* @Pramas array< string > mods
* @NativeName: SetMods_Script
* @NativeFunctionAddress 0000000140A61F00
*/

var function SetMods()

/*
* @Breif Get all pending realtime mod commands. +mod_name/-mod_name for add/remove.
* @Pramas 
* @NativeName: Script_RealtimeMod_GetPendingCommands
* @NativeFunctionAddress 0000000140A61F50
*/

var function RealtimeMod_GetPendingCommands()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingInt
* @NativeFunctionAddress 0000000140A61FA0
*/

var function GetWeaponSettingInt()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar, table enumType
* @NativeName: Script_GetWeaponSettingEnum
* @NativeFunctionAddress 0000000140A61FF0
*/

var function GetWeaponSettingEnum()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingFloat
* @NativeFunctionAddress 0000000140A62040
*/

var function GetWeaponSettingFloat()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingBool
* @NativeFunctionAddress 0000000140A62090
*/

var function GetWeaponSettingBool()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingVector
* @NativeFunctionAddress 0000000140A620E0
*/

var function GetWeaponSettingVector()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingString
* @NativeFunctionAddress 0000000140A62130
*/

var function GetWeaponSettingString()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingAsset
* @NativeFunctionAddress 0000000140A62180
*/

var function GetWeaponSettingAsset()

/*
* @Breif Detach the end of the zipline (so it becomes a vine)
* @Pramas 
* @NativeName: Zipline_DetachEnd
* @NativeFunctionAddress 0000000140A1BA70
*/

void function Zipline_DetachEnd()

/*
* @Breif Whether the zipline is usable
* @Pramas 
* @NativeName: Zipline_IsEnabled
* @NativeFunctionAddress 0000000140A1BA10
*/

bool function Zipline_IsEnabled()

/*
* @Breif Whether the end of the zipline is detached (or will be if used)
* @Pramas 
* @NativeName: Zipline_IsEndDetachedScript
* @NativeFunctionAddress 0000000140A1B9B0
*/

bool function Zipline_IsEndDetached()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_IsVertical
* @NativeFunctionAddress 0000000140A1B950
*/

bool function Zipline_IsVertical()

/*
* @Breif Gets the weapon classname that fired this projectile.
* @Pramas 
* @NativeName: ProjectileGetWeaponClassName_Script
* @NativeFunctionAddress 0000000140A1D270
*/

string function ProjectileGetWeaponClassName()

/*
* @Breif Sets whether the projectile has been refired from the vortex; affects which script is run.
* @Pramas bool
* @NativeName: SetVortexRefired
* @NativeFunctionAddress 0000000140A1D210
*/

void function SetVortexRefired(bool)

/*
* @Breif Set whether projectile should do damage to alive entities only
* @Pramas bool
* @NativeName: DamageAliveOnly
* @NativeFunctionAddress 0000000140A1D1B0
*/

void function DamageAliveOnly(bool)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string
* @NativeName: Script_ProjectileGetWeaponInfoFileKeyField
* @NativeFunctionAddress 0000000140A1D0E0
*/

var function ProjectileGetWeaponInfoFileKeyField(string)

/*
* @Breif Resolves a string key to its asset in this weapons info file.
* @Pramas string
* @NativeName: ProjectileGetWeaponInfoFileKeyFieldAsset
* @NativeFunctionAddress 0000000140A1D040
*/

asset function ProjectileGetWeaponInfoFileKeyFieldAsset(string)

/*
* @Breif Gets a weapons charge level returns 0 if not a charge weapon or has 0 charge
* @Pramas 
* @NativeName: ProjectileGetWeaponChargeLevel
* @NativeFunctionAddress 0000000140A1CF90
*/

int function ProjectileGetWeaponChargeLevel()

/*
* @Breif Get the damage amount this projectile's weapon should do to a titan that the player is rodeoing.
* @Pramas 
* @NativeName: ProjectileGetRodeoDamage_Script
* @NativeFunctionAddress 0000000140A1CEE0
*/

int function ProjectileGetRodeoDamage()

/*
* @Breif Force projectile to act as if the 'adjust_to_gun_barrel' weapon setting had been set to false.
* @Pramas bool
* @NativeName: ForceAdjustToGunBarrelDisabled_Script
* @NativeFunctionAddress 0000000140A1CE80
*/

void function ForceAdjustToGunBarrelDisabled(bool)

/*
* @Breif Returns the time the projectile was created by the player
* @Pramas 
* @NativeName: GetProjectileCreationTime
* @NativeFunctionAddress 0000000140A1CDD0
*/

float function GetProjectileCreationTime()

/*
* @Breif Return the time the projectile was created on the server
* @Pramas 
* @NativeName: GetProjectileCreationTimeServer
* @NativeFunctionAddress 0000000140A1CD20
*/

float function GetProjectileCreationTimeServer()

/*
* @Breif Specify which of the weapon's "projectile_trail_effect_#" settings this projectile should use.
* @Pramas int
* @NativeName: SetProjectilTrailEffectIndex_Script
* @NativeFunctionAddress 0000000140A1CCB0
*/

void function SetProjectilTrailEffectIndex(int)

/*
* @Breif Sets how long the projectile is alive for 0 is infinite or until it collides
* @Pramas float
* @NativeName: SetProjectileLifetime_Script
* @NativeFunctionAddress 0000000140A1CC40
*/

void function SetProjectileLifetime(float)

/*
* @Breif Sets how far the projectile can travel for 0 is infinite or until it collides
* @Pramas float
* @NativeName: SetProjectileDestructionDistance_Script
* @NativeFunctionAddress 0000000140A1CBD0
*/

void function SetProjectileDestructionDistance(float)

/*
* @Breif Gets how long before the lifetime of the projectile is up.
* @Pramas 
* @NativeName: GetTimeToProjectileDeath_Script
* @NativeFunctionAddress 0000000140A1CB20
*/

float function GetTimeToProjectileDeath()

/*
* @Breif Gets whether or not this projectile allows headshots
* @Pramas 
* @NativeName: Script_GetAllowHeadShots
* @NativeFunctionAddress 0000000140A1CAC0
*/

bool function GetProjectileAllowHeadShots()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetReducedEffects
* @NativeFunctionAddress 0000000140A1CA70
*/

void function SetReducedEffects()

/*
* @Breif Set the impact FX table to use for collisions.
* @Pramas int
* @NativeName: SetImpactEffectTable_Script
* @NativeFunctionAddress 0000000140A1CA00
*/

void function SetImpactEffectTable(int)

/*
* @Breif Set projectile's speed
* @Pramas float
* @NativeName: SetProjectileSpeed
* @NativeFunctionAddress 0000000140A1C990
*/

void function SetProjectileSpeed(float)

/*
* @Breif Get projectile's speed
* @Pramas 
* @NativeName: GetProjectileSpeed
* @NativeFunctionAddress 0000000140A1C8E0
*/

float function GetProjectileSpeed()

/*
* @Breif Returns reference to the weapon that fired this projectile
* @Pramas 
* @NativeName: GetWeaponSource
* @NativeFunctionAddress 0000000140A1C880
*/

entity function GetWeaponSource()

/*
* @Breif Get an array of mods active on the weapon that shot this projectile.
* @Pramas 
* @NativeName: ProjectileGetMods_Script
* @NativeFunctionAddress 0000000140A1ADE0
*/

var function ProjectileGetMods()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingInt
* @NativeFunctionAddress 0000000140A1AE30
*/

var function GetProjectileWeaponSettingInt()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingFloat
* @NativeFunctionAddress 0000000140A1AE80
*/

var function GetProjectileWeaponSettingFloat()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingBool
* @NativeFunctionAddress 0000000140A1AED0
*/

var function GetProjectileWeaponSettingBool()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingVector
* @NativeFunctionAddress 0000000140A1AF20
*/

var function GetProjectileWeaponSettingVector()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingString
* @NativeFunctionAddress 0000000140A1AF70
*/

var function GetProjectileWeaponSettingString()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingAsset
* @NativeFunctionAddress 0000000140A1AFC0
*/

var function GetProjectileWeaponSettingAsset()

/*
* @Breif Set missile's homing speed
* @Pramas float, float
* @NativeName: SetHomingSpeeds
* @NativeFunctionAddress 0000000140A1C290
*/

void function SetHomingSpeeds(float, float)

/*
* @Breif Get missile's homing speed
* @Pramas 
* @NativeName: GetHomingSpeed
* @NativeFunctionAddress 0000000140A1C1E0
*/

float function GetHomingSpeed()

/*
* @Breif Get missile's homing speed -vs- dodging players.
* @Pramas 
* @NativeName: GetHomingSpeedAtDodgingPlayer
* @NativeFunctionAddress 0000000140A1C130
*/

float function GetHomingSpeedAtDodgingPlayer()

/*
* @Breif Set missile's homing target. If the missile's target position is set that will be used instead.
* @Pramas entity, vector
* @NativeName: SetTarget_Script
* @NativeFunctionAddress 0000000140A1C0B0
*/

void function SetMissileTarget(entity, vector)

/*
* @Breif Get missile's homing target
* @Pramas 
* @NativeName: GetMissileTarget
* @NativeFunctionAddress 0000000140A1C050
*/

entity function GetMissileTarget()

/*
* @Breif Sets the missile's target homing position. This will override any target entity.
* @Pramas vector
* @NativeName: SetTargetPosition
* @NativeFunctionAddress 0000000140A1BFF0
*/

void function SetMissileTargetPosition(vector)

/*
* @Breif Gets the missile's target homing position. This may be garbage if not at first set.
* @Pramas 
* @NativeName: GetTargetPosition
* @NativeFunctionAddress 0000000140A1BF90
*/

vector function GetMissileTargetPosition()

/*
* @Breif Clears the missile's target homing position.
* @Pramas 
* @NativeName: ClearTargetPosition
* @NativeFunctionAddress 0000000140A1BF40
*/

void function ClearMissileTargetPosition()

/*
* @Breif Self-destruct.
* @Pramas 
* @NativeName: MissileExplode_Script
* @NativeFunctionAddress 0000000140A1BEF0
*/

void function MissileExplode()

/*
* @Breif Init missile drift settings from weapon settings
* @Pramas vector, vector
* @NativeName: InitMissileForRandomDriftFromWeaponSettings
* @NativeFunctionAddress 0000000140A1BE90
*/

void function InitMissileForRandomDriftFromWeaponSettings(vector, vector)

/*
* @Breif Init missile drift with custom settings
* @Pramas vector, vector, float, float, float, float, float, float, float
* @NativeName: InitMissileForRandomDrift
* @NativeFunctionAddress 0000000140A1BD40
*/

void function InitMissileForRandomDrift(vector, vector, float, float, float, float, float, float, float)

/*
* @Breif Init missile path expand contract settings
* @Pramas vector, vector, float, float, float, float, vector, bool
* @NativeName: InitMissileExpandContract
* @NativeFunctionAddress 0000000140A1BC50
*/

void function InitMissileExpandContract(vector, vector, float, float, float, float, vector, bool)

/*
* @Breif Apply missile drift to velocity
* @Pramas float, float
* @NativeName: ApplyMissileControlledDrift
* @NativeFunctionAddress 0000000140A1BB50
*/

vector function ApplyMissileControlledDrift(float, float)

/*
* @Breif Init spiralling missile
* @Pramas vector, vector, int, bool, bool
* @NativeName: InitMissileSpiral
* @NativeFunctionAddress 0000000140A1BAC0
*/

void function InitMissileSpiral(vector, vector, int, bool, bool)

/*
* @Breif Sets max number of ricochet's a bolt can do
* @Pramas int
* @NativeName: Script_SetRicochetMaxCount
* @NativeFunctionAddress 0000000140A1C320
*/

void function SetRicochetMaxCount(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetBulletAbsorbedCount
* @NativeFunctionAddress 0000000140A1C440
*/

int function GetBulletAbsorbedCount()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetProjectileAbsorbedCount
* @NativeFunctionAddress 0000000140A1C390
*/

int function GetProjectileAbsorbedCount()

/*
* @Breif Gets the forward direction of the window
* @Pramas 
* @NativeName: GetNormal
* @NativeFunctionAddress 0000000140A1D850
*/

vector function GetNormal()

/*
* @Breif Gets the sideways direction of the window
* @Pramas 
* @NativeName: GetRight
* @NativeFunctionAddress 0000000140A1D780
*/

vector function GetRight()

/*
* @Breif Gets half the width of the window
* @Pramas 
* @NativeName: GetHalfWidth
* @NativeFunctionAddress 0000000140A1D6D0
*/

float function GetHalfWidth()

/*
* @Breif Gets half the height of the window
* @Pramas 
* @NativeName: GetHalfHeight
* @NativeFunctionAddress 0000000140A1D620
*/

float function GetHalfHeight()

/*
* @Breif 
* @Pramas 
* @NativeName: Hide
* @NativeFunctionAddress 0000000140A1D970
*/

void function HideFirstPersonProxy()

/*
* @Breif 
* @Pramas 
* @NativeName: Show
* @NativeFunctionAddress 0000000140A1D920
*/

void function ShowFirstPersonProxy()

/*
* @Breif Returns time spent in cockpit so far.
* @Pramas 
* @NativeName: Script_GetTimeInCockpit
* @NativeFunctionAddress 00000001409C4540
*/

float function GetTimeInCockpit()

/*
* @Breif Plays an animation sequence by name.
* @Pramas string
* @NativeName: Script_StartAnimationSequence
* @NativeFunctionAddress 00000001409C44E0
*/

void function StartAnimationSequence(string)

/*
* @Breif Sets offset of viewmodel when cockpit is open.
* @Pramas float, float, float
* @NativeName: Script_SetOpenViewmodelOffset
* @NativeFunctionAddress 00000001409C4440
*/

void function SetOpenViewmodelOffset(float, float, float)

/*
* @Breif Sets offset for interior camera.
* @Pramas float, float, float, float, float, float
* @NativeName: Script_SetInteriorCameraOffset
* @NativeFunctionAddress 00000001409C4340
*/

void function SetInteriorCameraOffset(float, float, float, float, float, float)

/*
* @Breif Sets the transparency amount for the cockpit panel. 1 = Transparent, 0 = Opaque
* @Pramas int, float
* @NativeName: Script_SetCockpitPanelTransparency
* @NativeFunctionAddress 00000001409C42C0
*/

void function SetCockpitPanelTransparency(int, float)

/*
* @Breif Clears the transparency amount for the cockpit panel.
* @Pramas int
* @NativeName: Script_ClearCockpitPanelTransparency
* @NativeFunctionAddress 00000001409C4250
*/

void function ClearCockpitPanelTransparency(int)

/*
* @Breif Sets the chroma amount for the cockpit panel. 1 = Full Chromatic Aberration, 0 = No Chromatic Aberration
* @Pramas int, float
* @NativeName: Script_SetCockpitPanelChroma
* @NativeFunctionAddress 00000001409C41D0
*/

void function SetCockpitPanelChroma(int, float)

/*
* @Breif Clears the chroma amount for the cockpit panel.
* @Pramas int
* @NativeName: Script_ClearCockpitPanelChroma
* @NativeFunctionAddress 00000001409C4160
*/

void function ClearCockpitPanelChroma(int)

/*
* @Breif Sets an additional offset XY for the cockpit panel. (-1, -1) to (1, 1)  
* @Pramas int, float, float
* @NativeName: Script_SetCockpitPanelOffsetXY
* @NativeFunctionAddress 00000001409C40C0
*/

void function SetCockpitPanelOffsetXY(int, float, float)

/*
* @Breif Sets fov of cockpit.
* @Pramas float
* @NativeName: SetCockpitFOV
* @NativeFunctionAddress 00000001409C4050
*/

void function SetCockpitFOV(float)

/*
* @Breif Opens the cockpit (Puts it into the world.)
* @Pramas bool
* @NativeName: SetIsOpen
* @NativeFunctionAddress 00000001409C3FF0
*/

void function SetIsOpen(bool)

/*
* @Breif Returns whether cockpit is open.
* @Pramas 
* @NativeName: GetIsOpen
* @NativeFunctionAddress 00000001409C3F90
*/

bool function GetIsOpen()

/*
* @Breif Sets that the world view is saved off before viewmodels are rendered.
* @Pramas bool
* @NativeName: Script_SetCaptureScreenBeforeViewmodels
* @NativeFunctionAddress 00000001409C3F30
*/

void function SetCaptureScreenBeforeViewmodels(bool)

/*
* @Breif Tell code a panel was damaged.
* @Pramas int, float
* @NativeName: AddToTitanHudDamageHistory
* @NativeFunctionAddress 00000001409C3EB0
*/

void function AddToTitanHudDamageHistory(int, float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptPropFlags
* @NativeFunctionAddress 000000014069CD20
*/

int function GetScriptPropFlags()

/*
* @Breif Sets the type of custom smart ammo target this is
* @Pramas int
* @NativeName: Script_SetSmartAmmoLockType
* @NativeFunctionAddress 000000014069CCB0
*/

void function SetSmartAmmoLockType(int)

/*
* @Breif Gets the type of custom smart ammo target this is
* @Pramas 
* @NativeName: Script_GetSmartAmmoLockType
* @NativeFunctionAddress 000000014069CC00
*/

int function GetSmartAmmoLockType()

/*
* @Breif Get node the train is currently set to stop at
* @Pramas 
* @NativeName: Script_Train_GetStopNode
* @NativeFunctionAddress 00000001408FC070
*/

entity function Train_GetStopNode()

/*
* @Breif Returns true if the train is currently moving to a train node
* @Pramas 
* @NativeName: Train_IsMovingToTrainNode
* @NativeFunctionAddress 00000001408FC010
*/

bool function Train_IsMovingToTrainNode()

/*
* @Breif Stop all movement/rotation immediately
* @Pramas 
* @NativeName: Script_NonPhysicsStop
* @NativeFunctionAddress 00000001408FBFC0
*/

void function NonPhysicsStop()

/*
* @Breif Move to a given point over time. Specify total travel time, acceleration time, and deceleration time.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsMoveTo
* @NativeFunctionAddress 00000001408FBF10
*/

void function NonPhysicsMoveTo(vector, float, float, float)

/*
* @Breif Move to a given point over time. The point is specified in the local space (i.e. relative to our parent), but the movement is linear in world space.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsMoveInWorldSpaceToLocalPos
* @NativeFunctionAddress 00000001408FBE60
*/

void function NonPhysicsMoveInWorldSpaceToLocalPos(vector, float, float, float)

/*
* @Breif Move with a given starting velocity and apply the given gravity over time
* @Pramas vector, vector
* @NativeName: Script_NonPhysicsMoveWithGravity
* @NativeFunctionAddress 00000001408FBE00
*/

void function NonPhysicsMoveWithGravity(vector, vector)

/*
* @Breif Rotate to given angles over time. Specify total travel time.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsRotateTo
* @NativeFunctionAddress 00000001408FBD50
*/

void function NonPhysicsRotateTo(vector, float, float, float)

/*
* @Breif Rotate around the given axis with the given speed. Use an axis or speed of 0 to stop.
* @Pramas vector, float
* @NativeName: Script_NonPhysicsRotate
* @NativeFunctionAddress 00000001408FBCE0
*/

void function NonPhysicsRotate(vector, float)

/*
* @Breif When set true, will use local positions.
* @Pramas bool
* @NativeName: Script_NonPhysicsSetMoveModeLocal
* @NativeFunctionAddress 00000001408FBC80
*/

void function NonPhysicsSetMoveModeLocal(bool)

/*
* @Breif When set true, will use local rotation.
* @Pramas bool
* @NativeName: Script_NonPhysicsSetRotateModeLocal
* @NativeFunctionAddress 00000001408FBC20
*/

void function NonPhysicsSetRotateModeLocal(bool)

/*
* @Breif Get speed train is trying to go at.
* @Pramas 
* @NativeName: Script_Train_GetGoalSpeed
* @NativeFunctionAddress 00000001408FBB70
*/

float function Train_GetGoalSpeed()

/*
* @Breif Get time until the train reaches its goal speed.
* @Pramas 
* @NativeName: Script_Train_GetTotalTimeToGoalSpeed
* @NativeFunctionAddress 00000001408FBAC0
*/

float function Train_GetTotalTimeToGoalSpeed()

/*
* @Breif Get current speed moving to train node.
* @Pramas 
* @NativeName: Train_GetCurrentSpeed
* @NativeFunctionAddress 00000001408FBA10
*/

float function Train_GetCurrentSpeed()

/*
* @Breif Get the script_mover_train_node the train was traveling on before it stopped.
* @Pramas 
* @NativeName: Script_Train_GetLastNode
* @NativeFunctionAddress 00000001408FB9B0
*/

entity function Train_GetLastNode()

/*
* @Breif Get the distance the train was at before it stopped.
* @Pramas 
* @NativeName: Script_Train_GetLastDistance
* @NativeFunctionAddress 00000001408FB900
*/

float function Train_GetLastDistance()

/*
* @Breif Get the speed the train was moving at before it stopped.
* @Pramas 
* @NativeName: Train_GetLastSpeed
* @NativeFunctionAddress 00000001408FB850
*/

float function Train_GetLastSpeed()

/*
* @Breif Gets door flags. Really just a networked int.
* @Pramas 
* @NativeName: GetDoorFlags
* @NativeFunctionAddress 00000001408FB740
*/

int function GetDoorFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointType
* @NativeFunctionAddress 00000001408FD720
*/

int function GetWaypointType()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointBitfield
* @NativeFunctionAddress 000000014070D010
*/

int function GetWaypointBitfield()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointCustomType
* @NativeFunctionAddress 00000001408FD690
*/

string function GetWaypointCustomType()

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointEntity
* @NativeFunctionAddress 00000001408FD610
*/

entity function GetWaypointEntity(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointVector
* @NativeFunctionAddress 00000001408FD520
*/

vector function GetWaypointVector(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointGametime
* @NativeFunctionAddress 00000001408FD460
*/

float function GetWaypointGametime(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointInt
* @NativeFunctionAddress 00000001408FD3A0
*/

int function GetWaypointInt(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointFloat
* @NativeFunctionAddress 00000001408FD2E0
*/

float function GetWaypointFloat(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointString
* @NativeFunctionAddress 00000001408FD240
*/

string function GetWaypointString(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointAsset
* @NativeFunctionAddress 00000001408FD190
*/

asset function GetWaypointAsset(int index)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointObjectivePackedInt
* @NativeFunctionAddress 00000001408FD0E0
*/

int function GetWaypointObjectivePackedInt()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointGroupName
* @NativeFunctionAddress 00000001408FD050
*/

string function GetWaypointGroupName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointGroupFlags
* @NativeFunctionAddress 00000001408FCFA0
*/

int function GetWaypointGroupFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: WaypointFocusTracking_Register
* @NativeFunctionAddress 00000001408FCF50
*/

void function WaypointFocusTracking_Register()

/*
* @Breif 
* @Pramas 
* @NativeName: WaypointFocusTracking_Deregister
* @NativeFunctionAddress 00000001408FCF00
*/

void function WaypointFocusTracking_Deregister()

/*
* @Breif 
* @Pramas entity trackEnt, int trackProp, int customInt
* @NativeName: WaypointFocusTracking_TrackPos
* @NativeFunctionAddress 00000001408FCE50
*/

void function WaypointFocusTracking_TrackPos(entity trackEnt, int trackProp, int customInt)

/*
* @Breif 
* @Pramas bool isTrackingDisabled
* @NativeName: WaypointFocusTracking_SetDisabled
* @NativeFunctionAddress 00000001408FCDF0
*/

void function WaypointFocusTracking_SetDisabled(bool isTrackingDisabled)

/*
* @Breif Adds a waypoint flag to a waypoint
* @Pramas int
* @NativeName: Script_WaypointAddFlag
* @NativeFunctionAddress 00000001408FCD80
*/

void function WaypointAddFlag(int)

/*
* @Breif Removes a waypoint flag
* @Pramas int
* @NativeName: Script_WaypointRemoveFlag
* @NativeFunctionAddress 00000001408FCD10
*/

void function WaypointRemoveFlag(int)

/*
* @Breif Whether or not a waypoint flag is set
* @Pramas int flag
* @NativeName: WaypointIsFlagSet
* @NativeFunctionAddress 00000001408FCC90
*/

bool function WaypointIsFlagSet(int flag)

/*
* @Breif The distance at which this waypoint can be seen
* @Pramas float dist
* @NativeName: WaypointSetCheckDist
* @NativeFunctionAddress 00000001408FCC20
*/

void function WaypointSetCheckDist(float dist)

/*
* @Breif gets the valid check distance for a waypoint
* @Pramas 
* @NativeName: WaypointGetCheckDist
* @NativeFunctionAddress 00000001408FCB70
*/

float function WaypointGetCheckDist()

/*
* @Breif gets the lifetime for a waypoint
* @Pramas 
* @NativeName: WaypointGetLifetime
* @NativeFunctionAddress 00000001408FCAC0
*/

float function WaypointGetLifetime()

/*
* @Breif gets the creation time for a waypoint
* @Pramas 
* @NativeName: WaypointGetCreationTime
* @NativeFunctionAddress 00000001408FCA10
*/

float function WaypointGetCreationTime()

/*
* @Breif gets the id for a waypoint
* @Pramas 
* @NativeName: WaypointGetID
* @NativeFunctionAddress 00000001408FC960
*/

int function WaypointGetID()

/*
* @Breif sets the id for a waypoint
* @Pramas int id
* @NativeName: WaypointSetID
* @NativeFunctionAddress 00000001408FC8F0
*/

void function WaypointSetID(int id)

/*
* @Breif gets if the given waypoint is visible this frame
* @Pramas 
* @NativeName: WaypointIsVisible
* @NativeFunctionAddress 00000001408FC890
*/

bool function WaypointIsVisible()

/*
* @Breif gets the entity this waypoint is attached to
* @Pramas 
* @NativeName: WaypointGetAttachedPOIEnt
* @NativeFunctionAddress 00000001408FC830
*/

entity function WaypointGetAttachedPOIEnt()

/*
* @Breif gets the waypoint position
* @Pramas 
* @NativeName: WaypointGetPOIPosition
* @NativeFunctionAddress 00000001408FC760
*/

vector function WaypointGetPOIPosition()

/*
* @Breif is this waypoint in focus
* @Pramas 
* @NativeName: WaypointIsInFocus
* @NativeFunctionAddress 00000001408FC700
*/

bool function WaypointIsInFocus()

/*
* @Breif was this waypoint in focus last frame too
* @Pramas 
* @NativeName: WaypointInFocusPrevFrame
* @NativeFunctionAddress 00000001408FC6A0
*/

bool function WaypointInFocusPrevFrame()

/*
* @Breif Gets the poi type of this waypoint
* @Pramas 
* @NativeName: WaypointGetPOIType
* @NativeFunctionAddress 00000001408FC5F0
*/

int function WaypointGetPOIType()

/*
* @Breif Sets the waypoint to not trace for visibility for a certain time
* @Pramas float endTime
* @NativeName: WaypointSetAlwaysVisibleEndTime
* @NativeFunctionAddress 00000001408FC580
*/

void function WaypointSetAlwaysVisibleEndTime(float endTime)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTasklistCustomInt
* @NativeFunctionAddress 000000014070D010
*/

int function GetTasklistCustomInt()

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistStatus
* @NativeFunctionAddress 00000001408FDE30
*/

int function GetTasklistStatus(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistType
* @NativeFunctionAddress 00000001408FDD70
*/

int function GetTasklistType(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistCountGoal
* @NativeFunctionAddress 00000001408FDCB0
*/

int function GetTasklistCountGoal(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistCountNow
* @NativeFunctionAddress 00000001408FDBF0
*/

int function GetTasklistCountNow(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistFlags
* @NativeFunctionAddress 00000001408FDB30
*/

int function GetTasklistFlags(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistGameTime
* @NativeFunctionAddress 00000001408FDA70
*/

float function GetTasklistGameTime(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistInt
* @NativeFunctionAddress 00000001408FD9B0
*/

int function GetTasklistInt(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistFloat
* @NativeFunctionAddress 00000001408FD8F0
*/

float function GetTasklistFloat(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistEntity
* @NativeFunctionAddress 00000001408FD870
*/

entity function GetTasklistEntity(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistString
* @NativeFunctionAddress 00000001408FD7D0
*/

string function GetTasklistString(int index)

/*
* @Breif Sets the entity used for weapon hand IK
* @Pramas entity
* @NativeName: Script_SetIKWeapon
* @NativeFunctionAddress 000000014069CB80
*/

void function SetIKWeapon(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetDoorIsLocked
* @NativeFunctionAddress 0000000140849D50
*/

bool function GetDoorIsLocked()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsDoorOpen
* @NativeFunctionAddress 0000000140849CF0
*/

bool function IsDoorOpen()

/*
* @Breif Get the attached door on a double door
* @Pramas 
* @NativeName: Script_GetOppositeDoor
* @NativeFunctionAddress 0000000140849C90
*/

entity function GetOppositeDoor()

/*
* @Breif Forces the grenade to ignite immediately.
* @Pramas 
* @NativeName: Script_GrenadeIgnite
* @NativeFunctionAddress 000000014084A450
*/

void function GrenadeIgnite()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GrenadeHasIgnited
* @NativeFunctionAddress 000000014084A3F0
*/

bool function GrenadeHasIgnited()

/*
* @Breif Forces the grenade to explode immediately.
* @Pramas vector
* @NativeName: Script_GrenadeExplode
* @NativeFunctionAddress 000000014084A390
*/

void function GrenadeExplode(vector)

/*
* @Breif Forces the grenade to explode immediately.
* @Pramas vector
* @NativeName: Script_GrenadeExplodeForCollisionCallback
* @NativeFunctionAddress 000000014084A330
*/

void function ExplodeForCollisionCallback(vector)

/*
* @Breif Gets the damage radius
* @Pramas 
* @NativeName: Script_GetDamageRadius
* @NativeFunctionAddress 000000014084A280
*/

float function GetDamageRadius()

/*
* @Breif Gets the explosion radius
* @Pramas 
* @NativeName: Script_GetExplosionRadius
* @NativeFunctionAddress 000000014084A1D0
*/

float function GetExplosionRadius()

/*
* @Breif Gets the maximum damage amount
* @Pramas int
* @NativeName: Script_GetDamageAmount
* @NativeFunctionAddress 000000014084A110
*/

float function GetDamageAmount(int)

/*
* @Breif Gets the time this grenade was created.
* @Pramas 
* @NativeName: Script_GetCreationTime
* @NativeFunctionAddress 000000014084A060
*/

float function GetCreationTime()

/*
* @Breif Gets the fuse time of the grenade
* @Pramas 
* @NativeName: Script_GetFuseTime
* @NativeFunctionAddress 0000000140849FB0
*/

float function GetFuseTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_MarkAsAttached
* @NativeFunctionAddress 0000000140849F60
*/

void function MarkAsAttached()

/*
* @Breif Gets who through the grenade.
* @Pramas 
* @NativeName: Script_GetThrower
* @NativeFunctionAddress 0000000140849F00
*/

entity function GetThrower()

/*
* @Breif Sets whether or not the grenade explodes
* @Pramas bool
* @NativeName: Script_SetDoesExplode
* @NativeFunctionAddress 0000000140849EA0
*/

void function SetDoesExplode(bool)

/*
* @Breif Init magnetic grenade parameters
* @Pramas float, string
* @NativeName: InitMagnetic
* @NativeFunctionAddress 0000000140849E20
*/

void function InitMagnetic(float, string)

/*
* @Breif Returns an interface to the hud panel.
* @Pramas 
* @NativeName: Script_GetPanel
* @NativeFunctionAddress 000000014070BBE0
*/

var function GetPanel()

/*
* @Breif ( bool ) Sets whether the panel renders as translucent.
* @Pramas bool
* @NativeName: Script_SetTranslucent
* @NativeFunctionAddress 000000014070BB80
*/

void function SetTranslucent(bool)

/*
* @Breif Sets the alpha modifier for the panel
* @Pramas int
* @NativeName: Script_SetAlpha
* @NativeFunctionAddress 000000014070BB10
*/

void function SetAlpha(int)

/*
* @Breif Sets the width and height of the panel
* @Pramas float, float
* @NativeName: Script_SetSize
* @NativeFunctionAddress 000000014070BA80
*/

void function SetSize(float, float)

/*
* @Breif Sets whether to capture a refract screen before drawing (COSTS GPU!)
* @Pramas bool
* @NativeName: Script_SetRefract
* @NativeFunctionAddress 000000014070BA20
*/

void function SetRefract(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_VehicleGetDriver
* @NativeFunctionAddress 000000014070BE60
*/

entity function VehicleGetDriver()

/*
* @Breif Stops the vehicle from updating (stops movement, aiming, etc)
* @Pramas 
* @NativeName: Script_VehicleDeactivate
* @NativeFunctionAddress 000000014070BE10
*/

void function VehicleDeactivate()

/*
* @Breif Checks driver and passengers
* @Pramas entity
* @NativeName: Script_IsPlayerInVehicle
* @NativeFunctionAddress 000000014070BD90
*/

bool function IsPlayerInVehicle(entity)

/*
* @Breif 
* @Pramas entity
* @NativeName: VehicleIsDriver
* @NativeFunctionAddress 000000014070BD10
*/

bool function VehicleIsDriver(entity)

/*
* @Breif Gets the internal speed of the vehicle
* @Pramas 
* @NativeName: Script_GetVehicleVelocity
* @NativeFunctionAddress 000000014070BC40
*/

vector function GetVehicleVelocity()

/*
* @Breif Get array of players in vehicle
* @Pramas 
* @NativeName: Script_VehicleGetPlayerArray
* @NativeFunctionAddress 0000000140709E30
*/

var function VehicleGetPlayerArray()

/*
* @Breif Set the light origin
* @Pramas vector
* @NativeName: ScriptSetLightOrigin
* @NativeFunctionAddress 000000014070C560
*/

void function SetTweakLightOrigin(vector)

/*
* @Breif Set the light color
* @Pramas vector
* @NativeName: ScriptSetLightColor
* @NativeFunctionAddress 000000014070C500
*/

void function SetTweakLightColor(vector)

/*
* @Breif Set the light brightness
* @Pramas float
* @NativeName: ScriptSetLightBrightness
* @NativeFunctionAddress 000000014070C490
*/

void function SetTweakLightBrightness(float)

/*
* @Breif Set the light cone (degrees of spread)
* @Pramas float
* @NativeName: ScriptSetLightCone
* @NativeFunctionAddress 000000014070C420
*/

void function SetTweakLightCone(float)

/*
* @Breif Set the light distance that the light will travel
* @Pramas float
* @NativeName: ScriptSetLightDist
* @NativeFunctionAddress 000000014070C3B0
*/

void function SetTweakLightDistance(float)

/*
* @Breif Set the the percentage of the distance that the light wil falloff halfway
* @Pramas float
* @NativeName: ScriptSetLightHalfBrightFrac
* @NativeFunctionAddress 000000014070C340
*/

void function SetTweakLightHalfBrightFrac(float)

/*
* @Breif Set the light inner cone (degrees of spread for inner cone)
* @Pramas float
* @NativeName: ScriptSetLightInnerCone
* @NativeFunctionAddress 000000014070C2D0
*/

void function SetTweakLightInnerCone(float)

/*
* @Breif Sets if this light should use the pbr falloff or not
* @Pramas bool
* @NativeName: ScriptSetLightPBRFalloff
* @NativeFunctionAddress 000000014070C270
*/

void function SetTweakLightPBRFalloff(bool)

/*
* @Breif Sets this lights specular intensity
* @Pramas float
* @NativeName: ScriptSetLightSpecIntensity
* @NativeFunctionAddress 000000014070C200
*/

void function SetTweakLightSpecIntensity(float)

/*
* @Breif Sets this light to use realtime shadows or not
* @Pramas bool
* @NativeName: ScriptSetLightRealtimeShadows
* @NativeFunctionAddress 000000014070C1A0
*/

void function SetTweakLightRealtimeShadows(bool)

/*
* @Breif Updates the shadows cast from this light every frame
* @Pramas bool
* @NativeName: ScriptSetLightUpdateEveryFrame
* @NativeFunctionAddress 000000014070C140
*/

void function SetTweakLightUpdateShadowsEveryFrame(bool)

/*
* @Breif Sets the shadow filter size
* @Pramas int
* @NativeName: ScriptSetLightShadowFilterSize
* @NativeFunctionAddress 000000014070C0D0
*/

void function SetTweakLightShadowFilterSize(int)

/*
* @Breif Sets the shadow upres size
* @Pramas int
* @NativeName: ScriptSetLightShadowUpres
* @NativeFunctionAddress 000000014070C060
*/

void function SetTweakLightShadowUpres(int)

/*
* @Breif Set the light angles
* @Pramas vector
* @NativeName: ScriptSetLightAngles
* @NativeFunctionAddress 000000014070C000
*/

void function SetTweakLightAngles(vector)

/*
* @Breif Set emission radius
* @Pramas float
* @NativeName: ScriptSetLightEmitRadius
* @NativeFunctionAddress 000000014070BF90
*/

void function SetLightEmitRadius(float)

/*
* @Breif Get the light origin
* @Pramas 
* @NativeName: ScriptGetLightOrigin
* @NativeFunctionAddress 000000014070BEC0
*/

vector function GetTweakLightOrigin()

/*
* @Breif Tests if the trigger is being touched by any entity that can trigger it.
* @Pramas 
* @NativeName: Script_IsTouched
* @NativeFunctionAddress 000000014070C640
*/

bool function IsTouched()

/*
* @Breif Tests if the trigger contains a given entity.
* @Pramas entity
* @NativeName: Script_IsTouching
* @NativeFunctionAddress 000000014070C5C0
*/

bool function IsTouching(entity)

/*
* @Breif Get array of touching entities
* @Pramas 
* @NativeName: Script_GetTouchingEntities
* @NativeFunctionAddress 0000000140709DE0
*/

var function GetTouchingEntities()

/*
* @Breif Grabs the current trigger type of a given heavy trigger
* @Pramas 
* @NativeName: Script_GetTriggerType
* @NativeFunctionAddress 000000014070CAB0
*/

int function GetTriggerType()

/*
* @Breif Sets how long the trap is obstructed for
* @Pramas float
* @NativeName: Script_SetObstructedEndTime
* @NativeFunctionAddress 000000014070CA40
*/

void function SetObstructedEndTime(float)

/*
* @Breif Gets when the trap will stop being obstructed for
* @Pramas 
* @NativeName: Script_GetObstructedEndTime
* @NativeFunctionAddress 000000014070C990
*/

float function GetObstructedEndTime()

/*
* @Breif Gets the Height of the trap
* @Pramas 
* @NativeName: Script_GetTeslaTrapHeight
* @NativeFunctionAddress 000000014070C8E0
*/

float function GetTeslaTrapHeight()

/*
* @Breif Sets the index for effects used by the tesla trap
* @Pramas int
* @NativeName: Script_SetTeslaLinkFXIdx
* @NativeFunctionAddress 000000014070C870
*/

void function SetTeslaLinkFXIdx(int)

/*
* @Breif Grabs the fx index used by script
* @Pramas 
* @NativeName: Script_GetTeslaLinkFXIdx
* @NativeFunctionAddress 000000014070C7C0
*/

int function GetTeslaLinkFXIdx()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsTeslaTrapObstructed
* @NativeFunctionAddress 000000014070C760
*/

bool function IsTeslaTrapObstructed()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTeslaTrapStart
* @NativeFunctionAddress 000000014070C700
*/

entity function GetTeslaTrapStart()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTeslaTrapEnd
* @NativeFunctionAddress 000000014070C6A0
*/

entity function GetTeslaTrapEnd()

/*
* @Breif Sets a function to be called when an entity enters the trigger.
* @Pramas void functionref( entity trig, entity ent )
* @NativeName: Script_SetEnterCallback
* @NativeFunctionAddress 0000000140709D90
*/

var function SetClientEnterCallback()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointState
* @NativeFunctionAddress 000000014070D010
*/

int function GetHardpointState()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointEstimatedCaptureTime
* @NativeFunctionAddress 000000014070CF60
*/

float function GetEstimatedCaptureTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointProgressRefPoint
* @NativeFunctionAddress 000000014070CEB0
*/

float function GetHardpointProgressRefPoint()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointAICount
* @NativeFunctionAddress 000000014070CDF0
*/

int function GetHardpointAICount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointPlayerCount
* @NativeFunctionAddress 000000014070CD30
*/

int function GetHardpointPlayerCount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointPlayerTitanCount
* @NativeFunctionAddress 000000014070CC70
*/

int function GetHardpointPlayerTitanCount(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetHardpointID
* @NativeFunctionAddress 000000014070CBC0
*/

int function GetHardpointID()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTerminal
* @NativeFunctionAddress 000000014070CB60
*/

entity function GetTerminal()

/*
* @Breif Gets the ID of the impact color used for the shield.
* @Pramas 
* @NativeName: GetImpactEffectColorID
* @NativeFunctionAddress 000000014069C4B0
*/

int function GetImpactEffectColorID()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCustomOwnerName
* @NativeFunctionAddress 000000014069C560
*/

string function GetCustomOwnerName()

/*
* @Breif Sets the custom int script can put on survival props
* @Pramas int
* @NativeName: Script_SetSurvivalInt
* @NativeFunctionAddress 000000014069CB10
*/

void function SetSurvivalInt(int)

/*
* @Breif Gets the custom int script can put on survival props
* @Pramas 
* @NativeName: Script_GetSurvivalInt
* @NativeFunctionAddress 000000014069CA60
*/

int function GetSurvivalInt()

/*
* @Breif Gets the weapon name for a survival pickup
* @Pramas 
* @NativeName: GetWeaponName
* @NativeFunctionAddress 000000014069C9D0
*/

string function GetWeaponName()

/*
* @Breif Sets the weapon name for a survival pickup
* @Pramas string
* @NativeName: SetWeaponName
* @NativeFunctionAddress 000000014069C970
*/

void function SetWeaponName(string)

/*
* @Breif Gets the clip count for a survival weapon pickup
* @Pramas 
* @NativeName: GetClipCount
* @NativeFunctionAddress 000000014069C8C0
*/

int function GetClipCount()

/*
* @Breif Sets mods bit field
* @Pramas int
* @NativeName: Script_SetModBitField
* @NativeFunctionAddress 000000014069C850
*/

void function SetWeaponModBitField(int)

/*
* @Breif Gets mods bit field
* @Pramas 
* @NativeName: Script_GetModBitField
* @NativeFunctionAddress 000000014069C7A0
*/

int function GetWeaponModBitField()

/*
* @Breif Gets the integer that represents this survival pickup's custom property
* @Pramas 
* @NativeName: GetSurvivalProperty
* @NativeFunctionAddress 000000014069C6F0
*/

int function GetSurvivalProperty()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetPredictiveHideForPickup
* @NativeFunctionAddress 000000014069C6A0
*/

void function SetPredictiveHideForPickup()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ClearPredictiveHideForPickup
* @NativeFunctionAddress 000000014069C650
*/

void function ClearPredictiveHideForPickup()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_HasPredictiveHideForPickup
* @NativeFunctionAddress 000000014069C5F0
*/

bool function HasPredictiveHideForPickup()

/*
* @Breif Get an array of mods on this weapon pickup
* @Pramas 
* @NativeName: Script_GetMods
* @NativeFunctionAddress 000000014069C410
*/

var function GetWeaponMods()

/*
* @Breif Set an array of mods on this weapon pickup
* @Pramas array< string > mods
* @NativeName: Script_SetMods
* @NativeFunctionAddress 000000014069C460
*/

var function SetWeaponMods()

/*
* @Breif Sets whether this point camera should be active
* @Pramas bool
* @NativeName: ScriptSetActive
* @NativeFunctionAddress 000000014069D370
*/

void function SetActive(bool)

/*
* @Breif Sets the FOV of this point camera
* @Pramas float
* @NativeName: ScriptSetFOV
* @NativeFunctionAddress 000000014069D300
*/

void function SetFOV(float)

/*
* @Breif Enable or disable fog on this point camera
* @Pramas bool
* @NativeName: ScriptSetFogEnable
* @NativeFunctionAddress 000000014069D2A0
*/

void function SetFogEnable(bool)

/*
* @Breif Render to this render texture id slot when camera is active. Set to -1 to disable.
* @Pramas int
* @NativeName: ScriptSetMonitorId
* @NativeFunctionAddress 000000014069D230
*/

void function SetMonitorId(int)

/*
* @Breif Sets the exposure override for this camera when used as a monitor.
* @Pramas float
* @NativeName: ScriptSetMonitorExposure
* @NativeFunctionAddress 000000014069D1C0
*/

void function SetMonitorExposure(float)

/*
* @Breif Sets the far clipping plane distance for this camera when used as a monitor.
* @Pramas float
* @NativeName: ScriptSetMonitorZFar
* @NativeFunctionAddress 000000014069D150
*/

void function SetMonitorZFar(float)

/*
* @Breif Queues a snapshot of the monitor to the designated render texture id. Calls ClientCodeCallback_MonitorSnapshotDone on completion.
* @Pramas int
* @NativeName: ScriptQueueMonitorSnapshot
* @NativeFunctionAddress 000000014069D0E0
*/

void function QueueMonitorSnapshot(int)

/*
* @Breif Dequeues the queued monitor snapshot.
* @Pramas 
* @NativeName: ScriptDequeueMonitorSnapshot
* @NativeFunctionAddress 000000014069D090
*/

void function DequeueMonitorSnapshot()

/*
* @Breif Sets the interp target of the camera
* @Pramas entity, float, bool, int, float
* @NativeName: Script_SetTarget
* @NativeFunctionAddress 000000014069CFC0
*/

void function SetTarget(entity, float, bool, int, float)

/*
* @Breif Sets the position target of the camera
* @Pramas vector, bool, int, float
* @NativeName: Script_SetTargetPosition
* @NativeFunctionAddress 000000014069CF20
*/

void function SetTargetPosition(vector, bool, int, float)

/*
* @Breif Sets the interp FOV of the camera
* @Pramas float, bool, int, float
* @NativeName: Script_SetTargetFOV
* @NativeFunctionAddress 000000014069CE70
*/

void function SetTargetFOV(float, bool, int, float)

/*
* @Breif Sets the interp Angles of the camera
* @Pramas vector, bool, int, float
* @NativeName: Script_SetTargetAngles
* @NativeFunctionAddress 000000014069CDD0
*/

void function SetTargetAngles(vector, bool, int, float)

/*
* @Breif Returns the active weapon.
* @Pramas int
* @NativeName: Script_GetActiveWeapon
* @NativeFunctionAddress 00000001406AED40
*/

entity function GetActiveWeapon(int)

/*
* @Breif Returns the anti titan weapon.
* @Pramas 
* @NativeName: Script_GetAntiTitanWeapon
* @NativeFunctionAddress 00000001406AECE0
*/

entity function GetAntiTitanWeapon()

/*
* @Breif Returns the active weapon.
* @Pramas 
* @NativeName: Script_GetSidearmWeapon
* @NativeFunctionAddress 00000001406AEC80
*/

entity function GetSidearmWeapon()

/*
* @Breif Returns the last primary weapon used
* @Pramas int
* @NativeName: Script_GetLatestPrimaryWeapon
* @NativeFunctionAddress 00000001406AEC00
*/

entity function GetLatestPrimaryWeapon(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetLatestPrimaryWeaponForIndexZeroOrOne
* @NativeFunctionAddress 00000001406AEB80
*/

entity function GetLatestPrimaryWeaponForIndexZeroOrOne(int)

/*
* @Breif Get the offhand weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_GetOffhand
* @NativeFunctionAddress 00000001406AEB00
*/

entity function GetOffhandWeapon(int)

/*
* @Breif Get the normal weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_GetNormal
* @NativeFunctionAddress 00000001406AEA80
*/

entity function GetNormalWeapon(int)

/*
* @Breif Set the selected offhand weapon.
* @Pramas int, entity
* @NativeName: Script_Weapon_SetSelectedOffhand
* @NativeFunctionAddress 00000001406AE9F0
*/

void function SetSelectedOffhand(int, entity)

/*
* @Breif Returns the selected weapon.
* @Pramas int
* @NativeName: Script_GetSelectedWeapon
* @NativeFunctionAddress 00000001406AE970
*/

entity function GetSelectedWeapon(int)

/*
* @Breif Returns true if the weapon slot is disabled
* @Pramas int
* @NativeName: Script_Weapon_IsSlotDisabled
* @NativeFunctionAddress 00000001406AE8F0
*/

bool function IsWeaponSlotDisabled(int)

/*
* @Breif Returns the weapon disable flags that are active
* @Pramas 
* @NativeName: Script_Weapon_GetDisableFlags
* @NativeFunctionAddress 00000001406AE840
*/

int function GetWeaponDisableFlags()

/*
* @Breif Returns true if player is using an offhand weapon in the active slot.
* @Pramas int
* @NativeName: Script_Weapon_IsUsingOffhand
* @NativeFunctionAddress 00000001406AE7C0
*/

bool function IsUsingOffhandWeapon(int)

/*
* @Breif Clear the player's offhand ability
* @Pramas int
* @NativeName: Script_Weapon_ClearOffhand
* @NativeFunctionAddress 00000001406AE750
*/

void function ClearOffhand(int)

/*
* @Breif Returns true if the player is switching weapons in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_IsSwitching
* @NativeFunctionAddress 00000001406AE6D0
*/

bool function IsSwitching(int)

/*
* @Breif Returns whether in the middle of any context action (like melee or leeching)
* @Pramas 
* @NativeName: ContextAction_IsActive
* @NativeFunctionAddress 00000001406AE670
*/

bool function ContextAction_IsActive()

/*
* @Breif Returns whether in the middle of a busy context action
* @Pramas 
* @NativeName: ContextAction_IsBusy
* @NativeFunctionAddress 00000001406AE610
*/

bool function ContextAction_IsBusy()

/*
* @Breif Returns whether in the middle of a leeching context action
* @Pramas 
* @NativeName: ContextAction_IsLeeching
* @NativeFunctionAddress 00000001406AE5B0
*/

bool function ContextAction_IsLeeching()

/*
* @Breif Returns true if the entity is in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecution
* @NativeFunctionAddress 00000001406AE550
*/

bool function ContextAction_IsMeleeExecution()

/*
* @Breif Returns true if the entity is an attacker in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecutionAttacker
* @NativeFunctionAddress 00000001406AE4F0
*/

bool function ContextAction_IsMeleeExecutionAttacker()

/*
* @Breif Returns true if the entity is a target in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecutionTarget
* @NativeFunctionAddress 00000001406AE490
*/

bool function ContextAction_IsMeleeExecutionTarget()

/*
* @Breif Returns whether entity is in the middle of a battery requisition context action
* @Pramas 
* @NativeName: ContextAction_IsRequisitionBattery
* @NativeFunctionAddress 00000001406AE430
*/

bool function ContextAction_IsRequisitionBattery()

/*
* @Breif Returns whether the player is in a rodeo context action
* @Pramas 
* @NativeName: ContextAction_IsRodeo
* @NativeFunctionAddress 00000001406AE3D0
*/

bool function ContextAction_IsRodeo()

/*
* @Breif Returns whether the player is in a vehicle context action
* @Pramas 
* @NativeName: ContextAction_IsInVehicle
* @NativeFunctionAddress 00000001406AE370
*/

bool function ContextAction_IsInVehicle()

/*
* @Breif Returns whether the player is in a zipline context action
* @Pramas 
* @NativeName: ContextAction_IsZipline
* @NativeFunctionAddress 00000001406AE310
*/

bool function ContextAction_IsZipline()

/*
* @Breif Returns whether the player is in a fastball context action
* @Pramas 
* @NativeName: ContextAction_IsFastball
* @NativeFunctionAddress 00000001406AE2B0
*/

bool function ContextAction_IsFastball()

/*
* @Breif Returns whether the player is in a revive context action
* @Pramas 
* @NativeName: ContextAction_IsReviving
* @NativeFunctionAddress 00000001406AE250
*/

bool function ContextAction_IsReviving()

/*
* @Breif Returns whether the player is in a being-revived context action
* @Pramas 
* @NativeName: ContextAction_IsBeingRevived
* @NativeFunctionAddress 00000001406AE1F0
*/

bool function ContextAction_IsBeingRevived()

/*
* @Breif Marks the entity as in the middle of a busy context action (so other things don't interrupt them)
* @Pramas 
* @NativeName: ContextAction_SetBusy
* @NativeFunctionAddress 00000001406AE1A0
*/

void function ContextAction_SetBusy()

/*
* @Breif Marks the entity as no longer doing some kind of context action
* @Pramas 
* @NativeName: ContextAction_ClearBusy
* @NativeFunctionAddress 00000001406AE150
*/

void function ContextAction_ClearBusy()

/*
* @Breif Marks the entity as inside a vehicle
* @Pramas 
* @NativeName: ContextAction_SetInVehicle
* @NativeFunctionAddress 00000001406AE100
*/

void function ContextAction_SetInVehicle()

/*
* @Breif Marks the entity as no longer inside a vehicle
* @Pramas 
* @NativeName: ContextAction_ClearInVehicle
* @NativeFunctionAddress 00000001406AE0B0
*/

void function ContextAction_ClearInVehicle()

/*
* @Breif Marks the entity is executing a fastball
* @Pramas 
* @NativeName: ContextAction_SetFastball
* @NativeFunctionAddress 00000001406AE060
*/

void function ContextAction_SetFastball()

/*
* @Breif Marks the entity as no longer executing a fastball
* @Pramas 
* @NativeName: ContextAction_ClearFastball
* @NativeFunctionAddress 00000001406AE010
*/

void function ContextAction_ClearFastball()

/*
* @Breif Marks the entity as executing a revive
* @Pramas 
* @NativeName: ContextAction_SetReviving
* @NativeFunctionAddress 00000001406ADFC0
*/

void function ContextAction_SetReviving()

/*
* @Breif Marks the entity as no longer executing a revive
* @Pramas 
* @NativeName: ContextAction_ClearReviving
* @NativeFunctionAddress 00000001406ADF70
*/

void function ContextAction_ClearReviving()

/*
* @Breif Marks the entity as being revived
* @Pramas 
* @NativeName: ContextAction_SetBeingRevived
* @NativeFunctionAddress 00000001406ADF20
*/

void function ContextAction_SetBeingRevived()

/*
* @Breif Marks the entity as no longer being revived
* @Pramas 
* @NativeName: ContextAction_ClearBeingRevived
* @NativeFunctionAddress 00000001406ADED0
*/

void function ContextAction_ClearBeingRevived()

/*
* @Breif Returns position that has been offset relative to the view
* @Pramas vector, vector
* @NativeName: OffsetPositionFromView_Script
* @NativeFunctionAddress 00000001406ADDF0
*/

vector function OffsetPositionFromView(vector, vector)

/*
* @Breif Returns angles that has been offset relative to the view
* @Pramas vector
* @NativeName: OffsetFromViewAngles_Script
* @NativeFunctionAddress 00000001406ADD10
*/

vector function OffsetFromViewAngles(vector)

/*
* @Breif Get the amount of currently loaded ammo in the active weapon.
* @Pramas int
* @NativeName: Script_GetActiveWeaponPrimaryAmmoLoaded
* @NativeFunctionAddress 00000001406ADC50
*/

int function GetActiveWeaponPrimaryAmmoLoaded(int)

/*
* @Breif Get deferred trace fraction from eye to local player eye
* @Pramas 
* @NativeName: Script_TraceToLocalPlayerSimple
* @NativeFunctionAddress 00000001406ADBA0
*/

float function TraceToLocalPlayerSimple()

/*
* @Breif Let script tell code a melee attack has started (for the attacker)
* @Pramas float
* @NativeName: PlayerMelee_ExecutionStartAttacker
* @NativeFunctionAddress 00000001406ADB20
*/

bool function PlayerMelee_ExecutionStartAttacker(float)

/*
* @Breif Let script tell code a melee attack has started (for the target/victim)
* @Pramas entity
* @NativeName: PlayerMelee_ExecutionStartTarget
* @NativeFunctionAddress 00000001406ADAA0
*/

bool function PlayerMelee_ExecutionStartTarget(entity)

/*
* @Breif Let script tell code a melee attack has ended (for the attacker)
* @Pramas 
* @NativeName: PlayerMelee_ExecutionEndAttacker
* @NativeFunctionAddress 00000001406ADA40
*/

bool function PlayerMelee_ExecutionEndAttacker()

/*
* @Breif Let script tell code a melee attack has ended (for the target/victim)
* @Pramas 
* @NativeName: PlayerMelee_ExecutionEndTarget
* @NativeFunctionAddress 00000001406AD9E0
*/

bool function PlayerMelee_ExecutionEndTarget()

/*
* @Breif Gets the titanSoul for this entity
* @Pramas 
* @NativeName: Script_GetTitanSoul
* @NativeFunctionAddress 00000001406AD980
*/

entity function GetTitanSoul()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsPhaseShiftedOrPending
* @NativeFunctionAddress 00000001406AD920
*/

bool function IsPhaseShiftedOrPending()

/*
* @Breif 
* @Pramas float, float
* @NativeName: Script_PhaseShiftBegin
* @NativeFunctionAddress 00000001406AD890
*/

void function PhaseShiftBegin(float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnablePhaseShiftFlags
* @NativeFunctionAddress 00000001406AD840
*/

void function EnablePhaseShiftFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisablePhaseShiftFlags
* @NativeFunctionAddress 00000001406AD7F0
*/

void function DisablePhaseShiftFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PhaseShiftCancel
* @NativeFunctionAddress 00000001406AD7A0
*/

void function PhaseShiftCancel()

/*
* @Breif Time left in phase shift.
* @Pramas 
* @NativeName: Script_PhaseShiftTimeRemaining
* @NativeFunctionAddress 00000001406AD6F0
*/

float function PhaseShiftTimeRemaining()

/*
* @Breif 
* @Pramas 
* @NativeName: PhaseShiftTimePassed
* @NativeFunctionAddress 00000001406AD640
*/

float function PhaseShiftTimePassed()

/*
* @Breif Gets the entity you are about to phase shift into
* @Pramas 
* @NativeName: Script_GetEntityAtPhaseShiftExitPosition
* @NativeFunctionAddress 00000001406AD5E0
*/

entity function GetEntityAtPhaseShiftExitPosition()

/*
* @Breif Gets the view vector of a player or NPC. Prefer GetViewVector or GetNPCViewVector when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewVector
* @NativeFunctionAddress 00000001406AD510
*/

vector function GetPlayerOrNPCViewVector()

/*
* @Breif Returns the last time the entity fired a bullet weapon.
* @Pramas 
* @NativeName: GetLastFiredTime
* @NativeFunctionAddress 00000001406AD460
*/

float function GetLastFiredTime()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_AddSharedEnergy
* @NativeFunctionAddress 00000001406AD3F0
*/

void function AddSharedEnergy(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_TakeSharedEnergy
* @NativeFunctionAddress 00000001406AD380
*/

void function TakeSharedEnergy(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_CanUseSharedEnergy
* @NativeFunctionAddress 00000001406AD300
*/

bool function CanUseSharedEnergy(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyCount
* @NativeFunctionAddress 00000001406AD250
*/

int function GetSharedEnergyCount()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetSharedEnergyTotal
* @NativeFunctionAddress 00000001406AD1E0
*/

void function SetSharedEnergyTotal(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyTotal
* @NativeFunctionAddress 00000001406AD130
*/

int function GetSharedEnergyTotal()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetSharedEnergyRegenRate
* @NativeFunctionAddress 00000001406AD0C0
*/

void function SetSharedEnergyRegenRate(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyRegenRate
* @NativeFunctionAddress 00000001406AD010
*/

float function GetSharedEnergyRegenRate()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetSharedEnergyRegenDelay
* @NativeFunctionAddress 00000001406ACFA0
*/

void function SetSharedEnergyRegenDelay(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyRegenDelay
* @NativeFunctionAddress 00000001406ACEF0
*/

float function GetSharedEnergyRegenDelay()

/*
* @Breif 
* @Pramas float duration
* @NativeName: Script_SetSharedEnergyPenaltyDuration
* @NativeFunctionAddress 00000001406ACE80
*/

void function SetSharedEnergyPenaltyDuration(float duration)

/*
* @Breif 
* @Pramas int threshold
* @NativeName: Script_SetSharedEnergyLockoutThreshold
* @NativeFunctionAddress 00000001406ACE10
*/

void function SetSharedEnergyLockoutThreshold(int threshold)

/*
* @Breif Returns all active weapons. Array indices will not match active weapon slot values and the array will have no null elements.
* @Pramas 
* @NativeName: Script_GetAllActiveWeapons
* @NativeFunctionAddress 00000001406998C0
*/

var function GetAllActiveWeapons()

/*
* @Breif Get array of the main weapons.
* @Pramas 
* @NativeName: Script_Weapon_GetMainArray
* @NativeFunctionAddress 0000000140699910
*/

var function GetMainWeapons()

/*
* @Breif Get array of the offhand weapons.
* @Pramas 
* @NativeName: Script_Weapon_GetOffhandArray
* @NativeFunctionAddress 0000000140699A00
*/

var function GetOffhandWeapons()

/*
* @Breif Get deferred trace result from eye to local player eye, return NULL if deferred trace is not available
* @Pramas 
* @NativeName: Script_TraceToLocalPlayer
* @NativeFunctionAddress 0000000140699B60
*/

var function TraceToLocalPlayer()

/*
* @Breif Returns the view model entity.
* @Pramas 
* @NativeName: GetViewModelEntity_Script
* @NativeFunctionAddress 00000001406A5DA0
*/

entity function GetViewModelEntity()

/*
* @Breif Returns the view model arms attachment entity.
* @Pramas 
* @NativeName: GetViewModelArmsAttachment_Script
* @NativeFunctionAddress 00000001406A5D40
*/

entity function GetViewModelArmsAttachment()

/*
* @Breif Transforms a weapon attack spread angle to screen pixels.
* @Pramas float
* @NativeName: TransformAttackSpreadToScreenSpace
* @NativeFunctionAddress 00000001406A5C70
*/

float function TransformAttackSpreadToScreenSpace(float)

/*
* @Breif Returns an enemy target if the player is aiming at it and it is in maximum damage range.
* @Pramas 
* @NativeName: ScriptGetTargetInCrosshairRange
* @NativeFunctionAddress 00000001406A5C10
*/

entity function GetTargetInCrosshairRange()

/*
* @Breif Gets the end position for the crosshair trace that we do all the time
* @Pramas 
* @NativeName: ScriptGetCrosshairTraceEndPos
* @NativeFunctionAddress 00000001406A5B40
*/

vector function GetCrosshairTraceEndPos()

/*
* @Breif Activate the sniper cam to target this entity
* @Pramas entity, float
* @NativeName: SniperCam_Activate
* @NativeFunctionAddress 00000001406A5AA0
*/

bool function SniperCam_Activate(entity, float)

/*
* @Breif Fade out and deactivate the sniper cam
* @Pramas float
* @NativeName: SniperCam_Deactivate
* @NativeFunctionAddress 00000001406A5A20
*/

bool function SniperCam_Deactivate(float)

/*
* @Breif Set sniper cam parameters
* @Pramas var
* @NativeName: SniperCam_SetParams
* @NativeFunctionAddress 00000001406A59A0
*/

bool function SniperCam_SetParams(var)

/*
* @Breif Get sniper cam parameters
* @Pramas 
* @NativeName: SniperCam_GetParams
* @NativeFunctionAddress 00000001406A58D0
*/

var function SniperCam_GetParams()

/*
* @Breif Does sniper cam exist and is it active
* @Pramas 
* @NativeName: SniperCam_IsActive
* @NativeFunctionAddress 00000001406A5870
*/

bool function SniperCam_IsActive()

/*
* @Breif Execute command on this client
* @Pramas string
* @NativeName: ScriptClientCommand
* @NativeFunctionAddress 00000001406A5810
*/

void function ClientCommand(string)

/*
* @Breif Hint to the client system that script has a menu up.
* @Pramas 
* @NativeName: ScriptSetScriptMenuOn
* @NativeFunctionAddress 00000001406A57C0
*/

void function SetScriptMenuOn()

/*
* @Breif Hint to the client system that script has turned off its menu.
* @Pramas 
* @NativeName: ScriptSetScriptMenuOff
* @NativeFunctionAddress 00000001406A5770
*/

void function SetScriptMenuOff()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsScriptMenuOn
* @NativeFunctionAddress 00000001406A5710
*/

bool function IsScriptMenuOn()

/*
* @Breif Freeze player's controls.
* @Pramas 
* @NativeName: ScriptFreezeControlsOnClient
* @NativeFunctionAddress 00000001406A56C0
*/

void function FreezeControlsOnClient()

/*
* @Breif Unfreeze player's controls.
* @Pramas 
* @NativeName: ScriptUnfreezeControlsOnClient
* @NativeFunctionAddress 00000001406A5670
*/

void function UnfreezeControlsOnClient()

/*
* @Breif Checks to see if the low health effects should be on
* @Pramas 
* @NativeName: ScriptLowHealthEffectsEnabled
* @NativeFunctionAddress 00000001406A5610
*/

bool function LowHealthEffectsEnabled()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetBleedoutState
* @NativeFunctionAddress 00000001406A5560
*/

int function GetBleedoutState()

/*
* @Breif Suppress drawing of player/AI names on the HUD.
* @Pramas 
* @NativeName: ScriptHideCrosshairNames
* @NativeFunctionAddress 00000001406A5510
*/

void function HideCrosshairNames()

/*
* @Breif Suppress drawing of player/AI names on the HUD.
* @Pramas 
* @NativeName: ScriptUnhideCrosshairNames
* @NativeFunctionAddress 00000001406A54C0
*/

void function UnhideCrosshairNames()

/*
* @Breif 
* @Pramas bool isEnabled
* @NativeName: ScriptSetLCDPlayerClassSettingsEnabled
* @NativeFunctionAddress 00000001406A5460
*/

void function SetLCDPlayerClassSettingsEnabled(bool isEnabled)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsThirdPersonShoulderModeOn
* @NativeFunctionAddress 00000001406A5400
*/

bool function IsThirdPersonShoulderModeOn()

/*
* @Breif Whether player has a use prompt
* @Pramas 
* @NativeName: ScriptHasUsePrompt
* @NativeFunctionAddress 00000001406A53A0
*/

bool function HasUsePrompt()

/*
* @Breif 
* @Pramas int
* @NativeName: ScriptSetHoldToSwapSlot
* @NativeFunctionAddress 00000001406A5330
*/

void function SetHoldToSwapSlot(int)

/*
* @Breif Returns current entity for which the use prompt is displayed, if any.
* @Pramas 
* @NativeName: ScriptGetUsePromptEntity
* @NativeFunctionAddress 00000001406A52D0
*/

entity function GetUsePromptEntity()

/*
* @Breif Returns the use position for the current use entity.
* @Pramas 
* @NativeName: ScriptGetUsePromptPosition
* @NativeFunctionAddress 00000001406A5200
*/

vector function GetUsePromptPosition()

/*
* @Breif Get the forward view vector of the player
* @Pramas 
* @NativeName: GetViewVector
* @NativeFunctionAddress 00000001406A5130
*/

vector function GetViewVector()

/*
* @Breif Get the forward view vector of the player
* @Pramas 
* @NativeName: GetViewVector
* @NativeFunctionAddress 00000001406A5130
*/

vector function GetViewForward()

/*
* @Breif Get the right view vector of the player
* @Pramas 
* @NativeName: GetViewRight
* @NativeFunctionAddress 00000001406A5060
*/

vector function GetViewRight()

/*
* @Breif Get the up view vector of the player
* @Pramas 
* @NativeName: GetViewUp
* @NativeFunctionAddress 00000001406A4F90
*/

vector function GetViewUp()

/*
* @Breif Get FOV of the player
* @Pramas 
* @NativeName: GetFOV
* @NativeFunctionAddress 00000001406A4EE0
*/

float function GetFOV()

/*
* @Breif Get current camera position
* @Pramas 
* @NativeName: CameraPosition
* @NativeFunctionAddress 00000001406A4E80
*/

vector function CameraPosition()

/*
* @Breif Get current camera angles
* @Pramas 
* @NativeName: CameraAngles
* @NativeFunctionAddress 00000001406A4E20
*/

vector function CameraAngles()

/*
* @Breif pass in ent you want to get player eye position for
* @Pramas entity
* @NativeName: UseableEyePosition
* @NativeFunctionAddress 00000001406A4D30
*/

vector function UseableEyePosition(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_HasThirdPersonAttackFocus
* @NativeFunctionAddress 00000001406A4CD0
*/

bool function HasThirdPersonAttackFocus()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetThirdPersonAttackFocus
* @NativeFunctionAddress 00000001406A4C70
*/

vector function GetThirdPersonAttackFocus()

/*
* @Breif Get the player's name.
* @Pramas 
* @NativeName: GetPlayerName
* @NativeFunctionAddress 00000001406A4BE0
*/

string function GetPlayerName()

/*
* @Breif Get the player's name with their clan tag in front.
* @Pramas 
* @NativeName: GetPlayerNameWithClanTag
* @NativeFunctionAddress 00000001406A4B50
*/

string function GetPlayerNameWithClanTag()

/*
* @Breif Gets the player's UID
* @Pramas 
* @NativeName: GetPlatformUID
* @NativeFunctionAddress 00000001406A4AC0
*/

string function GetPlatformUID()

/*
* @Breif Gets the name of the player's current hardware
* @Pramas 
* @NativeName: GetHardware
* @NativeFunctionAddress 00000001406A4A30
*/

string function GetHardware()

/*
* @Breif Returns true if this player is our party leader.
* @Pramas 
* @NativeName: IsPartyLeader
* @NativeFunctionAddress 00000001406A49D0
*/

bool function IsPartyLeader()

/*
* @Breif Returns the players pet titan.
* @Pramas 
* @NativeName: Script_GetPetTitan
* @NativeFunctionAddress 00000001406A4970
*/

entity function GetPetTitan()

/*
* @Breif Returns the players pet titan mode.
* @Pramas 
* @NativeName: Script_GetPetTitanMode
* @NativeFunctionAddress 00000001406A48C0
*/

int function GetPetTitanMode()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlayerModHealthPerSegment
* @NativeFunctionAddress 00000001406A4810
*/

float function GetPlayerModHealthPerSegment()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlayerModHealth
* @NativeFunctionAddress 00000001406A4760
*/

float function GetPlayerModHealth()

/*
* @Breif Creates a client point camera.
* @Pramas vector, vector, float
* @NativeName: Script_CreateClientPointCamera
* @NativeFunctionAddress 00000001406A46D0
*/

entity function CreateClientPointCamera(vector, vector, float)

/*
* @Breif Get the ammo count in the ammo pool.
* @Pramas int
* @NativeName: Script_AmmoPool_GetCount
* @NativeFunctionAddress 00000001406A4610
*/

int function AmmoPool_GetCount(int)

/*
* @Breif Get the capacity of the ammo pool
* @Pramas 
* @NativeName: Script_AmmoPool_GetCapacity
* @NativeFunctionAddress 00000001406A4560
*/

int function AmmoPool_GetCapacity()

/*
* @Breif Get the number of filled slots in the mod inventory.
* @Pramas 
* @NativeName: Script_ModInventory_GetCount
* @NativeFunctionAddress 00000001406A44B0
*/

int function ModInventory_GetCount()

/*
* @Breif Get the number of filled slots in the consumable inventory.
* @Pramas 
* @NativeName: Script_ConsumableInventory_GetCount
* @NativeFunctionAddress 00000001406A4400
*/

int function ConsumableInventory_GetCount()

/*
* @Breif Returns true if code thinks the player's inventory screen is open
* @Pramas 
* @NativeName: IsInventoryOpen
* @NativeFunctionAddress 00000001406A43A0
*/

bool function IsInventoryOpen()

/*
* @Breif 
* @Pramas vector offset, vector velocity
* @NativeName: Script_JoltCockpitOrigin
* @NativeFunctionAddress 00000001406A4340
*/

void function JoltCockpitOrigin(vector offset, vector velocity)

/*
* @Breif 
* @Pramas float offsetPitch, float offsetYaw, float offsetRoll, float velocityPitch, float velocityYaw, float velocityRoll
* @NativeName: Script_JoltCockpitAngles
* @NativeFunctionAddress 00000001406A4240
*/

void function JoltCockpitAngles(float offsetPitch, float offsetYaw, float offsetRoll, float velocityPitch, float velocityYaw, float velocityRoll)

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINNucleusId
* @NativeFunctionAddress 00000001406A41B0
*/

string function GetPINNucleusId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINNucleusPid
* @NativeFunctionAddress 00000001406A4120
*/

string function GetPINNucleusPid()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINPlatformId
* @NativeFunctionAddress 00000001406A4090
*/

string function GetPINPlatformId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerPINPlatformName
* @NativeFunctionAddress 00000001406A4000
*/

string function GetPlayerPINPlatformName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerPINTitleId
* @NativeFunctionAddress 00000001406A3F70
*/

string function GetPlayerPINTitleId()

/*
* @Breif Overrides the view entity on the client only
* @Pramas entity
* @NativeName: SetMenuCameraEntity
* @NativeFunctionAddress 00000001406A3EF0
*/

void function SetMenuCameraEntity(entity)

/*
* @Breif Overrides the near z value when using the menu camera.
* @Pramas float nearZval
* @NativeName: SetMenuCameraNearZScriptOverride
* @NativeFunctionAddress 00000001406A3E80
*/

void function SetMenuCameraNearZ(float nearZval)

/*
* @Breif Overrides the view entity on the client only, also brings audio listener position along.
* @Pramas entity
* @NativeName: SetMenuCameraEntityWithAudio
* @NativeFunctionAddress 00000001406A3E00
*/

void function SetMenuCameraEntityWithAudio(entity)

/*
* @Breif Clears overrides of the view entity on the client only
* @Pramas 
* @NativeName: ClearMenuCameraEntity
* @NativeFunctionAddress 00000001406A3DB0
*/

void function ClearMenuCameraEntity()

/*
* @Breif Returns true if this player has a Twitch Prime reward
* @Pramas string
* @NativeName: DoesUserHaveTwitchPrimeReward
* @NativeFunctionAddress 00000001406A3D40
*/

bool function DoesUserHaveTwitchPrimeReward(string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetNextTitanRespawnAvailable
* @NativeFunctionAddress 00000001406A3C90
*/

float function GetNextTitanRespawnAvailable()

/*
* @Breif Returns the players current hardpoint.
* @Pramas 
* @NativeName: Script_GetHardpointEntity
* @NativeFunctionAddress 00000001406A3C30
*/

entity function GetHardpointEntity()

/*
* @Breif Given (string), returns true if mod is active on this player
* @Pramas string
* @NativeName: HasClassMod_Script
* @NativeFunctionAddress 00000001406A3BC0
*/

bool function HasClassMod(string)

/*
* @Breif Given (string), returns true if given mod is available to use for this player
* @Pramas string, string
* @NativeName: IsClassModAvailableForPlayerSetting_Script
* @NativeFunctionAddress 00000001406A3B40
*/

bool function IsClassModAvailableForPlayerSetting(string, string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetClassPosCount_Script
* @NativeFunctionAddress 00000001406A3A90
*/

int function GetClassPosCount()

/*
* @Breif What class has the player requested
* @Pramas 
* @NativeName: ScriptGetPlayerRequestedClassName
* @NativeFunctionAddress 00000001406A3A00
*/

asset function GetPlayerRequestedClass()

/*
* @Breif What class is the player
* @Pramas 
* @NativeName: GetPlayerClassName
* @NativeFunctionAddress 00000001406A3970
*/

asset function GetPlayerSettings()

/*
* @Breif What class has the player requested
* @Pramas 
* @NativeName: GetPlayerRequestedClassName
* @NativeFunctionAddress 00000001406A38E0
*/

asset function GetPlayerRequestedSettings()

/*
* @Breif What general class is the player (pilot/titan)
* @Pramas 
* @NativeName: GetPlayerGeneralClassName
* @NativeFunctionAddress 00000001406A3850
*/

string function GetPlayerClass()

/*
* @Breif What class is the player (wallrun/boost)
* @Pramas 
* @NativeName: GetPlayerSubClassName
* @NativeFunctionAddress 00000001406A37C0
*/

string function GetPlayerSubClass()

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingBool
* @NativeFunctionAddress 00000001406A3750
*/

bool function GetPlayerSettingBool(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingInt
* @NativeFunctionAddress 00000001406A3690
*/

int function GetPlayerSettingInt(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingFloat
* @NativeFunctionAddress 00000001406A35D0
*/

float function GetPlayerSettingFloat(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingVector
* @NativeFunctionAddress 00000001406A34F0
*/

vector function GetPlayerSettingVector(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingString
* @NativeFunctionAddress 00000001406A3460
*/

string function GetPlayerSettingString(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingAsset
* @NativeFunctionAddress 00000001406A33C0
*/

asset function GetPlayerSettingAsset(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingStringAsAsset
* @NativeFunctionAddress 00000001406A3320
*/

asset function GetPlayerSettingStringAsAsset(string)

/*
* @Breif Gets the player cockpit entity.
* @Pramas 
* @NativeName: ScriptGetCockpit
* @NativeFunctionAddress 00000001406A32C0
*/

entity function GetCockpit()

/*
* @Breif Get the current ADS fraction amount [0-1]
* @Pramas 
* @NativeName: GetZoomFrac
* @NativeFunctionAddress 00000001406A3210
*/

float function GetAdsFraction()

/*
* @Breif Create and get the player's first person proxy
* @Pramas 
* @NativeName: ScriptGetFirstPersonProxy
* @NativeFunctionAddress 00000001406A31B0
*/

entity function GetFirstPersonProxy()

/*
* @Breif Create and get the player's predicted first person proxy
* @Pramas 
* @NativeName: ScriptGetPredictedFirstPersonProxy
* @NativeFunctionAddress 00000001406A3150
*/

entity function GetPredictedFirstPersonProxy()

/*
* @Breif Set view offset entity for first-person animation.
* @Pramas entity
* @NativeName: Script_ViewOffsetEntity_SetEntity
* @NativeFunctionAddress 00000001406A30D0
*/

void function ViewOffsetEntity_SetEntity(entity)

/*
* @Breif Sets the lerp-in duration for the anim view entity (and view offset entity). Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: ViewOffsetEntity_SetLerpInTime
* @NativeFunctionAddress 00000001406A3060
*/

void function ViewOffsetEntity_SetLerpInTime(float)

/*
* @Breif Sets the lerp-out duration for the anim view entity (and view offset entity). Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: ViewOffsetEntity_SetLerpOutTime
* @NativeFunctionAddress 00000001406A2FF0
*/

void function ViewOffsetEntity_SetLerpOutTime(float)

/*
* @Breif Gets the TAPPED or HELD binding for the given +ability command.
* @Pramas int, int
* @NativeName: ScriptGetAbilityDownBinding
* @NativeFunctionAddress 00000001406A2F40
*/

string function GetAbilityDownBinding(int, int)

/*
* @Breif Gets the TAPPED or HELD binding for the given +ability command.
* @Pramas int, int
* @NativeName: ScriptGetAbilityUpBinding
* @NativeFunctionAddress 00000001406A2E90
*/

string function GetAbilityUpBinding(int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetLookStickDebounce
* @NativeFunctionAddress 00000001406A2E40
*/

void function SetLookStickDebounce()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ClearLookStickDebounce
* @NativeFunctionAddress 00000001406A2DF0
*/

void function ClearLookStickDebounce()

/*
* @Breif Disable the player's weapon
* @Pramas 
* @NativeName: Weapon_Disable_Script
* @NativeFunctionAddress 00000001406A2DA0
*/

void function DisableWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_DisableWithSlowHolster_Script
* @NativeFunctionAddress 00000001406A2D50
*/

void function DisableWeaponWithSlowHolster()

/*
* @Breif Enable the player's weapon
* @Pramas 
* @NativeName: Weapon_Enable_Script
* @NativeFunctionAddress 00000001406A2D00
*/

void function EnableWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_EnableWithSlowDeploy_Script
* @NativeFunctionAddress 00000001406A2CB0
*/

void function EnableWeaponWithSlowDeploy()

/*
* @Breif 
* @Pramas float
* @NativeName: Weapon_DelayEnableWithSlowDeploy_Script
* @NativeFunctionAddress 00000001406A2C40
*/

void function DelayEnableWeaponWithSlowDeploy(float)

/*
* @Breif Holster player's weapon with slower holster animation
* @Pramas 
* @NativeName: Weapon_Holster_Script
* @NativeFunctionAddress 00000001406A2BF0
*/

void function HolsterWeapon()

/*
* @Breif Pull out the player's weapon using slow deploy animation
* @Pramas 
* @NativeName: Weapon_Deploy_Script
* @NativeFunctionAddress 00000001406A2BA0
*/

void function DeployWeapon()

/*
* @Breif Disable the player's weapon viewmodel
* @Pramas 
* @NativeName: Weapon_DisableViewModel
* @NativeFunctionAddress 00000001406A2B50
*/

void function DisableWeaponViewModel()

/*
* @Breif Enable the player's weapon viewmodel
* @Pramas 
* @NativeName: Weapon_EnableViewModel
* @NativeFunctionAddress 00000001406A2B00
*/

void function EnableWeaponViewModel()

/*
* @Breif Gets the raw dodge power of the suit
* @Pramas 
* @NativeName: Script_GetDodgePower
* @NativeFunctionAddress 00000001406A2A50
*/

float function GetDodgePower()

/*
* @Breif Gets the percentage of "suit power" remaining (used for sprint, etc)
* @Pramas 
* @NativeName: Script_GetSuitPower
* @NativeFunctionAddress 00000001406A2A50
*/

float function GetSuitPower()

/*
* @Breif Gets the percentage of "suit jump power" remaining (used for double jump)
* @Pramas 
* @NativeName: Script_GetSuitJumpPower
* @NativeFunctionAddress 00000001406A29A0
*/

float function GetSuitJumpPower()

/*
* @Breif Gets the percentage of "grapple power" remaining
* @Pramas 
* @NativeName: Script_GetSuitGrapplePower
* @NativeFunctionAddress 00000001406A28F0
*/

float function GetSuitGrapplePower()

/*
* @Breif Returns true if the player is currently speaking over voice chat (and we can hear them)
* @Pramas 
* @NativeName: Script_IsTalking
* @NativeFunctionAddress 00000001406A2890
*/

bool function IsTalking()

/*
* @Breif Returns true if the player has a mic plugged in
* @Pramas 
* @NativeName: Script_HasMic
* @NativeFunctionAddress 00000001406A2830
*/

bool function HasMic()

/*
* @Breif Returns true if the player is in party chat
* @Pramas 
* @NativeName: Script_InPartyChat
* @NativeFunctionAddress 00000001406A27D0
*/

bool function InPartyChat()

/*
* @Breif Returns true if the player is muted
* @Pramas 
* @NativeName: Script_IsVoiceMuted
* @NativeFunctionAddress 00000001406A2770
*/

bool function IsVoiceMuted()

/*
* @Breif Returns true if the player is muted
* @Pramas 
* @NativeName: Script_IsTextMuted
* @NativeFunctionAddress 00000001406A2710
*/

bool function IsTextMuted()

/*
* @Breif Gets the use entity that would be found if the player tried to use something this frame
* @Pramas 
* @NativeName: Script_GetUseEntity
* @NativeFunctionAddress 00000001406A26B0
*/

entity function GetUseEntity()

/*
* @Breif Returns whether the player is wallrunning
* @Pramas 
* @NativeName: IsWallRunning
* @NativeFunctionAddress 00000001406A2650
*/

bool function IsWallRunning()

/*
* @Breif Returns whether the player is wall-hanging.
* @Pramas 
* @NativeName: IsWallHanging
* @NativeFunctionAddress 00000001406A25F0
*/

bool function IsWallHanging()

/*
* @Breif Returns whether the player is sprinting
* @Pramas 
* @NativeName: IsSprinting
* @NativeFunctionAddress 00000001406A2590
*/

bool function IsSprinting()

/*
* @Breif Returns whether the player is in the middle of a double-jump.
* @Pramas 
* @NativeName: IsDoubleJumping
* @NativeFunctionAddress 00000001406A2530
*/

bool function IsDoubleJumping()

/*
* @Breif Returns whether the player is dodging.
* @Pramas 
* @NativeName: IsDodging
* @NativeFunctionAddress 00000001406A24D0
*/

bool function IsDodging()

/*
* @Breif Returns whether the player is traversing (i.e. mantle or window anims).
* @Pramas 
* @NativeName: IsTraversing
* @NativeFunctionAddress 00000001406A2470
*/

bool function IsTraversing()

/*
* @Breif Returns whether the player is mantling.
* @Pramas 
* @NativeName: IsMantling
* @NativeFunctionAddress 00000001406A2410
*/

bool function IsMantling()

/*
* @Breif Returns whether this player has grapple available in general.
* @Pramas 
* @NativeName: HasGrapple
* @NativeFunctionAddress 00000001406A23B0
*/

bool function HasGrapple()

/*
* @Breif Returns whether this player can grapple the surface they're looking at.
* @Pramas 
* @NativeName: MayGrapple
* @NativeFunctionAddress 00000001406A2350
*/

bool function MayGrapple()

/*
* @Breif Returns whether the player is sliding
* @Pramas 
* @NativeName: IsSliding
* @NativeFunctionAddress 00000001406A22F0
*/

bool function IsSliding()

/*
* @Breif Return time freefall started
* @Pramas 
* @NativeName: Player_GetFreefallStartTime
* @NativeFunctionAddress 00000001406A2240
*/

float function Player_GetFreefallStartTime()

/*
* @Breif Return time freefall ended
* @Pramas 
* @NativeName: Player_GetFreefallEndTime
* @NativeFunctionAddress 00000001406A2190
*/

float function Player_GetFreefallEndTime()

/*
* @Breif Return time freefall anticipation started
* @Pramas 
* @NativeName: Player_GetFreefallAnticipateStartTime
* @NativeFunctionAddress 00000001406A20E0
*/

float function Player_GetFreefallAnticipateStartTime()

/*
* @Breif Return time freefall anticipation ended
* @Pramas 
* @NativeName: Player_GetFreefallAnticipateEndTime
* @NativeFunctionAddress 00000001406A2030
*/

float function Player_GetFreefallAnticipateEndTime()

/*
* @Breif Returns true if the player is freefalling
* @Pramas 
* @NativeName: Player_IsFreefalling
* @NativeFunctionAddress 00000001406A1FD0
*/

bool function Player_IsFreefalling()

/*
* @Breif Returns true if the player is freefalling and about to land
* @Pramas 
* @NativeName: Player_IsFreefallAnticipating
* @NativeFunctionAddress 00000001406A1F70
*/

bool function Player_IsFreefallAnticipating()

/*
* @Breif 
* @Pramas 
* @NativeName: Player_GetFreefallDistanceToLand
* @NativeFunctionAddress 00000001406A1EC0
*/

float function Player_GetFreefallDistanceToLand()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetStrafeAngle
* @NativeFunctionAddress 00000001406A1E10
*/

float function Skydive_GetStrafeAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetSpeed
* @NativeFunctionAddress 00000001406A1D60
*/

float function Skydive_GetSpeed()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetDiveAngle
* @NativeFunctionAddress 00000001406A1CB0
*/

float function Skydive_GetDiveAngle()

/*
* @Breif 
* @Pramas bool
* @NativeName: Skydive_SetFreelookMode
* @NativeFunctionAddress 00000001406A1C50
*/

void function Skydive_SetFreelookMode(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_IsFreelooking
* @NativeFunctionAddress 00000001406A1BF0
*/

bool function Skydive_IsFreelooking()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetFreelookLockedAngle
* @NativeFunctionAddress 00000001406A1B20
*/

vector function Skydive_GetFreelookLockedAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_IsFollowing
* @NativeFunctionAddress 00000001406A1AC0
*/

bool function Skydive_IsFollowing()

/*
* @Breif 
* @Pramas entity
* @NativeName: Skydive_FollowPlayer
* @NativeFunctionAddress 00000001406A1A40
*/

void function Skydive_FollowPlayer(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_StopFollowing
* @NativeFunctionAddress 00000001406A19F0
*/

void function Skydive_StopFollowing()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_QueueStopFollowing
* @NativeFunctionAddress 00000001406A19A0
*/

void function Skydive_QueueStopFollowing()

/*
* @Breif Returns whether the player is in an observer mode
* @Pramas 
* @NativeName: IsObserver
* @NativeFunctionAddress 00000001406A1940
*/

bool function IsObserver()

/*
* @Breif Returns the player's observer mode
* @Pramas 
* @NativeName: GetObserverMode
* @NativeFunctionAddress 00000001406A1890
*/

int function GetObserverMode()

/*
* @Breif Returns the player's observer target
* @Pramas 
* @NativeName: GetObserverTarget
* @NativeFunctionAddress 00000001406A1830
*/

entity function GetObserverTarget()

/*
* @Breif 
* @Pramas 
* @NativeName: IsThirdPersonObserver
* @NativeFunctionAddress 00000001406A17D0
*/

bool function IsThirdPersonObserver()

/*
* @Breif Returns if this player is in a third person replay (usually when killed by AI)
* @Pramas 
* @NativeName: IsInThirdPersonReplay
* @NativeFunctionAddress 00000001406A1770
*/

bool function IsInThirdPersonReplay()

/*
* @Breif Returns true if this player is a bot
* @Pramas 
* @NativeName: IsBot
* @NativeFunctionAddress 00000001406A1710
*/

bool function IsBot()

/*
* @Breif Returns true if this player is a a bot created to play back a recording from 'bot_record'
* @Pramas 
* @NativeName: IsPlayback
* @NativeFunctionAddress 00000001406A16B0
*/

bool function IsPlayback()

/*
* @Breif Let code know a melee attack has started
* @Pramas int
* @NativeName: PlayerMelee_StartAttack
* @NativeFunctionAddress 00000001406A1640
*/

void function PlayerMelee_StartAttack(int)

/*
* @Breif Let code know a melee attack has ended
* @Pramas 
* @NativeName: PlayerMelee_EndAttack
* @NativeFunctionAddress 00000001406A15F0
*/

void function PlayerMelee_EndAttack()

/*
* @Breif Let script query whether a melee attack is currently started
* @Pramas 
* @NativeName: PlayerMelee_IsAttackActive
* @NativeFunctionAddress 00000001406A1590
*/

bool function PlayerMelee_IsAttackActive()

/*
* @Breif Returns true if currently doing a melee attack and the attack was started while sprinting
* @Pramas 
* @NativeName: PlayerMelee_IsSprintAttack
* @NativeFunctionAddress 00000001406A1530
*/

bool function PlayerMelee_IsSprintAttack()

/*
* @Breif Let code know the melee attack hit something (so code will stop the lunge movement)
* @Pramas entity
* @NativeName: PlayerMelee_SetAttackHitEntity
* @NativeFunctionAddress 00000001406A14B0
*/

void function PlayerMelee_SetAttackHitEntity(entity)

/*
* @Breif 
* @Pramas bool
* @NativeName: PlayerMelee_SetAttackRecoveryShouldBeQuick
* @NativeFunctionAddress 00000001406A1450
*/

void function PlayerMelee_SetAttackRecoveryShouldBeQuick(bool)

/*
* @Breif Let script query whether the melee attack hit flag has been set
* @Pramas 
* @NativeName: PlayerMelee_GetAttackHitEntity
* @NativeFunctionAddress 00000001406A13F0
*/

entity function PlayerMelee_GetAttackHitEntity()

/*
* @Breif Sets scripted melee state (arbitrary integer)
* @Pramas int
* @NativeName: PlayerMelee_Script_SetState
* @NativeFunctionAddress 00000001406A1380
*/

void function PlayerMelee_SetState(int)

/*
* @Breif Gets scripted melee state (arbitrary integer)
* @Pramas 
* @NativeName: PlayerMelee_Script_GetState
* @NativeFunctionAddress 00000001406A12D0
*/

int function PlayerMelee_GetState()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetTitanEmbarkEnabled
* @NativeFunctionAddress 00000001406A1270
*/

void function SetTitanEmbarkEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanEmbarkEnabled
* @NativeFunctionAddress 00000001406A1210
*/

bool function GetTitanEmbarkEnabled()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetTitanDisembarkEnabled
* @NativeFunctionAddress 00000001406A11B0
*/

void function SetTitanDisembarkEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanDisembarkEnabled
* @NativeFunctionAddress 00000001406A1150
*/

bool function GetTitanDisembarkEnabled()

/*
* @Breif Increments disabled melee counter
* @Pramas 
* @NativeName: Script_SetMeleeDisabled
* @NativeFunctionAddress 00000001406A1100
*/

void function SetMeleeDisabled()

/*
* @Breif Decrements disabled melee counter
* @Pramas 
* @NativeName: Script_ClearMeleeDisabled
* @NativeFunctionAddress 00000001406A10B0
*/

void function ClearMeleeDisabled()

/*
* @Breif Gets the disabled melee counter
* @Pramas 
* @NativeName: Script_GetMeleeDisabled
* @NativeFunctionAddress 00000001406A1000
*/

int function GetMeleeDisabled()

/*
* @Breif Make the player lerp towards the given target
* @Pramas entity
* @NativeName: Lunge_SetTargetEntity
* @NativeFunctionAddress 00000001406A0F80
*/

bool function Lunge_SetTargetEntity(entity)

/*
* @Breif Get the current lunge target
* @Pramas 
* @NativeName: Lunge_GetTargetEntity
* @NativeFunctionAddress 00000001406A0F20
*/

entity function Lunge_GetTargetEntity()

/*
* @Breif Make the player lerp towards the given position
* @Pramas vector
* @NativeName: Lunge_SetTargetPosition
* @NativeFunctionAddress 00000001406A0EC0
*/

void function Lunge_SetTargetPosition(vector)

/*
* @Breif Get the position the player is lunging towards
* @Pramas 
* @NativeName: Lunge_GetTargetPosition
* @NativeFunctionAddress 00000001406A0DF0
*/

vector function Lunge_GetTargetPosition()

/*
* @Breif 
* @Pramas vector
* @NativeName: Lunge_SetEndPositionOffset
* @NativeFunctionAddress 00000001406A0D90
*/

void function Lunge_SetEndPositionOffset(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: Lunge_GetEndPositionOffset
* @NativeFunctionAddress 00000001406A0CC0
*/

vector function Lunge_GetEndPositionOffset()

/*
* @Breif Clears any lunging currently going on
* @Pramas 
* @NativeName: Lunge_ClearTarget
* @NativeFunctionAddress 00000001406A0C70
*/

void function Lunge_ClearTarget()

/*
* @Breif Allow the lunge to fly into the air, if it needs to
* @Pramas 
* @NativeName: Lunge_EnableFlying
* @NativeFunctionAddress 00000001406A0C20
*/

void function Lunge_EnableFlying()

/*
* @Breif Whether lunging to adjust the player's view pitch
* @Pramas bool
* @NativeName: Lunge_LockPitch
* @NativeFunctionAddress 00000001406A0BC0
*/

void function Lunge_LockPitch(bool)

/*
* @Breif Returns how long the lunge will last for
* @Pramas 
* @NativeName: Lunge_GetSmoothTime
* @NativeFunctionAddress 00000001406A0B10
*/

float function Lunge_GetSmoothTime()

/*
* @Breif Sets how long it takes to lunge to the target
* @Pramas float
* @NativeName: Lunge_SetSmoothTime
* @NativeFunctionAddress 00000001406A0AA0
*/

void function Lunge_SetSmoothTime(float)

/*
* @Breif Sets maximum time for how long a lunge will go on for
* @Pramas float
* @NativeName: Lunge_SetMaxTime
* @NativeFunctionAddress 00000001406A0A30
*/

void function Lunge_SetMaxTime(float)

/*
* @Breif Sets the maximum speed the player can end lunging with
* @Pramas float
* @NativeName: Lunge_SetMaxEndSpeed
* @NativeFunctionAddress 00000001406A09C0
*/

void function Lunge_SetMaxEndSpeed(float)

/*
* @Breif Is the player lunging.
* @Pramas 
* @NativeName: Lunge_IsActive
* @NativeFunctionAddress 00000001406A0960
*/

bool function Lunge_IsActive()

/*
* @Breif Is the player lunging towards an entity
* @Pramas 
* @NativeName: Lunge_IsLungingToEntity
* @NativeFunctionAddress 00000001406A0900
*/

bool function Lunge_IsLungingToEntity()

/*
* @Breif Is the player lunging towards a position
* @Pramas 
* @NativeName: Lunge_IsLungingToPosition
* @NativeFunctionAddress 00000001406A08A0
*/

bool function Lunge_IsLungingToPosition()

/*
* @Breif Is the player lunging to ground execute
* @Pramas 
* @NativeName: Lunge_IsGroundExecute
* @NativeFunctionAddress 00000001406A0840
*/

bool function Lunge_IsGroundExecute()

/*
* @Breif Returns the initial relative position of the player from the lunge target
* @Pramas 
* @NativeName: Lunge_GetStartPositionOffset
* @NativeFunctionAddress 00000001406A0770
*/

vector function Lunge_GetStartPositionOffset()

/*
* @Breif Gets the ragdoll of the player on the client
* @Pramas 
* @NativeName: Script_GetPlayerRagdoll
* @NativeFunctionAddress 00000001406A0710
*/

entity function GetPlayerRagdoll()

/*
* @Breif Plays a controller rumble on the current player. Takes three parameters: rumble index (the wave pattern of the vibration or 0 to stop all rumbles), rumble data (optional data for the rumble flags parameter that follows), and rumble flags (additional flags for the rumble). See rumble_shared.h for further details.
* @Pramas int, int, int
* @NativeName: Script_RumbleEffect
* @NativeFunctionAddress 00000001406A0670
*/

void function RumbleEffect(int, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableSlowMo
* @NativeFunctionAddress 00000001406A0620
*/

void function EnableSlowMo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableSlowMo
* @NativeFunctionAddress 00000001406A05D0
*/

void function DisableSlowMo()

/*
* @Breif 
* @Pramas vector, float
* @NativeName: CockpitJolt
* @NativeFunctionAddress 00000001406A0560
*/

void function CockpitJolt(vector, float)

/*
* @Breif Gets crosshair position as a fraction of screen size (0..1)
* @Pramas 
* @NativeName: Script_GetCrosshairPos
* @NativeFunctionAddress 00000001406A0490
*/

var function GetCrosshairPos()

/*
* @Breif Gets the defense score for this player
* @Pramas int
* @NativeName: Script_GetPlayerGameStat
* @NativeFunctionAddress 00000001406A03D0
*/

int function GetPlayerGameStat(int)

/*
* @Breif Get how zoomed-in a player is. Result is between (0.0, 1.0).
* @Pramas 
* @NativeName: GetZoomFrac
* @NativeFunctionAddress 00000001406A3210
*/

float function GetZoomFrac()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDamagedByOtherPlayer
* @NativeFunctionAddress 00000001406A0320
*/

float function GetLastTimeDamagedByOtherPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDamagedByNPC
* @NativeFunctionAddress 00000001406A0270
*/

float function GetLastTimeDamagedByNPC()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDidDamageToOtherPlayer
* @NativeFunctionAddress 00000001406A01C0
*/

float function GetLastTimeDidDamageToOtherPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDidDamageToNPC
* @NativeFunctionAddress 00000001406A0110
*/

float function GetLastTimeDidDamageToNPC()

/*
* @Breif Returns player's minimum bounds
* @Pramas 
* @NativeName: GetPlayerMins
* @NativeFunctionAddress 00000001406A00B0
*/

vector function GetPlayerMins()

/*
* @Breif Returns player's maximum bounds
* @Pramas 
* @NativeName: GetPlayerMaxs
* @NativeFunctionAddress 00000001406A0050
*/

vector function GetPlayerMaxs()

/*
* @Breif Returns true if the player is ziplining (in either direction)
* @Pramas 
* @NativeName: Zipline_IsZiplining
* @NativeFunctionAddress 000000014069FFF0
*/

bool function IsZiplining()

/*
* @Breif Returns true if the player is ziplining in reverse
* @Pramas 
* @NativeName: Zipline_IsZipliningInReverse
* @NativeFunctionAddress 000000014069FF90
*/

bool function IsZipliningInReverse()

/*
* @Breif Returns true if the player is ziplining vertically
* @Pramas 
* @NativeName: Zipline_IsZipliningVertically
* @NativeFunctionAddress 000000014069FF30
*/

bool function Zipline_IsZipliningVertically()

/*
* @Breif Returns true if the player is mounting a zipline
* @Pramas 
* @NativeName: Zipline_IsMountingZipline
* @NativeFunctionAddress 000000014069FED0
*/

bool function IsMountingZipline()

/*
* @Breif Get the zipline entity the player is currently using
* @Pramas 
* @NativeName: Zipline_GetActiveZipline
* @NativeFunctionAddress 000000014069FE70
*/

entity function Zipline_GetActiveZipline()

/*
* @Breif Get the zipline entity the player was last using
* @Pramas 
* @NativeName: Zipline_GetLastZipline
* @NativeFunctionAddress 000000014069FE10
*/

entity function Zipline_GetLastZipline()

/*
* @Breif Returns the highest fraction value a smart-ammo-enabled weapon has locked onto this entity right now
* @Pramas 
* @NativeName: SmartAmmo_GetHighestLockOnMeFraction
* @NativeFunctionAddress 000000014069FD60
*/

float function SmartAmmo_GetHighestLockOnMeFraction()

/*
* @Breif Returns the previous highest fraction value
* @Pramas 
* @NativeName: SmartAmmo_GetPreviousHighestLockOnMeFraction
* @NativeFunctionAddress 000000014069FCB0
*/

float function SmartAmmo_GetPreviousHighestLockOnMeFraction()

/*
* @Breif Returns an array of the weapon entities with the highest fraction/locks on us
* @Pramas 
* @NativeName: SmartAmmo_Script_GetHighestLocksOnMeEntities
* @NativeFunctionAddress 000000014069FBE0
*/

array< entity > function SmartAmmo_GetHighestLocksOnMeEntities()

/*
* @Breif Enable one-handed weapon anims.
* @Pramas 
* @NativeName: Script_SetOneHandedWeaponUsageOn
* @NativeFunctionAddress 000000014069FB90
*/

void function SetOneHandedWeaponUsageOn()

/*
* @Breif Disable one-handed weapon anims.
* @Pramas 
* @NativeName: Script_SetOneHandedWeaponUsageOff
* @NativeFunctionAddress 000000014069FB40
*/

void function SetOneHandedWeaponUsageOff()

/*
* @Breif Set the safe health fraction used by some titan material proxies.
* @Pramas float
* @NativeName: SetSafeHealthFrac
* @NativeFunctionAddress 000000014069FAD0
*/

void function SetSafeHealthFrac(float)

/*
* @Breif Tell code that we are starting the arc cannon effect on this player.
* @Pramas 
* @NativeName: StartArcCannon
* @NativeFunctionAddress 000000014069FA80
*/

void function StartArcCannon()

/*
* @Breif Tell code to stop the arc cannon effect on this player.
* @Pramas 
* @NativeName: StopArcCannon
* @NativeFunctionAddress 000000014069FA30
*/

void function StopArcCannon()

/*
* @Breif Sets if boost should be activated
* @Pramas bool
* @NativeName: Script_SetActivateBoost
* @NativeFunctionAddress 000000014069F9D0
*/

void function SetActivateBoost(bool)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetBoostMeter
* @NativeFunctionAddress 000000014069F960
*/

void function SetBoostMeter(float)

/*
* @Breif 
* @Pramas vector
* @NativeName: Script_CanUseJetpack
* @NativeFunctionAddress 000000014069F8F0
*/

bool function CanUseJetpack(vector)

/*
* @Breif Set if jetpack should be activated
* @Pramas bool
* @NativeName: Script_SetActivateJetpack
* @NativeFunctionAddress 000000014069F890
*/

void function SetActivateJetpack(bool)

/*
* @Breif Gets the entity that should be time-aligned with the player
* @Pramas 
* @NativeName: Script_GetSyncedEntity
* @NativeFunctionAddress 000000014069F830
*/

entity function GetSyncedEntity()

/*
* @Breif Returns time of the hot drop impact
* @Pramas 
* @NativeName: GetHotDropImpactTime
* @NativeFunctionAddress 000000014069F780
*/

float function GetHotDropImpactTime()

/*
* @Breif Returns time that the player will die if he stays out of bounds
* @Pramas 
* @NativeName: GetOutOfBoundsDeadTime
* @NativeFunctionAddress 000000014069F6D0
*/

float function GetOutOfBoundsDeadTime()

/*
* @Breif Get index that client script can use for objective info
* @Pramas 
* @NativeName: GetObjectiveIndex
* @NativeFunctionAddress 000000014069F620
*/

int function GetObjectiveIndex()

/*
* @Breif Get entity that client script can use for objectives
* @Pramas 
* @NativeName: GetObjectiveEntity
* @NativeFunctionAddress 000000014069F5C0
*/

entity function GetObjectiveEntity()

/*
* @Breif Get time when the object will expire
* @Pramas 
* @NativeName: GetObjectiveEndTime
* @NativeFunctionAddress 000000014069F510
*/

float function GetObjectiveEndTime()

/*
* @Breif Get index that client script can use for voice pack info
* @Pramas 
* @NativeName: GetVoicePackIndex
* @NativeFunctionAddress 000000014069F460
*/

int function GetVoicePackIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCinematicEventFlags
* @NativeFunctionAddress 000000014069F3B0
*/

int function GetCinematicEventFlags()

/*
* @Breif 
* @Pramas int
* @NativeName: HasPassive
* @NativeFunctionAddress 000000014069F330
*/

bool function HasPassive(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetForcedDialogueOnly
* @NativeFunctionAddress 000000014069F2D0
*/

bool function GetForcedDialogueOnly()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanBuildTime
* @NativeFunctionAddress 000000014069F220
*/

float function GetTitanBuildTime()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanBubbleShieldTime
* @NativeFunctionAddress 000000014069F170
*/

float function GetTitanBubbleShieldTime()

/*
* @Breif Returns true if this player has a bad reputation
* @Pramas 
* @NativeName: DoesPlayerHaveBadReputation
* @NativeFunctionAddress 000000014069F110
*/

bool function HasBadReputation()

/*
* @Breif Gets the player's XP
* @Pramas 
* @NativeName: GetXP
* @NativeFunctionAddress 000000014069F060
*/

int function GetXP()

/*
* @Breif Gets the player's Level
* @Pramas 
* @NativeName: GetLevel
* @NativeFunctionAddress 000000014069EFB0
*/

int function GetLevel()

/*
* @Breif Gets the player's generation
* @Pramas 
* @NativeName: GetGen
* @NativeFunctionAddress 000000014069EF00
*/

int function GetGen()

/*
* @Breif Gets the player's rank
* @Pramas 
* @NativeName: GetRank
* @NativeFunctionAddress 000000014069EE50
*/

int function GetRank()

/*
* @Breif Find out if the player is playing in ranked mode
* @Pramas 
* @NativeName: IsPlayingRanked
* @NativeFunctionAddress 000000014069EDF0
*/

bool function IsPlayingRanked()

/*
* @Breif Returns if the player is standing.
* @Pramas 
* @NativeName: IsStanding
* @NativeFunctionAddress 000000014069ED90
*/

bool function IsStanding()

/*
* @Breif Returns if the player is crouched.
* @Pramas 
* @NativeName: IsCrouched
* @NativeFunctionAddress 000000014069ED30
*/

bool function IsCrouched()

/*
* @Breif Returns true if the player is already standing or has space to stand
* @Pramas 
* @NativeName: CanStand
* @NativeFunctionAddress 000000014069ECD0
*/

bool function CanStand()

/*
* @Breif Toggles grapple
* @Pramas vector
* @NativeName: Grapple
* @NativeFunctionAddress 000000014069EC60
*/

bool function Grapple(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: GrappleDetach
* @NativeFunctionAddress 000000014069EC10
*/

void function GrappleDetach()

/*
* @Breif Checks if grapple hook is deployed (not necesssarily attached).
* @Pramas 
* @NativeName: IsGrappleActive
* @NativeFunctionAddress 000000014069EBB0
*/

bool function IsGrappleActive()

/*
* @Breif Checks if grapple hook is attached (not necessarily pulling yet).
* @Pramas 
* @NativeName: IsGrappleAttached
* @NativeFunctionAddress 000000014069EB50
*/

bool function IsGrappleAttached()

/*
* @Breif Checks if grapple hook is pulling the player.
* @Pramas 
* @NativeName: IsGrapplePulling
* @NativeFunctionAddress 000000014069EAF0
*/

bool function IsGrapplePulling()

/*
* @Breif 
* @Pramas 
* @NativeName: IsGrapplingZipline
* @NativeFunctionAddress 000000014069EA90
*/

bool function IsGrapplingZipline()

/*
* @Breif Gets the grapple hook entity for this player.
* @Pramas 
* @NativeName: Script_GetGrappleHook
* @NativeFunctionAddress 000000014069EA30
*/

entity function GetGrappleHook()

/*
* @Breif Make grapple seek out this target when it is fired
* @Pramas entity
* @NativeName: SetGrappleAutoAimTarget
* @NativeFunctionAddress 000000014069E9B0
*/

void function SetGrappleAutoAimTarget(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetGrappleAutoAimTarget
* @NativeFunctionAddress 000000014069E950
*/

entity function GetGrappleAutoAimTarget()

/*
* @Breif 
* @Pramas 
* @NativeName: GetSkillMU
* @NativeFunctionAddress 000000014069E8A0
*/

float function GetSkillMU()

/*
* @Breif Get the players pilot class index.
* @Pramas 
* @NativeName: GetPilotClassIndex
* @NativeFunctionAddress 000000014069E7F0
*/

int function GetPilotClassIndex()

/*
* @Breif Returns true if the player is currently boosting
* @Pramas 
* @NativeName: IsBoosting
* @NativeFunctionAddress 000000014069E790
*/

bool function IsBoosting()

/*
* @Breif Returns true if the player is currently gliding
* @Pramas 
* @NativeName: IsGliding
* @NativeFunctionAddress 000000014069E730
*/

bool function IsGliding()

/*
* @Breif Returns current glide meter value
* @Pramas 
* @NativeName: GetGlideMeter
* @NativeFunctionAddress 000000014069E680
*/

float function GetGlideMeter()

/*
* @Breif Returns true if the player is currently hovering
* @Pramas 
* @NativeName: IsHovering
* @NativeFunctionAddress 000000014069E620
*/

bool function IsHovering()

/*
* @Breif Returns true if the player can hover
* @Pramas 
* @NativeName: IsHoverEnabled
* @NativeFunctionAddress 000000014069E5C0
*/

bool function IsHoverEnabled()

/*
* @Breif Returns true if the player is in air slowmo
* @Pramas 
* @NativeName: IsInAirSlowMo
* @NativeFunctionAddress 000000014069E560
*/

bool function IsInAirSlowMo()

/*
* @Breif Get a titan available for smart targetting type uses.
* @Pramas bool, float, float
* @NativeName: Script_GetTitanTarget
* @NativeFunctionAddress 000000014069E4C0
*/

entity function GetTitanTarget(bool, float, float)

/*
* @Breif Indicates if the specified input command is being pressed. Only works for the local view player.
* @Pramas int
* @NativeName: IsInputCommandHeld
* @NativeFunctionAddress 000000014069E440
*/

bool function IsInputCommandHeld(int)

/*
* @Breif Indicates if the specified input command was pressed this frame. Only works for the local view player.
* @Pramas int
* @NativeName: IsInputCommandPressed
* @NativeFunctionAddress 000000014069E3C0
*/

bool function IsInputCommandPressed(int)

/*
* @Breif Indicates if the specified input command was released this frame. Only works for the local view player.
* @Pramas int
* @NativeName: IsInputCommandReleased
* @NativeFunctionAddress 000000014069E340
*/

bool function IsInputCommandReleased(int)

/*
* @Breif Looks at the latest raw usercommand input for the given local player.
* @Pramas int
* @NativeName: IsUserCommandButtonHeld
* @NativeFunctionAddress 000000014069E2C0
*/

bool function IsUserCommandButtonHeld(int)

/*
* @Breif Gets the amount the left stick or WASD keys are pressed forward between -1 to 1.
* @Pramas 
* @NativeName: ScriptGetInputAxisForward
* @NativeFunctionAddress 000000014069E210
*/

float function GetInputAxisForward()

/*
* @Breif Gets the amount the left stick or WASD keys are pressed right between -1 to 1.
* @Pramas 
* @NativeName: ScriptGetInputAxisRight
* @NativeFunctionAddress 000000014069E160
*/

float function GetInputAxisRight()

/*
* @Breif Gets a bool network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetBool
* @NativeFunctionAddress 000000014069E0F0
*/

bool function GetPlayerNetBool(string)

/*
* @Breif Gets an int network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetInt
* @NativeFunctionAddress 000000014069E030
*/

int function GetPlayerNetInt(string)

/*
* @Breif Gets a float network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetFloat
* @NativeFunctionAddress 000000014069DF70
*/

float function GetPlayerNetFloat(string)

/*
* @Breif Gets a time (float) network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetTime
* @NativeFunctionAddress 000000014069DEB0
*/

float function GetPlayerNetTime(string)

/*
* @Breif Gets an entity network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetEnt
* @NativeFunctionAddress 000000014069DE40
*/

entity function GetPlayerNetEnt(string)

/*
* @Breif 
* @Pramas asset, string
* @NativeName: Script_StartEffectOnPlayerHands
* @NativeFunctionAddress 000000014069DDD0
*/

void function StartEffectOnPlayerHands(asset, string)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_StopEffectOnPlayerHands
* @NativeFunctionAddress 000000014069DD80
*/

void function StopEffectOnPlayerHands()

/*
* @Breif Sets a value of a control point on the player hands effect
* @Pramas int, vector
* @NativeName: Script_SetHandsEffectControlPoint
* @NativeFunctionAddress 000000014069DD10
*/

void function SetHandsEffectControlPoint(int, vector)

/*
* @Breif TEMPDEV_SetFOVScale( scale, lerp_time ). Sets a scale on FOV, lerping to the desired scale over the specified duration.
* @Pramas float, float
* @NativeName: SetFOVScale
* @NativeFunctionAddress 000000014069DC80
*/

void function SetFOVScale(float, float)

/*
* @Breif Gets the name of the community this player is currently playing in
* @Pramas 
* @NativeName: GetCommunityName
* @NativeFunctionAddress 000000014069DBF0
*/

string function GetCommunityName()

/*
* @Breif Gets the name of the faction this player is currently playing for
* @Pramas 
* @NativeName: GetFaction
* @NativeFunctionAddress 000000014069DB60
*/

string function GetFaction()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalGravityDirection
* @NativeFunctionAddress 000000014069DA90
*/

vector function GetLocalGravityDirection()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalGravityStrength
* @NativeFunctionAddress 000000014069D9E0
*/

float function GetLocalGravityStrength()

/*
* @Breif Zoom scale lerps over time, this returns the final target after the lerp
* @Pramas 
* @NativeName: Script_GetMinimapTargetZoomScale
* @NativeFunctionAddress 000000014069D930
*/

float function GetMinimapTargetZoomScale()

/*
* @Breif Zoom scale lerps over time, this returns the current value of the minimap zoom scale
* @Pramas 
* @NativeName: Script_GetMinimapCurrentZoomScale
* @NativeFunctionAddress 000000014069D880
*/

float function GetMinimapCurrentZoomScale()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrappleWeapon
* @NativeFunctionAddress 000000014069D820
*/

entity function GetGrappleWeapon()

/*
* @Breif "scriptOffset", "scriptOffsetClientOnly" or "convar". Returns whether it uses the old method: distance set by convars c_maxdistance and cam_idealdist, or uses the new offset set by SetTrackEntityOffset.
* @Pramas 
* @NativeName: GetTrackEntityDistanceMode
* @NativeFunctionAddress 000000014069D790
*/

string function GetTrackEntityDistanceMode()

/*
* @Breif 
* @Pramas float
* @NativeName: SetTrackEntityOffsetDistance
* @NativeFunctionAddress 000000014069D720
*/

void function SetTrackEntityOffsetDistance(float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetTrackEntityOffsetHeight
* @NativeFunctionAddress 000000014069D6B0
*/

void function SetTrackEntityOffsetHeight(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTrackEntityOffsetDistance
* @NativeFunctionAddress 000000014069D600
*/

float function GetTrackEntityOffsetDistance()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTrackEntityOffsetHeight
* @NativeFunctionAddress 000000014069D550
*/

float function GetTrackEntityOffsetHeight()

/*
* @Breif Returns the last main weapon slot that the player had cycled to.
* @Pramas 
* @NativeName: Script_GetLastCycleSlot
* @NativeFunctionAddress 000000014069D4A0
*/

int function GetLastCycleSlot()

/*
* @Breif Is this player in shadow form?
* @Pramas 
* @NativeName: Script_IsShadowForm
* @NativeFunctionAddress 000000014069D440
*/

bool function IsShadowForm()

/*
* @Breif 
* @Pramas vector, float
* @NativeName: KnockBack
* @NativeFunctionAddress 000000014069D3D0
*/

void function KnockBack(vector, float)

/*
* @Breif Get the mod inventory.
* @Pramas 
* @NativeName: Script_ModInventory_Get
* @NativeFunctionAddress 000000014069BAC0
*/

var function ModInventory_Get()

/*
* @Breif Get the consumable inventory.
* @Pramas 
* @NativeName: Script_ConsumableInventory_Get
* @NativeFunctionAddress 000000014069BB10
*/

var function ConsumableInventory_Get()

/*
* @Breif Get an array of mods active on this player
* @Pramas 
* @NativeName: GetPlayerSettingsMods_Script
* @NativeFunctionAddress 000000014069BD50
*/

var function GetPlayerSettingsMods()

/*
* @Breif Gets the player's player settings as a settings block for calls into GetSettingsBlockInt/Float/etc
* @Pramas 
* @NativeName: GetPlayerSettingsBlock
* @NativeFunctionAddress 000000014069BE40
*/

var function GetPlayerSettingsBlock()

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: GetPersistentVar
* @NativeFunctionAddress 000000014069C150
*/

var function GetPersistentVar(var, string)

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: GetPersistentVarAsInt
* @NativeFunctionAddress 000000014069C1A0
*/

int function GetPersistentVarAsInt(var, string)

/*
* @Breif Gets the AI body type
* @Pramas 
* @NativeName: GetBodyType
* @NativeFunctionAddress 00000001406B2640
*/

string function GetBodyType()

/*
* @Breif Gets the AI Class
* @Pramas 
* @NativeName: Script_GetAIClass
* @NativeFunctionAddress 00000001406B2590
*/

int function GetAIClass()

/*
* @Breif Gets the AI Class by name
* @Pramas 
* @NativeName: Script_GetAIClassName
* @NativeFunctionAddress 00000001406B2500
*/

string function GetAIClassName()

/*
* @Breif Returns if AI is in a state that can be interrupted
* @Pramas 
* @NativeName: IsInterruptable
* @NativeFunctionAddress 00000001406B24A0
*/

bool function IsInterruptable()

/*
* @Breif Gets the AI's subclass type
* @Pramas 
* @NativeName: GetSubclass
* @NativeFunctionAddress 00000001406B23F0
*/

int function GetSubclass()

/*
* @Breif Returns if AI can be melee executed
* @Pramas 
* @NativeName: CanBeMeleeExecuted
* @NativeFunctionAddress 00000001406B2390
*/

bool function CanBeMeleeExecuted()

/*
* @Breif Returns if AI can be ground executed
* @Pramas 
* @NativeName: CanBeGroundExecuted
* @NativeFunctionAddress 00000001406B2330
*/

bool function CanBeGroundExecuted()

/*
* @Breif Returns if AI is a non-combat AI
* @Pramas 
* @NativeName: IsNonCombatAI
* @NativeFunctionAddress 00000001406B22D0
*/

bool function IsNonCombatAI()

/*
* @Breif Gets the AI settings name
* @Pramas 
* @NativeName: GetAISettingsName
* @NativeFunctionAddress 00000001406B2240
*/

string function GetAISettingsName()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_MaxFlyingSpeed
* @NativeFunctionAddress 00000001406B2190
*/

float function AISetting_MaxFlyingSpeed()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_MeleeChargeSet
* @NativeFunctionAddress 00000001406B2100
*/

string function AISetting_MeleeChargeSet()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechAnimSet
* @NativeFunctionAddress 00000001406B2070
*/

string function AISetting_LeechAnimSet()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechAnimTag
* @NativeFunctionAddress 00000001406B1FE0
*/

string function AISetting_LeechAnimTag()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechDataKnifeTag
* @NativeFunctionAddress 00000001406B1F50
*/

string function AISetting_LeechDataKnifeTag()

/*
* @Breif 
* @Pramas entity
* @NativeName: GetMeleeDamageMaxForTarget
* @NativeFunctionAddress 00000001406B1E80
*/

int function GetMeleeDamageMaxForTarget(entity)

/*
* @Breif Get AI setting key field.
* @Pramas string
* @NativeName: Script_GetAISettingByKeyField
* @NativeFunctionAddress 00000001406B1DB0
*/

var function Dev_GetAISettingByKeyField(string)

/*
* @Breif Get AI setting key field. Assume return type is an asset
* @Pramas string
* @NativeName: Script_GetAISettingAssetByKeyField
* @NativeFunctionAddress 00000001406B1D10
*/

asset function Dev_GetAISettingAssetByKeyField(string)

/*
* @Breif Gets the turret's current state. Enum values under TURRET_***
* @Pramas 
* @NativeName: GetTurretState
* @NativeFunctionAddress 00000001406A5FB0
*/

int function GetTurretState()

/*
* @Breif Gets the turret's control panel set on the server
* @Pramas 
* @NativeName: GetControlPanel
* @NativeFunctionAddress 00000001406A5F50
*/

entity function GetControlPanel()

/*
* @Breif Get the canStand set from the server for this npc titan.
* @Pramas 
* @NativeName: GetCanStand
* @NativeFunctionAddress 00000001406A6060
*/

int function GetCanStand()

/*
* @Breif 
* @Pramas 
* @NativeName: IsJetWakeFXEnabled
* @NativeFunctionAddress 00000001406A6110
*/

bool function IsJetWakeFXEnabled()

/*
* @Breif Sets new environment light angles ("x y")
* @Pramas float, float
* @NativeName: ScriptOverrideLightAngles
* @NativeFunctionAddress 00000001406A62A0
*/

void function OverrideAngles(float, float)

/*
* @Breif Returns to server environment light angles
* @Pramas 
* @NativeName: ScriptUseServerLightAngles
* @NativeFunctionAddress 00000001406A6250
*/

void function UseServerAngles()

/*
* @Breif Sets scale factor each for sun and sky intensity
* @Pramas float, float
* @NativeName: ScriptScaleSunSkyIntensity
* @NativeFunctionAddress 00000001406A61C0
*/

void function ScaleSunSkyIntensity(float, float)

/*
* @Breif Set the light color
* @Pramas vector
* @NativeName: ScriptSetLightColor
* @NativeFunctionAddress 00000001406A6470
*/

void function SetLightColor(vector)

/*
* @Breif Set the light radius
* @Pramas float
* @NativeName: ScriptSetLightRadius
* @NativeFunctionAddress 00000001406A6400
*/

void function SetLightRadius(float)

/*
* @Breif Set the light exponent
* @Pramas int
* @NativeName: ScriptSetLightExponent
* @NativeFunctionAddress 00000001406A6390
*/

void function SetLightExponent(int)

/*
* @Breif Cockpit lights affect the cockpit only
* @Pramas bool
* @NativeName: ScriptSetCockpitLight
* @NativeFunctionAddress 00000001406A6330
*/

void function SetCockpitLight(bool)

/*
* @Breif Set whether this ambientgeneric is enabled.
* @Pramas bool
* @NativeName: SetEnabled
* @NativeFunctionAddress 00000001406B13B0
*/

void function SetEnabled(bool)

/*
* @Breif Set the sound event name for this ambientgeneric.
* @Pramas string
* @NativeName: ScriptSetSoundName
* @NativeFunctionAddress 00000001406B1350
*/

void function SetSoundName(string)

/*
* @Breif Set the endpoints for the line segment along which this ambientgeneric will play.
* @Pramas vector, vector
* @NativeName: ScriptSetSegmentEndpoints
* @NativeFunctionAddress 00000001406B12F0
*/

void function SetSegmentEndpoints(vector, vector)

/*
* @Breif Remove the line segment along which this ambientgeneric played.
* @Pramas 
* @NativeName: ScriptRemoveSegmentEndpoints
* @NativeFunctionAddress 00000001406B12A0
*/

void function RemoveSegmentEndpoints()

/*
* @Breif Set the radius (in world units) within which this AmbientGeneric should be audible.
* @Pramas float
* @NativeName: ScriptSetRadius
* @NativeFunctionAddress 00000001406B1230
*/

void function SetAudibleRadius(float)

/*
* @Breif Set the entity from which this AmbientGeneric derives its CodeValue controller value.
* @Pramas entity
* @NativeName: ScriptSetSoundCodeControllerEntity
* @NativeFunctionAddress 00000001406B11B0
*/

void function SetSoundCodeControllerEntity(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastRodeoHitTime
* @NativeFunctionAddress 00000001406B1C60
*/

float function GetLastRodeoHitTime()

/*
* @Breif 
* @Pramas 
* @NativeName: GetStance
* @NativeFunctionAddress 00000001406B1BB0
*/

int function GetStance()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerSettingsName
* @NativeFunctionAddress 00000001406B1B20
*/

asset function GetPlayerSettingsName()

/*
* @Breif 
* @Pramas 
* @NativeName: IsDoomed
* @NativeFunctionAddress 00000001406B1AC0
*/

bool function IsDoomed()

/*
* @Breif 
* @Pramas 
* @NativeName: GetInvalidHealthBarEnt
* @NativeFunctionAddress 00000001406B1A60
*/

bool function GetInvalidHealthBarEnt()

/*
* @Breif 
* @Pramas 
* @NativeName: IsEjecting
* @NativeFunctionAddress 00000001406B1A00
*/

bool function IsEjecting()

/*
* @Breif Returns if the titanSoul has a valid titan
* @Pramas 
* @NativeName: Script_HasValidTitan
* @NativeFunctionAddress 00000001406B19A0
*/

bool function HasValidTitan()

/*
* @Breif Gets the titan for this titanSoul entity
* @Pramas 
* @NativeName: Script_GetTitan
* @NativeFunctionAddress 00000001406B1940
*/

entity function GetTitan()

/*
* @Breif 
* @Pramas 
* @NativeName: GetNextCoreChargeAvailable
* @NativeFunctionAddress 00000001406B1890
*/

float function GetNextCoreChargeAvailable()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreChargeExpireTime
* @NativeFunctionAddress 00000001406B17E0
*/

float function GetCoreChargeExpireTime()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreChargeStartTime
* @NativeFunctionAddress 00000001406B1730
*/

float function GetCoreChargeStartTime()

/*
* @Breif Gets a bool network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetBool
* @NativeFunctionAddress 00000001406B16C0
*/

bool function GetTitanSoulNetBool(string)

/*
* @Breif Gets an int network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetInt
* @NativeFunctionAddress 00000001406B1600
*/

int function GetTitanSoulNetInt(string)

/*
* @Breif Gets a float network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetFloat
* @NativeFunctionAddress 00000001406B1540
*/

float function GetTitanSoulNetFloat(string)

/*
* @Breif Gets a time (float) network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetTime
* @NativeFunctionAddress 00000001406B1480
*/

float function GetTitanSoulNetTime(string)

/*
* @Breif Gets an entity network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetEnt
* @NativeFunctionAddress 00000001406B1410
*/

entity function GetTitanSoulNetEnt(string)

/*
* @Breif Tells the file system that a file at the exact path provided must exist in the currently loading VPK.
* @Pramas string
* @NativeName: VPKNotifyFile
* @NativeFunctionAddress 00000001407AEC60
*/

void function VPKNotifyFile(string)

/*
* @Breif Generate a random floating point number in [0, A)
* @Pramas float
* @NativeName: SHARED_SCRIPT( Script_RandomFloat )
* @NativeFunctionAddress 00000001408F1580
*/

float function RandomFloat(var, number)

/*
* @Breif Generate a random floating point number in [A, B)
* @Pramas float, float
* @NativeName: SHARED_SCRIPT( Script_RandomFloatRange )
* @NativeFunctionAddress 00000001408F1650
*/

float function RandomFloatRange(var, number, number)

/*
* @Breif Generate a random integer in [0, A)
* @Pramas int
* @NativeName: SHARED_SCRIPT( Script_RandomInt )
* @NativeFunctionAddress 00000001408F1740
*/

int function RandomInt(var, number)

/*
* @Breif Generate a random integer in [A, B)
* @Pramas int, int
* @NativeName: SHARED_SCRIPT( Script_RandomIntRange )
* @NativeFunctionAddress 00000001408F17F0
*/

int function RandomIntRange(var, number, number)

/*
* @Breif Generate a random integer in [A, B]
* @Pramas int, int
* @NativeName: SHARED_SCRIPT( Script_RandomIntRangeInclusive )
* @NativeFunctionAddress 00000001408F18D0
*/

int function RandomIntRangeInclusive(var, number, number)

/*
* @Breif Returns true if this is server script
* @Pramas 
* @NativeName: Client_IsServer
* @NativeFunctionAddress 00000001407AD660
*/

bool function IsServer()

/*
* @Breif Returns true if this is client script
* @Pramas 
* @NativeName: Client_IsClient
* @NativeFunctionAddress 00000001408F7D10
*/

bool function IsClient()

/*
* @Breif Returns true if this is UI script
* @Pramas 
* @NativeName: Client_IsUI
* @NativeFunctionAddress 00000001408F7C70
*/

bool function IsUI()

/*
* @Breif Returns true if the game was launched with "-tools".
* @Pramas 
* @NativeName: Client_IsToolsMode
* @NativeFunctionAddress 00000001408F7C20
*/

bool function IsToolsMode()

/*
* @Breif Returns true if the game was launched with "-fnf".
* @Pramas 
* @NativeName: Client_IsFNF
* @NativeFunctionAddress 00000001408F7BD0
*/

bool function IsFNF()

/*
* @Breif Returns true if the game was launched with "-qa".
* @Pramas 
* @NativeName: Client_IsQA
* @NativeFunctionAddress 00000001408F7B80
*/

bool function IsQA()

/*
* @Breif Returns true if the game was launched with the specified parameter.
* @Pramas string
* @NativeName: Client_Dev_CommandLineHasParm
* @NativeFunctionAddress 00000001408F7AF0
*/

bool function Dev_CommandLineHasParm(string)

/*
* @Breif Returns the string following the parameter if it exists.
* @Pramas string
* @NativeName: Client_Dev_CommandLineParmValue
* @NativeFunctionAddress 00000001408F7A70
*/

string function Dev_CommandLineParmValue(string)

/*
* @Breif Removes parameter from the command line. Useful if you want a command line parameter to only be effective once.
* @Pramas string
* @NativeName: Client_Dev_CommandLineRemoveParm
* @NativeFunctionAddress 00000001408F7A00
*/

void function Dev_CommandLineRemoveParm(string)

/*
* @Breif Adds parameter to the command line. Useful to change code/scrip the command line. Pass in the key and value.
* @Pramas string, string
* @NativeName: Client_Dev_CommandLineAddParm
* @NativeFunctionAddress 00000001408F7980
*/

void function Dev_CommandLineAddParm(string, string)

/*
* @Breif empty function: takes int, bool, float, returns 1
* @Pramas int, bool, float
* @NativeName: Client_NativeFuncTest
* @NativeFunctionAddress 00000001408F78F0
*/

int function NativeFuncTest(int, bool, float)

/*
* @Breif Gets the level of 'developer'
* @Pramas 
* @NativeName: Client_GetDeveloperLevel
* @NativeFunctionAddress 00000001408F7850
*/

int function GetDeveloperLevel()

/*
* @Breif Gets the integer value of the 'bug_reproNum' convar
* @Pramas 
* @NativeName: Client_GetBugReproNum
* @NativeFunctionAddress 00000001408F77B0
*/

int function GetBugReproNum()

/*
* @Breif 
* @Pramas string flagName
* @NativeName: Client_WhenBuildFlag
* @NativeFunctionAddress 00000001407AD660
*/

bool function WhenBuildFlag(string flagName)

/*
* @Breif Wraps given angle to [-180, 180] range
* @Pramas float
* @NativeName: Client_Script_AngleNormalize
* @NativeFunctionAddress 00000001408F76D0
*/

float function AngleNormalize(float)

/*
* @Breif Given an absolute angle and absolute direction vector, returns a local direction vector; one that is relative to the absolute angle's axes
* @Pramas vector, vector
* @NativeName: Client_Script_CalcRelativeVector
* @NativeFunctionAddress 00000001408F7610
*/

vector function CalcRelativeVector(vector, vector)

/*
* @Breif Given an angle and vector, returns the angular difference needed to face from the given angle to the given vector
* @Pramas vector, vector
* @NativeName: Client_Script_CalcRelativeAngles
* @NativeFunctionAddress 00000001408F7540
*/

vector function CalcRelativeAngles(vector, vector)

/*
* @Breif Given an absolute origin, return the origin relative to the given entity
* @Pramas entity, vector
* @NativeName: Client_Script_CalcOriginRelativeToEntity
* @NativeFunctionAddress 00000001408F7460
*/

vector function CalcOriginRelativeToEntity(entity, vector)

/*
* @Breif Given some absolute angles, return the angles relative to the given entity
* @Pramas entity, vector
* @NativeName: Client_Script_CalcAnglesRelativeToEntity
* @NativeFunctionAddress 00000001408F7380
*/

vector function CalcAnglesRelativeToEntity(entity, vector)

/*
* @Breif Given an absolute origin, return the origin relative to the given absolute origin and angles
* @Pramas vector, vector, vector
* @NativeName: Client_Script_CalcOriginRelativeToAbsOriginAngles
* @NativeFunctionAddress 00000001408F72B0
*/

vector function CalcOriginRelativeToAbsOriginAngles(vector, vector, vector)

/*
* @Breif Given some absolute angles, return the angles relative to the given absolute origin and angles
* @Pramas vector, vector, vector
* @NativeName: Client_Script_CalcAnglesRelativeToAbsOriginAngles
* @NativeFunctionAddress 00000001408F71E0
*/

vector function CalcAnglesRelativeToAbsOriginAngles(vector, vector, vector)

/*
* @Breif Given some angles, an axis of rotation vector, and degree angle offset: Returns the angles rotated about the axis by the offset
* @Pramas vector, vector, float
* @NativeName: Client_Script_RotateAnglesAboutAxis
* @NativeFunctionAddress 00000001408F7100
*/

vector function RotateAnglesAboutAxis(vector, vector, float)

/*
* @Breif Given a vector, an axis of rotation vector, and degree angle offset: Returns the vector rotated about the axis by the offset
* @Pramas vector, vector, float
* @NativeName: Client_Script_VectorRotateAxis
* @NativeFunctionAddress 00000001408F7020
*/

vector function VectorRotateAxis(vector, vector, float)

/*
* @Breif Given an angle and vector, returns the angular difference needed to face from the given angle to the given vector
* @Pramas vector, vector, vector, vector
* @NativeName: Client_Script_IsBoxIntersectingBox
* @NativeFunctionAddress 00000001408F6F90
*/

bool function BoxIntersectsBox(vector, vector, vector, vector)

/*
* @Breif For debugging
* @Pramas 
* @NativeName: Client_Script_TriggerBreakpoint
* @NativeFunctionAddress 00000001407AEC60
*/

void function TriggerBreakpoint()

/*
* @Breif Prints to the game's spam logfile (usually stored in DevNet).
* @Pramas ( string )
* @NativeName: SHARED_SCRIPT( ScriptPrintToSpamLog )
* @NativeFunctionAddress 00000001407AEC60
*/

void function SpamLog(var, string)

/*
* @Breif Initialize profile entry with name.
* @Pramas int, string
* @NativeName: Client_Script_PerfInitLabel
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfInitLabel(int, string)

/*
* @Breif Start timer for profile entry.
* @Pramas int
* @NativeName: Client_Script_PerfStart
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfStart(int)

/*
* @Breif End the timer for profile entry.
* @Pramas int
* @NativeName: Client_Script_PerfEnd
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfEnd(int)

/*
* @Breif Clear all data
* @Pramas 
* @NativeName: Client_Script_PerfClearAll
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfClearAll()

/*
* @Breif Reset just the timing data, keep labels.
* @Pramas 
* @NativeName: Client_Script_PerfReset_ScriptCmd
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfReset()

/*
* @Breif Print profile data.
* @Pramas 
* @NativeName: Client_Script_PerfDump_ScriptCmd
* @NativeFunctionAddress 00000001407AEC60
*/

void function PerfDump()

/*
* @Breif Start rpof timer for index.
* @Pramas int, string
* @NativeName: Client_Script_RProfStart
* @NativeFunctionAddress 00000001407AEC60
*/

void function RProfStart(int, string)

/*
* @Breif End rpof timer for index.
* @Pramas int
* @NativeName: Client_Script_RProfEnd
* @NativeFunctionAddress 00000001407AEC60
*/

void function RProfEnd(int)

/*
* @Breif Start a timer.  Use TimerEnd to get the elapsed time.  Only one Timer can be active at a time.
* @Pramas 
* @NativeName: Client_Script_TimerStart
* @NativeFunctionAddress 00000001408F6F20
*/

void function TimerStart()

/*
* @Breif End the timer started with TimerStart.  Return milliseconds since TimerStart was called.  Only one Timer can be active at a time.
* @Pramas 
* @NativeName: Client_Script_TimerEnd
* @NativeFunctionAddress 00000001408F6E80
*/

float function TimerEnd()

/*
* @Breif Returns first parameter clamped between first and second parameter.
* @Pramas float, float, float
* @NativeName: Client_Script_Clamp
* @NativeFunctionAddress 00000001408F6D80
*/

float function clamp(float, float, float)

/*
* @Breif Interpolate with cubic hermite during ease-in and ease-out times
* @Pramas startTime, moveTime, easeIn, easeOut
* @NativeName: SHARED_SCRIPT( Script_Interpolate )
* @NativeFunctionAddress 00000001408F1E80
*/

float function Interpolate(var, number, number, number, number)

/*
* @Breif Linearly interpolate between two vectors
* @Pramas vecFrom, vecTo, percent
* @NativeName: SHARED_SCRIPT( Script_LerpVector )
* @NativeFunctionAddress 00000001408F1EC0
*/

vector function LerpVector(var, vector, vector, number)

/*
* @Breif Spherically linear interpolate between two vectors
* @Pramas vecFrom, vecTo, percent
* @NativeName: SHARED_SCRIPT( Script_SlerpVector )
* @NativeFunctionAddress 00000001408F1FF0
*/

vector function SlerpVector(var, vector, vector, number)

/*
* @Breif Get a random 2d point in a circle, as a 3d point, with optional 3d base
* @Pramas radius, base3D_or_null
* @NativeName: SHARED_SCRIPT( Script_GetRandom3DPointIn2DCircle )
* @NativeFunctionAddress 00000001408F2120
*/

vector function GetRandom3DPointIn2DCircle(var, number, var)

/*
* @Breif Map a value V from C to D. Linier interpolate between A and B mapped to C and D
* @Pramas float, float, float, float, float
* @NativeName: Client_Script_Graph
* @NativeFunctionAddress 00000001408F6C60
*/

float function Graph(float, float, float, float, float)

/*
* @Breif Map a value V from C to D. If V <= A, result = C. If V >= B, result = D. Otherwise linearly interpolate between A and B mapped to C and D
* @Pramas float, float, float, float, float
* @NativeName: Client_Script_GraphCapped
* @NativeFunctionAddress 00000001408F6B10
*/

float function GraphCapped(float, float, float, float, float)

/*
* @Breif Map a value V from Vector C to Vector D. If V <= A, result = C. If V >= B, result = D. Otherwise linearly interpolate between A and B mapped to C and D
* @Pramas float, float, float, vector, vector
* @NativeName: Client_Script_GraphCappedVector
* @NativeFunctionAddress 00000001408F6A00
*/

vector function GraphCappedVector(float, float, float, vector, vector)

/*
* @Breif Remap [0,1] to a cosine curved [0,1]
* @Pramas float
* @NativeName: Client_Script_Smooth01
* @NativeFunctionAddress 00000001408F6860
*/

float function Smooth01(float)

/*
* @Breif Interpolate between values, preserving velocity (so it is smooth)
* @Pramas float, float, float, float, float
* @NativeName: Client_Script_SmoothCD
* @NativeFunctionAddress 00000001408F6720
*/

var function SmoothCD(float, float, float, float, float)

/*
* @Breif Interpolate between values, preserving velocity (so it is smooth)
* @Pramas vector, vector, vector, float, float
* @NativeName: Client_Script_SmoothCDVector
* @NativeFunctionAddress 00000001408F6620
*/

var function SmoothCDVector(vector, vector, vector, float, float)

/*
* @Breif 
* @Pramas float, float, float
* @NativeName: Client_Script_ApproachAngle
* @NativeFunctionAddress 00000001408F6500
*/

float function ApproachAngle(float, float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: Client_Script_ExponentialDeltaAngle
* @NativeFunctionAddress 00000001408F6400
*/

float function ExponentialDeltaAngle(float, float, float, float)

/*
* @Breif Call before reloading scripts
* @Pramas 
* @NativeName: Client_Script_ReloadingScriptsBegin
* @NativeFunctionAddress 00000001407AEC60
*/

void function ReloadingScriptsBegin()

/*
* @Breif Call after reloading scripts
* @Pramas 
* @NativeName: Client_Script_ReloadingScriptsEnd
* @NativeFunctionAddress 00000001407AEC60
*/

void function ReloadingScriptsEnd()

/*
* @Breif Given a settings asset name, returns an object that represents the (unmodded) block of data for calls into GetSettingsBlockInt/Float/etc.
* @Pramas asset settingsAssetName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockForAsset )
* @NativeFunctionAddress 00000001408F27E0
*/

var function GetSettingsBlockForAsset()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockBool )
* @NativeFunctionAddress 00000001408F28F0
*/

var function GetSettingsBlockBool()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockInt )
* @NativeFunctionAddress 00000001408F29E0
*/

var function GetSettingsBlockInt()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockFloat )
* @NativeFunctionAddress 00000001408F2B20
*/

var function GetSettingsBlockFloat()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockVector )
* @NativeFunctionAddress 00000001408F2C60
*/

var function GetSettingsBlockVector()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockString )
* @NativeFunctionAddress 00000001408F2D90
*/

var function GetSettingsBlockString()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockAsset )
* @NativeFunctionAddress 00000001408F2EA0
*/

var function GetSettingsBlockAsset()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its value in that setting block. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockStringAsAsset )
* @NativeFunctionAddress 00000001408F2FC0
*/

var function GetSettingsBlockStringAsAsset()

/*
* @Breif Given a settings block (such as from GetGlobalSettingsBlock), resolves a string key to its array in that setting block, and returns an object representing the array. Throws a script error if the field does not exist.
* @Pramas var settingsBlock, string fieldName
* @NativeName: SHARED_SCRIPT( Script_GetSettingsBlockArray )
* @NativeFunctionAddress 00000001408F30D0
*/

var function GetSettingsBlockArray()

/*
* @Breif Given a settings array (from GetSettingsBlockArray), returns the number of elements in the array.
* @Pramas var settingsArray
* @NativeName: SHARED_SCRIPT( Script_GetSettingsArraySize )
* @NativeFunctionAddress 00000001408F3240
*/

var function GetSettingsArraySize()

/*
* @Breif Given a settings array (from GetSettingsBlockArray), returns the requested element of the array as a settings block.
* @Pramas var settingsArray, int index
* @NativeName: SHARED_SCRIPT( Script_GetSettingsArrayElem )
* @NativeFunctionAddress 00000001408F32A0
*/

var function GetSettingsArrayElem()

/*
* @Breif Given a settings asset name, returns the 31-bit "unique ID" that was generated for it in Bakery.
* @Pramas asset settingsAssetName
* @NativeName: Client_Script_GetUniqueIdForSettingsAsset
* @NativeFunctionAddress 00000001408F6360
*/

int function GetUniqueIdForSettingsAsset(asset settingsAssetName)

/*
* @Breif Given a 31-bit unique ID for a settings asset, returns the settings asset name.
* @Pramas int uniqueId
* @NativeName: Client_Script_GetSettingsAssetForUniqueId
* @NativeFunctionAddress 00000001408F62F0
*/

asset function GetSettingsAssetForUniqueId(int uniqueId)

/*
* @Breif Given a settings asset name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsBool
* @NativeFunctionAddress 00000001408F6290
*/

bool function GetGlobalSettingsBool(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsInt
* @NativeFunctionAddress 00000001408F61E0
*/

int function GetGlobalSettingsInt(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsFloat
* @NativeFunctionAddress 00000001408F6130
*/

float function GetGlobalSettingsFloat(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsVector
* @NativeFunctionAddress 00000001408F6050
*/

vector function GetGlobalSettingsVector(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsString
* @NativeFunctionAddress 00000001408F5EC0
*/

string function GetGlobalSettingsString(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsAsset
* @NativeFunctionAddress 00000001408F5E50
*/

asset function GetGlobalSettingsAsset(asset, string)

/*
* @Breif Given a settings asset setting name and key, resolves a string key to its value in that setting info file. Throws a script error if the field does not exist.
* @Pramas asset, string
* @NativeName: Client_Script_GetGlobalSettingsStringAsAsset
* @NativeFunctionAddress 00000001408F5DE0
*/

asset function GetGlobalSettingsStringAsAsset(asset, string)

/*
* @Breif Slow dev ONLY. Given a player setting name and key, resolves a string key to its value in that setting info file
* @Pramas string, string
* @NativeName: Client_Script_GetAISettingByKeyField_Global
* @NativeFunctionAddress 00000001408F5D20
*/

var function Dev_GetAISettingByKeyField_Global(string, string)

/*
* @Breif Slow dev ONLY. Given a player setting name and key, resolves a string key to its asset value in that setting info file
* @Pramas string, string
* @NativeName: Client_Script_GetAISettingAssetByKeyField_Global
* @NativeFunctionAddress 00000001408F5CB0
*/

asset function Dev_GetAISettingAssetByKeyField_Global(string, string)

/*
* @Breif Given a weapon name and key, resolves a string key to its value in that weapons info file. Assumes no mods set.
* @Pramas string, string
* @NativeName: Client_GetWeaponInfoFileKeyField_Global
* @NativeFunctionAddress 00000001408F5BE0
*/

var function GetWeaponInfoFileKeyField_Global(string, string)

/*
* @Breif Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.
* @Pramas string weaponName, array< string > modArray, string key
* @NativeName: Client_GetWeaponInfoFileKeyField_WithMods_Global
* @NativeFunctionAddress 00000001408F5B00
*/

var function GetWeaponInfoFileKeyField_WithMods_Global(string weaponName, array< string > modArray, string key)

/*
* @Breif Given a weapon name, returns a list of the mods available on that weapon
* @Pramas string weaponName
* @NativeName: Client_GetWeaponMods_Global
* @NativeFunctionAddress 00000001408F5A40
*/

array< string > function GetWeaponMods_Global(string weaponName)

/*
* @Breif 
* @Pramas entity ent, string weaponName, array< string > modArray
* @NativeName: Client_Script_SetBodyGroupsForWeaponConfig
* @NativeFunctionAddress 00000001408F59B0
*/

void function SetBodyGroupsForWeaponConfig(entity ent, string weaponName, array< string > modArray)

/*
* @Breif Given a weapon name and key, resolves a string key to its value in that weapons info file. Assumes no mods set.
* @Pramas string weaponname, string key
* @NativeName: Client_GetWeaponInfoFileKeyFieldAsset_Global
* @NativeFunctionAddress 00000001408F58E0
*/

asset function GetWeaponInfoFileKeyFieldAsset_Global(string weaponname, string key)

/*
* @Breif Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.
* @Pramas string weaponName, array< string > modArray, string key
* @NativeName: Client_GetWeaponInfoFileKeyFieldAsset_WithMods_Global
* @NativeFunctionAddress 00000001408F5800
*/

asset function GetWeaponInfoFileKeyFieldAsset_WithMods_Global(string weaponName, array< string > modArray, string key)

/*
* @Breif Given ( entity, hitboxIndex ) - returns the hitgroup for the hitbox on that entity
* @Pramas var, int
* @NativeName: Client_GetHitgroupForHitboxOnEntity
* @NativeFunctionAddress 00000001408F5740
*/

int function GetHitgroupForHitboxOnEntity(var, int)

/*
* @Breif Check out file from P4
* @Pramas string
* @NativeName: Client_ScriptDevP4Checkout
* @NativeFunctionAddress 00000001407AEC60
*/

void function DevP4Checkout(string)

/*
* @Breif Add or edit a file to P4
* @Pramas string
* @NativeName: Client_ScriptDevP4Add
* @NativeFunctionAddress 00000001407AEC60
*/

void function DevP4Add(string)

/*
* @Breif Append string to a temp buffer. Dev only.
* @Pramas string
* @NativeName: Client_ScriptDevTextBufferWrite
* @NativeFunctionAddress 00000001408F56F0
*/

void function DevTextBufferWrite(string)

/*
* @Breif Append string to a temp buffer. Dev only.
* @Pramas 
* @NativeName: Client_ScriptDevTextBufferClear
* @NativeFunctionAddress 00000001408F5620
*/

void function DevTextBufferClear()

/*
* @Breif Dump temp buffer out to specified path/filename.
* @Pramas string
* @NativeName: Client_ScriptDevTextBufferDumpToFile
* @NativeFunctionAddress 00000001408F55C0
*/

bool function DevTextBufferDumpToFile(string)

/*
* @Breif 
* @Pramas 
* @NativeName: Client_ScriptGetPersistentDataDefScriptVersion
* @NativeFunctionAddress 00000001408F54F0
*/

int function GetPersistentDataDefScriptVersion()

/*
* @Breif Get a count of how many distinct values the given enum has.
* @Pramas string
* @NativeName: Client_ScriptPersistenceGetEnumCount
* @NativeFunctionAddress 00000001408F5450
*/

int function PersistenceGetEnumCount(string)

/*
* @Breif Get a count of how many distinct values the given enum has.
* @Pramas string, string
* @NativeName: Client_ScriptPersistenceGetEnumIndexForItemName
* @NativeFunctionAddress 00000001408F53A0
*/

int function PersistenceGetEnumIndexForItemName(string, string)

/*
* @Breif Get a count of how many distinct values the given enum has.
* @Pramas string, int
* @NativeName: Client_ScriptPersistenceGetEnumItemNameForIndex
* @NativeFunctionAddress 00000001408F5330
*/

string function PersistenceGetEnumItemNameForIndex(string, int)

/*
* @Breif Returns true if the given enum value contains the given value.
* @Pramas string, string
* @NativeName: Client_ScriptPersistenceEnumValueIsValid
* @NativeFunctionAddress 00000001408F52D0
*/

bool function PersistenceEnumValueIsValid(string, string)

/*
* @Breif Get a count of how many elements the given item has.
* @Pramas string
* @NativeName: Client_ScriptPersistenceGetArrayCount
* @NativeFunctionAddress 00000001408F5230
*/

int function PersistenceGetArrayCount(string)

/*
* @Breif Returns whether the user is using a controller instead of a keyboard
* @Pramas 
* @NativeName: Script_IsControllerModeActive
* @NativeFunctionAddress 00000001408F51D0
*/

bool function IsControllerModeActive()

/*
* @Breif Returns true if the last input was from the dpad or arrow keys
* @Pramas 
* @NativeName: Script_GetDpadNavigationActive
* @NativeFunctionAddress 00000001408F5180
*/

bool function GetDpadNavigationActive()

/*
* @Breif Sets the XP required for a player to get to a certain level
* @Pramas int, int
* @NativeName: Script_SetXPForLevel
* @NativeFunctionAddress 00000001408F5110
*/

void function SetXPForLevel(int, int)

/*
* @Breif Gets level for a player with a given amount of XP
* @Pramas int
* @NativeName: Script_GetLevelForXP
* @NativeFunctionAddress 00000001408F5060
*/

int function GetLevelForXP(int)

/*
* @Breif Gets the value of a convar as a string
* @Pramas string
* @NativeName: Client_Script_GetConVarString
* @NativeFunctionAddress 00000001408F5000
*/

string function GetConVarString(string)

/*
* @Breif Gets the value of a convar as an integer
* @Pramas string
* @NativeName: Client_Script_GetConVarInt
* @NativeFunctionAddress 00000001408F4F60
*/

int function GetConVarInt(string)

/*
* @Breif Gets the value of a convar as a float
* @Pramas string
* @NativeName: Client_Script_GetConVarFloat
* @NativeFunctionAddress 00000001408F4EC0
*/

float function GetConVarFloat(string)

/*
* @Breif Gets the value of a convar as a boolean
* @Pramas string
* @NativeName: Client_Script_GetConVarBool
* @NativeFunctionAddress 00000001408F4E60
*/

bool function GetConVarBool(string)

/*
* @Breif Sets the value of a convar with a string
* @Pramas string, string
* @NativeName: Client_Script_SetConVarString
* @NativeFunctionAddress 00000001408F4E00
*/

void function SetConVarString(string, string)

/*
* @Breif Sets the value of a convar with an integer
* @Pramas string, int
* @NativeName: Client_Script_SetConVarInt
* @NativeFunctionAddress 00000001408F4DA0
*/

void function SetConVarInt(string, int)

/*
* @Breif Sets the value of a convar with a float
* @Pramas string, float
* @NativeName: Client_Script_SetConVarFloat
* @NativeFunctionAddress 00000001408F4D30
*/

void function SetConVarFloat(string, float)

/*
* @Breif Sets the value of a convar with a boolean
* @Pramas string, bool
* @NativeName: Client_Script_SetConVarBool
* @NativeFunctionAddress 00000001408F4CE0
*/

void function SetConVarBool(string, bool)

/*
* @Breif Sets the value of a convar to its internal default value
* @Pramas string
* @NativeName: Client_Script_SetConVarToDefault
* @NativeFunctionAddress 00000001408F4C90
*/

void function SetConVarToDefault(string)

/*
* @Breif Returns if an entity is a magnetic target
* @Pramas entity
* @NativeName: Client_Script_IsMagneticTarget
* @NativeFunctionAddress 00000001408F4C20
*/

bool function IsMagneticTarget(entity)

/*
* @Breif Is entity a turret
* @Pramas entity
* @NativeName: Client_Script_IsTurret
* @NativeFunctionAddress 00000001408F4B60
*/

bool function IsTurret(entity)

/*
* @Breif Precache a material for use with SetImage.
* @Pramas asset
* @NativeName: ScriptPrecacheHUDMaterial
* @NativeFunctionAddress 00000001408F4B10
*/

void function PrecacheHUDMaterial(asset)

/*
* @Breif Remove all ragdolls
* @Pramas 
* @NativeName: Script_RemoveAllRagdolls
* @NativeFunctionAddress 00000001408F4AD0
*/

void function RemoveAllRagdolls()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSafeAreaScaleSetting
* @NativeFunctionAddress 00000001408F4A20
*/

float function GetSafeAreaScaleSetting()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMusicReducedSetting
* @NativeFunctionAddress 00000001408F49D0
*/

bool function GetMusicReducedSetting()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DeathHintsSettingIsEnabled
* @NativeFunctionAddress 00000001408F4980
*/

bool function DeathHintsSettingIsEnabled()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetDamageIndicatorStyle_Pilot
* @NativeFunctionAddress 00000001408F48E0
*/

int function GetDamageIndicatorStyle_Pilot()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetDamageIndicatorStyle_Titan
* @NativeFunctionAddress 00000001408F4840
*/

int function GetDamageIndicatorStyle_Titan()

/*
* @Breif Returns whether a demo is being played back
* @Pramas 
* @NativeName: Script_IsPlayingDemo
* @NativeFunctionAddress 00000001408F47E0
*/

bool function IsPlayingDemo()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_Script_EverythingUnlockedConVarEnabled
* @NativeFunctionAddress 00000001408F4790
*/

bool function EverythingUnlockedConVarEnabled()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_Script_GetUnixTimestamp
* @NativeFunctionAddress 00000001408F4700
*/

int function GetUnixTimestamp()

/*
* @Breif Gets the given datatable asset
* @Pramas asset datatablepath
* @NativeName: SHARED_SCRIPT( Script_GetDatatable )
* @NativeFunctionAddress 0000000140841FF0
*/

var function GetDataTable()

/*
* @Breif Finds the column in the datatable with the given name. -1 if none
* @Pramas var datatable, string columnName
* @NativeName: SHARED_SCRIPT( Script_GetDatatableColumnByName )
* @NativeFunctionAddress 0000000140842030
*/

var function GetDataTableColumnByName()

/*
* @Breif Returns the number of rows in the datatable.
* @Pramas var datatable
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowCount )
* @NativeFunctionAddress 0000000140842070
*/

var function GetDatatableRowCount()

/*
* @Breif Gets a bool from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableBool )
* @NativeFunctionAddress 00000001408420D0
*/

var function GetDataTableBool()

/*
* @Breif Gets an int from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableInt )
* @NativeFunctionAddress 0000000140842130
*/

var function GetDataTableInt()

/*
* @Breif Gets a float from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableFloat )
* @NativeFunctionAddress 00000001408421A0
*/

var function GetDataTableFloat()

/*
* @Breif Gets a vector from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableVector )
* @NativeFunctionAddress 0000000140842200
*/

var function GetDataTableVector()

/*
* @Breif Gets a string from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableString )
* @NativeFunctionAddress 0000000140842260
*/

var function GetDataTableString()

/*
* @Breif Gets an asset from the given row/column of a datatable
* @Pramas var datatable, int row, int column
* @NativeName: SHARED_SCRIPT( Script_GetDatatableAsset )
* @NativeFunctionAddress 00000001408422C0
*/

var function GetDataTableAsset()

/*
* @Breif Finds and returns the first row of the datatable for which the bool in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, bool value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingBoolValue )
* @NativeFunctionAddress 0000000140842320
*/

var function GetDataTableRowMatchingBoolValue()

/*
* @Breif Finds and returns the first row of the datatable for which the int in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, int value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingIntValue )
* @NativeFunctionAddress 0000000140842420
*/

var function GetDataTableRowMatchingIntValue()

/*
* @Breif Finds and returns the first row of the datatable for which the int in the given column is less than or equal to the given value. -1 if none
* @Pramas var datatable, int column, int value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowLessThanOrEqualToIntValue )
* @NativeFunctionAddress 0000000140842530
*/

var function GetDataTableRowLessThanOrEqualToIntValue()

/*
* @Breif Finds and returns the first row of the datatable for which the int in the given column is greater than or equal to the given value. -1 if none
* @Pramas var datatable, int column, int value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowGreaterThanOrEqualToIntValue )
* @NativeFunctionAddress 0000000140842640
*/

var function GetDataTableRowGreaterThanOrEqualToIntValue()

/*
* @Breif Finds and returns the first row of the datatable for which the float in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, float value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingFloatValue )
* @NativeFunctionAddress 0000000140842750
*/

var function GetDataTableRowMatchingFloatValue()

/*
* @Breif Finds and returns the first row of the datatable for which the float in the given column is less than or equal to the given value. -1 if none
* @Pramas var datatable, int column, float value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowLessThanOrEqualToFloatValue )
* @NativeFunctionAddress 0000000140842870
*/

var function GetDataTableRowLessThanOrEqualToFloatValue()

/*
* @Breif Finds and returns the first row of the datatable for which the float in the given column is greater than or equal to the given value. -1 if none
* @Pramas var datatable, int column, float value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowGreaterThanOrEqualToFloatValue )
* @NativeFunctionAddress 0000000140842980
*/

var function GetDataTableRowGreaterThanOrEqualToFloatValue()

/*
* @Breif Finds and returns the first row of the datatable for which the vector in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, vector value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingVectorValue )
* @NativeFunctionAddress 0000000140842A90
*/

var function GetDataTableRowMatchingVectorValue()

/*
* @Breif Finds and returns the first row of the datatable for which the string in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, string value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingStringValue )
* @NativeFunctionAddress 0000000140842BB0
*/

var function GetDataTableRowMatchingStringValue()

/*
* @Breif Finds and returns the first row of the datatable for which the asset in the given column matches the given value. -1 if none
* @Pramas var datatable, int column, asset value
* @NativeName: SHARED_SCRIPT( Script_GetDatatableRowMatchingAssetValue )
* @NativeFunctionAddress 0000000140842C80
*/

var function GetDataTableRowMatchingAssetValue()

/*
* @Breif Gets the color ID for the specified colorName.
* @Pramas string colorName
* @NativeName: SHARED_SCRIPT( Script_ColorPalette_GetIDFromString )
* @NativeFunctionAddress 00000001408F3E50
*/

var function ColorPalette_GetIDFromString()

/*
* @Breif Gets the RGB values for the color specified by the colorID.
* @Pramas int colorID
* @NativeName: Script_ColorPalette_GetColorFromID
* @NativeFunctionAddress 00000001408F3F50
*/

var function ColorPalette_GetColorFromID()

/*
* @Breif 
* @Pramas int versionMajor, int versionMinor, table keyValuePairs
* @NativeName: SHARED_SCRIPT( Script_CreatePINTelemetryHeader )
* @NativeFunctionAddress 00000001408F40A0
*/

var function CreatePINTelemetryHeader()

/*
* @Breif 
* @Pramas string eventName, table headerKeyValuePairs, table bodyKeyValuePairs
* @NativeName: SHARED_SCRIPT( Script_AddPINTelemetryEvent )
* @NativeFunctionAddress 00000001408F40E0
*/

var function AddPINTelemetryEvent()

/*
* @Breif Gets the platform name the way PIN likes it
* @Pramas 
* @NativeName: Client_Script_GetPINPlatformName
* @NativeFunctionAddress 00000001407ACDE0
*/

string function GetPINPlatformName()

/*
* @Breif Gets the title ID for PIN
* @Pramas 
* @NativeName: Client_Script_GetPINTitleId
* @NativeFunctionAddress 00000001407ACD90
*/

string function GetPINTitleId()

/*
* @Breif Set the legendary view model and world model for the weapon. These values override the default values for the weapon. Set the values to "" to use default world or view model again.
* @Pramas string weaponName, int legendaryIndex, asset viewModelName, asset worldModelName
* @NativeName: Client_Script_SetWeaponLegendaryModel
* @NativeFunctionAddress 00000001408F4690
*/

void function SetWeaponLegendaryModel(string weaponName, int legendaryIndex, asset viewModelName, asset worldModelName)

/*
* @Breif Setup an optic appearance override for this weapon type.
* @Pramas string weaponName, string oaName, int overrideIndex, OpticAppearanceOverride oao
* @NativeName: SHARED_SCRIPT( Script_SetupOpticAppearanceOverride )
* @NativeFunctionAddress 00000001408F4220
*/

var function SetupOpticAppearanceOverride()

/*
* @Breif 
* @Pramas string itemAlias, int GRX_ITEMFLAVORMODE_
* @NativeName: SHARED_SCRIPT( Script_MTX_RegisterItem )
* @NativeFunctionAddress 00000001408F4260
*/

var function GRX_RegisterItem()

/*
* @Breif 
* @Pramas int itemIdx
* @NativeName: SHARED_SCRIPT( Script_MTX_GetConsumableCount )
* @NativeFunctionAddress 00000001408F43B0
*/

var function GRX_GetConsumableCount()

/*
* @Breif 
* @Pramas int itemIdx
* @NativeName: SHARED_SCRIPT( Script_MTX_GetPackCount )
* @NativeFunctionAddress 00000001408F4490
*/

var function GRX_GetPackCount()

/*
* @Breif 
* @Pramas int itemIdx
* @NativeName: SHARED_SCRIPT( Script_MTX_HasItem )
* @NativeFunctionAddress 00000001408F4570
*/

var function GRX_HasItem()

/*
* @Breif Returns true if we are running on a PS4.
* @Pramas 
* @NativeName: Ps4_IsPs4
* @NativeFunctionAddress 00000001407AD660
*/

bool function Ps4_IsPs4()

/*
* @Breif Starts a validation of PS plus membership.
* @Pramas 
* @NativeName: Ps4_CheckPlus_Schedule
* @NativeFunctionAddress 00000001408476F0
*/

bool function Ps4_CheckPlus_Schedule()

/*
* @Breif Checks the status of the last Ps4_CheckPlus_Schedule.
* @Pramas 
* @NativeName: Ps4_CheckPlus_Running
* @NativeFunctionAddress 0000000140847690
*/

bool function Ps4_CheckPlus_Running()

/*
* @Breif Checks the outcome of the last Ps4_CheckPlus_Schedule.
* @Pramas 
* @NativeName: Ps4_CheckPlus_Allowed
* @NativeFunctionAddress 0000000140847630
*/

bool function Ps4_CheckPlus_Allowed()

/*
* @Breif Checks the results of the last Ps4_CheckPlus_Schedule.
* @Pramas 
* @NativeName: Ps4_CheckPlus_GetLastRequestResults
* @NativeFunctionAddress 0000000140847590
*/

int function Ps4_CheckPlus_GetLastRequestResults()

/*
* @Breif if the user has a chat restriction and the platform requires us to tell them, do it
* @Pramas 
* @NativeName: Plat_ShowChatRestrictionNotice
* @NativeFunctionAddress 0000000140847540
*/

void function Plat_ShowChatRestrictionNotice()

/*
* @Breif if the user has a ugc restriction and the platform requires us to tell them, do it
* @Pramas 
* @NativeName: Plat_ShowUGCRestrictionNotice
* @NativeFunctionAddress 00000001408474F0
*/

void function Plat_ShowUGCRestrictionNotice()

/*
* @Breif Returns true if the common system dialog is currently being drawn
* @Pramas 
* @NativeName: Plat_IsSystemMessageDialogOpen
* @NativeFunctionAddress 0000000140847490
*/

bool function Plat_IsSystemMessageDialogOpen()

/*
* @Breif Unlocks an achievement by ID on the respective platform
* @Pramas int
* @NativeName: Plat_UnlockAchievementByID
* @NativeFunctionAddress 0000000140847410
*/

void function Plat_UnlockAchievementByID(int)

/*
* @Breif Starts a join dialog of PS plus membership.
* @Pramas 
* @NativeName: Ps4_ScreenPlusDialog_Schedule
* @NativeFunctionAddress 00000001408473B0
*/

bool function Ps4_ScreenPlusDialog_Schedule()

/*
* @Breif Checks the status of the last Ps4_ScreenPlusDialog_Schedule.
* @Pramas 
* @NativeName: Ps4_ScreenPlusDialog_Running
* @NativeFunctionAddress 0000000140847350
*/

bool function Ps4_ScreenPlusDialog_Running()

/*
* @Breif Checks the outcome of the last Ps4_ScreenPlusDialog_Schedule.
* @Pramas 
* @NativeName: Ps4_ScreenPlusDialog_Allowed
* @NativeFunctionAddress 00000001408472F0
*/

bool function Ps4_ScreenPlusDialog_Allowed()

/*
* @Breif Schedule the running of the PSN login dialog.
* @Pramas 
* @NativeName: Ps4_LoginDialog_Schedule
* @NativeFunctionAddress 0000000140847290
*/

bool function Ps4_LoginDialog_Schedule()

/*
* @Breif Is the PSN login dialog still running.
* @Pramas 
* @NativeName: Ps4_LoginDialog_Running
* @NativeFunctionAddress 0000000140847230
*/

bool function Ps4_LoginDialog_Running()

/*
* @Breif Are we logged into the PS Network.
* @Pramas 
* @NativeName: Ps4_PSN_Is_Loggedin
* @NativeFunctionAddress 00000001408471D0
*/

bool function Ps4_PSN_Is_Loggedin()

/*
* @Breif Asks if the PS4 networking has been resolved.
* @Pramas 
* @NativeName: PS4_isUserNetworkingResolved
* @NativeFunctionAddress 0000000140847170
*/

bool function PS4_isUserNetworkingResolved()

/*
* @Breif Asks if the PS4 networking is enabled.
* @Pramas 
* @NativeName: PS4_isUserNetworkingEnabled
* @NativeFunctionAddress 0000000140847110
*/

bool function PS4_isUserNetworkingEnabled()

/*
* @Breif Ask what the last resolution state was!
* @Pramas 
* @NativeName: PS4_getUserNetworkingResolution
* @NativeFunctionAddress 0000000140847070
*/

int function PS4_getUserNetworkingResolution()

/*
* @Breif Removed the delay on any retest of UserNetworkingEnabled!
* @Pramas 
* @NativeName: PS4_ScheduleUserNetworkingEnabledTest
* @NativeFunctionAddress 0000000140847020
*/

void function PS4_ScheduleUserNetworkingEnabledTest()

/*
* @Breif Get the Return code from last run!
* @Pramas 
* @NativeName: PS4_getUserNetworkingErrorStatus
* @NativeFunctionAddress 0000000140846F80
*/

int function PS4_getUserNetworkingErrorStatus()

/*
* @Breif Get state of network for device.
* @Pramas 
* @NativeName: PS4_isNetworkingDown
* @NativeFunctionAddress 0000000140846F20
*/

bool function PS4_isNetworkingDown()

/*
* @Breif Returns true if you are in a state where you can invite friends.
* @Pramas 
* @NativeName: PS4_canInviteFriends
* @NativeFunctionAddress 0000000140846EC0
*/

bool function PS4_canInviteFriends()

/*
* @Breif Returns true if the currently signed in user has age restriction to play multiplayer.
* @Pramas 
* @NativeName: PS4_is_NetworkStatusAgeRestriction
* @NativeFunctionAddress 0000000140846E60
*/

bool function PS4_is_NetworkStatusAgeRestriction()

/*
* @Breif Returns true if a difrent signed in user has age restriction to play multiplayer.
* @Pramas 
* @NativeName: PS4_is_NetworkStatusAgeRestrictionOther
* @NativeFunctionAddress 0000000140846E00
*/

bool function PS4_is_NetworkStatusAgeRestrictionOther()

/*
* @Breif Returns true if we are running on a Durango.
* @Pramas 
* @NativeName: Script_Durango_IsDurango
* @NativeFunctionAddress 00000001407AD660
*/

bool function Durango_IsDurango()

/*
* @Breif Returns true if we are in the error screen. eg. "User signed out!"
* @Pramas 
* @NativeName: Script_Durango_InErrorScreen
* @NativeFunctionAddress 0000000140846DA0
*/

bool function Durango_InErrorScreen()

/*
* @Breif The error string that should be displayed while in the error screen.
* @Pramas 
* @NativeName: Script_Durango_GetErrorString
* @NativeFunctionAddress 0000000140846D40
*/

string function Durango_GetErrorString()

/*
* @Breif Show the account picker UI. This should only be called when Durango_IsSignedIn is true.
* @Pramas 
* @NativeName: Script_Durango_ShowAccountPicker
* @NativeFunctionAddress 0000000140846CF0
*/

void function Durango_ShowAccountPicker()

/*
* @Breif Discard the current user/controller pair and go to the splash screen.
* @Pramas 
* @NativeName: Script_Durango_GoToSplashScreen
* @NativeFunctionAddress 0000000140846CA0
*/

void function Durango_GoToSplashScreen()

/*
* @Breif Returns true if we are in the splash screen.
* @Pramas 
* @NativeName: Script_Durango_InSplashScreen
* @NativeFunctionAddress 0000000140846C40
*/

bool function Durango_InSplashScreen()

/*
* @Breif Returns true if we are in the middle of async signing in (eg. loading profile, checking if we have permission to play multiplayer).
* @Pramas 
* @NativeName: Script_Durango_IsSigningIn
* @NativeFunctionAddress 0000000140846BE0
*/

bool function Durango_IsSigningIn()

/*
* @Breif Returns true if we have a signed-in user on Durango.
* @Pramas 
* @NativeName: Script_Console_IsSignedIn
* @NativeFunctionAddress 0000000140846B80
*/

bool function Console_IsSignedIn()

/*
* @Breif Returns the current game display name as a string. Valid only if Console_IsSignedIn is true.
* @Pramas 
* @NativeName: Script_Durango_GetGameDisplayName
* @NativeFunctionAddress 0000000140846B20
*/

string function Durango_GetGameDisplayName()

/*
* @Breif Returns true if the user has skipped sign in. Always false in retail build.
* @Pramas 
* @NativeName: Script_Console_SkippedSignIn
* @NativeFunctionAddress 0000000140846AC0
*/

bool function Console_SkippedSignIn()

/*
* @Breif Gets the number of members in the X1 party. This may be different to the number of party members in your game with you.
* @Pramas 
* @NativeName: Script_Durango_GetNumPartyMembers
* @NativeFunctionAddress 0000000140846A20
*/

int function Durango_GetNumPartyMembers()

/*
* @Breif Creates a party of one if required. Call this when you press 'PLAY' in the main menu.
* @Pramas 
* @NativeName: Script_Durango_CreatePartyOfOneIfRequired
* @NativeFunctionAddress 00000001408469D0
*/

void function Durango_CreatePartyOfOneIfRequired()

/*
* @Breif Returns true if you are in a state where you can invite friends.
* @Pramas 
* @NativeName: Script_Durango_CanInviteFriends
* @NativeFunctionAddress 0000000140846970
*/

bool function Durango_CanInviteFriends()

/*
* @Breif Invite your friends to join your party.
* @Pramas 
* @NativeName: Script_Durango_InviteFriends
* @NativeFunctionAddress 0000000140846900
*/

bool function Durango_InviteFriends()

/*
* @Breif Leave the X1 party.
* @Pramas 
* @NativeName: Script_Durango_LeaveParty
* @NativeFunctionAddress 00000001408468B0
*/

void function Durango_LeaveParty()

/*
* @Breif Returns true if controller is disconnected post-main menu.
* @Pramas 
* @NativeName: Script_Durango_IsControllerDisconnected
* @NativeFunctionAddress 0000000140846850
*/

bool function Durango_IsControllerDisconnected()

/*
* @Breif Returns true if we are currently in a suspended state
* @Pramas 
* @NativeName: Script_Durango_IsSuspended
* @NativeFunctionAddress 00000001408467F0
*/

bool function Durango_IsSuspended()

/*
* @Breif Returns true if we are currently online. eg: connected to the internet
* @Pramas 
* @NativeName: Script_Console_IsOnline
* @NativeFunctionAddress 0000000140846790
*/

bool function Console_IsOnline()

/*
* @Breif Triggers an async check for user permissions. If user does not have permission they are sent back to splash with error. Call when user presses 'PLAY'.
* @Pramas 
* @NativeName: Script_Durango_VerifyMultiplayerPermissions
* @NativeFunctionAddress 0000000140846740
*/

void function Durango_VerifyMultiplayerPermissions()

/*
* @Breif Returns true if the currently signed in user has permission to play multiplayer.
* @Pramas 
* @NativeName: Script_Console_HasPermissionToPlayMultiplayer
* @NativeFunctionAddress 00000001408466E0
*/

bool function Console_HasPermissionToPlayMultiplayer()

/*
* @Breif Returns whether the signed in Durango player is a guest
* @Pramas 
* @NativeName: Script_Durango_IsGuest
* @NativeFunctionAddress 0000000140846680
*/

bool function Durango_IsGuest()

/*
* @Breif Call when enterring the lobby ( int gamemodeId, int difficultyLevelId )
* @Pramas int, int
* @NativeName: Script_Durango_OnLobbySessionStart
* @NativeFunctionAddress 0000000140846600
*/

void function Durango_OnLobbySessionStart(int, int)

/*
* @Breif Call when starting a multiplayer round ( int gamemodeId, int mapId, int difficultyLevelId, int roundId, int matchTypeId )
* @Pramas int, int, int, int, int
* @NativeName: Script_Durango_OnMultiplayerRoundStart
* @NativeFunctionAddress 0000000140846540
*/

void function Durango_OnMultiplayerRoundStart(int, int, int, int, int)

/*
* @Breif Update the currently signed in Durango player's game progress [0, 1]
* @Pramas float
* @NativeName: Script_Durango_SetGameProgress
* @NativeFunctionAddress 00000001408464B0
*/

void function Durango_SetGameProgress(float)

/*
* @Breif Update the currently signed in Durango player's SP progress [0, 1]
* @Pramas float
* @NativeName: Script_Durango_SetSpProgress
* @NativeFunctionAddress 0000000140846420
*/

void function Durango_SetSpProgress(float)

/*
* @Breif Update the currently signed in Durango player's number of collectibles found
* @Pramas int
* @NativeName: Script_Durango_SetCollectiblesFound
* @NativeFunctionAddress 00000001408463A0
*/

void function Durango_SetCollectiblesFound(int)

/*
* @Breif Gets the current player's XUID
* @Pramas 
* @NativeName: Script_Durango_GetXUID
* @NativeFunctionAddress 0000000140846300
*/

string function Durango_GetXUID()

/*
* @Breif Show the Durango help window (probably snapped) that has a game manual. Returns true if the window will be shown
* @Pramas 
* @NativeName: Script_Durango_ShowHelpWindow
* @NativeFunctionAddress 00000001408462A0
*/

bool function Durango_ShowHelpWindow()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Durango_IsJoinable
* @NativeFunctionAddress 0000000140846240
*/

bool function Durango_IsJoinable()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Durango_OpenPartyApp
* @NativeFunctionAddress 00000001408461F0
*/

void function Durango_OpenPartyApp()

/*
* @Breif Returns true if the full game is installed. You can't start mp or any sp map but sp_training and sp_crashsite if this is false.
* @Pramas 
* @NativeName: Client_IsGameFullyInstalled
* @NativeFunctionAddress 00000001408478A0
*/

bool function IsGameFullyInstalled()

/*
* @Breif Returns true if the game is partially installed. You can't start sp training this is false.
* @Pramas 
* @NativeName: Client_IsGamePartiallyInstalled
* @NativeFunctionAddress 0000000140847840
*/

bool function IsGamePartiallyInstalled()

/*
* @Breif Returns fraction 0.0 to 1.0 of downloading of full game progress.
* @Pramas 
* @NativeName: Client_GetGameFullyInstalledProgress
* @NativeFunctionAddress 00000001408477A0
*/

float function GetGameFullyInstalledProgress()

/*
* @Breif Returns whether there are assets loaded from before the game was fully instaled--i.e., we need to restart or reload rpaks.
* @Pramas 
* @NativeName: Client_HasNonFullyInstalledAssetsLoaded
* @NativeFunctionAddress 0000000140847750
*/

bool function HasNonFullyInstalledAssetsLoaded()

/*
* @Breif Links a pair of buttons to an output
* @Pramas int, int, int
* @NativeName: Script_LinkButtonPair
* @NativeFunctionAddress 000000014070B9A0
*/

void function LinkButtonPair(int, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PingCommandQueueTrace
* @NativeFunctionAddress 000000014070B930
*/

void function PingCommandQueueTrace()

/*
* @Breif 
* @Pramas int pingType, int userTicketId
* @NativeName: Script_PingCommandExecuteQueued
* @NativeFunctionAddress 000000014070B890
*/

void function PingCommandExecuteQueued(int pingType, int userTicketId)

/*
* @Breif 
* @Pramas int pingType, vector pingOrigin, entity pingEnt, int userTicketId
* @NativeName: Script_PingCommandExecuteUsePrompt
* @NativeFunctionAddress 000000014070B7F0
*/

void function PingCommandExecuteUsePrompt(int pingType, vector pingOrigin, entity pingEnt, int userTicketId)

/*
* @Breif 
* @Pramas entity ent, int userTicketId
* @NativeName: Script_PingCommandExecuteEnemySpotted
* @NativeFunctionAddress 000000014070B770
*/

void function PingCommandExecuteEnemySpotted(entity ent, int userTicketId)

/*
* @Breif Adds a mod to a weapon in the local player's inventory.
* @Pramas entity weapon, string modName
* @NativeName: Script_WeaponModCommand_Add
* @NativeFunctionAddress 000000014070B700
*/

void function WeaponModCommand_Add(entity weapon, string modName)

/*
* @Breif Removes a mod from a weapon in the local player's inventory.
* @Pramas entity weapon, string modName
* @NativeName: Script_WeaponModCommand_Remove
* @NativeFunctionAddress 000000014070B690
*/

void function WeaponModCommand_Remove(entity weapon, string modName)

/*
* @Breif Toggles a mod on the active weapon.
* @Pramas string modName
* @NativeName: Script_WeaponModCommand_Toggle
* @NativeFunctionAddress 000000014070B640
*/

void function WeaponModCommand_Toggle(string modName)

/*
* @Breif Activates the specified offhand weapon.
* @Pramas int offhandIndex
* @NativeName: Script_ActivateOffhandWeaponByIndex
* @NativeFunctionAddress 000000014070B5C0
*/

void function ActivateOffhandWeaponByIndex(int offhandIndex)

/*
* @Breif Check if two OBBs intersect
* @Pramas vector, vector, vector, vector, vector, vector, float
* @NativeName: Client_ScriptAABBIntersectsAABB
* @NativeFunctionAddress 00000001408FA340
*/

bool function AABBIntersectsAABB(vector, vector, vector, vector, vector, vector, float)

/*
* @Breif Check if two OBBs intersect
* @Pramas vector, vector, vector, vector, vector, vector, vector, vector, float
* @NativeName: Client_ScriptOBBIntersectsOBB
* @NativeFunctionAddress 00000001408FA280
*/

bool function OBBIntersectsOBB(vector, vector, vector, vector, vector, vector, vector, vector, float)

/*
* @Breif Do multiple LOS checks, early out if any return true. Runs on multiple threads
* @Pramas starts array, ends array, ent ignoreEntity, TRACE_MASK_* mask, TRACE_COLLISION_GROUP_* group
* @NativeName: SHARED_SCRIPT( ScriptTraceLOSMultiple )
* @NativeFunctionAddress 00000001408ED4E0
*/

bool function TraceLOSMultiple(var, var, var, var, int, int)

/*
* @Breif Does a trace and returns struct of result values.
* @Pramas vector startPos, vector endPos, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceLine )
* @NativeFunctionAddress 00000001408ED520
*/

var function TraceLine()

/*
* @Breif Does a high-detail (per poly on static models) trace and returns struct of result values.
* @Pramas vector startPos, vector endPos, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceLineHighDetail )
* @NativeFunctionAddress 00000001408ED560
*/

var function TraceLineHighDetail()

/*
* @Breif Does a hull trace and returns table of result values. Default value of up is <0,0,1>
* @Pramas vector startPos, vector endPos, vector hullMins, vector hullMaxs, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0, vector upDir = null, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceHull )
* @NativeFunctionAddress 00000001408ED5A0
*/

var function TraceHull()

/*
* @Breif Does a hull trace and returns table of result values. Default value of up is <0,0,1>
* @Pramas vector startPos, vector endPos, vector hullMins, vector hullMaxs, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0, vector upDir = null, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceHullEntsOnly )
* @NativeFunctionAddress 00000001408ED5E0
*/

var function TraceHullEntsOnly()

/*
* @Breif Does a trace and returns table of result values.
* @Pramas vector startPos, vector endPos, int traceMask = 0
* @NativeName: SHARED_SCRIPT( ScriptTraceLineNoEnts )
* @NativeFunctionAddress 00000001408ED620
*/

var function TraceLineNoEnts()

/*
* @Breif Does a trace for the ping using the given trace mask and collision group none. Team is for friendly team checks that the ping ignores.
* @Pramas entity player, float traceDist, int traceMask, int collGroup
* @NativeName: SHARED_SCRIPT( ScriptPingTraceForPlayer )
* @NativeFunctionAddress 00000001408ED740
*/

var function PingTraceForPlayer()

/*
* @Breif 
* @Pramas vector startPos, vector endPos, entity ignore, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceLineSimple )
* @NativeFunctionAddress 00000001408ED780
*/

var function TraceLineSimple()

/*
* @Breif 
* @Pramas vector startPos, vector endPos, vector hullMin, vector hullMax, entity ignore, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceHullSimple )
* @NativeFunctionAddress 00000001408ED950
*/

var function TraceHullSimple()

/*
* @Breif Enable/Disable coordinate check on trace start/end positions
* @Pramas bool
* @NativeName: Client_ScriptDoTraceCoordCheck
* @NativeFunctionAddress 00000001407AEC60
*/

void function DoTraceCoordCheck(bool)

/*
* @Breif Does a trace a returns all ents along a line
* @Pramas vector startPos, vector endPos, int traceMask = 0, int collisionGroup = 0, entity tracingEntity = null
* @NativeName: SHARED_SCRIPT( ScriptTraceGetEntsAlongLine )
* @NativeFunctionAddress 00000001408ED990
*/

var function TraceGetEntsAlongLine()

/*
* @Breif 
* @Pramas entity, vector, vector
* @NativeName: Client_Script_CheckPassThroughDir
* @NativeFunctionAddress 00000001408FA200
*/

bool function CheckPassThroughDir(entity, vector, vector)

/*
* @Breif Check if point is in front of line defined by point and direction
* @Pramas vector, vector, vector
* @NativeName: Client_IsPointInFrontofLine
* @NativeFunctionAddress 00000001408FA170
*/

bool function IsPointInFrontofLine(vector, vector, vector)

/*
* @Breif Gets the distance in units of point p along path points
* @Pramas array< vector > points, vector pos
* @NativeName: SHARED_SCRIPT( ScriptGetDistanceAlongPath )
* @NativeFunctionAddress 00000001408ED9D0
*/

var function GetDistanceAlongPath()

/*
* @Breif Returns a position that is the specified distance along path points
* @Pramas array< vector > points, float dist
* @NativeName: SHARED_SCRIPT( ScriptGetPointAtDistanceAlongPath )
* @NativeFunctionAddress 00000001408EDA10
*/

var function GetPointAtDistanceAlongPath()

/*
* @Breif Returns the total length between path points
* @Pramas array< vector > points
* @NativeName: SHARED_SCRIPT( ScriptGetPathLength )
* @NativeFunctionAddress 00000001408EDA50
*/

var function GetPathLength()

/*
* @Breif Requests a deferred trace and returns a deferred trace context
* @Pramas vector startPos, vector endPos, var ignoreEnt = null, int traceMask = 0, int collisionGroup = 0
* @NativeName: DeferredTraceLine
* @NativeFunctionAddress 00000001408EDA90
*/

var function DeferredTraceLine()

/*
* @Breif Requests a high detail deferred trace and returns a deferred trace context
* @Pramas vector startPos, vector endPos, var ignoreEnt = null, int traceMask = 0, int collisionGroup = 0
* @NativeName: DeferredTraceLineHighDetail
* @NativeFunctionAddress 00000001408EDAD0
*/

var function DeferredTraceLineHighDetail()

/*
* @Breif Requests a simple deferred trace and returns a deferred trace context
* @Pramas vector startPos, vector endPos, var ignoreEnt = null
* @NativeName: DeferredTraceLineSimple
* @NativeFunctionAddress 00000001408EDB10
*/

var function DeferredTraceLineSimple()

/*
* @Breif Requests a deferred trace and returns a deferred trace context
* @Pramas vector startPos, vector endPos, vector mins, vector maxs, var ignoreEnt = null, int traceMask = 0, int collisionGroup = 0
* @NativeName: DeferredTraceHull
* @NativeFunctionAddress 00000001408EDC20
*/

var function DeferredTraceHull()

/*
* @Breif Immediately returns whether the trace is complete for the given deferred trace context (always FALSE when passed NULL.)
* @Pramas var deferredTrace
* @NativeName: IsDeferredTraceFinished
* @NativeFunctionAddress 00000001408EDC60
*/

var function IsDeferredTraceFinished()

/*
* @Breif Finished a trace synchronously and returns the fraction of a given deferred trace context
* @Pramas var deferredTrace
* @NativeName: GetDeferredTraceResultFraction
* @NativeFunctionAddress 00000001408EDCA0
*/

var function GetDeferredTraceResultFraction()

/*
* @Breif Finishes a trace if necessary, and returns the struct of result values for a given deferred trace context
* @Pramas var deferredTrace
* @NativeName: GetDeferredTraceResult
* @NativeFunctionAddress 00000001408EDCE0
*/

var function GetDeferredTraceResult()

/*
* @Breif Returns an array of entities that are inside of a cone and visible to the apex
* @Pramas vector coneApex, vector coneAxis, float coneHeight, float coneAngleToAxis, array< entity > ignoredEntities, int traceMask, int flags, entity antilagPlayer, entity weapon = null
* @NativeName: SHARED_SCRIPT( FindVisibleEntitiesInCone_Script )
* @NativeFunctionAddress 00000001408EDD20
*/

var function FindVisibleEntitiesInCone()

/*
* @Breif Check for vortexSphere collisions between two points
* @Pramas entity attacker, vector startPos, vector endPos
* @NativeName: SHARED_SCRIPT( ScriptVortexBulletHitCheck )
* @NativeFunctionAddress 00000001408EDD60
*/

var function VortexBulletHitCheck()

/*
* @Breif Precache an effect and returns the particleSystemIndex associated with it.
* @Pramas asset
* @NativeName: Client_Script_PrecacheParticleSystem
* @NativeFunctionAddress 0000000140849BE0
*/

int function PrecacheParticleSystem(asset)

/*
* @Breif Returns an associated particleSystemIndex, or 0 if none exists.
* @Pramas asset
* @NativeName: Client_Script_GetParticleSystemIndex
* @NativeFunctionAddress 0000000140849B00
*/

int function GetParticleSystemIndex(asset)

/*
* @Breif For development/debugging. Given ( particleSystemIndex ), returns the name of the given particle system, or an empty string if none exists.
* @Pramas int
* @NativeName: Client_Script_GetParticleSystemName
* @NativeFunctionAddress 0000000140849A60
*/

asset function GetParticleSystemName(int)

/*
* @Breif Given ( particleSystemIndex, origin, angles ), creates a new effect in the world at the given position/orientation, and returns a handle to it.
* @Pramas int, vector, vector
* @NativeName: Script_StartParticleEffectInWorldWithHandle
* @NativeFunctionAddress 00000001408499B0
*/

int function StartParticleEffectInWorldWithHandle(int, vector, vector)

/*
* @Breif Given ( particleSystemIndex, origin, angles ), creates a new effect in the world at the given position/orientation, and don't return a handle.  This allows effects to merge reducing cost...also doesn't waste handles.
* @Pramas int, vector, vector
* @NativeName: Script_StartParticleEffectInWorld
* @NativeFunctionAddress 0000000140849920
*/

void function StartParticleEffectInWorld(int, vector, vector)

/*
* @Breif Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex ), creates a new effect owned by the given entity, and returns a handle to it.
* @Pramas entity, int, int, int
* @NativeName: Script_StartParticleEffectOnEntity
* @NativeFunctionAddress 0000000140849810
*/

int function StartParticleEffectOnEntity(entity, int, int, int)

/*
* @Breif Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex, position, angles ), creates a new effect owned by the given entity at a position/orientation, and returns a handle to it.
* @Pramas entity, int, int, int, vector, vector
* @NativeName: Script_StartParticleEffectOnEntityWithPos
* @NativeFunctionAddress 00000001408496E0
*/

int function StartParticleEffectOnEntityWithPos(entity, int, int, int, vector, vector)

/*
* @Breif Given ( effect, bool isWithCockpit ), sets whether effect renders with cockpit.
* @Pramas int, bool
* @NativeName: Script_EffectSetIsWithCockpit
* @NativeFunctionAddress 0000000140849680
*/

void function EffectSetIsWithCockpit(int, bool)

/*
* @Breif Given ( effect ), returns true if the given effect is still running.
* @Pramas int
* @NativeName: Script_EffectDoesExist
* @NativeFunctionAddress 0000000140849610
*/

bool function EffectDoesExist(int)

/*
* @Breif Given ( effect, doRemoveAllParticlesNow, doPlayEndCap ), kills an effect.
* @Pramas int, bool, bool
* @NativeName: Script_EffectStop
* @NativeFunctionAddress 00000001408495A0
*/

void function EffectStop(int, bool, bool)

/*
* @Breif Given ( effect ), force an effect to hibernate.
* @Pramas int
* @NativeName: Script_EffectSleep
* @NativeFunctionAddress 0000000140849540
*/

void function EffectSleep(int)

/*
* @Breif Given ( effect ), resume an effect that was previously put to sleep.
* @Pramas int
* @NativeName: Script_EffectWake
* @NativeFunctionAddress 00000001408494E0
*/

void function EffectWake(int)

/*
* @Breif Given ( effect, seconds ), jump an effect forward in its time.
* @Pramas int, float
* @NativeName: Script_EffectSkipForwardToTime
* @NativeFunctionAddress 0000000140849470
*/

void function EffectSkipForwardToTime(int, float)

/*
* @Breif Given ( effect ), By default all effects get killed on start and end of replay. Call this to set a flag on this effect so it doesn't get killed.
* @Pramas int
* @NativeName: Script_EffectSetDontKillForReplay
* @NativeFunctionAddress 0000000140849410
*/

void function EffectSetDontKillForReplay(int)

/*
* @Breif Given ( effect ), Sets this effect to only play for friendly team mates of the owner
* @Pramas int
* @NativeName: Script_EffectSetPlayFriendlyOnly
* @NativeFunctionAddress 00000001408493B0
*/

void function EffectSetPlayFriendlyOnly(int)

/*
* @Breif Given ( effect ), Sets this effect to only play for enemy team mates of the owner
* @Pramas int
* @NativeName: Script_EffectSetPlayEnemyOnly
* @NativeFunctionAddress 0000000140849350
*/

void function EffectSetPlayEnemyOnly(int)

/*
* @Breif Given ( effect, time, doPauseAfterWarmUp ), Fast forward simulation of the effect and optionally pause the effect after.
* @Pramas int, float, bool
* @NativeName: Script_EffectSetWarmUpTime
* @NativeFunctionAddress 00000001408492D0
*/

void function EffectSetWarmUpTime(int, float, bool)

/*
* @Breif Given ( effect ), Continue the simulation of an effect that was paused after warm-up.
* @Pramas int
* @NativeName: Script_EffectUnpauseWarmUp
* @NativeFunctionAddress 0000000140849270
*/

void function EffectUnpauseWarmUp(int)

/*
* @Breif Given ( effect, doRemoveAllParticlesNow, doPlayEndCap ), kills an effect.
* @Pramas entity
* @NativeName: Script_EffectStopGiveEntity
* @NativeFunctionAddress 00000001408491D0
*/

void function EffectStopByEntity(entity)

/*
* @Breif Given ( entity ), returns the name of the actual effect being played by the particle system.
* @Pramas entity
* @NativeName: GetParticleEffectName
* @NativeFunctionAddress 0000000140849150
*/

string function GetParticleEffectName(entity)

/*
* @Breif Stops all client side particle effects
* @Pramas 
* @NativeName: Script_StopAllEffects
* @NativeFunctionAddress 0000000140849100
*/

void function StopAllEffects()

/*
* @Breif Given ( entity ), the time scrub scenes will sync up with his animations.
* @Pramas entity
* @NativeName: Script_SetTimeScrubSyncEntity
* @NativeFunctionAddress 0000000140849090
*/

void function Effects_SetTimeScrubSyncEntity(entity)

/*
* @Breif Given ( sceneName, sceneTime ), records the effects that play for the next *sceneTime* seconds.
* @Pramas string, float
* @NativeName: Script_TimeScrubBakeScene
* @NativeFunctionAddress 0000000140849020
*/

void function Effects_TimeScrubBakeScene(string, float)

/*
* @Breif Given ( sceneTime ), sets the time in seconds of the playback effects.
* @Pramas float, float
* @NativeName: Script_TimeScrubSetSceneTime
* @NativeFunctionAddress 0000000140848F80
*/

void function Effects_TimeScrubSetSceneTime(float, float)

/*
* @Breif Given ( sceneName ), this will load and start a scene of baked particles.
* @Pramas string
* @NativeName: Script_TimeScrubPlayScene
* @NativeFunctionAddress 0000000140848F30
*/

void function Effects_TimeScrubLoadScene(string)

/*
* @Breif Given ( sceneName ), this will stop and unload a scene of baked particles.
* @Pramas string
* @NativeName: Script_TimeScrubStopScene
* @NativeFunctionAddress 0000000140848EE0
*/

void function Effects_TimeScrubUnloadScene(string)

/*
* @Breif Given ( effect, controlPointIndex, vector ), sets the xyz of an effect's control point.
* @Pramas int, int, vector
* @NativeName: Script_EffectSetControlPointVector
* @NativeFunctionAddress 0000000140848E60
*/

void function EffectSetControlPointVector(int, int, vector)

/*
* @Breif Given ( effect, controlPointIndex, angles ), sets the orientation of an effect's control point.
* @Pramas int, int, vector
* @NativeName: Script_EffectSetControlPointAngles
* @NativeFunctionAddress 0000000140848DE0
*/

void function EffectSetControlPointAngles(int, int, vector)

/*
* @Breif Given ( effect, controlPointIndex, entity ), sets the entity assigned to an effect's control point.
* @Pramas int, int, entity
* @NativeName: Script_EffectSetControlPointEntity
* @NativeFunctionAddress 0000000140848D50
*/

void function EffectSetControlPointEntity(int, int, entity)

/*
* @Breif Given ( effect, controlPointIndex, colorId ), sets the colorId that defines the xyz of an effect's control point. Overrides any vector value set manually.
* @Pramas int, int, int
* @NativeName: Script_EffectSetControlPointColorById
* @NativeFunctionAddress 0000000140848CD0
*/

void function EffectSetControlPointColorById(int, int, int)

/*
* @Breif Given ( effect, controlPointIndex, otherEntity, FX_PATTACH_ attachType, attachmentIndex, offset ), adds automatic updating of an effect's control point. Effect must have been created on an entity.
* @Pramas int, int, entity, int, int, vector
* @NativeName: Script_EffectAddTrackingForControlPoint
* @NativeFunctionAddress 0000000140848BF0
*/

void function EffectAddTrackingForControlPoint(int, int, entity, int, int, vector)

/*
* @Breif Given ( enabled ), Enable/Disable the desaturation.
* @Pramas bool
* @NativeName: Script_GfxDesaturate
* @NativeFunctionAddress 0000000140848B60
*/

void function GfxDesaturate(bool)

/*
* @Breif Given ( effect, flag, enable ), Sets/UnSets this flag on a given effect.
* @Pramas int, int, bool
* @NativeName: Script_SetParticleFlag
* @NativeFunctionAddress 0000000140848AE0
*/

void function Effects_SetParticleFlag(int, int, bool)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptMover_UseNewTrain_Client
* @NativeFunctionAddress 00000001407AD660
*/

bool function ScriptMover_UseNewTrain()

/*
* @Breif Spawns a client-side script-mover entity.
* @Pramas asset modelName, vector pos, vector angles
* @NativeName: Script_CreateClientsideScriptMover
* @NativeFunctionAddress 00000001408FB7F0
*/

entity function CreateClientsideScriptMover(asset modelName, vector pos, vector angles)

/*
* @Breif Mark the entity as able to be leeched
* @Pramas entity
* @NativeName: Leech_IsLeechable_Script
* @NativeFunctionAddress 0000000140A1D460
*/

bool function Leech_IsLeechable(entity)

/*
* @Breif Do a lunge cone trace returning the target closest to center of screen
* @Pramas entity player, entity meleeWeapon, int callback
* @NativeName: PlayerMelee_LungeConeTrace
* @NativeFunctionAddress 0000000140A1D3B0
*/

entity function PlayerMelee_LungeConeTrace(entity player, entity meleeWeapon, int callback)

/*
* @Breif Returns an array of entities that are inside a cone and visible to the player
* @Pramas entity playerTitan, entity meleeWeapon
* @NativeName: SHARED_SCRIPT( PlayerMelee_FindVisibleEntitiesInCone )
* @NativeFunctionAddress 0000000140A1AD60
*/

var function PlayerMelee_FindVisibleEntitiesInCone()

/*
* @Breif Do a trace for potential melee targets in front of player. Returns a table with keys 'entity' and 'position', which is the hit entity and position
* @Pramas entity player, float range, bool functionref( entity attacker, entity target ) isValidTargetFunc
* @NativeName: SHARED_SCRIPT( Script_PlayerMelee_AttackTrace )
* @NativeFunctionAddress 0000000140A1ADA0
*/

var function PlayerMelee_AttackTrace()

/*
* @Breif Casts a slightly smaller version of the player's bounding box to see if they can reach target
* @Pramas entity, entity, float
* @NativeName: Client_Script_PlayerMelee_IsExecutionReachable
* @NativeFunctionAddress 0000000140A1D300
*/

bool function PlayerMelee_IsExecutionReachable(entity, entity, float)

/*
* @Breif Returns maximum bursts to fire on a single target
* @Pramas entity
* @NativeName: SmartAmmo_GetMaxTargetedBurst_Script
* @NativeFunctionAddress 0000000140A1C7D0
*/

int function SmartAmmo_GetMaxTargetedBurst(entity)

/*
* @Breif Returns time it will take to lock onto given target
* @Pramas entity, entity
* @NativeName: SmartAmmo_GetTargetingTime_Script
* @NativeFunctionAddress 0000000140A1C6F0
*/

float function SmartAmmo_GetTargetingTime(entity, entity)

/*
* @Breif Returns maximum value the lock "fraction" can have
* @Pramas entity, entity
* @NativeName: SmartAmmo_GetTargetMaxLocks_Script
* @NativeFunctionAddress 0000000140A1C610
*/

float function SmartAmmo_GetTargetMaxLocks(entity, entity)

/*
* @Breif Returns whether the given weapon is tracking the given entity
* @Pramas entity, entity
* @NativeName: SmartAmmo_IsTrackingEntity_Script
* @NativeFunctionAddress 0000000140A1C580
*/

bool function SmartAmmo_IsTrackingEntity(entity, entity)

/*
* @Breif Returns true if this is a valid smart ammo target
* @Pramas entity, entity
* @NativeName: SmartAmmo_IsValidTarget_Script
* @NativeFunctionAddress 0000000140A1C4F0
*/

bool function SmartAmmo_IsValidTarget(entity, entity)

/*
* @Breif Adds a status effect that will stop automatically after a given time. Applies the effect immediately and returns a handle to it (or SE_INVALID_HANDLE if code could not allocate a new status effect). This can cause mispredictions on players if the effect is only applied on the server, but is safe to use if the status doesn't affect player movement or weapon usage, or if it's called in predicted client script too (like a weapon attack callback).
* @Pramas entity ent, int eStatusEffect, float severity01, float duration, float easeOut
* @NativeName: Script_StatusEffect_AddTimed
* @NativeFunctionAddress 00000001408FB620
*/

int function StatusEffect_AddTimed(entity ent, int eStatusEffect, float severity01, float duration, float easeOut)

/*
* @Breif Adds a status effect. Returns SE_INVALID_HANDLE if code could not allocate a new status effect.
* @Pramas entity ent, int eStatusEffect, float severity01
* @NativeName: Script_StatusEffect_AddEndless
* @NativeFunctionAddress 00000001408FB540
*/

int function StatusEffect_AddEndless(entity ent, int eStatusEffect, float severity01)

/*
* @Breif Stops a status effect given its handle (return value of StatusEffect_AddTimed or StatusEffect_AddEndless).
* @Pramas entity ent, int effectHandle
* @NativeName: Script_StatusEffect_Stop
* @NativeFunctionAddress 00000001408FB4B0
*/

bool function StatusEffect_Stop(entity ent, int effectHandle)

/*
* @Breif Stops all status effects of a given type. Returns the number that were stopped.
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_StopAllOfType
* @NativeFunctionAddress 00000001408FB250
*/

int function StatusEffect_StopAllOfType(entity ent, int eStatusEffect)

/*
* @Breif Stops all status effects regardless of type
* @Pramas entity ent
* @NativeName: Script_StatusEffect_StopAll
* @NativeFunctionAddress 00000001408FB090
*/

void function StatusEffect_StopAll(entity ent)

/*
* @Breif Gets the max severity of a given status effect type
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_GetSeverity
* @NativeFunctionAddress 00000001408FAFC0
*/

float function StatusEffect_GetSeverity(entity ent, int eStatusEffect)

/*
* @Breif Gets the longest time remaining of a given status effect type
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_GetTimeRemaining
* @NativeFunctionAddress 00000001408FAEF0
*/

float function StatusEffect_GetTimeRemaining(entity ent, int eStatusEffect)

/*
* @Breif 
* @Pramas entity ent
* @NativeName: Script_StatusEffect_GetAllSeverity
* @NativeFunctionAddress 00000001408FAE20
*/

array< float > function StatusEffect_GetAllSeverity(entity ent)

/*
* @Breif Overrides the current duration of the given effect handle
* @Pramas entity ent, int effectHandle, float newDuration
* @NativeName: Script_StatusEffect_SetDuration
* @NativeFunctionAddress 00000001408FAD80
*/

bool function StatusEffect_SetDuration(entity ent, int effectHandle, float newDuration)

/*
* @Breif Pauses or unpauses a status effect given its handle (return value of StatusEffect_AddTimed or StatusEffect_AddEndless).
* @Pramas entity ent, int effectHandle, bool pauseState
* @NativeName: Script_StatusEffect_SetPauseState
* @NativeFunctionAddress 00000001408FACF0
*/

bool function StatusEffect_SetPauseState(entity ent, int effectHandle, bool pauseState)

/*
* @Breif Pauses or unpauses all status effects of a given type. Returns the number that were stopped.
* @Pramas entity ent, int eStatusEffect, bool pauseState
* @NativeName: Script_StatusEffect_SetPauseStateForAllOfType
* @NativeFunctionAddress 00000001408FAC10
*/

int function StatusEffect_SetPauseStateForAllOfType(entity ent, int eStatusEffect, bool pauseState)

/*
* @Breif Given a handle to a status effect, checks if it is paused
* @Pramas entity ent, int effectHandle
* @NativeName: Script_StatusEffect_IsPaused
* @NativeFunctionAddress 00000001408FAA80
*/

bool function StatusEffect_IsPaused(entity ent, int effectHandle)

/*
* @Breif Gets the max severity of a given status effect type, ignoring paused status effects
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_GetSeverity_IgnorePaused
* @NativeFunctionAddress 00000001408FA9B0
*/

float function StatusEffect_GetSeverity_IgnorePaused(entity ent, int eStatusEffect)

/*
* @Breif Gets the longest time remaining of a given status effect type, ignoring paused status effects
* @Pramas entity ent, int eStatusEffect
* @NativeName: Script_StatusEffect_GetTimeRemaining_IgnorePaused
* @NativeFunctionAddress 00000001408FA8E0
*/

float function StatusEffect_GetTimeRemaining_IgnorePaused(entity ent, int eStatusEffect)

/*
* @Breif Registers a script callback to be called on any entity that receives this status effect. Will be called even at kill replay boundaries and for late joining players; actuallyChanged is false in these cases.
* @Pramas int eStatusEffect, void functionref( entity ent, int eStatusEffect, bool actuallyChanged )
* @NativeName: Script_StatusEffect_RegisterEnabledCallback
* @NativeFunctionAddress 00000001408FA850
*/

void function StatusEffect_RegisterEnabledCallback(int eStatusEffect, void functionref( entity ent, int eStatusEffect, bool actuallyChanged ))

/*
* @Breif Registers a script callback to be called on any entity that loses this status effect. Will be called even at kill replay boundaries; actuallyChanged is false in this case.
* @Pramas int eStatusEffect, void functionref( entity ent, int eStatusEffect, bool actuallyChanged )
* @NativeName: Script_StatusEffect_RegisterDisabledCallback
* @NativeFunctionAddress 00000001408FA7C0
*/

void function StatusEffect_RegisterDisabledCallback(int eStatusEffect, void functionref( entity ent, int eStatusEffect, bool actuallyChanged ))

/*
* @Breif Registers a named networked variable.
* @Pramas string name, int SNDC_category, int SNVT_type, var defaultValue = 0, float rangemin = 0, float rangemax = 0
* @NativeName: Script_RegisterNetworkedVariable
* @NativeFunctionAddress 00000001408EBBD0
*/

var function RegisterNetworkedVariable()

/*
* @Breif Gets the internal index used to reference a scripted network variable. For use with FX_PATTACH_SCRIPT_NETWORK_VAR.
* @Pramas string name
* @NativeName: Script_GetNetworkedVariableIndex
* @NativeFunctionAddress 00000001408EBC10
*/

var function GetNetworkedVariableIndex()

/*
* @Breif Registers a function to be called on the client when the networked variable changes. If the variable is on an entity, the function will also be called when the owning entity is created/destroyed and at kill replay boundaries if its value is not the default. In these cases, "actuallyChanged" will be false.
* @Pramas string name, void functionref( entity ent, bool oldval, bool newval, bool actuallyChanged )
* @NativeName: Script_RegisterNetworkedVariableChangeCallback<SNVT_BOOL>
* @NativeFunctionAddress 00000001408EBEC0
*/

var function RegisterNetworkedVariableChangeCallback_bool()

/*
* @Breif Registers a function to be called on the client when the networked variable changes. If the variable is on an entity, the function will also be called when the owning entity is created/destroyed and at kill replay boundaries if its value is not the default. In these cases, "actuallyChanged" will be false.
* @Pramas string name, void functionref( entity ent, int oldval, int newval, bool actuallyChanged )
* @NativeName: Script_RegisterNetworkedVariableChangeCallback<SNVT_INT>
* @NativeFunctionAddress 00000001408EC180
*/

var function RegisterNetworkedVariableChangeCallback_int()

/*
* @Breif Registers a function to be called on the client when the networked variable changes. If the variable is on an entity, the function will also be called when the owning entity is created/destroyed and at kill replay boundaries. In these cases, "actuallyChanged" will be false.
* @Pramas string name, void functionref( entity ent, float oldval, float newval, bool actuallyChanged )
* @NativeName: Script_RegisterNetworkedVariableChangeCallback<SNVT_FLOAT_RANGE>
* @NativeFunctionAddress 00000001408EC440
*/

var function RegisterNetworkedVariableChangeCallback_float()

/*
* @Breif Registers a function to be called on the client when the networked variable changes. If the variable is on an entity, the function will also be called when the owning entity is created/destroyed and at kill replay boundaries. In these cases, "actuallyChanged" will be false.
* @Pramas string name, void functionref( entity ent, float oldval, float newval, bool actuallyChanged )
* @NativeName: Script_RegisterNetworkedVariableChangeCallback<SNVT_TIME>
* @NativeFunctionAddress 00000001408EC700
*/

var function RegisterNetworkedVariableChangeCallback_time()

/*
* @Breif Registers a function to be called on the client when the networked variable changes. If the variable is on an entity, the function will also be called when the owning entity is created/destroyed and at kill replay boundaries if its value is not null. In these cases, "actuallyChanged" will be false.
* @Pramas string name, void functionref( entity ent, entity oldval, entity newval, bool actuallyChanged )
* @NativeName: Script_RegisterNetworkedVariableChangeCallback<SNVT_ENTITY>
* @NativeFunctionAddress 00000001408EC9C0
*/

var function RegisterNetworkedVariableChangeCallback_ent()

/*
* @Breif Gets a global bool network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetBool_Client
* @NativeFunctionAddress 00000001408FC390
*/

bool function GetGlobalNetBool(string)

/*
* @Breif Gets an global int network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetInt_Client
* @NativeFunctionAddress 00000001408FC2B0
*/

int function GetGlobalNetInt(string)

/*
* @Breif Gets a global float network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetFloat_Client
* @NativeFunctionAddress 00000001408FC1D0
*/

float function GetGlobalNetFloat(string)

/*
* @Breif Gets a global time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetTime_Client
* @NativeFunctionAddress 00000001408FC130
*/

float function GetGlobalNetTime(string)

/*
* @Breif Gets a global entity network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetGlobalNetEnt_Client
* @NativeFunctionAddress 00000001408FC0D0
*/

entity function GetGlobalNetEnt(string)

/*
* @Breif Returns true if the given entity is marked as a grapple auto-aim target.
* @Pramas entity target
* @NativeName: Client_GrappleAutoAim_IsTarget
* @NativeFunctionAddress 0000000140A1D5A0
*/

bool function GrappleAutoAim_IsTarget(entity target)

/*
* @Breif Searches for the closest, grapple auto-aim target. Returns null if not found.
* @Pramas entity player
* @NativeName: Client_GrappleAutoAim_FindTargetScript
* @NativeFunctionAddress 0000000140A1D500
*/

entity function GrappleAutoAim_FindTarget(entity player)

/*
* @Breif Returns true if currently in prediction mode
* @Pramas 
* @NativeName: Client_InPrediction
* @NativeFunctionAddress 00000001408FA120
*/

bool function InPrediction()

/*
* @Breif Returns true if in prediction mode and this is the first time the command is being predicted
* @Pramas 
* @NativeName: Client_IsFirstTimePredicted
* @NativeFunctionAddress 00000001408FA0B0
*/

bool function IsFirstTimePredicted()

/*
* @Breif Get the name of the map.
* @Pramas 
* @NativeName: Client_Script_GetMapName_ScriptCmd
* @NativeFunctionAddress 00000001408FA050
*/

string function GetMapName()

/*
* @Breif Get the current server time
* @Pramas 
* @NativeName: Client_Time
* @NativeFunctionAddress 00000001408F9FB0
*/

float function Time()

/*
* @Breif Get the time spent on the last frame
* @Pramas 
* @NativeName: Client_FrameTime
* @NativeFunctionAddress 00000001408F9F10
*/

float function FrameTime()

/*
* @Breif Get the time between each tick
* @Pramas 
* @NativeName: Client_IntervalPerTick
* @NativeFunctionAddress 00000001408F9E70
*/

float function IntervalPerTick()

/*
* @Breif Get the time since startup.
* @Pramas 
* @NativeName: PlatformTime
* @NativeFunctionAddress 00000001407AC9B0
*/

float function PlatformTime()

/*
* @Breif 
* @Pramas 
* @NativeName: FrameCount
* @NativeFunctionAddress 00000001408F9DD0
*/

int function FrameCount()

/*
* @Breif Precache a weapon.
* @Pramas string weaponFile
* @NativeName: Client_PrecacheWeapon
* @NativeFunctionAddress 00000001408F9D40
*/

void function PrecacheWeapon(string weaponFile)

/*
* @Breif Precache a model.
* @Pramas asset modelFile
* @NativeName: Client_ScriptPrecacheModel
* @NativeFunctionAddress 00000001408F9CB0
*/

void function PrecacheModel(asset modelFile)

/*
* @Breif Precache a material.
* @Pramas asset
* @NativeName: Client_ScriptPrecacheMaterial
* @NativeFunctionAddress 00000001408F9C20
*/

void function PrecacheMaterial(asset)

/*
* @Breif 
* @Pramas string
* @NativeName: Client_ScriptGetModelIndex
* @NativeFunctionAddress 00000001408F9B60
*/

int function GetModelIndex(string)

/*
* @Breif True if script should send stats to devnet.
* @Pramas 
* @NativeName: ScriptShouldSendDevStats
* @NativeFunctionAddress 00000001408F9B10
*/

bool function ShouldSendDevStats()

/*
* @Breif Precache an impact effect table.
* @Pramas string tableName
* @NativeName: Client_ScriptPrecacheImpactEffectTable
* @NativeFunctionAddress 00000001408F9A50
*/

int function PrecacheImpactEffectTable(string tableName)

/*
* @Breif 
* @Pramas float posX, float posY, string text
* @NativeName: Client_Script_DebugScreenText
* @NativeFunctionAddress 00000001408F9990
*/

void function DebugScreenText(float posX, float posY, string text)

/*
* @Breif 
* @Pramas float posX, float posY, string text, vector rgb
* @NativeName: Client_Script_DebugScreenTextWithColor
* @NativeFunctionAddress 00000001408F9900
*/

void function DebugScreenTextWithColor(float posX, float posY, string text, vector rgb)

/*
* @Breif Gets the local view player
* @Pramas 
* @NativeName: ScriptGetLocalViewPlayer
* @NativeFunctionAddress 00000001408F9890
*/

entity function GetLocalViewPlayer()

/*
* @Breif Gets the local player
* @Pramas 
* @NativeName: ScriptGetLocalClientPlayer
* @NativeFunctionAddress 00000001408F9820
*/

entity function GetLocalClientPlayer()

/*
* @Breif Returns true if a call to GetLocalViewPlayer() would be valid.
* @Pramas 
* @NativeName: ScriptCanGetLocalPlayer
* @NativeFunctionAddress 00000001408F97C0
*/

bool function CanGetLocalPlayer()

/*
* @Breif Draw a debug overlay box. origin, mins, maxs, r, g, b, a, duration
* @Pramas vector, vector, vector, int, int, int, int, float
* @NativeName: Client_ScriptDebugDrawBox
* @NativeFunctionAddress 00000001408F96E0
*/

void function DebugDrawBox(vector, vector, vector, int, int, int, int, float)

/*
* @Breif Draw a debug overlay line. start, end, r, g, b, drawThroughWorld, duration
* @Pramas vector, vector, int, int, int, bool, float
* @NativeName: Client_ScriptDebugDrawLine
* @NativeFunctionAddress 00000001408F9610
*/

void function DebugDrawLine(vector, vector, int, int, int, bool, float)

/*
* @Breif Draw a debug overlay line with alpha. start, end, r, g, b, drawThroughWorld, duration
* @Pramas vector, vector, int, int, int, int, bool, float
* @NativeName: NDebugOverlay::AddLineOverlayAlpha
* @NativeFunctionAddress 00000001408F9510
*/

void function DebugDrawLineAlpha(vector, vector, int, int, int, int, bool, float)

/*
* @Breif Draw debug text. origin, text, depthTest, duration.
* @Pramas vector, string, bool, float
* @NativeName: NDebugOverlay::Text
* @NativeFunctionAddress 00000001408F94A0
*/

void function DebugDrawText(vector, string, bool, float)

/*
* @Breif Returns true if the given hit is a critical hit
* @Pramas entity, entity, int, int, int
* @NativeName: Client_Script_IsCriticalHit
* @NativeFunctionAddress 00000001408F93A0
*/

bool function IsCriticalHit(entity, entity, int, int, int)

/*
* @Breif Returns true if the given hitbox is a Rodeo hit box.
* @Pramas entity, int
* @NativeName: Client_Script_IsRodeoHitBox
* @NativeFunctionAddress 00000001408F92A0
*/

bool function IsRodeoHitBox(entity, int)

/*
* @Breif Returns true if the given entity is the size of a human.
* @Pramas entity
* @NativeName: Client_Script_IsHumanSized
* @NativeFunctionAddress 00000001408F91A0
*/

bool function IsHumanSized(entity)

/*
* @Breif 
* @Pramas table<string, string> kvPairs, string keyName
* @NativeName: SHARED_SCRIPT( Script_GetKeyValueAsAsset )
* @NativeFunctionAddress 00000001408EE670
*/

var function GetKeyValueAsAsset()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_DeathField_IsActive
* @NativeFunctionAddress 00000001408F9140
*/

bool function DeathField_IsActive()

/*
* @Breif 
* @Pramas float time
* @NativeName: Client_DeathField_GetRadiusForTime
* @NativeFunctionAddress 00000001408F9090
*/

float function DeathField_GetRadiusForTime(float time)

/*
* @Breif 
* @Pramas 
* @NativeName: Client_DeathField_GetRadiusForNow
* @NativeFunctionAddress 00000001408F8FF0
*/

float function DeathField_GetRadiusForNow()

/*
* @Breif 
* @Pramas vector point
* @NativeName: Client_DeathField_PointDistanceFromFrontier
* @NativeFunctionAddress 00000001408F8F00
*/

float function DeathField_PointDistanceFromFrontier(vector point)

/*
* @Breif Retrieves an entity (or null) based off an encoded ehandle.
* @Pramas int eHandle
* @NativeName: Client_Script_GetEntityFromEncodedEHandle
* @NativeFunctionAddress 00000001408F8E90
*/

entity function GetEntityFromEncodedEHandle(int eHandle)

/*
* @Breif 
* @Pramas entity ziplineProjectile, entity hitEntity, vector hitNormal, vector beginStationOrigin, vector beginStationAngles
* @NativeName: SHARED_SCRIPT( Zipline_FindZiplineStationSpotsForProjectile_Script )
* @NativeFunctionAddress 00000001408EE7A0
*/

var function Zipline_FindZiplineStationSpotsForProjectile()

/*
* @Breif Returns true if you are allowed to attach ziplines to the given entity
* @Pramas entity
* @NativeName: Client_Script_IsAllowedToAttachZiplines
* @NativeFunctionAddress 00000001408F8E20
*/

bool function IsAllowedToAttachZiplines(entity)

/*
* @Breif 
* @Pramas entity, vector, float, float
* @NativeName: Client_Skydive_CalculatePitch_Script
* @NativeFunctionAddress 00000001408FE580
*/

float function Skydive_CalculatePitch(entity, vector, float, float)

/*
* @Breif 
* @Pramas entity, float, float, float, float
* @NativeName: Client_Skydive_CalculateYaw_Script
* @NativeFunctionAddress 00000001408FE460
*/

float function Skydive_CalculateYaw(entity, float, float, float, float)

/*
* @Breif 
* @Pramas entity, float, float, float, float
* @NativeName: Client_Skydive_CalculateSpeed_Script
* @NativeFunctionAddress 00000001408FE340
*/

float function Skydive_CalculateSpeed(entity, float, float, float, float)

/*
* @Breif 
* @Pramas entity, float, float, float
* @NativeName: Client_Skydive_CalculateStrafeAngle_Script
* @NativeFunctionAddress 00000001408FE240
*/

float function Skydive_CalculateStrafeAngle(entity, float, float, float)

/*
* @Breif 
* @Pramas entity, float, float, float, float
* @NativeName: Client_Skydive_UpdatePoseParameterTargets_Script
* @NativeFunctionAddress 00000001408FE170
*/

void function Skydive_UpdatePoseParameterTargets(entity, float, float, float, float)

/*
* @Breif 
* @Pramas entity, float
* @NativeName: Client_Skydive_UpdatePoseParameters_Script
* @NativeFunctionAddress 00000001408FE0F0
*/

void function Skydive_UpdatePoseParameters(entity, float)

/*
* @Breif 
* @Pramas entity, float, float, float, float, float, float, float, float
* @NativeName: Client_Skydive_CalculateVelocity_Script
* @NativeFunctionAddress 00000001408FDEF0
*/

vector function Skydive_CalculateVelocity(entity, float, float, float, float, float, float, float, float)

/*
* @Breif Tries to put an entity into a position not in solid, given a desired 'end' position. Returns true if successful. If you don't have a safeStartingLocationForEntity, just set it the same as the end position. PutEntityInSafeSpot( entity, referenceEnt, movingGroundEnt, safeStartingLocationForEntity, positionAtEndOfAnimationForEntity )
* @Pramas entity, entity, entity, vector, vector
* @NativeName: PutEntityInSafeSpot_Client
* @NativeFunctionAddress 00000001408F8D50
*/

bool function PutEntityInSafeSpot(entity, entity, entity, vector, vector)

/*
* @Breif Trys to put entity in a safe spot while overriding the hull size to test with
* @Pramas entity testEnt, entity referenceEnt, entity movingGroundEnt, vector safeStartingLocationForEntity, vector positionAtEndOfAnimationForEntity, vector mins, vector maxs
* @NativeName: PutEntityInSafeSpot_Hullsize
* @NativeFunctionAddress 00000001408F8C60
*/

bool function PutEntityInSafeSpot_Hullsize(entity testEnt, entity referenceEnt, entity movingGroundEnt, vector safeStartingLocationForEntity, vector positionAtEndOfAnimationForEntity, vector mins, vector maxs)

/*
* @Breif Tries to put an entity into a position not in solid, given a desired 'end' position. Returns true if successful. If you don't have a safeStartingLocationForEntity, just set it the same as the end position. PutEntityInSafeSpot( entity, referenceEnt, movingGroundEnt, safeStartingLocationForEntity, positionAtEndOfAnimationForEntity )
* @Pramas entity, entity, entity, vector, vector
* @NativeName: PutPlayerInSafeSpot_Script
* @NativeFunctionAddress 00000001408F8B90
*/

bool function PutPlayerInSafeSpot(entity, entity, entity, vector, vector)

/*
* @Breif Tries to put a player vehicle in a safe position
* @Pramas entity vehicle, entity referenceEnt, entity movingGroundEnt, vector safeStartingLocationForEntity, vector positionAtEndOfAnimationForEntity
* @NativeName: PutPlayerVehicleInSafeSpot_Script
* @NativeFunctionAddress 00000001408F8AC0
*/

bool function PutPlayerVehicleInSafeSpot(entity vehicle, entity referenceEnt, entity movingGroundEnt, vector safeStartingLocationForEntity, vector positionAtEndOfAnimationForEntity)

/*
* @Breif Returns whether or not the last load had a detente.
* @Pramas 
* @NativeName: GetLastLoadHadDetente
* @NativeFunctionAddress 00000001408F8A70
*/

bool function GetLastLoadHadDetente()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetViewEntity
* @NativeFunctionAddress 00000001408F8A20
*/

entity function GetViewEntity()

/*
* @Breif Returns true if the passed in entity is a local view player.
* @Pramas entity
* @NativeName: ScriptIsLocalViewPlayer
* @NativeFunctionAddress 00000001408F8980
*/

bool function IsLocalViewPlayer(entity)

/*
* @Breif Returns true if the passed in entity is a local client player.
* @Pramas entity
* @NativeName: ScriptIsLocalClientPlayer
* @NativeFunctionAddress 00000001408F88E0
*/

bool function IsLocalClientPlayer(entity)

/*
* @Breif Retrieves an entity (or null) based off an encoded ehandle received from the server. Return null for lighweight entities
* @Pramas int
* @NativeName: ScriptGetHeavyWeightEntityFromEncodedEHandle
* @NativeFunctionAddress 00000001408F8830
*/

entity function GetHeavyWeightEntityFromEncodedEHandle(int)

/*
* @Breif Returns if ehandle is for a heavy weight entity
* @Pramas int
* @NativeName: ScriptIsHeavyWeightEntity
* @NativeFunctionAddress 00000001408F8780
*/

bool function IsHeavyWeightEntityFromEncodedEHandle(int)

/*
* @Breif Returns array of entities along the ray
* @Pramas vector startPos, vector endPos, float radius
* @NativeName: ScriptGetEntsAlongRay
* @NativeFunctionAddress 00000001408EEA80
*/

var function GetEntsAlongRay()

/*
* @Breif Get client entity that match a signifier. Error if there are more than one
* @Pramas string, string
* @NativeName: ScriptGetClientEnt
* @NativeFunctionAddress 00000001408F8720
*/

entity function GetClientEnt(string, string)

/*
* @Breif Get client entities that match a signifier
* @Pramas string signifier
* @NativeName: ScriptGetClientEntArrayBySignifier
* @NativeFunctionAddress 00000001408EEAC0
*/

var function GetClientEntArrayBySignifier()

/*
* @Breif Get client entities that match a signifier and targetname
* @Pramas string signifier, string targetname
* @NativeName: ScriptGetClientEntArrayClassAndTargetname
* @NativeFunctionAddress 00000001408EEB00
*/

var function GetEntArrayByClassAndTargetname()

/*
* @Breif Return current freecam pos; local player pos if not in freecam
* @Pramas 
* @NativeName: GetFreecamPos
* @NativeFunctionAddress 00000001407AF650
*/

vector function GetFreecamPos()

/*
* @Breif Return current freecam angles; local player pos if not in freecam
* @Pramas 
* @NativeName: GetFreecamAngles
* @NativeFunctionAddress 00000001408F8670
*/

vector function GetFreecamAngles()

/*
* @Breif Rebinds script callbacks
* @Pramas 
* @NativeName: ReloadClientScriptCallbacks
* @NativeFunctionAddress 00000001408F8630
*/

void function ReloadScriptCallbacks()

/*
* @Breif 
* @Pramas int loadoutIndex
* @NativeName: Client_Script_IsBTLoadoutUnlocked
* @NativeFunctionAddress 00000001407AE1A0
*/

bool function IsBTLoadoutUnlocked(int loadoutIndex)

/*
* @Breif Returns true if replays are enabled in code.
* @Pramas 
* @NativeName: Client_Script_Replay_IsEnabled
* @NativeFunctionAddress 00000001408F85D0
*/

bool function Replay_IsEnabled()

/*
* @Breif Get health/maxhealth
* @Pramas entity
* @NativeName: Client_GetHealthFrac
* @NativeFunctionAddress 00000001408F84E0
*/

float function GetHealthFrac(entity)

/*
* @Breif Get array of all players
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArray )
* @NativeFunctionAddress 00000001408EEBB0
*/

var function GetPlayerArray()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfTeam )
* @NativeFunctionAddress 00000001408EECE0
*/

var function GetPlayerArrayOfTeam()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfEnemies )
* @NativeFunctionAddress 00000001408EEE60
*/

var function GetPlayerArrayOfEnemies()

/*
* @Breif 
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArray_Alive )
* @NativeFunctionAddress 00000001408EEFE0
*/

var function GetPlayerArray_Alive()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfTeam_Alive )
* @NativeFunctionAddress 00000001408EF120
*/

var function GetPlayerArrayOfTeam_Alive()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfEnemies_Alive )
* @NativeFunctionAddress 00000001408EF2B0
*/

var function GetPlayerArrayOfEnemies_Alive()

/*
* @Breif 
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArray_Pilots )
* @NativeFunctionAddress 00000001408EF440
*/

var function GetPlayerArray_Pilots()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfTeam_Pilots )
* @NativeFunctionAddress 00000001408EF5A0
*/

var function GetPlayerArrayOfTeam_Pilots()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfEnemies_Pilots )
* @NativeFunctionAddress 00000001408EF5E0
*/

var function GetPlayerArrayOfEnemies_Pilots()

/*
* @Breif 
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArray_AlivePilots )
* @NativeFunctionAddress 00000001408EF780
*/

var function GetPlayerArray_AlivePilots()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfTeam_AlivePilots )
* @NativeFunctionAddress 00000001408EF8F0
*/

var function GetPlayerArrayOfTeam_AlivePilots()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayOfEnemies_AlivePilots )
* @NativeFunctionAddress 00000001408EF930
*/

var function GetPlayerArrayOfEnemies_AlivePilots()

/*
* @Breif 
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetPlayerDecoyArray )
* @NativeFunctionAddress 00000001408EFAE0
*/

var function GetPlayerDecoyArray()

/*
* @Breif 
* @Pramas vector pos, float distToCheck, bool traceToPos, bool sortByDistToPos
* @NativeName: SHARED_SCRIPT( Script_GetSurvivalLootNearbyPos )
* @NativeFunctionAddress 00000001408EFBE0
*/

var function GetSurvivalLootNearbyPos()

/*
* @Breif 
* @Pramas entity player, float distToCheck, bool traceToPlayer, bool sortByDistToPlayer
* @NativeName: SHARED_SCRIPT( Script_GetSurvivalLootNearbyPlayer )
* @NativeFunctionAddress 00000001408EFC70
*/

var function GetSurvivalLootNearbyPlayer()

/*
* @Breif Get array of all titans
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetTitanArray )
* @NativeFunctionAddress 00000001408EFD30
*/

var function GetTitanArray()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetTitanArrayOfTeam )
* @NativeFunctionAddress 00000001408EFE70
*/

var function GetTitanArrayOfTeam()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( Script_GetTitanArrayOfEnemies )
* @NativeFunctionAddress 00000001408EFEE0
*/

var function GetTitanArrayOfEnemies()

/*
* @Breif Get array of all titan souls
* @Pramas 
* @NativeName: SHARED_SCRIPT( ScriptGetTitanSoulArray )
* @NativeFunctionAddress 00000001408EFF50
*/

var function GetTitanSoulArray()

/*
* @Breif 
* @Pramas int team
* @NativeName: Client_Script_GetTitanCountForTeam
* @NativeFunctionAddress 00000001408F8430
*/

int function GetTitanCountForTeam(int team)

/*
* @Breif Get array of all players by class, team, within dist. team -1 for any team, 'any' for any class, otherwise 'titan' or 'pilot', -1 for any dist
* @Pramas string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist
* @NativeName: SHARED_SCRIPT( Script_GetPlayerArrayEx )
* @NativeFunctionAddress 00000001408F0090
*/

var function GetPlayerArrayEx()

/*
* @Breif Get the size of a team
* @Pramas 
* @NativeName: Client_Script_GetMaxTeamPlayers
* @NativeFunctionAddress 00000001408F8390
*/

int function GetMaxTeamPlayers()

/*
* @Breif Get the number of players in a team
* @Pramas int
* @NativeName: Client_GetTeamPlayerCount
* @NativeFunctionAddress 00000001408F82A0
*/

int function GetTeamPlayerCount(int)

/*
* @Breif 
* @Pramas entity ent
* @NativeName: Client_GetSurfacePropForEntity
* @NativeFunctionAddress 00000001408F81F0
*/

int function GetSurfacePropForEntity(entity ent)

/*
* @Breif Find and returns the entity with the given entity index.
* @Pramas int
* @NativeName: Client_ScriptGetEntByIndex
* @NativeFunctionAddress 00000001408F8180
*/

entity function GetEntByIndex(int)

/*
* @Breif Get array of all NPCs
* @Pramas 
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArray )
* @NativeFunctionAddress 00000001408F00D0
*/

var function GetNPCArray()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayOfTeam )
* @NativeFunctionAddress 00000001408F0220
*/

var function GetNPCArrayOfTeam()

/*
* @Breif 
* @Pramas int team
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayOfEnemies )
* @NativeFunctionAddress 00000001408F0280
*/

var function GetNPCArrayOfEnemies()

/*
* @Breif Get array of all NPCs by class, team, within dist. team -1 for any team, 'any' for any class, -1 for any dist
* @Pramas string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayEx )
* @NativeFunctionAddress 00000001408F02E0
*/

var function GetNPCArrayEx()

/*
* @Breif Get array of all NPCs by class, team, and subclass (array), within dist. team -1 for any team, 'any' for any class, -1 for any dist
* @Pramas string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist, array< int > subclasses
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayWithSubclassEx )
* @NativeFunctionAddress 00000001408F0320
*/

var function GetNPCArrayWithSubclassEx()

/*
* @Breif Get array of all NPCs of class
* @Pramas string classname
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayByClass )
* @NativeFunctionAddress 00000001408F0360
*/

var function GetNPCArrayByClass()

/*
* @Breif Get array of all NPCs of class and subclass
* @Pramas string classname, array< int > subclasses
* @NativeName: SHARED_SCRIPT( ScriptGetNPCArrayByClassAndSubclass )
* @NativeFunctionAddress 00000001408F03A0
*/

var function GetNPCArrayByClassAndSubclass()

/*
* @Breif Get array of all projectiles
* @Pramas 
* @NativeName: SHARED_SCRIPT( ScriptGetProjectileArray )
* @NativeFunctionAddress 00000001408F03E0
*/

var function GetProjectileArray()

/*
* @Breif Get array of all projectiles by class, team, within dist. team -1 for any team, 'any' for any class, -1 for any dist
* @Pramas string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist
* @NativeName: SHARED_SCRIPT( ScriptGetProjectileArrayEx )
* @NativeFunctionAddress 00000001408F0520
*/

var function GetProjectileArrayEx()

/*
* @Breif Returns the best window hint. Start position, clearance radius, clearance height, direction, distance, gravity, search margin, ignore ent
* @Pramas vector, float, float, vector, float, float, float, entity
* @NativeName: Client_Script_GetWindowHint
* @NativeFunctionAddress 00000001408F8070
*/

entity function GetWindowHint(vector, float, float, vector, float, float, float, entity)

/*
* @Breif Returns true if building cube maps.
* @Pramas 
* @NativeName: Client_Script_BuildingCubeMaps
* @NativeFunctionAddress 00000001408F7FF0
*/

bool function BuildingCubeMaps()

/*
* @Breif Returns value of IsTestMap from the level's script list .rson file
* @Pramas 
* @NativeName: Client_Script_IsTestMap
* @NativeFunctionAddress 00000001408F7F50
*/

bool function IsTestMap()

/*
* @Breif Given (player, r, g, b, a, fadeTime, fadeHold, FFADE_ flags), fade the player's screen.
* @Pramas entity, int, int, int, int, float, float, int
* @NativeName: Client_ScriptScreenFade
* @NativeFunctionAddress 00000001408F7E20
*/

void function ScreenFade(entity, int, int, int, int, float, float, int)

/*
* @Breif Returns list of files in scripts/model_viewer_list.txt, which is written by reRun
* @Pramas 
* @NativeName: SHARED_SCRIPT( Script_GetModelViewerList )
* @NativeFunctionAddress 00000001408F08C0
*/

var function GetModelViewerList()

/*
* @Breif Play a first-person animation with the grapple (for when it attaches to something).
* @Pramas entity, string
* @NativeName: ScriptPlayGrappleAttachedAnimation
* @NativeFunctionAddress 00000001408F7DB0
*/

void function PlayGrappleAttachedAnimation(entity, string)

/*
* @Breif Returns the current visibility state of the specified visGroup
* @Pramas int
* @NativeName: IsVisGroupVisible
* @NativeFunctionAddress 00000001409BE8E0
*/

bool function IsVisGroupVisible(int)

/*
* @Breif Set the specified visGroup to the specified state.
* @Pramas int, bool
* @NativeName: SetVisGroupVisible
* @NativeFunctionAddress 00000001409BE860
*/

void function SetVisGroupVisible(int, bool)

/*
* @Breif Returns a new visGroup handle.
* @Pramas 
* @NativeName: CreateVisGroup
* @NativeFunctionAddress 00000001409BE790
*/

int function CreateVisGroup()

/*
* @Breif Returns the clients desired screen fade settings
* @Pramas 
* @NativeName: GetFadeParams
* @NativeFunctionAddress 00000001409BE6E0
*/

var function GetFadeParams()

/*
* @Breif Begin registration of remote functions and script network vars.
* @Pramas 
* @NativeName: Script_Remote_BeginRegisteringFunctions_Client
* @NativeFunctionAddress 00000001409BE6A0
*/

void function Remote_BeginRegisteringFunctions()

/*
* @Breif Begin registration of remote functions and script network vars for the level script.
* @Pramas 
* @NativeName: Script_Remote_BeginRegisteringLevelFunctions_Client
* @NativeFunctionAddress 00000001409BE610
*/

void function Remote_BeginRegisteringLevelFunctions()

/*
* @Breif Register a function name to be used in remote calls.
* @Pramas string
* @NativeName: Script_Remote_RegisterUntypedFunction_Client
* @NativeFunctionAddress 00000001409BE5C0
*/

void function Remote_RegisterUntypedFunction_deprecated(string)

/*
* @Breif Register a function name to be used in remote calls. Specify argument types with "bool", "int", "float", "vector", and "entity". "int" must be followed by min, max + 1. "float" and "vector" must be followed by min, max, bit count. The value will be rounded to the nearest 1/2^(bit count) fraction of the specified range. Use 32 to send perfectly precise values.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterUIFunction_Client
* @NativeFunctionAddress 00000001409B1EB0
*/

var function Remote_RegisterUIFunction()

/*
* @Breif Same as Remote_RegisterUIFunction, but the function is not required to exist. Useful for dev-only functions.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterUIFunction_Optional_Client
* @NativeFunctionAddress 00000001409B1EF0
*/

var function Remote_RegisterUIFunction_Optional()

/*
* @Breif Register a function name to be used in remote calls. Specify argument types with "bool", "int", "float", "vector", and "entity". "int" must be followed by min, max + 1. "float" and "vector" must be followed by min, max, bit count. The value will be rounded to the nearest 1/2^(bit count) fraction of the specified range. Use 32 to send perfectly precise values.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterClientFunction_Client
* @NativeFunctionAddress 00000001409B1F30
*/

var function Remote_RegisterClientFunction()

/*
* @Breif Same as Remote_RegisterClientFunction, but the function is not required to exist. Useful for dev-only functions.
* @Pramas string functionName, ...
* @NativeName: Script_Remote_RegisterClientFunction_Optional_Client
* @NativeFunctionAddress 00000001409B1F70
*/

var function Remote_RegisterClientFunction_Optional()

/*
* @Breif Finish registration of remote functions and script network vars.
* @Pramas 
* @NativeName: Script_Remote_EndRegisteringFunctions_Client
* @NativeFunctionAddress 00000001409BE530
*/

void function Remote_EndRegisteringFunctions()

/*
* @Breif Finish registration of remote functions and script network vars for the level script.
* @Pramas 
* @NativeName: Script_Remote_EndRegisteringLevelFunctions_Client
* @NativeFunctionAddress 00000001409BE4A0
*/

void function Remote_EndRegisteringLevelFunctions()

/*
* @Breif Destroy a hud element.
* @Pramas var
* @NativeName: Hud_Destroy
* @NativeFunctionAddress 00000001409BE420
*/

void function Hud_Destroy(var)

/*
* @Breif Reveal a hud element.
* @Pramas var
* @NativeName: Hud_Show
* @NativeFunctionAddress 00000001409BE3B0
*/

void function Hud_Show(var)

/*
* @Breif Hide a hud element.
* @Pramas var
* @NativeName: Hud_Hide
* @NativeFunctionAddress 00000001409BE340
*/

void function Hud_Hide(var)

/*
* @Breif Set visibility of a hud element.
* @Pramas var, bool
* @NativeName: Hud_SetVisible
* @NativeFunctionAddress 00000001409BE2C0
*/

void function Hud_SetVisible(var, bool)

/*
* @Breif Refresh the visibility a hud element.
* @Pramas var
* @NativeName: Hud_UpdateVisibility
* @NativeFunctionAddress 00000001409BE240
*/

void function Hud_UpdateVisibility(var)

/*
* @Breif Returns whether the given hud element is currently visible.
* @Pramas var
* @NativeName: Hud_IsVisible
* @NativeFunctionAddress 00000001409BE1A0
*/

bool function Hud_IsVisible(var)

/*
* @Breif Returns whether the given hud element is above the screen blur effect
* @Pramas var
* @NativeName: Hud_IsAboveBlur
* @NativeFunctionAddress 00000001409BE100
*/

bool function Hud_IsAboveBlur(var)

/*
* @Breif Tells a hud element to draw before or after the screen blur effect
* @Pramas var, bool
* @NativeName: Hud_SetAboveBlur
* @NativeFunctionAddress 00000001409BE070
*/

void function Hud_SetAboveBlur(var, bool)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetVisGroupID
* @NativeFunctionAddress 00000001409BDFE0
*/

void function Hud_SetVisGroupID(var, int)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetVisGroupID
* @NativeFunctionAddress 00000001409BDF10
*/

int function Hud_GetVisGroupID(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_GetHudName
* @NativeFunctionAddress 00000001409BDE70
*/

string function Hud_GetHudName(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_GetScriptID
* @NativeFunctionAddress 00000001409BDDF0
*/

string function Hud_GetScriptID(var)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas var, string, int, float
* @NativeName: Hud_Script_SetAutoText
* @NativeFunctionAddress 00000001409BDD10
*/

void function Hud_SetAutoText(var, string, int, float)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas var, string, string, string, int, float
* @NativeName: Hud_Script_SetAutoTextWithAlternates
* @NativeFunctionAddress 00000001409BDC20
*/

void function Hud_SetAutoTextWithAlternates(var, string, string, string, int, float)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas var, string, int, vector
* @NativeName: Hud_Script_SetAutoTextVector
* @NativeFunctionAddress 00000001409BDB90
*/

void function Hud_SetAutoTextVector(var, string, int, vector)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas var, string, int, entity
* @NativeName: Hud_Script_SetAutoTextEntity
* @NativeFunctionAddress 00000001409BDAE0
*/

void function Hud_SetAutoTextEntity(var, string, int, entity)

/*
* @Breif Set the auto text settings for this HUD element. ( localization token, HATT type, start value, end value, transition time );
* @Pramas var, string, float, float, float
* @NativeName: Hud_Script_SetAutoTextCountTo
* @NativeFunctionAddress 00000001409BDA20
*/

void function Hud_SetAutoTextCountTo(var, string, float, float, float)

/*
* @Breif Enable the auto text updating
* @Pramas var
* @NativeName: Hud_Script_EnableAutoText
* @NativeFunctionAddress 00000001409BD990
*/

void function Hud_EnableAutoText(var)

/*
* @Breif Disable the auto text updating
* @Pramas var
* @NativeName: Hud_Script_DisableAutoText
* @NativeFunctionAddress 00000001409BD900
*/

void function Hud_DisableAutoText(var)

/*
* @Breif Returns true if an auto text has been set for it and it is enabled
* @Pramas var
* @NativeName: Hud_Script_IsAutoText
* @NativeFunctionAddress 00000001409BD860
*/

bool function Hud_IsAutoText(var)

/*
* @Breif Enable replacing key bindings with the actual key
* @Pramas var
* @NativeName: Hud_Script_EnableKeyBindingIcons
* @NativeFunctionAddress 00000001409BD7F0
*/

void function Hud_EnableKeyBindingIcons(var)

/*
* @Breif Disable replacing key bindings with the actual key
* @Pramas var
* @NativeName: Hud_Script_DisableKeyBindingIcons
* @NativeFunctionAddress 00000001409BD780
*/

void function Hud_DisableKeyBindingIcons(var)

/*
* @Breif Scale key binding icon sizes by this amount
* @Pramas var, float
* @NativeName: Hud_Script_SetKeyBindingIconScale
* @NativeFunctionAddress 00000001409BD6E0
*/

void function Hud_SetKeyBindingIconScale(var, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetWidth
* @NativeFunctionAddress 00000001409BD630
*/

int function Hud_GetWidth(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetHeight
* @NativeFunctionAddress 00000001409BD580
*/

int function Hud_GetHeight(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetX
* @NativeFunctionAddress 00000001409BD4D0
*/

int function Hud_GetX(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetY
* @NativeFunctionAddress 00000001409BD420
*/

int function Hud_GetY(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetAbsX
* @NativeFunctionAddress 00000001409BD370
*/

int function Hud_GetAbsX(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetAbsY
* @NativeFunctionAddress 00000001409BD2C0
*/

int function Hud_GetAbsY(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetAbsPos
* @NativeFunctionAddress 00000001409BD100
*/

var function Hud_GetAbsPos(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetParentRelativePos
* @NativeFunctionAddress 00000001409BCF40
*/

var function Hud_GetParentRelativePos(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseWidth
* @NativeFunctionAddress 00000001409BCE60
*/

int function Hud_GetBaseWidth(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseHeight
* @NativeFunctionAddress 00000001409BCD80
*/

int function Hud_GetBaseHeight(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBasePos
* @NativeFunctionAddress 00000001409BCBE0
*/

var function Hud_GetBasePos(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseSize
* @NativeFunctionAddress 00000001409BCA40
*/

var function Hud_GetBaseSize(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseX
* @NativeFunctionAddress 00000001409BC960
*/

int function Hud_GetBaseX(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseY
* @NativeFunctionAddress 00000001409BC880
*/

int function Hud_GetBaseY(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetClampToScreen
* @NativeFunctionAddress 00000001409BC7D0
*/

void function Hud_SetClampToScreen(var, int)

/*
* @Breif 
* @Pramas var, float, float
* @NativeName: Hud_SetClampBounds
* @NativeFunctionAddress 00000001409BC710
*/

void function Hud_SetClampBounds(var, float, float)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetWorldSpaceScale
* @NativeFunctionAddress 00000001409BC610
*/

void function Hud_SetWorldSpaceScale(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetADSFade
* @NativeFunctionAddress 00000001409BC520
*/

void function Hud_SetADSFade(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetDistanceFade
* @NativeFunctionAddress 00000001409BC430
*/

void function Hud_SetDistanceFade(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetFOVFade
* @NativeFunctionAddress 00000001409BC340
*/

void function Hud_SetFOVFade(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, float, float, float
* @NativeName: Hud_SetPulsate
* @NativeFunctionAddress 00000001409BC270
*/

void function Hud_SetPulsate(var, float, float, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ClearPulsate
* @NativeFunctionAddress 00000001409BC1E0
*/

void function Hud_ClearPulsate(var)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetOffscreenArrow
* @NativeFunctionAddress 00000001409BC150
*/

void function Hud_SetOffscreenArrow(var, bool)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsOnScreen
* @NativeFunctionAddress 00000001409BC0C0
*/

bool function Hud_IsOnScreen(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsLabel
* @NativeFunctionAddress 00000001409BC020
*/

bool function Hud_IsLabel(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsRuiPanel
* @NativeFunctionAddress 00000001409BBF80
*/

bool function Hud_IsRuiPanel(var)

/*
* @Breif 
* @Pramas var, var
* @NativeName: Hud_SetNavUp
* @NativeFunctionAddress 00000001409BBEF0
*/

void function Hud_SetNavUp(var, var)

/*
* @Breif 
* @Pramas var, var
* @NativeName: Hud_SetNavDown
* @NativeFunctionAddress 00000001409BBE60
*/

void function Hud_SetNavDown(var, var)

/*
* @Breif 
* @Pramas var, var
* @NativeName: Hud_SetNavLeft
* @NativeFunctionAddress 00000001409BBDD0
*/

void function Hud_SetNavLeft(var, var)

/*
* @Breif 
* @Pramas var, var
* @NativeName: Hud_SetNavRight
* @NativeFunctionAddress 00000001409BBD40
*/

void function Hud_SetNavRight(var, var)

/*
* @Breif 
* @Pramas var, int, int
* @NativeName: Hud_SetBaseSize
* @NativeFunctionAddress 00000001409BBC70
*/

void function Hud_SetBaseSize(var, int, int)

/*
* @Breif 
* @Pramas var, string, float
* @NativeName: Hud_SetTextTypeWriter
* @NativeFunctionAddress 00000001409BBBB0
*/

void function Hud_SetTextTypeWriter(var, string, float)

/*
* @Breif 
* @Pramas var, int, int
* @NativeName: Hud_SetBasePos
* @NativeFunctionAddress 00000001409BBAE0
*/

void function Hud_SetBasePos(var, int, int)

/*
* @Breif 
* @Pramas var, int, int, int, int
* @NativeName: Hud_SetBaseColor
* @NativeFunctionAddress 00000001409BB9E0
*/

void function Hud_SetBaseColor(var, int, int, int, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetX
* @NativeFunctionAddress 00000001409BB940
*/

void function Hud_SetX(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetY
* @NativeFunctionAddress 00000001409BB8A0
*/

void function Hud_SetY(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_OffsetX
* @NativeFunctionAddress 00000001409BB800
*/

void function Hud_OffsetX(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_OffsetY
* @NativeFunctionAddress 00000001409BB760
*/

void function Hud_OffsetY(var, int)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseColor
* @NativeFunctionAddress 00000001409BB580
*/

var function Hud_GetBaseColor(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBaseAlpha
* @NativeFunctionAddress 00000001409BB4A0
*/

int function Hud_GetBaseAlpha(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetCursorPriority
* @NativeFunctionAddress 00000001409BB3F0
*/

int function Hud_GetCursorPriority(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetCursorPriority
* @NativeFunctionAddress 00000001409BB370
*/

void function Hud_SetCursorPriority(var, int)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetCursorVelocityModifier
* @NativeFunctionAddress 00000001409BB2E0
*/

void function Hud_SetCursorVelocityModifier(var, float)

/*
* @Breif 
* @Pramas var, float, float
* @NativeName: Hud_SetCounterscrollScale
* @NativeFunctionAddress 00000001409BB240
*/

void function Hud_SetCounterscrollScale(var, float, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetBarProgress
* @NativeFunctionAddress 00000001409BB1A0
*/

void function Hud_SetBarProgress(var, float)

/*
* @Breif 
* @Pramas var, float, float
* @NativeName: Hud_SetBarProgressAndRate
* @NativeFunctionAddress 00000001409BB0F0
*/

void function Hud_SetBarProgressAndRate(var, float, float)

/*
* @Breif 
* @Pramas var, float, float, float
* @NativeName: Hud_SetBarProgressOverTime
* @NativeFunctionAddress 00000001409BB020
*/

void function Hud_SetBarProgressOverTime(var, float, float, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetBarProgress
* @NativeFunctionAddress 00000001409BAF70
*/

float function Hud_GetBarProgress(var)

/*
* @Breif 
* @Pramas var, int, int
* @NativeName: Hud_SetBarSegmentInfo
* @NativeFunctionAddress 00000001409BAEC0
*/

void function Hud_SetBarSegmentInfo(var, int, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarInset
* @NativeFunctionAddress 00000001409BAE20
*/

void function Hud_SetBarInset(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarMargin
* @NativeFunctionAddress 00000001409BAD80
*/

void function Hud_SetBarMargin(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarProgressDirection
* @NativeFunctionAddress 00000001409BACE0
*/

void function Hud_SetBarProgressDirection(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarSegmentFill
* @NativeFunctionAddress 00000001409BAC40
*/

void function Hud_SetBarSegmentFill(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarProgressSource
* @NativeFunctionAddress 00000001409BABA0
*/

void function Hud_SetBarProgressSource(var, int)

/*
* @Breif 
* @Pramas var, entity
* @NativeName: Hud_SetBarProgressSourceEntity
* @NativeFunctionAddress 00000001409BAB00
*/

void function Hud_SetBarProgressSourceEntity(var, entity)

/*
* @Breif 
* @Pramas var, float, float, float, float
* @NativeName: Hud_SetBarProgressRemap
* @NativeFunctionAddress 00000001409BAA10
*/

void function Hud_SetBarProgressRemap(var, float, float, float, float)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarChangeStyle
* @NativeFunctionAddress 00000001409BA970
*/

void function Hud_SetBarChangeStyle(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBarChangeDir
* @NativeFunctionAddress 00000001409BA8D0
*/

void function Hud_SetBarChangeDir(var, int)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetBarChangeDuration
* @NativeFunctionAddress 00000001409BA830
*/

void function Hud_SetBarChangeDuration(var, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ReturnToBaseColor
* @NativeFunctionAddress 00000001409BA7C0
*/

void function Hud_ReturnToBaseColor(var)

/*
* @Breif Sets the color of an element with components (red, green, blue, alpha); given as 0-255 values.
* @Pramas 
* @NativeName: Hud_Script_SetColor
* @NativeFunctionAddress 00000001409B2D20
*/

void function Hud_SetColor(var, var, var, var, var, var)

/*
* @Breif Sets the background color of an element with components (red, green, blue, alpha); given as 0-255 values.
* @Pramas 
* @NativeName: Hud_Script_SetColorBG
* @NativeFunctionAddress 00000001409B2E60
*/

void function Hud_SetColorBG(var, var, var, var, var, var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_Script_SetAlpha
* @NativeFunctionAddress 00000001409BA720
*/

void function Hud_SetAlpha(var, int)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_Script_SetPanelAlpha
* @NativeFunctionAddress 00000001409BA680
*/

void function Hud_SetPanelAlpha(var, int)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_GetPanelAlpha
* @NativeFunctionAddress 00000001409BA5A0
*/

int function Hud_GetPanelAlpha(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetAlpha
* @NativeFunctionAddress 00000001409BA4F0
*/

int function Hud_GetAlpha(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetBaseAlpha
* @NativeFunctionAddress 00000001409BA470
*/

void function Hud_SetBaseAlpha(var, int)

/*
* @Breif Get the estimated drawn width of this label.
* @Pramas var
* @NativeName: Hud_GetTextWidth
* @NativeFunctionAddress 00000001409BA3C0
*/

int function Hud_GetTextWidth(var)

/*
* @Breif 
* @Pramas var, entity, vector, float, float
* @NativeName: Hud_Script_SetEntity
* @NativeFunctionAddress 00000001409BA2D0
*/

void function Hud_SetEntity(var, entity, vector, float, float)

/*
* @Breif 
* @Pramas var, entity, vector, float, float
* @NativeName: Hud_Script_SetEntityOverhead
* @NativeFunctionAddress 00000001409BA1E0
*/

void function Hud_SetEntityOverhead(var, entity, vector, float, float)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetHideOnEntityOverheadCloak
* @NativeFunctionAddress 00000001409BA150
*/

void function Hud_SetHideOnEntityOverheadCloak(var, bool)

/*
* @Breif 
* @Pramas var, vector
* @NativeName: Hud_SetOrigin
* @NativeFunctionAddress 00000001409BA0C0
*/

void function Hud_SetOrigin(var, vector)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ClearWorldOrigin
* @NativeFunctionAddress 00000001409BA030
*/

void function Hud_ClearWorldOrigin(var)

/*
* @Breif Adds a hint to the hint system with a max of 3 string args to the hint.
* @Pramas float, float, asset, string, [param1, param2, param3...]
* @NativeName: AddPlayerHint
* @NativeFunctionAddress 00000001409B3160
*/

void function AddPlayerHint(var, var, var, var, var, var)

/*
* @Breif 
* @Pramas string
* @NativeName: HidePlayerHint
* @NativeFunctionAddress 00000001409B9F70
*/

void function HidePlayerHint(string)

/*
* @Breif 
* @Pramas var, float, float
* @NativeName: Hud_SetScale
* @NativeFunctionAddress 00000001409B9EC0
*/

void function Hud_SetScale(var, float, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetScaleX
* @NativeFunctionAddress 00000001409B9E20
*/

void function Hud_SetScaleX(var, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SetScaleY
* @NativeFunctionAddress 00000001409B9D80
*/

void function Hud_SetScaleY(var, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetScaleX
* @NativeFunctionAddress 00000001409B9CA0
*/

float function Hud_GetScaleX(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetScaleY
* @NativeFunctionAddress 00000001409B9BC0
*/

float function Hud_GetScaleY(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ReturnToBasePos
* @NativeFunctionAddress 00000001409B9B40
*/

void function Hud_ReturnToBasePos(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_ReturnToBaseSize
* @NativeFunctionAddress 00000001409B9AC0
*/

void function Hud_ReturnToBaseSize(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsSelected
* @NativeFunctionAddress 00000001409B9A50
*/

bool function Hud_IsSelected(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsLocked
* @NativeFunctionAddress 00000001409B99C0
*/

bool function Hud_IsLocked(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_IsNew
* @NativeFunctionAddress 00000001409B9930
*/

bool function Hud_IsNew(var)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetSelected
* @NativeFunctionAddress 00000001409B98A0
*/

void function Hud_SetSelected(var, bool)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetLocked
* @NativeFunctionAddress 00000001409B9810
*/

void function Hud_SetLocked(var, bool)

/*
* @Breif 
* @Pramas var, bool
* @NativeName: Hud_SetNew
* @NativeFunctionAddress 00000001409B9780
*/

void function Hud_SetNew(var, bool)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetListSize
* @NativeFunctionAddress 00000001409B96D0
*/

int function Hud_GetListSize(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_GetListItem
* @NativeFunctionAddress 00000001409B9620
*/

var function Hud_GetListItem(var, int)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetListSelectedItem
* @NativeFunctionAddress 00000001409B9590
*/

var function Hud_GetListSelectedItem(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetListPanelSelectedItem
* @NativeFunctionAddress 00000001409B94F0
*/

string function Hud_GetListPanelSelectedItem(var)

/*
* @Breif Returns the name of the row that is currently selected in a ListPanel
* @Pramas var
* @NativeName: Hud_GetListPanelSelectionRowNum
* @NativeFunctionAddress 00000001409B9440
*/

int function Hud_GetListPanelSelectionRowNum(var)

/*
* @Breif Returns the number of rows that are in a ListPanel
* @Pramas var
* @NativeName: Hud_GetListPanelRowCount
* @NativeFunctionAddress 00000001409B9390
*/

int function Hud_GetListPanelRowCount(var)

/*
* @Breif Sets the pin sibling by name
* @Pramas var, string
* @NativeName: Hud_SetPinSibling
* @NativeFunctionAddress 00000001409B92E0
*/

void function Hud_SetPinSibling(var, string)

/*
* @Breif 
* @Pramas x, y, duration, [interpolator]
* @NativeName: Hud_Script_MoveOverTime
* @NativeFunctionAddress 00000001409B3240
*/

void function Hud_MoveOverTime(var, var, number, number, number, int)

/*
* @Breif 
* @Pramas r, g, b, a, duration, [interpolator]
* @NativeName: Hud_Script_ColorOverTime
* @NativeFunctionAddress 00000001409B3380
*/

void function Hud_ColorOverTime(var, var, int, int, int, int, number, int)

/*
* @Breif 
* @Pramas wScale, hScale, duration, [interpolator]
* @NativeName: Hud_Script_ScaleOverTime
* @NativeFunctionAddress 00000001409B34C0
*/

void function Hud_ScaleOverTime(var, var, number, number, number, int)

/*
* @Breif 
* @Pramas x, y, duration, [interpolator]
* @NativeName: Hud_Script_OffsetOverTime
* @NativeFunctionAddress 00000001409B3600
*/

void function Hud_OffsetOverTime(var, var, number, number, number, int)

/*
* @Breif 
* @Pramas a, duration, [interpolator]
* @NativeName: Hud_Script_FadeOverTime
* @NativeFunctionAddress 00000001409B3740
*/

void function Hud_FadeOverTime(var, var, int, number, int)

/*
* @Breif 
* @Pramas var, float, int
* @NativeName: Hud_ReturnToBasePosOverTime
* @NativeFunctionAddress 00000001409B9220
*/

void function Hud_ReturnToBasePosOverTime(var, float, int)

/*
* @Breif 
* @Pramas var, float, int
* @NativeName: Hud_ReturnToBaseScaleOverTime
* @NativeFunctionAddress 00000001409B9160
*/

void function Hud_ReturnToBaseScaleOverTime(var, float, int)

/*
* @Breif 
* @Pramas x, duration, [interpolator]
* @NativeName: Hud_Script_SetXOverTime
* @NativeFunctionAddress 00000001409B3950
*/

void function Hud_SetXOverTime(var, var, number, number, int)

/*
* @Breif 
* @Pramas y, duration, [interpolator]
* @NativeName: Hud_Script_SetYOverTime
* @NativeFunctionAddress 00000001409B3A90
*/

void function Hud_SetYOverTime(var, var, number, number, int)

/*
* @Breif 
* @Pramas x, duration, [interpolator]
* @NativeName: Hud_Script_OffsetXOverTime
* @NativeFunctionAddress 00000001409B3BD0
*/

void function Hud_OffsetXOverTime(var, var, number, number, int)

/*
* @Breif 
* @Pramas y, duration, [interpolator]
* @NativeName: Hud_Script_OffsetYOverTime
* @NativeFunctionAddress 00000001409B3D10
*/

void function Hud_OffsetYOverTime(var, var, number, number, int)

/*
* @Breif 
* @Pramas duration, [interpolator]
* @NativeName: Hud_Script_HideOverTime
* @NativeFunctionAddress 00000001409B3E50
*/

void function Hud_HideOverTime(var, var, number, int)

/*
* @Breif 
* @Pramas r, g, b, a, duration, delay, [interpolator]
* @NativeName: Hud_Script_ColorOverTimeDelayed
* @NativeFunctionAddress 00000001409B3F90
*/

void function Hud_ColorOverTimeDelayed(var, var, int, int, int, int, number, number, int)

/*
* @Breif 
* @Pramas a, duration, delay, [interpolator]
* @NativeName: Hud_Script_FadeOverTimeDelayed
* @NativeFunctionAddress 00000001409B40D0
*/

void function Hud_FadeOverTimeDelayed(var, var, int, number, number, int)

/*
* @Breif 
* @Pramas var, string
* @NativeName: Hud_Script_RunAnimationScript
* @NativeFunctionAddress 00000001409B90E0
*/

void function Hud_RunAnimationScript(var, string)

/*
* @Breif Set the text of a label element. Optional parameters for localized-string '%s1'-type format vars.
* @Pramas index, string, [param1, param2, param3...]
* @NativeName: Hud_Script_SetText
* @NativeFunctionAddress 00000001409B4210
*/

void function Hud_SetText(var, var, string)

/*
* @Breif Sets the drawtext rui of an element that renders text (only supports RichText element at the moment).
* @Pramas var, string
* @NativeName: Hud_SetDrawTextRui
* @NativeFunctionAddress 00000001409B9060
*/

void function Hud_SetDrawTextRui(var, string)

/*
* @Breif Set the image of an imagePanel element.
* @Pramas var hudelem, asset
* @NativeName: Hud_SetImage
* @NativeFunctionAddress 00000001409B8FC0
*/

void function Hud_SetImage(var hudelem, asset)

/*
* @Breif Sets an image in the label on the left side, or right side if the second parameter is true.
* @Pramas var hudelem, asset, bool rightSide
* @NativeName: Hud_SetLabelImage
* @NativeFunctionAddress 00000001409B8F10
*/

void function Hud_SetLabelImage(var hudelem, asset, bool rightSide)

/*
* @Breif 
* @Pramas var, string, float, float, float, int, float
* @NativeName: Hud_RunAnimationCommand
* @NativeFunctionAddress 00000001409B8DF0
*/

void function Hud_RunAnimationCommand(var, string, float, float, float, int, float)

/*
* @Breif Gets the color of an element as an array with four elements (red, green, blue, alpha);.
* @Pramas var
* @NativeName: Hud_GetColor
* @NativeFunctionAddress 00000001409B8CF0
*/

var function Hud_GetColor(var)

/*
* @Breif Get the position of the given hud element, as an array with two elements.
* @Pramas var
* @NativeName: Hud_GetPos
* @NativeFunctionAddress 00000001409B8B30
*/

var function Hud_GetPos(var)

/*
* @Breif Set the position of the given hud element.
* @Pramas var, int, int
* @NativeName: Hud_SetPos
* @NativeFunctionAddress 00000001409B8A80
*/

void function Hud_SetPos(var, int, int)

/*
* @Breif Set the Z position of the given hud element.
* @Pramas var, int
* @NativeName: Hud_SetZ
* @NativeFunctionAddress 00000001409B8A00
*/

void function Hud_SetZ(var, int)

/*
* @Breif Get the size of the given hud element, as an array with two elements.
* @Pramas var
* @NativeName: Hud_GetSize
* @NativeFunctionAddress 00000001409B8840
*/

var function Hud_GetSize(var)

/*
* @Breif Set the size of the given hud element.
* @Pramas var, int, int
* @NativeName: Hud_SetSize
* @NativeFunctionAddress 00000001409B8790
*/

void function Hud_SetSize(var, int, int)

/*
* @Breif Set the width of the given hud element.
* @Pramas var, int
* @NativeName: Hud_SetWidth
* @NativeFunctionAddress 00000001409B8710
*/

void function Hud_SetWidth(var, int)

/*
* @Breif Set the height of the given hud element.
* @Pramas var, int
* @NativeName: Hud_SetHeight
* @NativeFunctionAddress 00000001409B8690
*/

void function Hud_SetHeight(var, int)

/*
* @Breif Get the rotation of the given hud element.
* @Pramas var
* @NativeName: Hud_GetRotation
* @NativeFunctionAddress 00000001409B85B0
*/

float function Hud_GetRotation(var)

/*
* @Breif Set the rotation of the given hud element.
* @Pramas var, float
* @NativeName: Hud_SetRotation
* @NativeFunctionAddress 00000001409B8510
*/

void function Hud_SetRotation(var, float)

/*
* @Breif Sets a button as pressed
* @Pramas var
* @NativeName: Hud_SetButtonPressed
* @NativeFunctionAddress 00000001409B84A0
*/

bool function Hud_SetButtonPressed(var)

/*
* @Breif Sets a button as not-pressed
* @Pramas var
* @NativeName: Hud_SetButtonNotPressed
* @NativeFunctionAddress 00000001409B8430
*/

bool function Hud_SetButtonNotPressed(var)

/*
* @Breif Returns whether a ToggleButton is toggled
* @Pramas var
* @NativeName: Hud_IsButtonToggled
* @NativeFunctionAddress 00000001409B83C0
*/

bool function Hud_IsButtonToggled(var)

/*
* @Breif 
* @Pramas var, string, string
* @NativeName: Hud_DialogList_AddListItem
* @NativeFunctionAddress 00000001409B8340
*/

void function Hud_DialogList_AddListItem(var, string, string)

/*
* @Breif Gets the size of the dialog list button
* @Pramas var
* @NativeName: Hud_GetDialogListItemCount
* @NativeFunctionAddress 00000001409B8290
*/

int function Hud_GetDialogListItemCount(var)

/*
* @Breif Gets the index of the selected entry of a dialog list button
* @Pramas var
* @NativeName: Hud_GetDialogListSelectionIndex
* @NativeFunctionAddress 00000001409B81E0
*/

int function Hud_GetDialogListSelectionIndex(var)

/*
* @Breif Sets the selected entry of a dialog list button by its index
* @Pramas var, int
* @NativeName: Hud_SetDialogListSelectionIndex
* @NativeFunctionAddress 00000001409B8160
*/

void function Hud_SetDialogListSelectionIndex(var, int)

/*
* @Breif Gets the string value of the selected entry of a dialog list button
* @Pramas var
* @NativeName: Hud_GetDialogListSelectionValue
* @NativeFunctionAddress 00000001409B80E0
*/

string function Hud_GetDialogListSelectionValue(var)

/*
* @Breif Sets the selected entry of a dialog list button by its string value
* @Pramas var, string
* @NativeName: Hud_SetDialogListSelectionValue
* @NativeFunctionAddress 00000001409B8060
*/

void function Hud_SetDialogListSelectionValue(var, string)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_GetDialogListValueIsNonDefault
* @NativeFunctionAddress 00000001409B7FF0
*/

bool function Hud_GetDialogListValueIsNonDefault(var)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SliderControl_SetMin
* @NativeFunctionAddress 00000001409B7F60
*/

void function Hud_SliderControl_SetMin(var, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SliderControl_SetMax
* @NativeFunctionAddress 00000001409B7ED0
*/

void function Hud_SliderControl_SetMax(var, float)

/*
* @Breif 
* @Pramas var, float
* @NativeName: Hud_SliderControl_SetStepSize
* @NativeFunctionAddress 00000001409B7E40
*/

void function Hud_SliderControl_SetStepSize(var, float)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_SliderControl_GetCurrentValue
* @NativeFunctionAddress 00000001409B7D90
*/

float function Hud_SliderControl_GetCurrentValue(var)

/*
* @Breif 
* @Pramas var, string
* @NativeName: Hud_SetPlaylistVarName
* @NativeFunctionAddress 00000001409B7D10
*/

void function Hud_SetPlaylistVarName(var, string)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_SetGamemodeIdx
* @NativeFunctionAddress 00000001409B7C90
*/

void function Hud_SetGamemodeIdx(var, int)

/*
* @Breif Gets a child HUD element (for use with CNestedPanel);
* @Pramas var, string
* @NativeName: Hud_HudElement
* @NativeFunctionAddress 00000001409B7C10
*/

var function Hud_HudElement(var, string)

/*
* @Breif Gets a child HUD element (for use with CNestedPanel);
* @Pramas var, string
* @NativeName: Hud_HudElement
* @NativeFunctionAddress 00000001409B7C10
*/

var function Hud_GetChild(var, string)

/*
* @Breif Checks if a child HUD element for a given name exists
* @Pramas var, string
* @NativeName: Hud_HasChild
* @NativeFunctionAddress 00000001409B7B90
*/

bool function Hud_HasChild(var, string)

/*
* @Breif Gets the parent HUD element
* @Pramas var
* @NativeName: Hud_Script_GetParent
* @NativeFunctionAddress 00000001409B7B20
*/

var function Hud_GetParent(var)

/*
* @Breif Adds a closure to handle an event such as UIE_CLICK
* @Pramas var, int, var
* @NativeName: Hud_AddEventHandler
* @NativeFunctionAddress 00000001409B7A60
*/

void function Hud_AddEventHandler(var, int, var)

/*
* @Breif Removes a closure that was set to handle an event
* @Pramas var, int, var
* @NativeName: Hud_RemoveEventHandler
* @NativeFunctionAddress 00000001409B79A0
*/

void function Hud_RemoveEventHandler(var, int, var)

/*
* @Breif Sets the callback for commands this element listens for
* @Pramas var, var
* @NativeName: Hud_SetCommandHandler
* @NativeFunctionAddress 00000001409B7910
*/

void function Hud_SetCommandHandler(var, var)

/*
* @Breif Removes the callback for commands this element listens for
* @Pramas var
* @NativeName: Hud_ClearCommandHandler
* @NativeFunctionAddress 00000001409B7890
*/

void function Hud_ClearCommandHandler(var)

/*
* @Breif 
* @Pramas var, int
* @NativeName: Hud_Script_HandleEvent
* @NativeFunctionAddress 00000001409B7810
*/

void function Hud_HandleEvent(var, int)

/*
* @Breif Adds a closure to handle keypress events.
* @Pramas var hudelem, bool functionref( var hudelem, int keyId, bool isDown ) handlerFunc
* @NativeName: Hud_AddKeyPressHandler
* @NativeFunctionAddress 00000001409B7760
*/

void function Hud_AddKeyPressHandler(var hudelem, bool functionref( var hudelem, int keyId, bool isDown ) handlerFunc)

/*
* @Breif Returns whether the element is enabled (can be interacted with);
* @Pramas var
* @NativeName: Hud_IsEnabled
* @NativeFunctionAddress 00000001409B76C0
*/

bool function Hud_IsEnabled(var)

/*
* @Breif Sets whether the element is enabled (can be interacted with);
* @Pramas var, bool
* @NativeName: Hud_SetEnabled
* @NativeFunctionAddress 00000001409B7630
*/

void function Hud_SetEnabled(var, bool)

/*
* @Breif Returns whether the element has focus
* @Pramas var
* @NativeName: Hud_IsFocused
* @NativeFunctionAddress 00000001409B7590
*/

bool function Hud_IsFocused(var)

/*
* @Breif Gives the element focus
* @Pramas var
* @NativeName: Hud_SetFocused
* @NativeFunctionAddress 00000001409B7520
*/

bool function Hud_SetFocused(var)

/*
* @Breif Enable spherical warp distortion.
* @Pramas var
* @NativeName: Hud_WarpEnable
* @NativeFunctionAddress 00000001409B74A0
*/

void function Hud_WarpEnable(var)

/*
* @Breif Disable spherical warp distortion.
* @Pramas var
* @NativeName: Hud_WarpDisable
* @NativeFunctionAddress 00000001409B7420
*/

void function Hud_WarpDisable(var)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_GetUTF8Text
* @NativeFunctionAddress 00000001409B7380
*/

string function Hud_GetUTF8Text(var)

/*
* @Breif 
* @Pramas var, string
* @NativeName: Hud_Script_SetUTF8Text
* @NativeFunctionAddress 00000001409B72E0
*/

void function Hud_SetUTF8Text(var, string)

/*
* @Breif 
* @Pramas var
* @NativeName: Hud_Script_SelectAll
* @NativeFunctionAddress 00000001409B7270
*/

void function Hud_SelectAll(var)

/*
* @Breif Move cursor to the Start of the text buffer and resets scroll position
* @Pramas var
* @NativeName: Hud_GotoRichTextStart
* @NativeFunctionAddress 00000001409B7200
*/

void function Hud_GotoRichTextStart(var)

/*
* @Breif Gets the RUI instance associated with a RuiPanel.
* @Pramas var hudElem
* @NativeName: Hud_Script_GetRui
* @NativeFunctionAddress 00000001409B47B0
*/

var function Hud_GetRui()

/*
* @Breif Populates a GridButtonListPanel with a given number of RuiButtons.
* @Pramas var hudelem, int
* @NativeName: Hud_InitGridButtons
* @NativeFunctionAddress 00000001409B7160
*/

void function Hud_InitGridButtons(var hudelem, int)

/*
* @Breif Populates a GridButtonListPanel with a specified number of RuiButtons, rows, and columns.
* @Pramas var hudelem, int, int, int
* @NativeName: Hud_InitGridButtonsDetailed
* @NativeFunctionAddress 00000001409B7090
*/

void function Hud_InitGridButtonsDetailed(var hudelem, int, int, int)

/*
* @Breif Sets a GridButtonListPanel's scroll bar position
* @Pramas var hudelem, int
* @NativeName: Hud_ScrollToItemIndex
* @NativeFunctionAddress 00000001409B7010
*/

void function Hud_ScrollToItemIndex(var hudelem, int)

/*
* @Breif Sets a GridButtonListPanel's scroll bar position
* @Pramas var hudelem, var button
* @NativeName: Hud_ScrollToItemButton
* @NativeFunctionAddress 00000001409B6F80
*/

void function Hud_ScrollToItemButton(var hudelem, var button)

/*
* @Breif Starts message mode on a chat box
* @Pramas var
* @NativeName: Hud_StartMessageMode
* @NativeFunctionAddress 00000001409B6EF0
*/

void function Hud_StartMessageMode(var)

/*
* @Breif Stops message mode on a chat box
* @Pramas var
* @NativeName: Hud_StopMessageMode
* @NativeFunctionAddress 00000001409B6E70
*/

void function Hud_StopMessageMode(var)

/*
* @Breif Checks if gamepad is enabled (either through convar or playlist)
* @Pramas 
* @NativeName: Script_IsGamepadEnabled
* @NativeFunctionAddress 00000001407AED90
*/

bool function IsGamepadEnabled()

/*
* @Breif Unbinds all gamepad buttons
* @Pramas 
* @NativeName: Script_UnbindAllGamepad
* @NativeFunctionAddress 00000001407AED50
*/

void function UnbindAllGamepad()

/*
* @Breif Checks if the current user should receive the EU version of the EULA or not
* @Pramas 
* @NativeName: Script_ShouldUserSeeEULAForEU
* @NativeFunctionAddress 00000001407AED00
*/

bool function ShouldUserSeeEULAForEU()

/*
* @Breif Shortens a number and make it pretty for display. Localizes for commas vs dot notation
* @Pramas string
* @NativeName: Script_ShortenNumber
* @NativeFunctionAddress 00000001407AECA0
*/

string function ShortenNumber(string)

/*
* @Breif Sets the base layer animation for chroma hardware. gradient  maps values 0-1 to colors.
* @Pramas int CHROMALOOP_anim, int CHROMATRANS_transition, table< float, vector > gradient, float transitionTime, float animRate = 1.0
* @NativeName: Script_Chroma_SetBaseLayer
* @NativeFunctionAddress 00000001402BA0E0
*/

var function Chroma_SetBaseLayer()

/*
* @Breif Adds a temporary animated overlay on chroma hardware. gradient maps values 0-1 to colors.
* @Pramas int CHROMALOOP_anim, int CHROMAWAVE_alpha, table< float, vector > gradient, float duration, float animRate = 1.0
* @NativeName: Script_Chroma_AddOverlay
* @NativeFunctionAddress 00000001402BA120
*/

var function Chroma_AddOverlay()

/*
* @Breif Adds an animated overlay on chroma hardware. Returns a handle to be passed into Chroma_RemovePersistentOverlay. gradient maps values 0-1 to colors.
* @Pramas int CHROMALOOP_anim, int CHROMALOOP_alpha, int CHROMATRANS_transition, table< float, vector > gradient, float transitionTime, float animRate = 1.0, float alphaRate = 1.0
* @NativeName: Script_Chroma_AddPersistentOverlay
* @NativeFunctionAddress 00000001402BA160
*/

var function Chroma_AddPersistentOverlay()

/*
* @Breif Removes an animated overlay previously added with Chroma_AddPersistentOverlay.
* @Pramas int handle, int CHROMATRANS_transition, float transitionTime
* @NativeName: Script_Chroma_RemovePersistentOverlay
* @NativeFunctionAddress 00000001402BA1A0
*/

var function Chroma_RemovePersistentOverlay()

/*
* @Breif Sets the overall opacity of a persistent chroma overlay.
* @Pramas int handle, float alpha
* @NativeName: Script_Chroma_SetPersistentOverlayAlpha
* @NativeFunctionAddress 00000001402BA1E0
*/

var function Chroma_SetPersistentOverlayAlpha()

/*
* @Breif 
* @Pramas int typeIndex, asset modelAsset, asset effectAsset
* @NativeName: Script_ClientSidePickups_InitType_Client
* @NativeFunctionAddress 0000000140849DB0
*/

void function ClientSidePickups_InitType(int typeIndex, asset modelAsset, asset effectAsset)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetFocusedWaypointEnt
* @NativeFunctionAddress 00000001408FC510
*/

entity function GetFocusedWaypointEnt()

/*
* @Breif 
* @Pramas entity wp
* @NativeName: Script_SetFocusedWaypointForced
* @NativeFunctionAddress 00000001408FC470
*/

void function SetFocusedWaypointForced(entity wp)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetFocusedWaypointForcedClear
* @NativeFunctionAddress 00000001408FC430
*/

void function SetFocusedWaypointForcedClear()

/*
* @Breif Gets all the poi player waypoints within range of the player
* @Pramas 
* @NativeName: Script_GetNearbyPlayerWaypointPOIs
* @NativeFunctionAddress 00000001408EBA50
*/

var function GetNearbyPlayerWaypointPOIs()

/*
* @Breif Resets all the poi player waypoints to not visible
* @Pramas 
* @NativeName: Script_ResetWaypointVisibilities
* @NativeFunctionAddress 00000001408FC3F0
*/

void function ResetWaypointVisibilities()

/*
* @Breif Returns whether the given alias exists.
* @Pramas string
* @NativeName: ScriptDoesAliasExist_Client
* @NativeFunctionAddress 00000001409B6D60
*/

bool function DoesAliasExist(string)

/*
* @Breif Returns the duration of the given sound.
* @Pramas string
* @NativeName: ScriptGetSoundDuration
* @NativeFunctionAddress 00000001409B6C10
*/

float function GetSoundDuration(string)

/*
* @Breif Given a sound meter index, gets filtered RMS amplitude of the sound coming from the attached bus.
* @Pramas int
* @NativeName: ScriptSound_QuerySoundMeter
* @NativeFunctionAddress 00000001409B6B60
*/

float function QuerySoundMeter(int)

/*
* @Breif Plays given sound on given entity on this client. Returns an object which will signal OnSoundFinished.
* @Pramas entity ent, string soundName
* @NativeName: ScriptSound_EmitSoundOnEntity
* @NativeFunctionAddress 00000001409B5120
*/

var function EmitSoundOnEntity()

/*
* @Breif Plays given sound on given entity on this client, delayed (negative timeOffset) or seeked (positive timeOffset.) Returns a handle object which will signal OnSoundFinished.
* @Pramas entity ent, string soundName, float timeOffset
* @NativeName: ScriptSound_EmitSoundOnEntityWithTimeOffset<false>
* @NativeFunctionAddress 00000001409B54D0
*/

var function EmitSoundOnEntityWithTimeOffset()

/*
* @Breif Plays given sound on given entity on this client, seeked. Returns a handle object which will signal OnSoundFinished.
* @Pramas entity ent, string soundName, float seekTime
* @NativeName: ScriptSound_EmitSoundOnEntityWithTimeOffset<false>
* @NativeFunctionAddress 00000001409B54D0
*/

var function EmitSoundOnEntityWithSeek()

/*
* @Breif Plays given sound on given entity on this client, delayed. Returns a handle object which will signal OnSoundFinished.
* @Pramas entity ent, string soundName, float delayTime
* @NativeName: ScriptSound_EmitSoundOnEntityWithTimeOffset<true>
* @NativeFunctionAddress 00000001409B5700
*/

var function EmitSoundOnEntityAfterDelay()

/*
* @Breif Stops any sound on given entity on this client with the given name.
* @Pramas entity ent, string soundName
* @NativeName: ScriptSound_StopSoundOnEntityByName
* @NativeFunctionAddress 00000001409B5740
*/

var function StopSoundOnEntityByName()

/*
* @Breif Stops any sound on given entity on this client with the given name. (transition to StopSoundOnEntityByName)
* @Pramas entity ent, string soundName
* @NativeName: ScriptSound_StopSoundOnEntityByName
* @NativeFunctionAddress 00000001409B5740
*/

var function StopSoundOnEntity()

/*
* @Breif Pauses any sound on given entity on this client with the given name.
* @Pramas entity ent, string soundName
* @NativeName: ScriptSound_PauseSoundOnEntityByName
* @NativeFunctionAddress 00000001409B58E0
*/

var function PauseSoundOnEntity()

/*
* @Breif Resumes (unpauses) any sound on given entity on this client with the given name.
* @Pramas entity ent, string soundName
* @NativeName: ScriptSound_ResumeSoundOnEntityByName
* @NativeFunctionAddress 00000001409B5A80
*/

var function ResumeSoundOnEntity()

/*
* @Breif Fades out any sound on given entity on this client with the given name.
* @Pramas entity ent, string soundName, float fadeTime
* @NativeName: ScriptSound_FadeOutSoundOnEntityByName
* @NativeFunctionAddress 00000001409B5C20
*/

var function FadeOutSoundOnEntityByName()

/*
* @Breif Fades out any sound on given entity on this client with the given name (transition to FadeOutSoundOnEntityByName).
* @Pramas entity ent, string soundName, float fadeTime
* @NativeName: ScriptSound_FadeOutSoundOnEntityByName
* @NativeFunctionAddress 00000001409B5C20
*/

var function FadeOutSoundOnEntity()

/*
* @Breif Plays given sound at given position on this client (Associated with given team). Returns an object which will signal OnSoundFinished.
* @Pramas int teamNumber, vector position, string soundName
* @NativeName: ScriptSound_EmitSoundAtPosition
* @NativeFunctionAddress 00000001409B5C60
*/

var function EmitSoundAtPosition()

/*
* @Breif Plays given sound at given position on this client (Associated with given team,) delayed (negative timeOffset) or seeked (positive timeOffset.) Returns a handle object which will signal OnSoundFinished.
* @Pramas int teamNumber, vector position, string soundName, float timeOffset
* @NativeName: ScriptSound_EmitSoundAtPositionWithTimeOffset<false>
* @NativeFunctionAddress 00000001409B5F00
*/

var function EmitSoundAtPositionWithTimeOffset()

/*
* @Breif Plays given sound at given position on this client (Associated with given team,) seeked. Returns an object which will signal OnSoundFinished.
* @Pramas int teamNumber, vector position, string soundName, float seekTime
* @NativeName: ScriptSound_EmitSoundAtPositionWithTimeOffset<false>
* @NativeFunctionAddress 00000001409B5F00
*/

var function EmitSoundAtPositionWithSeek()

/*
* @Breif Plays given sound at given position on this client (Associated with given team,) delayed. Returns an object which will signal OnSoundFinished.
* @Pramas int teamNumber, vector position, string soundName, float delayTime
* @NativeName: ScriptSound_EmitSoundAtPositionWithTimeOffset<true>
* @NativeFunctionAddress 00000001409B61A0
*/

var function EmitSoundAtPositionAfterDelay()

/*
* @Breif Returns true if the sound associated with the given signal handle is still playing.
* @Pramas var soundSignalingHandle
* @NativeName: ScriptSound_IsSoundStillPlaying
* @NativeFunctionAddress 00000001409B61E0
*/

var function IsSoundStillPlaying()

/*
* @Breif Stops the playing sound (if any) associated with the given signaling object.
* @Pramas var activeSoundHandle
* @NativeName: ScriptSound_StopSound
* @NativeFunctionAddress 00000001409B6290
*/

var function StopSound()

/*
* @Breif Stops the playing sound (if any) associated with the given signaling object using STOPNOW, which ignores fade out.
* @Pramas var activeSoundHandle
* @NativeName: ScriptSound_StopSoundImmediately
* @NativeFunctionAddress 00000001409B6380
*/

var function StopSoundImmediately()

/*
* @Breif Tags the playing sound to not stop when we do a kill replay transition. Call on handle returned by EmitSound...()
* @Pramas var activeSoundHandle
* @NativeName: ScriptSound_SetPlayThroughKillReplay
* @NativeFunctionAddress 00000001409B6470
*/

var function SetPlayThroughKillReplay()

/*
* @Breif Play a video
* @Pramas string, int, int, int, int, string, int, bool, bool, bool
* @NativeName: Script_PlayVideo
* @NativeFunctionAddress 00000001407B28B0
*/

void function PlayVideo(string, int, int, int, int, string, int, bool, bool, bool)

/*
* @Breif Plays a video at position using coordinates scaled relative to the base screen resolution
* @Pramas string, int, int, int, int, int, string, int, bool, bool, bool
* @NativeName: Script_PlayVideoScaled
* @NativeFunctionAddress 00000001407B2770
*/

void function PlayVideoScaled(string, int, int, int, int, int, string, int, bool, bool, bool)

/*
* @Breif Pause all VGUI videos
* @Pramas int
* @NativeName: Script_PauseVideos
* @NativeFunctionAddress 00000001407B2700
*/

void function PauseVideos(int)

/*
* @Breif Unpause all VGUI videos
* @Pramas int
* @NativeName: Script_UnpauseVideos
* @NativeFunctionAddress 00000001407B2690
*/

void function UnpauseVideos(int)

/*
* @Breif Hide all VGUI videos
* @Pramas int
* @NativeName: Script_HideVideos
* @NativeFunctionAddress 00000001407B2620
*/

void function HideVideos(int)

/*
* @Breif Unhide all VGUI videos
* @Pramas int
* @NativeName: Script_ShowVideos
* @NativeFunctionAddress 00000001407B25B0
*/

void function ShowVideos(int)

/*
* @Breif Stop video currently playing
* @Pramas int
* @NativeName: Script_StopVideos
* @NativeFunctionAddress 00000001407B2540
*/

void function StopVideos(int)

/*
* @Breif Returns true if there is a video currently playing
* @Pramas 
* @NativeName: Script_IsAnyVideoVisible
* @NativeFunctionAddress 00000001407B24F0
*/

bool function IsAnyVideoVisible()

/*
* @Breif Returns true if there is a video currently playing with the given filename
* @Pramas string
* @NativeName: Script_IsPlayingVideo
* @NativeFunctionAddress 00000001407B2490
*/

bool function IsPlayingVideo(string)

/*
* @Breif Start a video on a Bink channel
* @Pramas int channelId, asset videoFile, bool isLooping, float startTimeDelay
* @NativeName: Script_StartVideoOnChannel
* @NativeFunctionAddress 00000001407AEBB0
*/

void function StartVideoOnChannel(int channelId, asset videoFile, bool isLooping, float startTimeDelay)

/*
* @Breif Stop a video on a Bink channel
* @Pramas int
* @NativeName: Script_StopVideoOnChannel
* @NativeFunctionAddress 00000001407AEB30
*/

void function StopVideoOnChannel(int)

/*
* @Breif Stop videos on all Bink channels
* @Pramas 
* @NativeName: Script_StopVideoOnAllChannels
* @NativeFunctionAddress 00000001407AEAE0
*/

void function StopVideoOnAllChannels()

/*
* @Breif Pause a video on a Bink channel
* @Pramas int
* @NativeName: Script_PauseVideoOnChannel
* @NativeFunctionAddress 00000001407AEA60
*/

void function PauseVideoOnChannel(int)

/*
* @Breif Resume a paused video on a Bink channel
* @Pramas int
* @NativeName: Script_ResumeVideoOnChannel
* @NativeFunctionAddress 00000001407AE9E0
*/

void function ResumeVideoOnChannel(int)

/*
* @Breif Is a video currently assigned to this channel.
* @Pramas int
* @NativeName: Script_VideoChannelHasVideoAssigned
* @NativeFunctionAddress 00000001407AE950
*/

bool function VideoChannelHasVideoAssigned(int)

/*
* @Breif Is a video currently playing on this channel (false if no video assigned / stopped).
* @Pramas int
* @NativeName: Script_VideoChannelIsPlaying
* @NativeFunctionAddress 00000001407AE8C0
*/

bool function VideoChannelIsPlaying(int)

/*
* @Breif Is the video on this channel set to loop (false if no video assigned / stopped).
* @Pramas int
* @NativeName: Script_VideoChannelIsLooping
* @NativeFunctionAddress 00000001407AE830
*/

bool function VideoChannelIsLooping(int)

/*
* @Breif Is the video on this channel paused (false if no video assigned / stopped).
* @Pramas int
* @NativeName: Script_VideoChannelIsPaused
* @NativeFunctionAddress 00000001407AE7A0
*/

bool function VideoChannelIsPaused(int)

/*
* @Breif Is the video finished playing (false if no video assigned / stopped). Also false for looping videos.
* @Pramas int
* @NativeName: Script_VideoChannelIsFinished
* @NativeFunctionAddress 00000001407AE710
*/

bool function VideoChannelIsFinished(int)

/*
* @Breif Link a Bink channel to a material that allows video.
* @Pramas int channelId, asset materialName
* @NativeName: Script_LinkVideoChannelToMaterial
* @NativeFunctionAddress 00000001407AE6B0
*/

void function LinkVideoChannelToMaterial(int channelId, asset materialName)

/*
* @Breif 
* @Pramas string key
* @NativeName: ScriptMinimap_GetAssetForKey
* @NativeFunctionAddress 0000000140A6ECC0
*/

asset function Minimap_GetAssetForKey(string key)

/*
* @Breif 
* @Pramas string key
* @NativeName: ScriptMinimap_GetFloatForKey
* @NativeFunctionAddress 0000000140A6EC00
*/

float function Minimap_GetFloatForKey(string key)

/*
* @Breif Given button id (ex: BUTTON_A), returns true if button is down.
* @Pramas int
* @NativeName: ScriptInputIsButtonDown
* @NativeFunctionAddress 00000001407AE640
*/

bool function InputIsButtonDown(int)

/*
* @Breif Given axis id (ex: ANALOG_LEFT_X) returns the value of the axis, in the (-1,1) range.
* @Pramas int
* @NativeName: ScriptInputGetAxis
* @NativeFunctionAddress 00000001407AE590
*/

float function InputGetAxis(int)

/*
* @Breif 
* @Pramas inMenu
* @NativeName: SetInMenuForButtonCallbacks
* @NativeFunctionAddress 00000001407A60D0
*/

void function SetInMenuForButtonCallbacks(var, bool)

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: RegisterButtonPressedCallback
* @NativeFunctionAddress 00000001407A6180
*/

void function RegisterButtonPressedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: DeregisterButtonPressedCallback
* @NativeFunctionAddress 00000001407A6210
*/

void function DeregisterButtonPressedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: RegisterButtonReleasedCallback
* @NativeFunctionAddress 00000001407A62A0
*/

void function RegisterButtonReleasedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: DeregisterButtonReleasedCallback
* @NativeFunctionAddress 00000001407A6340
*/

void function DeregisterButtonReleasedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: RegisterMenuButtonPressedCallback
* @NativeFunctionAddress 00000001407A63D0
*/

void function RegisterMenuButtonPressedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas buttonID, callback
* @NativeName: RegisterMenuButtonReleasedCallback
* @NativeFunctionAddress 00000001407A6460
*/

void function RegisterMenuButtonReleasedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas axisID, callback
* @NativeName: RegisterStickMovedCallback
* @NativeFunctionAddress 00000001407A6500
*/

void function RegisterStickMovedCallback(var, int, functionref())

/*
* @Breif 
* @Pramas axisID, callback
* @NativeName: DeregisterStickMovedCallback
* @NativeFunctionAddress 00000001407A65D0
*/

void function DeregisterStickMovedCallback(var, int, functionref())

/*
* @Breif Returns the TAPPED binding for a given key (like BUTTON_A)
* @Pramas int
* @NativeName: Script_GetKeyTappedBinding
* @NativeFunctionAddress 00000001407AE4E0
*/

string function GetKeyTappedBinding(int)

/*
* @Breif Returns the HELD binding for a given key (like BUTTON_A)
* @Pramas int
* @NativeName: Script_GetKeyHeldBinding
* @NativeFunctionAddress 00000001407AE430
*/

string function GetKeyHeldBinding(int)

/*
* @Breif Returns the keycode for given binding
* @Pramas string
* @NativeName: Script_GetKeyCodeForBinding
* @NativeFunctionAddress 00000001407AE350
*/

int function GetKeyCodeForBinding(string)

/*
* @Breif 
* @Pramas commandName, callback
* @NativeName: RegisterConCommandTriggeredCallback
* @NativeFunctionAddress 00000001407A6710
*/

void function RegisterConCommandTriggeredCallback(var, string, functionref())

/*
* @Breif 
* @Pramas commandName, callback
* @NativeName: DeregisterConCommandTriggeredCallback
* @NativeFunctionAddress 00000001407A6750
*/

void function DeregisterConCommandTriggeredCallback(var, string, functionref())

/*
* @Breif Pushes an input context onto the stack to handle input events for hud elements. Only the context on the top of the stack will be used for input events.
* @Pramas HudInputContext context
* @NativeName: Script_HudInput_PushContext
* @NativeFunctionAddress 00000001407A6790
*/

var function HudInput_PushContext()

/*
* @Breif Pops a context off the stack to handle input events for hud elements. Only the context on the top of the stack will be used for input events.
* @Pramas 
* @NativeName: Script_HudInput_PopContext
* @NativeFunctionAddress 00000001407AE310
*/

void function HudInput_PopContext()

/*
* @Breif Asks specified model to stream in (pretends it is visible for about two seconds.)
* @Pramas asset model
* @NativeName: ScriptStreamModelHint
* @NativeFunctionAddress 00000001407B2420
*/

void function StreamModelHint(asset model)

/*
* @Breif Returns true if specified model is streamed in.
* @Pramas asset model
* @NativeName: ScriptStreamModelIsResident
* @NativeFunctionAddress 00000001407B2390
*/

bool function StreamModelIsResident(asset model)

/*
* @Breif Spawns a client only gib. Parameters are: string modelName, Vector origin, Vector angles, Vector forceDir, Vector angularImpulse, float duration, float cullFarDist, float cullRadius
* @Pramas asset modelName, vector origin, vector angles, vector forceDir, vector velAngles, float duration, float cullFarDist, float cullRadius
* @NativeName: ScriptCreateClientSideGib
* @NativeFunctionAddress 00000001407B22C0
*/

void function CreateClientsideGib(asset modelName, vector origin, vector angles, vector forceDir, vector velAngles, float duration, float cullFarDist, float cullRadius)

/*
* @Breif Spawns a client only gib and corresponding body group model gibs. Parameters are: string modelName, Vector origin, Vector angles, Vector forceDir, Vector angularImpulse, float duration, float cullFarDist, float cullRadius
* @Pramas asset modelName, vector origin, vector angles, vector forceDir, vector velAngles, float duration, float cullFarDist, float cullRadius
* @NativeName: ScriptCreateClientSideGibWithBodyGroupGibs
* @NativeFunctionAddress 00000001407B21F0
*/

void function CreateClientsideGibWithBodyGroupGibs(asset modelName, vector origin, vector angles, vector forceDir, vector velAngles, float duration, float cullFarDist, float cullRadius)

/*
* @Breif Spawns a client only VGui Screen.
* @Pramas string, int, vector, vector, float, float
* @NativeName: ScriptCreateClientSideVGuiScreen
* @NativeFunctionAddress 00000001407B2110
*/

entity function CreateClientsideVGuiScreen(string, int, vector, vector, float, float)

/*
* @Breif Shakes the screen on the local, active client. Takes four parameters: amplitude (strength of the shake), frequency (how many oscillations over the given duration), duration (how long to shake for), and direction (the direction to shake along, pass in a zero vector to do a 'direction-less' shake instead, which uses a different (older) shaking algorithm. WARNING: Shaking with too much amplitude might push the camera out of the world!
* @Pramas float, float, float, vector
* @NativeName: Script_ClientScreenShake
* @NativeFunctionAddress 00000001407B2070
*/

void function ClientScreenShake(float, float, float, vector)

/*
* @Breif Shakes the screen on the local, active client.
* @Pramas float, float, float, vector
* @NativeName: ScriptClientCockpitShake
* @NativeFunctionAddress 00000001407B1F90
*/

void function ClientCockpitShake(float, float, float, vector)

/*
* @Breif Spawns a client-only point camera.
* @Pramas vector, vector, float
* @NativeName: ScriptCreateClientSidePointCamera
* @NativeFunctionAddress 00000001407B1F20
*/

entity function CreateClientSidePointCamera(vector, vector, float)

/*
* @Breif Spawns a client-only prop_dynamic.
* @Pramas vector vecOrigin, vector vecAngles, asset model
* @NativeName: ScriptCreateClientSidePropDynamic
* @NativeFunctionAddress 00000001407B1EC0
*/

entity function CreateClientSidePropDynamic(vector vecOrigin, vector vecAngles, asset model)

/*
* @Breif Spawns a client-only prop_dynamic.
* @Pramas entity, asset modelName
* @NativeName: ScriptCreateClientSidePropDynamicClone
* @NativeFunctionAddress 00000001407B1E40
*/

entity function CreateClientSidePropDynamicClone(entity, asset modelName)

/*
* @Breif Spawns a client-only light_dynamic.
* @Pramas vector, vector, vector, float
* @NativeName: ScriptCreateClientSideDynamicLight
* @NativeFunctionAddress 00000001407B1DC0
*/

entity function CreateClientSideDynamicLight(vector, vector, vector, float)

/*
* @Breif Spawns a client-only ambient_generic.
* @Pramas vector vecOrigin, string soundName, float radius
* @NativeName: ScriptCreateClientSideAmbientGeneric
* @NativeFunctionAddress 00000001407B1D40
*/

entity function CreateClientSideAmbientGeneric(vector vecOrigin, string soundName, float radius)

/*
* @Breif Force entity to be drawn even while parented to an invisible entity (such as the first person player)
* @Pramas entity, bool
* @NativeName: ScriptForceDrawWhileParented
* @NativeFunctionAddress 00000001407B1C90
*/

void function SetForceDrawWhileParented(entity, bool)

/*
* @Breif entity baseEnt, bool val
* @Pramas entity, bool
* @NativeName: Script_SetAnimateInStaticShadow
* @NativeFunctionAddress 00000001407B1C10
*/

void function SetAnimateInStaticShadow(entity, bool)

/*
* @Breif Updates RUI sys.game.announcement* vars.
* @Pramas 
* @NativeName: Script_SetAnnouncementIsActive
* @NativeFunctionAddress 00000001407B1BA0
*/

void function SetAnnouncementIsActive()

/*
* @Breif Updates RUI sys.game.announcement* vars.
* @Pramas 
* @NativeName: Script_ClearAnnouncementIsActive
* @NativeFunctionAddress 00000001407B1B30
*/

void function ClearAnnouncementIsActive()

/*
* @Breif Flashes the game window on the taskbar if it isn't focused.
* @Pramas 
* @NativeName: Script_ClientFlashGameWindow
* @NativeFunctionAddress 00000001407A83C0
*/

void function FlashGameWindow()

/*
* @Breif 
* @Pramas float colorR, float colorG, float colorB, float holdTime, float fadeTime
* @NativeName: Script_ScreenFlash
* @NativeFunctionAddress 00000001407B1A40
*/

void function ScreenFlash(float colorR, float colorG, float colorB, float holdTime, float fadeTime)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ScreenFlashClear
* @NativeFunctionAddress 00000001407B19F0
*/

void function ScreenFlashClear()

/*
* @Breif Sets the blur of the world on the client
* @Pramas float, float, int
* @NativeName: Script_SetScreenBlur
* @NativeFunctionAddress 00000001407B1960
*/

void function SetScreenBlur(float, float, int)

/*
* @Breif Sets the binding for the given +ability command.
* @Pramas entity, int, string, string, int
* @NativeName: ScriptClient_SetAbilityBinding
* @NativeFunctionAddress 00000001407B18A0
*/

void function SetAbilityBinding(entity, int, string, string, int)

/*
* @Breif 
* @Pramas string format, ...
* @NativeName: Script_Localize
* @NativeFunctionAddress 00000001407A2FF0
*/

var function Localize()

/*
* @Breif Condenses text by adding an ellipsis if it goes beyond a certain point.
* @Pramas string text, int maxWordLen, int maxTextLen
* @NativeName: Script_Rui_CondenseText
* @NativeFunctionAddress 00000001407A3030
*/

var function CondenseText()

/*
* @Breif Gets the last render origin for the given splitscreen player
* @Pramas int
* @NativeName: ScriptGetLastRenderOrigin
* @NativeFunctionAddress 00000001407B1760
*/

vector function GetLastRenderOrigin(int)

/*
* @Breif Gets the last render angle for the given splitscreen player
* @Pramas int
* @NativeName: ScriptGetLastRenderAngle
* @NativeFunctionAddress 00000001407B1620
*/

vector function GetLastRenderAngle(int)

/*
* @Breif Set cockpit downsample enabled state.  Cockpit downsample is required for cockpit lighting to work.
* @Pramas int, bool
* @NativeName: ScriptSetCockpitLightingEnabled
* @NativeFunctionAddress 00000001407B1590
*/

void function SetCockpitLightingEnabled(int, bool)

/*
* @Breif Allows increasing or decreasing the clamp on how dark exposure can go. Default is 1.
* @Pramas float
* @NativeName: ScriptAutoExposureSetMinExposureMultiplier
* @NativeFunctionAddress 00000001407B1530
*/

void function AutoExposureSetMinExposureMultiplier(float)

/*
* @Breif Allows increasing or decreasing the clamp on how bright exposure can go. Default is 1.
* @Pramas float
* @NativeName: ScriptAutoExposureSetMaxExposureMultiplier
* @NativeFunctionAddress 00000001407B14D0
*/

void function AutoExposureSetMaxExposureMultiplier(float)

/*
* @Breif Allows us to control how bright or dark a scene should be. The units are in EV, like on a real camera. 0 is default and means no adjustment. -1 means half as bright, 1 means twice as bright, 2 means 4 times as bright, etc., in powers of 2, ie: 2^x.
* @Pramas float
* @NativeName: ScriptAutoExposureSetExposureCompensation
* @NativeFunctionAddress 00000001407B1470
*/

void function AutoExposureSetExposureCompensation(float)

/*
* @Breif Allows us to apply temporary special effects over the autoexposure, like blowing things out white or fading to black, without affecting the tuned lighting (set above). Note: forcing an exposure bias immediately requires a call to AutoExposureSnap, otherwise the exposure will adjust slowly to the indicated value. The units are in EV, like on a real camera. 0EV is default and means no adjustment. -1EV means half as bright, 1EV means twice as bright, 2EV means 4 times as bright, etc., in powers of 2, ie: 2^x.
* @Pramas float
* @NativeName: ScriptAutoExposureSetExposureCompensationBias
* @NativeFunctionAddress 00000001407B1410
*/

void function AutoExposureSetExposureCompensationBias(float)

/*
* @Breif Snaps the current exposure to the indicated exposure without delay/fade. Can be used for camera cuts, or forcing overrides.
* @Pramas 
* @NativeName: ScriptAutoExposureSnap
* @NativeFunctionAddress 00000001407B13D0
*/

void function AutoExposureSnap()

/*
* @Breif Sets whether in-focus pixels should be preferred, to reduce DOF aliasing around antialiased edges.
* @Pramas bool
* @NativeName: ScriptDoFSetDilateInfocus
* @NativeFunctionAddress 00000001407B1390
*/

void function DoFSetDilateInfocus(bool)

/*
* @Breif Get the latest fps that the client is running at.
* @Pramas 
* @NativeName: ScriptGetClientFPS
* @NativeFunctionAddress 00000001407B12B0
*/

float function GetClientFPS()

/*
* @Breif Get the current sound volume as a float 0 to 1.
* @Pramas 
* @NativeName: Script_GetSoundVolume
* @NativeFunctionAddress 00000001407B11A0
*/

float function GetSoundVolume()

/*
* @Breif Set the current sound volume as a float 0 to 1.
* @Pramas float
* @NativeName: Script_SetSoundVolume
* @NativeFunctionAddress 00000001407B10B0
*/

void function SetSoundVolume(float)

/*
* @Breif Get the current joy invert as a float.
* @Pramas 
* @NativeName: Script_GetJoyInvert
* @NativeFunctionAddress 00000001407B0FE0
*/

bool function GetJoyInvert()

/*
* @Breif Set the current joy invert as a float.
* @Pramas bool
* @NativeName: Script_SetJoyInvert
* @NativeFunctionAddress 00000001407B0F00
*/

void function SetJoyInvert(bool)

/*
* @Breif Sets the crosshair's current state. See CROSSHAIR_STATE_*** constants
* @Pramas int
* @NativeName: Script_Crosshair_SetState
* @NativeFunctionAddress 00000001407B0E90
*/

void function Crosshair_SetState(int)

/*
* @Breif Gets the crosshair's current state. See CROSSHAIR_STATE_*** constants
* @Pramas 
* @NativeName: Script_Crosshair_GetState
* @NativeFunctionAddress 00000001407B0E00
*/

int function Crosshair_GetState()

/*
* @Breif Returns true if the client is rendering in freecam.
* @Pramas 
* @NativeName: Script_IsFreeCam
* @NativeFunctionAddress 00000001407B0DA0
*/

bool function IsFreeCam()

/*
* @Breif Returns true if client is connected to a server.
* @Pramas 
* @NativeName: ClientScript_IsConnected
* @NativeFunctionAddress 00000001407AD7C0
*/

bool function IsConnected()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetMapSetting_BloomScale
* @NativeFunctionAddress 00000001407B0D40
*/

void function SetMapSetting_BloomScale(float)

/*
* @Breif 
* @Pramas bool
* @NativeName: Script_SetMapSetting_FogEnabled
* @NativeFunctionAddress 00000001407B0CF0
*/

void function SetMapSetting_FogEnabled(bool)

/*
* @Breif 
* @Pramas float, float
* @NativeName: Script_SetMapSetting_CsmTexelScale
* @NativeFunctionAddress 00000001407B0C70
*/

void function SetMapSetting_CsmTexelScale(float, float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetMapSetting_CsmStartDistance
* @NativeFunctionAddress 00000001407B0C10
*/

void function SetMapSetting_CsmStartDistance(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_AreSpectatorControlsActiveForLocalClientPlayer
* @NativeFunctionAddress 00000001407B0BC0
*/

bool function AreSpectatorControlsActiveForLocalClientPlayer()

/*
* @Breif Has any text chat window been closed recently. Hack for stopping input duplication
* @Pramas 
* @NativeName: HudChat_HasAnyMessageModeStoppedRecently
* @NativeFunctionAddress 00000001407B0B40
*/

bool function HudChat_HasAnyMessageModeStoppedRecently()

/*
* @Breif Returns true if the local client is watching a kill replay.
* @Pramas 
* @NativeName: IsWatchingKillReplay
* @NativeFunctionAddress 00000001407B0AC0
*/

bool function IsWatchingKillReplay()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsWatchingThirdPersonKillReplay
* @NativeFunctionAddress 00000001407B0A70
*/

bool function IsWatchingThirdPersonKillReplay()

/*
* @Breif Returns true if the local client is watching a spectator replay.
* @Pramas 
* @NativeName: IsWatchingSpecReplay
* @NativeFunctionAddress 00000001407B09F0
*/

bool function IsWatchingSpecReplay()

/*
* @Breif Returns value set on the server by SetIsReplayRoundWinning()
* @Pramas 
* @NativeName: IsReplayRoundWinning
* @NativeFunctionAddress 00000001407B0990
*/

bool function IsReplayRoundWinning()

/*
* @Breif Get the time adjusted for times in a replay to be correct while played back.  For times sent to the client using remote calls.  You shouldn't normally need to use this.
* @Pramas 
* @NativeName: TimeAdjustmentForRemoteReplayCall
* @NativeFunctionAddress 00000001407B08F0
*/

float function TimeAdjustmentForRemoteReplayCall()

/*
* @Breif Toggles mute voice on a player.
* @Pramas entity
* @NativeName: TogglePlayerVoiceMute
* @NativeFunctionAddress 00000001407B0880
*/

bool function TogglePlayerVoiceMute(entity)

/*
* @Breif Toggles mute voice on a player by uid.
* @Pramas string
* @NativeName: TogglePlayerVoiceMutedForUID
* @NativeFunctionAddress 00000001407AAF30
*/

void function TogglePlayerVoiceMutedForUID(string)

/*
* @Breif Is this UID in voice mute list?
* @Pramas string
* @NativeName: IsPlayerVoiceMutedForUID
* @NativeFunctionAddress 00000001407AAEB0
*/

bool function IsPlayerVoiceMutedForUID(string)

/*
* @Breif Toggles text mute on a player.
* @Pramas entity
* @NativeName: TogglePlayerTextMute
* @NativeFunctionAddress 00000001407B0810
*/

bool function TogglePlayerTextMute(entity)

/*
* @Breif Toggles text mute on a player by uid.
* @Pramas string
* @NativeName: TogglePlayerTextMutedForUID
* @NativeFunctionAddress 00000001407AAE40
*/

void function TogglePlayerTextMutedForUID(string)

/*
* @Breif Is this UID in text mute list?
* @Pramas string
* @NativeName: IsPlayerTextMutedForUID
* @NativeFunctionAddress 00000001407AADC0
*/

bool function IsPlayerTextMutedForUID(string)

/*
* @Breif Shows a player's profile.
* @Pramas entity
* @NativeName: ShowPlayerProfile
* @NativeFunctionAddress 00000001407B0760
*/

void function ShowPlayerProfile(entity)

/*
* @Breif Get array of entities matching a script name
* @Pramas string name
* @NativeName: ScriptClientGetEntArrayByScriptName
* @NativeFunctionAddress 00000001407A3070
*/

var function GetEntArrayByScriptName()

/*
* @Breif Get array of entities matching a script name and instance name
* @Pramas string scriptName, string instanceName
* @NativeName: ScriptClientGetEntArrayByScriptNameInInstance
* @NativeFunctionAddress 00000001407A30B0
*/

var function GetEntArrayByScriptNameInInstance()

/*
* @Breif Get entity matching the given script name. It will script error if no entity is found or more than one entity is found.
* @Pramas string
* @NativeName: ScriptClientGetEntByScriptName
* @NativeFunctionAddress 00000001407B0700
*/

entity function GetEntByScriptName(string)

/*
* @Breif Get entity matching the given script name and instance. It will script error if no entity is found or more than one entity is found.
* @Pramas string, string
* @NativeName: ScriptClientGetEntByScriptNameInInstance
* @NativeFunctionAddress 00000001407B06A0
*/

entity function GetEntByScriptNameInstance(string, string)

/*
* @Breif Start model fx definition: groupName, modelName, visibleTo, startActive
* @Pramas string modelFXGroup, asset modelName, string visibleTo, bool startActive
* @NativeName: Script_ModelFX_BeginData
* @NativeFunctionAddress 00000001407B0630
*/

void function ModelFX_BeginData(string modelFXGroup, asset modelName, string visibleTo, bool startActive)

/*
* @Breif End model fx definition
* @Pramas 
* @NativeName: Script_ModelFX_EndData
* @NativeFunctionAddress 00000001407B05F0
*/

void function ModelFX_EndData()

/*
* @Breif Don't show fx for local player
* @Pramas 
* @NativeName: Script_ModelFX_HideFromLocalPlayer
* @NativeFunctionAddress 00000001407B0590
*/

void function ModelFX_HideFromLocalPlayer()

/*
* @Breif Add model spawn fx: tagName, fxName
* @Pramas string, asset
* @NativeName: Script_ModelFX_AddTagSpawnFX
* @NativeFunctionAddress 00000001407B0530
*/

void function ModelFX_AddTagSpawnFX(string, asset)

/*
* @Breif Add model health fx: healthFrac, tagName, fxName, oneShotOnly
* @Pramas float healthFrac, string tagName, asset fxName, bool oneShotOnly
* @NativeName: Script_ModelFX_AddTagHealthFX
* @NativeFunctionAddress 00000001407B04B0
*/

void function ModelFX_AddTagHealthFX(float healthFrac, string tagName, asset fxName, bool oneShotOnly)

/*
* @Breif Add model health fx and sound: healthFrac, tagName, fxName, oneShotOnly, soundName, oneShotSoundName
* @Pramas float healthFrac, string tagName, asset fxName, bool oneShotOnly, string soundName, string oneShotSoundName
* @NativeName: Script_ModelFX_AddTagHealthFXAndSound
* @NativeFunctionAddress 00000001407B0420
*/

void function ModelFX_AddTagHealthFXAndSound(float healthFrac, string tagName, asset fxName, bool oneShotOnly, string soundName, string oneShotSoundName)

/*
* @Breif Add model break fx and sound: stateIndex, tagName, fxName, soundName
* @Pramas int stateIndex, string tagName, asset fxName, string soundName
* @NativeName: Script_ModelFX_AddTagBreakFX
* @NativeFunctionAddress 00000001407B03B0
*/

void function ModelFX_AddTagBreakFX(int stateIndex, string tagName, asset fxName, string soundName)

/*
* @Breif Add model break gib: stateIndex, tagName, modelName, gibType, minVelocity, maxVelocity
* @Pramas int stateIndex, string tagName, asset modelName, int gibType, float minVelocity, float maxVelocity
* @NativeName: Script_ModelFX_AddTagBreakGib
* @NativeFunctionAddress 00000001407B02F0
*/

void function ModelFX_AddTagBreakGib(int stateIndex, string tagName, asset modelName, int gibType, float minVelocity, float maxVelocity)

/*
* @Breif Add model damage fx: stateIndex, tagName, fxName, mindelay, maxdelay, soundName
* @Pramas int stateIndex, string tagName, asset fxName, float minDelay, float maxDelay, string soundName
* @NativeName: Script_ModelFX_AddTagDamageFX
* @NativeFunctionAddress 00000001407B0240
*/

void function ModelFX_AddTagDamageFX(int stateIndex, string tagName, asset fxName, float minDelay, float maxDelay, string soundName)

/*
* @Breif Add model health damage fx: stateIndex, healthFrac, tagName, fxName, mindelay, maxdelay
* @Pramas int stateIndex, float healthFrac, string tagName, asset fxName, float minDelay, float maxDelay
* @NativeName: Script_ModelFX_AddTagHealthDamageFX
* @NativeFunctionAddress 00000001407B0170
*/

void function ModelFX_AddTagHealthDamageFX(int stateIndex, float healthFrac, string tagName, asset fxName, float minDelay, float maxDelay)

/*
* @Breif Add model health damage looping fx: stateIndex, healthFrac, tagName, fxName
* @Pramas int stateIndex, float healthFrac, string tagName, asset fxName
* @NativeName: Script_ModelFX_AddTagHealthDamageFXLoop
* @NativeFunctionAddress 00000001407B00E0
*/

void function ModelFX_AddTagHealthDamageFXLoop(int stateIndex, float healthFrac, string tagName, asset fxName)

/*
* @Breif Enable model fx group
* @Pramas entity, string
* @NativeName: Script_ModelFX_EnableGroup
* @NativeFunctionAddress 00000001407B0070
*/

void function ModelFX_EnableGroup(entity, string)

/*
* @Breif Disable model fx group
* @Pramas entity, string
* @NativeName: Script_ModelFX_DisableGroup
* @NativeFunctionAddress 00000001407B0000
*/

void function ModelFX_DisableGroup(entity, string)

/*
* @Breif Disable all model fx groups
* @Pramas entity
* @NativeName: Script_ModelFX_DisableAllGroups
* @NativeFunctionAddress 00000001407AFF70
*/

void function ModelFX_DisableAllGroups(entity)

/*
* @Breif Returns 0 for minspec, 1 for medium spec, and 2 for max spec.
* @Pramas 
* @NativeName: Script_GetCPULevel
* @NativeFunctionAddress 00000001407AFEE0
*/

int function GetCPULevel()

/*
* @Breif Get the player's ping
* @Pramas 
* @NativeName: ClientScript_MyPing
* @NativeFunctionAddress 00000001407AA0D0
*/

int function MyPing()

/*
* @Breif Returns if local player has an entitlement
* @Pramas int
* @NativeName: Script_LocalPlayerHasEntitlement
* @NativeFunctionAddress 00000001407AFE30
*/

bool function LocalPlayerHasEntitlement(int)

/*
* @Breif Returns if client is playing in softened gore locale.
* @Pramas 
* @NativeName: IsSoftenedLocale
* @NativeFunctionAddress 00000001407AFDE0
*/

bool function IsSoftenedLocale()

/*
* @Breif sends a chat message to the game chat for your current team
* @Pramas string
* @NativeName: Script_SendTeamChatMessage
* @NativeFunctionAddress 00000001407AFD90
*/

void function SendTeamChatMessage(string)

/*
* @Breif Get's the mic level of a player
* @Pramas entity
* @NativeName: Script_GetPlayerMicStatus
* @NativeFunctionAddress 00000001407AFCC0
*/

int function GetPlayerMicStatus(entity)

/*
* @Breif True if 'debugClientDamageFeedback_victim' has been enabled.
* @Pramas 
* @NativeName: DebugVictimClientDamageFeedbackIsEnabled
* @NativeFunctionAddress 00000001407AD660
*/

bool function DebugVictimClientDamageFeedbackIsEnabled()

/*
* @Breif Let code know that model viewer mode was enabled.
* @Pramas 
* @NativeName: ModelViewerModeEnabled
* @NativeFunctionAddress 00000001407AFC70
*/

void function ModelViewerModeEnabled()

/*
* @Breif NotifyDropSequence.
* @Pramas bool
* @NativeName: NotifyDropSequence
* @NativeFunctionAddress 00000001407AFC20
*/

void function NotifyDropSequence(bool)

/*
* @Breif NotifyCharacterSelectBeginEnd.
* @Pramas bool
* @NativeName: NotifyCharacterSelectBeginEnd
* @NativeFunctionAddress 00000001407AFBC0
*/

void function NotifyCharacterSelectBeginEnd(bool)

/*
* @Breif RequireVolumetricLighting.
* @Pramas bool
* @NativeName: RequireVolumetricLighting
* @NativeFunctionAddress 00000001407AFB60
*/

void function RequireVolumetricLighting(bool)

/*
* @Breif LevelInfo_SetPlaneHeight.
* @Pramas float
* @NativeName: LevelInfo_SetPlaneHeight
* @NativeFunctionAddress 00000001407AFAF0
*/

void function LevelInfo_SetPlaneHeight(float)

/*
* @Breif LevelInfo_SetSeaHeight.
* @Pramas float
* @NativeName: LevelInfo_SetSeaHeight
* @NativeFunctionAddress 00000001407AFA80
*/

void function LevelInfo_SetSeaHeight(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetAimAssistCurrentTarget
* @NativeFunctionAddress 00000001407AF9F0
*/

entity function GetAimAssistCurrentTarget()

/*
* @Breif Set entity player is considered to be standing on for map streaming. Provide entity, with its original position and angles.
* @Pramas entity relativeEntity, vector baseOrigin, vector baseAngles
* @NativeName: Script_SetStreamingRelativeEntity
* @NativeFunctionAddress 00000001407AF980
*/

void function SetStreamingRelativeEntity(entity relativeEntity, vector baseOrigin, vector baseAngles)

/*
* @Breif Halt effects of SetStreamingRelativeEntity. Map will be streamed against the player's ordinary world position.
* @Pramas 
* @NativeName: Script_ClearStreamingRelativeEntity
* @NativeFunctionAddress 00000001407AF930
*/

void function ClearStreamingRelativeEntity()

/*
* @Breif Creates a new RUI plane topology, with optional clipping: org, right, down, clip
* @Pramas vector org, vector right, vector down, bool clip
* @NativeName: Script_RuiTopology_CreatePlane
* @NativeFunctionAddress 00000001407A3C10
*/

var function RuiTopology_CreatePlane()

/*
* @Breif Creates a new RUI sphere topology: org, right, down, radius, arcHorzDeg, arcVertDeg, arcSubdivDeg
* @Pramas vector org, vector right, vector down, float radius, float arcHorzDeg, float arcVertDeg, float arcSubdivDeg
* @NativeName: Script_RuiTopology_CreateSphere
* @NativeFunctionAddress 00000001407A3CD0
*/

var function RuiTopology_CreateSphere()

/*
* @Breif Destroys an existing RUI topology, and script errors if it is still in use or was already destroyed: topo
* @Pramas var topo
* @NativeName: Script_RuiTopology_Destroy
* @NativeFunctionAddress 00000001407A3E20
*/

var function RuiTopology_Destroy()

/*
* @Breif Tell's code to use this topology for this RUI_CODE_TOPO_* category: topo, codeCat
* @Pramas var topo, int codeCat
* @NativeName: Script_RuiTopology_ShareWithCode
* @NativeFunctionAddress 00000001407A3F70
*/

var function RuiTopology_ShareWithCode()

/*
* @Breif Changes an existing RUI topology's position and orientation: topo, org, right, down
* @Pramas var topo, vector org, vector right, vector down
* @NativeName: Script_RuiTopology_UpdatePos
* @NativeFunctionAddress 00000001407A4000
*/

var function RuiTopology_UpdatePos()

/*
* @Breif Changes an existing RUI sphere topology's arc subdivisions: topo, arcHorzDeg, arcVertDeg, arcSubdivDeg
* @Pramas var topo, float arcHorzDeg, float arcVertDeg, float arcSubdivDeg
* @NativeName: Script_RuiTopology_UpdateSphereArcs
* @NativeFunctionAddress 00000001407A40A0
*/

var function RuiTopology_UpdateSphereArcs()

/*
* @Breif Make this topology's origin, right, and down relative to a tag on an entity: topo, parentEnt, attachment
* @Pramas var topo, entity parentEnt, string attachment = ""
* @NativeName: Script_RuiTopology_SetParent
* @NativeFunctionAddress 00000001407A4230
*/

var function RuiTopology_SetParent()

/*
* @Breif Creates a new RUI instance on the given topology: uiName, topo, drawGroup, sortKey
* @Pramas asset uiName, var topo, int drawGroup, int sortKey
* @NativeName: Script_Rui_Create
* @NativeFunctionAddress 00000001407A43F0
*/

var function RuiCreate()

/*
* @Breif Creates a new RUI instance for a nested widget and assigns the new instance handle to an argument : ruiHandle, argName, uiName
* @Pramas var ruiHandle, string argName, asset uiName
* @NativeName: Script_Rui_CreateNested
* @NativeFunctionAddress 00000001407A4430
*/

var function RuiCreateNested()

/*
* @Breif Creates a new RUI instance on the given static prop: propRui
* @Pramas StaticPropRui propRui
* @NativeName: Script_Rui_CreateOnStaticProp
* @NativeFunctionAddress 00000001407A4470
*/

var function RuiCreateOnStaticProp()

/*
* @Breif Changes the draw grop of a RUI instance
* @Pramas var uiInst, int drawGroup
* @NativeName: Script_Rui_ChangeDrawGroup
* @NativeFunctionAddress 00000001407A44B0
*/

var function RuiChangeDrawGroup()

/*
* @Breif Destroys an existing RUI instance, and script errors if the RUI was already destroyed: uiInst
* @Pramas var uiInst
* @NativeName: Script_Rui_Destroy
* @NativeFunctionAddress 00000001407A4560
*/

var function RuiDestroy()

/*
* @Breif Destroys an existing RUI instance, and silently does nothing if the RUI died on its own: uiInst
* @Pramas var uiInst
* @NativeName: Script_Rui_DestroyIfAlive
* @NativeFunctionAddress 00000001407A45E0
*/

var function RuiDestroyIfAlive()

/*
* @Breif Destroys an existing RUI instance that is nested in another parent RUI instance: uiInstParent, argName
* @Pramas var uiInstParent, string argName
* @NativeName: Script_Rui_DestroyNested
* @NativeFunctionAddress 00000001407A4670
*/

var function RuiDestroyNested()

/*
* @Breif Destroys an existing RUI instance that is nested in another parent RUI instance, and does nothing if the RUI was already destroyed: uiInstParent, argName
* @Pramas var uiInstParent, string argName
* @NativeName: Script_Rui_DestroyNestedIfAlive
* @NativeFunctionAddress 00000001407A46B0
*/

var function RuiDestroyNestedIfAlive()

/*
* @Breif Set whether this RUI is visible: uiInst, visible
* @Pramas var uiInst, bool visible
* @NativeName: Script_Rui_SetVisible
* @NativeFunctionAddress 00000001407A46F0
*/

var function RuiSetVisible()

/*
* @Breif Change this UI's actual resolution, usually to fix aspect ratio issues for a fullscreen RUI: uiInst, resX, resY
* @Pramas var uiInst, float resX, float resY
* @NativeName: Script_Rui_SetResolution
* @NativeFunctionAddress 00000001407A4780
*/

var function RuiSetResolution()

/*
* @Breif Sets a string argument: uiInst, argName, value
* @Pramas var uiInst, string argName, string value
* @NativeName: Script_Rui_SetString
* @NativeFunctionAddress 00000001407A48B0
*/

var function RuiSetString()

/*
* @Breif Sets an asset argument: uiInst, argName, value
* @Pramas var uiInst, string argName, asset value
* @NativeName: Script_Rui_SetAsset
* @NativeFunctionAddress 00000001407A48F0
*/

var function RuiSetAsset()

/*
* @Breif Sets an image argument: uiInst, argName, value
* @Pramas var uiInst, string argName, asset value
* @NativeName: Script_Rui_SetImage
* @NativeFunctionAddress 00000001407A4930
*/

var function RuiSetImage()

/*
* @Breif Sets a bool argument: uiInst, argName, value
* @Pramas var uiInst, string argName, bool value
* @NativeName: Script_Rui_SetBool
* @NativeFunctionAddress 00000001407A4970
*/

var function RuiSetBool()

/*
* @Breif Sets an integer argument: uiInst, argName, value
* @Pramas var uiInst, string argName, int value
* @NativeName: Script_Rui_SetInt
* @NativeFunctionAddress 00000001407A4AC0
*/

var function RuiSetInt()

/*
* @Breif Sets a float argument: uiInst, argName, value
* @Pramas var uiInst, string argName, float value
* @NativeName: Script_Rui_SetFloat
* @NativeFunctionAddress 00000001407A4C20
*/

var function RuiSetFloat()

/*
* @Breif Sets a float2 argument: uiInst, argName, value
* @Pramas var uiInst, string argName, vector value
* @NativeName: Script_Rui_SetFloat2
* @NativeFunctionAddress 00000001407A4DF0
*/

var function RuiSetFloat2()

/*
* @Breif Sets a float3 argument: uiInst, argName, value
* @Pramas var uiInst, string argName, vector value
* @NativeName: Script_Rui_SetFloat3
* @NativeFunctionAddress 00000001407A4FB0
*/

var function RuiSetFloat3()

/*
* @Breif Sets a game time argument: uiInst, argName, value
* @Pramas var uiInst, string argName, float value
* @NativeName: Script_Rui_SetGameTime
* @NativeFunctionAddress 00000001407A51A0
*/

var function RuiSetGameTime()

/*
* @Breif Sets a float4 argument from color/alpha: uiInst, argName, color, alpha
* @Pramas var uiInst, string argName, vector color, float alpha
* @NativeName: Script_Rui_SetColorAlpha
* @NativeFunctionAddress 00000001407A5330
*/

var function RuiSetColorAlpha()

/*
* @Breif Continuously tracks a float4 argument
* @Pramas var uiInst, string argName, entity trackEnt, int trackProp, int customInt = 0
* @NativeName: Script_Rui_TrackFloat4
* @NativeFunctionAddress 00000001407A5370
*/

var function RuiTrackFloat4()

/*
* @Breif Continuously tracks a float3 argument
* @Pramas var uiInst, string argName, entity trackEnt, int trackProp, int customInt = 0
* @NativeName: Script_Rui_TrackFloat3
* @NativeFunctionAddress 00000001407A53C0
*/

var function RuiTrackFloat3()

/*
* @Breif Continuously tracks a float2 argument
* @Pramas var uiInst, string argName, entity trackEnt, int trackProp, int customInt = 0
* @NativeName: Script_Rui_TrackFloat2
* @NativeFunctionAddress 00000001407A5410
*/

var function RuiTrackFloat2()

/*
* @Breif Continuously tracks a float argument
* @Pramas var uiInst, string argName, entity trackEnt, int trackProp, int customInt = 0
* @NativeName: Script_Rui_TrackFloat
* @NativeFunctionAddress 00000001407A5460
*/

var function RuiTrackFloat()

/*
* @Breif Continuously tracks an int argument
* @Pramas var uiInst, string argName, entity trackEnt, int trackProp, int customInt = 0
* @NativeName: Script_Rui_TrackInt
* @NativeFunctionAddress 00000001407A54B0
*/

var function RuiTrackInt()

/*
* @Breif Continuously tracks a boolean argument
* @Pramas var uiInst, string argName, entity trackEnt, int trackProp, int customInt = 0
* @NativeName: Script_Rui_TrackBool
* @NativeFunctionAddress 00000001407A5500
*/

var function RuiTrackBool()

/*
* @Breif Continuously tracks a gametime argument
* @Pramas var uiInst, string argName, entity trackEnt, int trackProp, int customInt = 0
* @NativeName: Script_Rui_TrackGameTime
* @NativeFunctionAddress 00000001407A5550
*/

var function RuiTrackGameTime()

/*
* @Breif Continuously tracks an image argument
* @Pramas var uiInst, string argName, entity trackEnt, int trackProp, int customInt = 0
* @NativeName: Script_Rui_TrackImage
* @NativeFunctionAddress 00000001407A55A0
*/

var function RuiTrackImage()

/*
* @Breif Continuously tracks a string argument
* @Pramas var uiInst, string argName, entity trackEnt, int trackProp, int customInt = 0
* @NativeName: Script_Rui_TrackString
* @NativeFunctionAddress 00000001407A55F0
*/

var function RuiTrackString()

/*
* @Breif Calculate distance sort key : eye, pos
* @Pramas vector eye, vector pos
* @NativeName: Script_Rui_CalculateDistanceSortKey
* @NativeFunctionAddress 00000001407A5640
*/

var function RuiCalculateDistanceSortKey()

/*
* @Breif Keeps sort key updated : uiInst, update, argName
* @Pramas var uiInst, bool update, string argName
* @NativeName: Script_Rui_KeepSortKeyUpdated
* @NativeFunctionAddress 00000001407A5730
*/

var function RuiKeepSortKeyUpdated()

/*
* @Breif Checks if an asset exists for this image name
* @Pramas string
* @NativeName: Script_Rui_ImageExists
* @NativeFunctionAddress 00000001407AF8D0
*/

bool function RuiImageExists(string)

/*
* @Breif Gets the size of the rui (in virtual coordinates) from the last time it was drawn
* @Pramas var uiInst
* @NativeName: Script_Rui_GetLastScreenSize
* @NativeFunctionAddress 00000001407A5810
*/

var function RuiGetLastScreenSize()

/*
* @Breif Gets the position of the rui (in virtual coordinates) from the last time it was drawn
* @Pramas var uiInst
* @NativeName: Script_Rui_GetLastScreenPosition
* @NativeFunctionAddress 00000001407A5900
*/

var function RuiGetLastScreenPosition()

/*
* @Breif Gets the embedded rui that will draw with the given substitution name
* @Pramas string substitutionName
* @NativeName: Script_Rui_GetEmbeddedRuiHandle
* @NativeFunctionAddress 00000001407A59F0
*/

var function RuiGetEmbeddedHandle()

/*
* @Breif Sets a bool argument in a macro rui
* @Pramas var embeddedHandle, string argName, bool value
* @NativeName: Script_Rui_SetEmbeddedRuiBool
* @NativeFunctionAddress 00000001407A5B20
*/

var function RuiSetEmbeddedRuiBool()

/*
* @Breif Sets a int argument in a macro rui
* @Pramas var embeddedHandle, string argName, int value
* @NativeName: Script_Rui_SetEmbeddedRuiInt
* @NativeFunctionAddress 00000001407A5B60
*/

var function RuiSetEmbeddedRuiInt()

/*
* @Breif Sets a float argument in a macro rui
* @Pramas var embeddedHandle, string argName, float value
* @NativeName: Script_Rui_SetEmbeddedRuiFloat
* @NativeFunctionAddress 00000001407A5BA0
*/

var function RuiSetEmbeddedRuiFloat()

/*
* @Breif Sets a float2 argument in a macro rui
* @Pramas var embeddedHandle, string argName, vector value
* @NativeName: Script_Rui_SetEmbeddedRuiFloat2
* @NativeFunctionAddress 00000001407A5BE0
*/

var function RuiSetEmbeddedRuiFloat2()

/*
* @Breif Sets a float3 argument in a macro rui
* @Pramas var embeddedHandle, string argName, vector value
* @NativeName: Script_Rui_SetEmbeddedRuiFloat3
* @NativeFunctionAddress 00000001407A5C20
*/

var function RuiSetEmbeddedRuiFloat3()

/*
* @Breif Sets a float4 argument from color/alpha in a macro rui
* @Pramas var embeddedHandle, string argName, vector color, float alpha
* @NativeName: Script_Rui_SetEmbeddedRuiColorAlpha
* @NativeFunctionAddress 00000001407A5C60
*/

var function RuiSetEmbeddedRuiColorAlpha()

/*
* @Breif Sets a string argument in a macro rui
* @Pramas var embeddedHandle, string argName, string value
* @NativeName: Script_Rui_SetEmbeddedRuiString
* @NativeFunctionAddress 00000001407A5CA0
*/

var function RuiSetEmbeddedRuiString()

/*
* @Breif Executes a UI script function with arbitrary arguments. (supports int, float, bool, vector, string, and the fake UI player entity)
* @Pramas string funcName, ...
* @NativeName: Script_RunUIScript
* @NativeFunctionAddress 00000001407A5CE0
*/

var function RunUIScript()

/*
* @Breif Converts standard RGB to linear color
* @Pramas vector
* @NativeName: Script_SrgbToLinear
* @NativeFunctionAddress 00000001407A5D20
*/

var function SrgbToLinear()

/*
* @Breif Converts a string to an asset. Caution: Do not use unless you understand vbspinfo.
* @Pramas string assetPath
* @NativeName: Script_AssetDownloads_GetAssetFromString
* @NativeFunctionAddress 00000001407A5E20
*/

var function GetAssetFromString()

/*
* @Breif Lock FOV to 70 until an equal number of PopLockFOV calls.
* @Pramas 
* @NativeName: PushLockFOV
* @NativeFunctionAddress 00000001407AF890
*/

void function PushLockFOV()

/*
* @Breif Lock FOV to 70 until an equal number of PopLockFOV calls.
* @Pramas 
* @NativeName: PopLockFOV
* @NativeFunctionAddress 00000001407AF830
*/

void function PopLockFOV()

/*
* @Breif Returns true if the client is currently in overview mode.
* @Pramas 
* @NativeName: Script_IsInOverviewMode
* @NativeFunctionAddress 00000001407AF7E0
*/

bool function IsInOverviewMode()

/*
* @Breif Given a UI position (in pixels), get a 3D vector pointing from main view origin to that UI position. Cannot be used in overview mode, so make sure to check IsInOverviewMode() first before calling this function.
* @Pramas int, int
* @NativeName: Script_GetWorldDirectionFor2DPoint
* @NativeFunctionAddress 00000001407AF700
*/

vector function GetWorldDirectionFor2DPoint(int, int)

/*
* @Breif Returns main view origin for the client. May NOT match the player's aim origin, since client does a bunch of stuff to the client's camera that doesn't get accounted for on the server.
* @Pramas 
* @NativeName: Script_GetFinalClientMainViewOrigin
* @NativeFunctionAddress 00000001407AF650
*/

vector function GetFinalClientMainViewOrigin()

/*
* @Breif Disables in game movement and displays the game cursor
* @Pramas 
* @NativeName: Script_EnableGameCursorInGame
* @NativeFunctionAddress 00000001407AF610
*/

void function EnableGameCursorInGame()

/*
* @Breif Enables in game movement and hides the game cursor
* @Pramas 
* @NativeName: Script_DisableGameCursorInGame
* @NativeFunctionAddress 00000001407AF5D0
*/

void function DisableGameCursorInGame()

/*
* @Breif Sets the rui for cursor tooltips
* @Pramas string ruiPath
* @NativeName: Script_GameCursor_SetTooltipRui
* @NativeFunctionAddress 00000001407A5EA0
*/

var function SetTooltipRui()

/*
* @Breif Hides the cursor tooltip
* @Pramas 
* @NativeName: Script_GameCursor_HideTooltipRui
* @NativeFunctionAddress 00000001407AF590
*/

void function HideTooltipRui()

/*
* @Breif Shows the cursor tooltip
* @Pramas 
* @NativeName: Script_GameCursor_ShowTooltipRui
* @NativeFunctionAddress 00000001407AF500
*/

void function ShowTooltipRui()

/*
* @Breif Returns the rui for cursor tooltips
* @Pramas 
* @NativeName: Script_GameCursor_GetTooltipRui
* @NativeFunctionAddress 00000001407A5EE0
*/

var function GetTooltipRui()

/*
* @Breif Returns the rui for the game cursor
* @Pramas 
* @NativeName: Script_GameCursor_GetCursorRui
* @NativeFunctionAddress 00000001407A5F70
*/

var function GetCursorRui()

/*
* @Breif Returns the anchor for the big map. Z is always 0
* @Pramas 
* @NativeName: Script_GetBigMapZoomAnchor
* @NativeFunctionAddress 00000001407AF440
*/

vector function GetBigMapZoomAnchor()

/*
* @Breif Sets the anchor for the big map. Takes an x and a y
* @Pramas float, float
* @NativeName: Script_SetBigMapZoomAnchor
* @NativeFunctionAddress 00000001407AF3A0
*/

void function SetBigMapZoomAnchor(float, float)

/*
* @Breif Gets the zoom scale for the big map
* @Pramas 
* @NativeName: Script_GetBigMapZoomScale
* @NativeFunctionAddress 00000001407AF300
*/

float function GetBigMapZoomScale()

/*
* @Breif Sets the zoom scale for the big map
* @Pramas float
* @NativeName: Script_SetBigMapZoomScale
* @NativeFunctionAddress 00000001407AF290
*/

void function SetBigMapZoomScale(float)

/*
* @Breif 
* @Pramas entity, float, float, float
* @NativeName: Freefall_ShouldBeInLandingMode_Script_Client
* @NativeFunctionAddress 00000001408FE670
*/

bool function Freefall_ShouldBeInLandingMode(entity, float, float, float)

/*
* @Breif Returns true if given player is playing a first-person animation only.
* @Pramas entity
* @NativeName: Client_ScriptIsPlayingFirstPersonAnimation
* @NativeFunctionAddress 00000001407AF1E0
*/

bool function IsPlayingFirstPersonAnimation(entity)

/*
* @Breif Returns true if given player is playing a first-person and third-person animation.
* @Pramas entity
* @NativeName: Client_ScriptIsPlayingFirstAndThirdPersonAnimation
* @NativeFunctionAddress 00000001407AF130
*/

bool function IsPlayingFirstAndThirdPersonAnimation(entity)

/*
* @Breif Returns true if given player is playing a first-person and third-person animation while parented to something.
* @Pramas entity
* @NativeName: Client_ScriptIsPlayingParentedFirstAndThirdPersonAnimation
* @NativeFunctionAddress 00000001407AF080
*/

bool function IsPlayingParentedFirstAndThirdPersonAnimation(entity)

/*
* @Breif Update spinner. You should call this every 50ms or so if you have a script function called during loading that takes more than 50ms.
* @Pramas 
* @NativeName: UpdateLoadingProgress_SuppressPumpMessages
* @NativeFunctionAddress 00000001407AF020
*/

void function UpdateLoadingProgress()

/*
* @Breif Play text as speech audio.
* @Pramas string
* @NativeName: Script_PlayTextToSpeech
* @NativeFunctionAddress 00000001407AEEB0
*/

void function PlayTextToSpeech(string)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PIN_GetSessionId
* @NativeFunctionAddress 00000001407AEE30
*/

string function PIN_GetSessionId()

/*
* @Breif Sets whether the current gameplay is considered "multiplayer" for Sony's cert requirements
* @Pramas bool
* @NativeName: Script_SetIsConsideredSonyMultiplayer
* @NativeFunctionAddress 00000001407AEDF0
*/

void function SetIsConsideredSonyMultiplayer(bool)

/*
* @Breif Creates a new color-correction layer, returns an index for use in other functions. Can be used immediately.
* @Pramas string
* @NativeName: ScriptColorCorrection_LoadSync
* @NativeFunctionAddress 00000001406B2BF0
*/

int function ColorCorrection_Register(string)

/*
* @Breif Creates a new color-correction layer, returns an index for use in other functions. Must not use until `ColorCorrection_PollAsync` returns true.
* @Pramas string
* @NativeName: ScriptColorCorrection_LoadAsync
* @NativeFunctionAddress 00000001406B2B50
*/

int function ColorCorrection_LoadAsync(string)

/*
* @Breif Returns true when it is okay to use a handle registered with `ColorCorrection_LoadAsync`.
* @Pramas int
* @NativeName: ScriptColorCorrection_PollAsync
* @NativeFunctionAddress 00000001406B2AD0
*/

bool function ColorCorrection_PollAsync(int)

/*
* @Breif Releases a color-correction layer.
* @Pramas int
* @NativeName: ScriptColorCorrection_Release
* @NativeFunctionAddress 00000001406B2A60
*/

void function ColorCorrection_Release(int)

/*
* @Breif Set color-correction layer to exclusive mode. Weights for other layers will be 1 minus the weight of this layer.
* @Pramas int, bool
* @NativeName: ScriptColorCorrection_SetExclusive
* @NativeFunctionAddress 00000001406B29C0
*/

void function ColorCorrection_SetExclusive(int, bool)

/*
* @Breif Sets the weight of a color-correction layer. Active layers blend based on relative weights.
* @Pramas int, float
* @NativeName: ScriptColorCorrection_SetWeight
* @NativeFunctionAddress 00000001406B2910
*/

void function ColorCorrection_SetWeight(int, float)

/*
* @Breif 
* @Pramas string
* @NativeName: ScriptColorCorrection_RegisterPhaseShift
* @NativeFunctionAddress 00000001406B2850
*/

bool function ColorCorrection_RegisterPhaseShift(string)

/*
* @Breif (monitorIndex, ccIndex)
* @Pramas int, int
* @NativeName: ScriptColorCorrection_AssignMonitor
* @NativeFunctionAddress 00000001406B2770
*/

bool function ColorCorrection_AssignMonitor(int, int)

/*
* @Breif (monitorIndex)
* @Pramas int
* @NativeName: ScriptColorCorrection_UnassignMonitor
* @NativeFunctionAddress 00000001406B26D0
*/

bool function ColorCorrection_UnassignMonitor(int)

/*
* @Breif 
* @Pramas string graphName, array<vector> leftMotor, array<vector> rightMotor
* @NativeName: Rumble_Script_CreateGraphAll
* @NativeFunctionAddress 00000001409B4E60
*/

var function Rumble_CreateGraphAll()

/*
* @Breif 
* @Pramas string rumbleName, table params
* @NativeName: Rumble_Script_CreatePlayParamsAll
* @NativeFunctionAddress 00000001409B4EA0
*/

var function Rumble_CreatePlayParamsAll()

/*
* @Breif 
* @Pramas string graphName, array<vector> leftMotor, array<vector> rightMotor
* @NativeName: Rumble_Script_CreateGraphPS4
* @NativeFunctionAddress 00000001409B4EE0
*/

var function Rumble_CreateGraphPS4()

/*
* @Breif 
* @Pramas string rumbleName, table params
* @NativeName: Rumble_Script_CreatePlayParamsPS4
* @NativeFunctionAddress 00000001409B4F20
*/

var function Rumble_CreatePlayParamsPS4()

/*
* @Breif 
* @Pramas string graphName, array<vector> leftMotor, array<vector> rightMotor
* @NativeName: Rumble_Script_CreateGraph360
* @NativeFunctionAddress 00000001409B4F60
*/

var function Rumble_CreateGraph360()

/*
* @Breif 
* @Pramas string rumbleName, table params
* @NativeName: Rumble_Script_CreatePlayParams360
* @NativeFunctionAddress 00000001409B4FA0
*/

var function Rumble_CreatePlayParams360()

/*
* @Breif 
* @Pramas string graphName, array<vector> leftMotor, array<vector> rightMotor, array<vector> leftTriggerMotor, array<vector> rightTriggerMotor
* @NativeName: Rumble_Script_CreateGraphXB1
* @NativeFunctionAddress 00000001409B4FE0
*/

var function Rumble_CreateGraphXB1()

/*
* @Breif 
* @Pramas string rumbleName, table params
* @NativeName: Rumble_Script_CreatePlayParamsXB1
* @NativeFunctionAddress 00000001409B5020
*/

var function Rumble_CreatePlayParamsXB1()

/*
* @Breif Play rumble with the given named rumble params and overrides
* @Pramas ( name, paramsOverrides )
* @NativeName: Rumble_Script_Play
* @NativeFunctionAddress 00000001409B5060
*/

var function Rumble_Play(var, string, table)

/*
* @Breif Creates a damage indicator with the specified vector and scale.
* @Pramas vector, float
* @NativeName: Script_AddDamageIndicator
* @NativeFunctionAddress 00000001409C3E40
*/

void function AddDamageIndicator(vector, float)

/*
* @Breif Creates a grenade indicator with the specified entity and radius
* @Pramas entity, float, float, bool
* @NativeName: Script_AddGrenadeIndicator
* @NativeFunctionAddress 00000001409C3D90
*/

void function AddGrenadeIndicator(entity, float, float, bool)

/*
* @Breif Removes the grenade indicator for the given entity
* @Pramas entity
* @NativeName: Script_RemoveGrenadeIndicator
* @NativeFunctionAddress 00000001409C3C70
*/

void function RemoveGrenadeIndicator(entity)

/*
* @Breif Gets the global client env_cascade_light
* @Pramas 
* @NativeName: Script_GetCascadeLight
* @NativeFunctionAddress 00000001406A6170
*/

entity function GetLightEnvironmentEntity()

/*
* @Breif Overrides the near DoF parameters immediately.
* @Pramas float, float
* @NativeName: ScriptDoFSetNearDepthTarget
* @NativeFunctionAddress 00000001406A6840
*/

void function DoF_SetNearDepth(float, float)

/*
* @Breif Overrides the near DoF parameters over a period of time.
* @Pramas float, float, float
* @NativeName: ScriptDoFLerpNearDepthTarget
* @NativeFunctionAddress 00000001406A67A0
*/

void function DoF_LerpNearDepth(float, float, float)

/*
* @Breif Overrides the far DoF parameters immediately.
* @Pramas float, float
* @NativeName: ScriptDoFSetFarDepthTarget
* @NativeFunctionAddress 00000001406A6710
*/

void function DoF_SetFarDepth(float, float)

/*
* @Breif Overrides the far DoF parameters over a period of time.
* @Pramas float, float, float
* @NativeName: ScriptDoFLerpFarDepthTarget
* @NativeFunctionAddress 00000001406A6670
*/

void function DoF_LerpFarDepth(float, float, float)

/*
* @Breif Restores the near DoF parameters to their defaults immediately.
* @Pramas 
* @NativeName: ScriptDoFSetNearDepthToDefault
* @NativeFunctionAddress 00000001406A6610
*/

void function DoF_SetNearDepthToDefault()

/*
* @Breif Restores the near DoF parameters to their defaults over a period of time.
* @Pramas float
* @NativeName: ScriptDoFLerpNearDepthToDefault
* @NativeFunctionAddress 00000001406A65A0
*/

void function DoF_LerpNearDepthToDefault(float)

/*
* @Breif Restores the far DoF parameters to their defaults immediately.
* @Pramas 
* @NativeName: ScriptDoFSetFarDepthToDefault
* @NativeFunctionAddress 00000001406A6540
*/

void function DoF_SetFarDepthToDefault()

/*
* @Breif Restores the far DoF parameters to their defaults over a period of time.
* @Pramas float
* @NativeName: ScriptDoFLerpFarDepthToDefault
* @NativeFunctionAddress 00000001406A64D0
*/

void function DoF_LerpFarDepthToDefault(float)

/*
* @Breif Start async load of an asset pakfile. Return the file handle or -1 if it fails. ClientCodeCallback_PakRequestFinished is called with the file status when load succeeds or fails.
* @Pramas string rpakPath
* @NativeName: ClientPakFile_RequestAsyncLoad
* @NativeFunctionAddress 00000001406A5EB0
*/

int function ClientPakFile_RequestAsyncLoad(string rpakPath)

/*
* @Breif Unload a loaded asset pakfile. Returns an error code or PAK_STATUS_FREED on success.
* @Pramas int pakId
* @NativeName: ClientPakFile_Unload
* @NativeFunctionAddress 00000001406A5E00
*/

int function ClientPakFile_Unload(int pakId)

/*
* @Breif Returns true if the file can be found on disk. Indicates that the file download completed successfully.
* @Pramas string rpakName
* @NativeName: AssetDownloads_IsDownloadedFileReadyForPakLoad
* @NativeFunctionAddress 00000001403173D0
*/

bool function IsDownloadedFileReadyForPakLoad(string rpakName)

/*
* @Breif Is this a reloaded save game?
* @Pramas 
* @NativeName: Client_ScriptIsGameFromReload
* @NativeFunctionAddress 0000000140845130
*/

bool function IsGameFromReload()

/*
* @Breif Returns the number of gamemodes in the current playlist
* @Pramas 
* @NativeName: Client_GetCurrentPlaylistGamemodesCount
* @NativeFunctionAddress 0000000140848A50
*/

int function GetCurrentPlaylistGamemodesCount()

/*
* @Breif Returns the number of gamemodes in the specified playlist
* @Pramas string
* @NativeName: Client_GetPlaylistGamemodesCount
* @NativeFunctionAddress 00000001408489B0
*/

int function GetPlaylistGamemodesCount(string)

/*
* @Breif Returns the name of the gamemode at the specified index in the current playlist
* @Pramas int
* @NativeName: Client_GetCurrentPlaylistGamemodeByIndex
* @NativeFunctionAddress 0000000140848940
*/

string function GetCurrentPlaylistGamemodeByIndex(int)

/*
* @Breif Returns the name of the gamemode at the specified index in the specified playlist
* @Pramas string, int
* @NativeName: Client_GetPlaylistGamemodeByIndex
* @NativeFunctionAddress 00000001408488D0
*/

string function GetPlaylistGamemodeByIndex(string, int)

/*
* @Breif 
* @Pramas string, int, string
* @NativeName: Client_GetPlaylistGamemodeByIndexVar
* @NativeFunctionAddress 0000000140848850
*/

string function GetPlaylistGamemodeByIndexVar(string, int, string)

/*
* @Breif 
* @Pramas int, string, bool
* @NativeName: Client_GetCurrentPlaylistGamemodeByIndexVar
* @NativeFunctionAddress 00000001408487D0
*/

string function GetCurrentPlaylistGamemodeByIndexVar(int, string, bool)

/*
* @Breif Returns the number of maps for the gamemode at the specified index in the current playlist
* @Pramas int
* @NativeName: Client_GetCurrentPlaylistGamemodeByIndexMapsCount
* @NativeFunctionAddress 0000000140848720
*/

int function GetCurrentPlaylistGamemodeByIndexMapsCount(int)

/*
* @Breif Returns the number of maps for the gamemode at the specified index in the specified playlist
* @Pramas string, int
* @NativeName: Client_GetPlaylistGamemodeByIndexMapsCount
* @NativeFunctionAddress 0000000140848670
*/

int function GetPlaylistGamemodeByIndexMapsCount(string, int)

/*
* @Breif Returns the name of the map at the specified gamemode and map indices in the current playlist
* @Pramas int, int
* @NativeName: Client_GetCurrentPlaylistGamemodeByIndexMapByIndex
* @NativeFunctionAddress 00000001408485F0
*/

string function GetCurrentPlaylistGamemodeByIndexMapByIndex(int, int)

/*
* @Breif Returns the name of the map at the specified gamemode and map indices in the specified playlist
* @Pramas string, int, int
* @NativeName: Client_GetPlaylistGamemodeByIndexMapByIndex
* @NativeFunctionAddress 0000000140848560
*/

string function GetPlaylistGamemodeByIndexMapByIndex(string, int, int)

/*
* @Breif Returns the total number of maps in current playlist
* @Pramas 
* @NativeName: Client_GetCurrentPlaylistMapsCount
* @NativeFunctionAddress 00000001408484D0
*/

int function GetCurrentPlaylistMapsCount()

/*
* @Breif Returns the total number of maps in the specified playlist
* @Pramas string
* @NativeName: Client_GetPlaylistMapsCount
* @NativeFunctionAddress 0000000140848430
*/

int function GetPlaylistMapsCount(string)

/*
* @Breif 
* @Pramas 
* @NativeName: Client_IsPrivateMatch
* @NativeFunctionAddress 00000001408483D0
*/

bool function IsPrivateMatch()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_IsCoopMatch
* @NativeFunctionAddress 0000000140848370
*/

bool function IsCoopMatch()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_GetLobbyTeamsShowAsBalanced
* @NativeFunctionAddress 0000000140848320
*/

bool function GetLobbyTeamsShowAsBalanced()

/*
* @Breif 
* @Pramas 
* @NativeName: Client_DevLobbyIsFrozen
* @NativeFunctionAddress 00000001407AD660
*/

bool function DevLobbyIsFrozen()

/*
* @Breif 
* @Pramas string, string, string
* @NativeName: Client_GetGamemodeVarOrUseValue
* @NativeFunctionAddress 00000001408482B0
*/

string function GetGamemodeVarOrUseValue(string, string, string)

/*
* @Breif Returns the total number of playlists
* @Pramas 
* @NativeName: Client_GetPlaylistCount
* @NativeFunctionAddress 0000000140848220
*/

int function GetPlaylistCount()

/*
* @Breif Gets the name of the playlist, by index
* @Pramas int
* @NativeName: Client_GetPlaylistName
* @NativeFunctionAddress 00000001408481B0
*/

string ornull function GetPlaylistName(int)

/*
* @Breif Get the original value of a variable from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, string
* @NativeName: Client_GetPlaylistVarOrUseValueOriginal
* @NativeFunctionAddress 0000000140848140
*/

string function GetPlaylistVarOrUseValueOriginal(string, string, string)

/*
* @Breif Get the name of the current playlist
* @Pramas 
* @NativeName: Client_GetCurrentPlaylistName
* @NativeFunctionAddress 00000001408480E0
*/

string function GetCurrentPlaylistName()

/*
* @Breif Get the original value of a variable from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string
* @NativeName: Client_GetCurrentPlaylistVarOrUseValueOriginal
* @NativeFunctionAddress 0000000140848070
*/

string function GetCurrentPlaylistVarOrUseValueOriginal(string, string)

/*
* @Breif Get the value of a string from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, string
* @NativeName: Client_GetPlaylistVarString
* @NativeFunctionAddress 0000000140848000
*/

string function GetPlaylistVarString(string, string, string)

/*
* @Breif Get the value of a bool from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, bool
* @NativeName: Client_GetPlaylistVarBool
* @NativeFunctionAddress 0000000140847F90
*/

bool function GetPlaylistVarBool(string, string, bool)

/*
* @Breif Get the value of an integer from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, int
* @NativeName: Client_GetPlaylistVarInt
* @NativeFunctionAddress 0000000140847ED0
*/

int function GetPlaylistVarInt(string, string, int)

/*
* @Breif Get the value of a float from a playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string, float
* @NativeName: Client_GetPlaylistVarFloat
* @NativeFunctionAddress 0000000140847E10
*/

float function GetPlaylistVarFloat(string, string, float)

/*
* @Breif Get the value of a string from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, string
* @NativeName: Client_GetCurrentPlaylistVarString
* @NativeFunctionAddress 0000000140847DA0
*/

string function GetCurrentPlaylistVarString(string, string)

/*
* @Breif Get the value of a bool from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, bool
* @NativeName: Client_GetCurrentPlaylistVarBool
* @NativeFunctionAddress 0000000140847D40
*/

bool function GetCurrentPlaylistVarBool(string, bool)

/*
* @Breif Get the value of an integer from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, int
* @NativeName: Client_GetCurrentPlaylistVarInt
* @NativeFunctionAddress 0000000140847C90
*/

int function GetCurrentPlaylistVarInt(string, int)

/*
* @Breif Get the value of a float from the current playlist, and if it doesn't exist, use the value passed in
* @Pramas string, float
* @NativeName: Client_GetCurrentPlaylistVarFloat
* @NativeFunctionAddress 0000000140847BD0
*/

float function GetCurrentPlaylistVarFloat(string, float)

/*
* @Breif Gets the max players for the specified playlist
* @Pramas string
* @NativeName: Client_GetMaxPlayersForPlaylistName
* @NativeFunctionAddress 0000000140847B20
*/

int function GetMaxPlayersForPlaylistName(string)

/*
* @Breif Gets the max teams for the specified playlist
* @Pramas string
* @NativeName: Client_GetMaxTeamsForPlaylistName
* @NativeFunctionAddress 0000000140847A70
*/

int function GetMaxTeamsForPlaylistName(string)

/*
* @Breif Start searching for a match on this playlist
* @Pramas string
* @NativeName: StartMatchmaking
* @NativeFunctionAddress 0000000140847A20
*/

void function StartMatchmaking(string)

/*
* @Breif Stop searching for a match
* @Pramas 
* @NativeName: StopMatchmaking
* @NativeFunctionAddress 00000001408479E0
*/

void function StopMatchmaking()

/*
* @Breif Cancel searching for a match
* @Pramas 
* @NativeName: CancelMatchmaking
* @NativeFunctionAddress 00000001408479A0
*/

void function CancelMatchmaking()

/*
* @Breif Returns true if we are matchmaking
* @Pramas 
* @NativeName: AreWeMatchmaking
* @NativeFunctionAddress 0000000140847950
*/

bool function AreWeMatchmaking()

/*
* @Breif Indicate to the party what playlist we will be playing. Starts map preloading for single-map playlists.
* @Pramas string
* @NativeName: SetMatchmakingPlaylist
* @NativeFunctionAddress 0000000140847900
*/

void function SetMatchmakingPlaylist(string)

/*
* @Breif Returns 'party' or 'game' lobby type
* @Pramas 
* @NativeName: Client_GetLobbyType
* @NativeFunctionAddress 0000000140846190
*/

string function GetLobbyType()

/*
* @Breif Returns true if the local player is the party leader.
* @Pramas 
* @NativeName: AmIPartyLeader
* @NativeFunctionAddress 0000000140846110
*/

bool function AmIPartyLeader()

/*
* @Breif Returns true if the player passed in is in a party with the local player.
* @Pramas entity
* @NativeName: Script_IsPartyMember
* @NativeFunctionAddress 00000001408460A0
*/

bool function IsPartyMember(entity)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetTeamPendingPlayersReserved
* @NativeFunctionAddress 0000000140845FB0
*/

int function GetTeamPendingPlayersReserved(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetTeamPendingPlayersConnecting
* @NativeFunctionAddress 0000000140845EC0
*/

int function GetTeamPendingPlayersConnecting(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetTeamPendingPlayersLoading
* @NativeFunctionAddress 0000000140845DD0
*/

int function GetTeamPendingPlayersLoading(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTotalPendingPlayersReserved
* @NativeFunctionAddress 0000000140845AF0
*/

int function GetTotalPendingPlayersReserved()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTotalPendingPlayersConnecting
* @NativeFunctionAddress 0000000140845810
*/

int function GetTotalPendingPlayersConnecting()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTotalPendingPlayersLoading
* @NativeFunctionAddress 0000000140845530
*/

int function GetTotalPendingPlayersLoading()

/*
* @Breif Invite people to party.
* @Pramas array< string > to_be_invited
* @NativeName: Client_Script_DoInviteToParty
* @NativeFunctionAddress 00000001408454C0
*/

bool function DoInviteToParty(array< string > to_be_invited)

/*
* @Breif Invite person to be friend.
* @Pramas string
* @NativeName: Client_Script_DoInviteTobeFriend
* @NativeFunctionAddress 0000000140845420
*/

bool function DoInviteToBeFriend(string)

/*
* @Breif Returns true if origin is enabled.
* @Pramas 
* @NativeName: Script_Origin_IsEnabled
* @NativeFunctionAddress 00000001408453C0
*/

bool function Origin_IsEnabled()

/*
* @Breif Returns true if game is upto date in Origin.
* @Pramas 
* @NativeName: Script_Origin_IsUpToDate
* @NativeFunctionAddress 0000000140845360
*/

bool function Origin_IsUpToDate()

/*
* @Breif Returns true if origin is online. If Origin is not online please grey out "PLAY" in the main menu.
* @Pramas 
* @NativeName: Script_Origin_IsOnline
* @NativeFunctionAddress 0000000140845300
*/

bool function Origin_IsOnline()

/*
* @Breif Returns true if origin is ready to go. You should block leaving the main menu until this is true. If origin is enabled it needs to be ready before you connect to the party dedi
* @Pramas 
* @NativeName: Script_Origin_IsReady
* @NativeFunctionAddress 00000001408452A0
*/

bool function Origin_IsReady()

/*
* @Breif Returns true if the Origin session is joinable, eg. if Origin is enabled and we are ready and we have a valid session and our team is not full, and we are not in mp_npe level :D
* @Pramas 
* @NativeName: Script_Origin_IsJoinable
* @NativeFunctionAddress 0000000140845240
*/

bool function Origin_IsJoinable()

/*
* @Breif Returns true if the Origin overlay is available. Perf is safe to call this function repeatedly as it uses a cached value. Value may dynamically change as the game is running
* @Pramas 
* @NativeName: Script_Origin_IsOverlayAvailable
* @NativeFunctionAddress 00000001408451E0
*/

bool function Origin_IsOverlayAvailable()

/*
* @Breif Show the Origin invite friends dialog. Returns false if for some reason it didn't work.
* @Pramas 
* @NativeName: Script_Origin_ShowInviteFriendsDialog
* @NativeFunctionAddress 0000000140845180
*/

bool function Origin_ShowInviteFriendsDialog()

//=============== UNIMPLEMENT FUNCTIONS AREA START(MAYBE WILL ADD IT LATER) =========================
/*
* @Breif Draw custom (color) text on screen
* @Pramas int,int,string,int,int,int,int,int,int
* @NativeName: DrawScreenCustomText
* @NativeFunctionAddress 00007FF8004343E0
*/

bool function DrawScreenCustomText()

/*
* @Breif Register cutstom text Render Id
* @Pramas int
* @NativeName: RegisterScreenCustomTextId
* @NativeFunctionAddress 00007FF800434230
*/

bool function RegisterScreenCustomTextId()

/*
* @Breif Move cutstom text By Render Id
* @Pramas int
* @NativeName: RemoveScreenCustomTextById
* @NativeFunctionAddress 00007FF800434620
*/

bool function RemoveScreenCustomTextById()

/*
* @Breif Change custom text alpha By Render Id
* @Pramas int,int
* @NativeName: SetAlphaForScreenCustomTextById
* @NativeFunctionAddress 00007FF800433DF0
*/

bool function SetAlphaForScreenCustomTextById()

/*
* @Breif Change cutstom text color By Render Id
* @Pramas int,int,int,int,int
* @NativeName: SetColorForScreenCustomTextById
* @NativeFunctionAddress 00007FF800433EC0
*/

bool function SetColorForScreenCustomTextById()

/*
* @Breif Change cutstom text content By Render Id
* @Pramas int, string
* @NativeName: SetTextForScreenCustomTextById
* @NativeFunctionAddress 00007FF800433FA0
*/

bool function SetTextForScreenCustomTextById()

/*
* @Breif Change cutstom text font size By Render Id
* @Pramas int, int
* @NativeName: SetFontSizeForScrrenCustomTextById
* @NativeFunctionAddress 00007FF800434160
*/

bool function SetFontSizeForScrrenCustomTextById()

/*
* @Breif Change cutstom text position By Render Id
* @Pramas int, int, int
* @NativeName: SetPosForScreenCustomTextById
* @NativeFunctionAddress 00007FF800434070
*/

bool function SetPosForScreenCustomTextById()

/*
* @Breif Clear All Screen Custom Text
* @Pramas 
* @NativeName: ClearAllScreenCustomText
* @NativeFunctionAddress 00007FF800433DC0
*/

bool function ClearAllScreenCustomText()

//=============== UNIMPLEMENT FUNCTIONS AREA END(MAYBE WILL ADD IT LATER) =========================

/*
* @Breif 
* @Pramas int teamNumber, int otherTeam
* @NativeName: Client_Script_IsEnemyTeam
* @NativeFunctionAddress 00000001408450B0
*/

bool function IsEnemyTeam(int teamNumber, int otherTeam)

/*
* @Breif 
* @Pramas int teamNumber, int otherTeam
* @NativeName: Client_Script_IsFriendlyTeam
* @NativeFunctionAddress 0000000140845030
*/

bool function IsFriendlyTeam(int teamNumber, int otherTeam)

/*
* @Breif 
* @Pramas int teamNum
* @NativeName: Client_Script_IsTeamCivil
* @NativeFunctionAddress 0000000140844FA0
*/

bool function IsTeamCivil(int teamNum)

/*
* @Breif 
* @Pramas int teamNum
* @NativeName: Client_Script_IsTeamRabid
* @NativeFunctionAddress 0000000140844F10
*/

bool function IsTeamRabid(int teamNum)

/*
* @Breif Sets the current playlist
* @Pramas string
* @NativeName: Client_SetCurrentPlaylist
* @NativeFunctionAddress 0000000140844E70
*/

bool function SetCurrentPlaylist(string)

/*
* @Breif Clear set of cached item names per-type used for bot_loadout auto-complete
* @Pramas 
* @NativeName: ClearItemTypes
* @NativeFunctionAddress 00000001407AEC60
*/

void function ClearItemTypes()

/*
* @Breif Register an item type so the bot_loadout auto-complete knows about it
* @Pramas int, string
* @NativeName: RegisterItemType
* @NativeFunctionAddress 00000001407AEC60
*/

void function RegisterItemType(int, string)

/*
* @Breif Returns the current party
* @Pramas 
* @NativeName: UIClientScript_GetParty
* @NativeFunctionAddress 00000001407A7580
*/

var function GetParty()

/*
* @Breif returns true if we are the leader of our party, or true if we aren't in a party
* @Pramas 
* @NativeName: UIClientScript_IsPartyLeader
* @NativeFunctionAddress 00000001407AA580
*/

bool function IsPartyLeader()

/*
* @Breif returns the number of players current in our party
* @Pramas 
* @NativeName: UIClientScript_GetPartySize
* @NativeFunctionAddress 00000001407AA4D0
*/

int function GetPartySize()

/*
* @Breif Returns the name of the party leader
* @Pramas 
* @NativeName: UIClientScript_GetPartyLeaderName
* @NativeFunctionAddress 00000001407AA450
*/

string function GetPartyLeaderName()

/*
* @Breif Returns the CommunityUserInfo for the specified hardware + userId
* @Pramas string, string
* @NativeName: UIClientScript_GetCommunityUserInfo
* @NativeFunctionAddress 00000001407A79C0
*/

var function GetUserInfo()

/*
* @Breif Returns the CommunityUserInfo for the local player
* @Pramas string, string
* @NativeName: UIClientScript_GetMyUserInfo
* @NativeFunctionAddress 00000001407A7BA0
*/

var function GetMyUserInfo()

/*
* @Breif Returns true if we're going to ATTEMPT to join it
* @Pramas string, string, bool
* @NativeName: SCRIPT_Party_JoinUserParty
* @NativeFunctionAddress 00000001407A9750
*/

bool function JoinUserParty(string, string, bool)

/*
* @Breif Get number of damage defs defined
* @Pramas 
* @NativeName: DamageDef_GetCount_Client
* @NativeFunctionAddress 00000001408FA730
*/

int function DamageDef_GetCount()

/*
* @Breif Get damage def name
* @Pramas int
* @NativeName: DamageDef_GetName_Client
* @NativeFunctionAddress 00000001408FA6B0
*/

string function DamageDef_GetName(int)

/*
* @Breif 
* @Pramas int
* @NativeName: DamageDef_GetObituary_Client
* @NativeFunctionAddress 00000001408FA610
*/

string function DamageDef_GetObituary(int)

/*
* @Breif 
* @Pramas int
* @NativeName: DamageDef_GetDeathProtection_Client
* @NativeFunctionAddress 00000001408FA570
*/

bool function DamageDef_GetDeathProtection(int)

/*
* @Breif 
* @Pramas int, string
* @NativeName: Script_DamageDef_GetSettingByKeyField_Client
* @NativeFunctionAddress 00000001408FA3D0
*/

var function Dev_DamageDef_GetSettingByKeyField(int, string)

/*
* @Breif Get the base, game mode name
* @Pramas 
* @NativeName: Client_Script_GameRules_GetGameMode
* @NativeFunctionAddress 0000000140844E10
*/

string function GameRules_GetGameMode()

/*
* @Breif Get a team's score, given a team index.
* @Pramas int
* @NativeName: Client_Script_GameRules_GetTeamScore
* @NativeFunctionAddress 0000000140844D60
*/

int function GameRules_GetTeamScore(int)

/*
* @Breif Get a team's second score, given a team index.
* @Pramas int
* @NativeName: Client_Script_GameRules_GetTeamScore2
* @NativeFunctionAddress 0000000140844CB0
*/

int function GameRules_GetTeamScore2(int)

/*
* @Breif Get a team's score, given a team index.
* @Pramas int
* @NativeName: Client_Script_GameRules_GetTeamKills
* @NativeFunctionAddress 0000000140844C00
*/

int function GameRules_GetTeamKills(int)

/*
* @Breif Get a team's score, given a team index.
* @Pramas int
* @NativeName: Client_Script_GameRules_GetTeamDeaths
* @NativeFunctionAddress 0000000140844B50
*/

int function GameRules_GetTeamDeaths(int)

/*
* @Breif Get a team's name, given a team index.
* @Pramas int
* @NativeName: Client_Script_GameRules_GetTeamName
* @NativeFunctionAddress 0000000140844AE0
*/

string function GameRules_GetTeamName(int)

/*
* @Breif Returns true if the time limit should be enabled
* @Pramas 
* @NativeName: Client_Script_GameRules_TimeLimitEnabled
* @NativeFunctionAddress 0000000140844A90
*/

bool function GameRules_TimeLimitEnabled()

/*
* @Breif Returns true if the match can end
* @Pramas 
* @NativeName: Client_Script_GameRules_AllowMatchEnd
* @NativeFunctionAddress 0000000140844A40
*/

bool function GameRules_AllowMatchEnd()

/*
* @Breif Return the attacker that inflicted this damage
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetAttacker
* @NativeFunctionAddress 00000001408449D0
*/

entity function DamageInfo_GetAttacker(var)

/*
* @Breif Return the entity that inflicted this damage (projectile, etc...)
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetInflictor
* @NativeFunctionAddress 0000000140844960
*/

entity function DamageInfo_GetInflictor(var)

/*
* @Breif Return the weapon that the attacker was using
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetWeapon
* @NativeFunctionAddress 00000001408448F0
*/

entity function DamageInfo_GetWeapon(var)

/*
* @Breif Return whether this damage should force a kill
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetForceKill
* @NativeFunctionAddress 0000000140844860
*/

bool function DamageInfo_GetForceKill(var)

/*
* @Breif Return the amount of damage
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamage
* @NativeFunctionAddress 0000000140844780
*/

float function DamageInfo_GetDamage(var)

/*
* @Breif Gets the scale that critical hit damage should be multiplied by.
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamageCriticalHitScale
* @NativeFunctionAddress 00000001408446A0
*/

float function DamageInfo_GetDamageCriticalHitScale(var)

/*
* @Breif Gets the scale that damage to shields should be multiplied by
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamageShieldScale
* @NativeFunctionAddress 00000001408445C0
*/

float function DamageInfo_GetDamageShieldScale(var)

/*
* @Breif Gets the world position where the damage was dealt
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamagePosition
* @NativeFunctionAddress 00000001408444B0
*/

vector function DamageInfo_GetDamagePosition(var)

/*
* @Breif Get the section group being damaged
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetHitGroup
* @NativeFunctionAddress 00000001408443D0
*/

int function DamageInfo_GetHitGroup(var)

/*
* @Breif Get the section being damaged
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetHitBox
* @NativeFunctionAddress 00000001408442F0
*/

int function DamageInfo_GetHitBox(var)

/*
* @Breif Returns what death package you have set, if any.
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDeathPackage
* @NativeFunctionAddress 0000000140844250
*/

string function DamageInfo_GetDeathPackage(var)

/*
* @Breif Gets the code damage type
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamageType
* @NativeFunctionAddress 0000000140844170
*/

int function DamageInfo_GetDamageType(var)

/*
* @Breif Gets the damage type that was set by script when firing the weapon.
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetCustomDamageType
* @NativeFunctionAddress 0000000140844090
*/

int function DamageInfo_GetCustomDamageType(var)

/*
* @Breif Gets the damage source identifier that was set by script when this damage mechanism was created.
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamageSourceIdentifier
* @NativeFunctionAddress 0000000140843FB0
*/

int function DamageInfo_GetDamageSourceIdentifier(var)

/*
* @Breif Gets the view punch multiplier
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetViewPunchMultiplier
* @NativeFunctionAddress 0000000140843F00
*/

float function DamageInfo_GetViewPunchMultiplier(var)

/*
* @Breif Get the distance from where the bullet/projectile was fired.
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDistFromAttackOrigin
* @NativeFunctionAddress 0000000140843E20
*/

float function DamageInfo_GetDistFromAttackOrigin(var)

/*
* @Breif If it's a radius damage, gives the distance from the center of the blast. Otherwise defaults to zero.
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDistFromExplosionCenter
* @NativeFunctionAddress 0000000140843D40
*/

float function DamageInfo_GetDistFromExplosionCenter(var)

/*
* @Breif Get damage force vector.
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamageForce
* @NativeFunctionAddress 0000000140843C30
*/

vector function DamageInfo_GetDamageForce(var)

/*
* @Breif Get damage direction vector.
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamageForceDirection
* @NativeFunctionAddress 0000000140843B20
*/

vector function DamageInfo_GetDamageForceDirection(var)

/*
* @Breif Checks if code is allowing this entity to ragdoll on death
* @Pramas var
* @NativeName: Client_Script_DamageInfo_IsRagdollAllowed
* @NativeFunctionAddress 0000000140843A90
*/

bool function DamageInfo_IsRagdollAllowed(var)

/*
* @Breif Get all DAMAGEFLAG_* flags.
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamageFlags
* @NativeFunctionAddress 00000001408439B0
*/

int function DamageInfo_GetDamageFlags(var)

/*
* @Breif Returns true if contains all given DAMAGEFLAG_* flags.
* @Pramas var, int
* @NativeName: Client_Script_DamageInfo_HasDamageFlags
* @NativeFunctionAddress 0000000140843900
*/

bool function DamageInfo_HasDamageFlags(var, int)

/*
* @Breif Returns weapon name, even if weapon entity is gone
* @Pramas var
* @NativeName: Client_Script_DamageInfo_GetDamageWeaponName
* @NativeFunctionAddress 0000000140843840
*/

string ornull function DamageInfo_GetDamageWeaponName(var)

/*
* @Breif Returns if stats should be recorded for damage weapon
* @Pramas var
* @NativeName: Client_Script_DamageInfo_ShouldRecordStatsForWeapon
* @NativeFunctionAddress 00000001408437D0
*/

bool function DamageInfo_ShouldRecordStatsForWeapon(var)

/*
* @Breif Stores text for damage diagnostics
* @Pramas var, string
* @NativeName: Client_Script_DamageInfo_Print
* @NativeFunctionAddress 0000000140843750
*/

void function DamageInfo_Print(var, string)

/*
* @Breif Sets that damage was done for damage diagnostics
* @Pramas var, int
* @NativeName: Client_Script_DamageInfo_SetDidDamage
* @NativeFunctionAddress 0000000140843750
*/

void function DamageInfo_SetDidDamage(var, int)

/*
* @Breif Sets that damage was done for damage diagnostics
* @Pramas var
* @NativeName: Client_Script_DamageInfo_FlagTypicalCase
* @NativeFunctionAddress 0000000140843750
*/

void function DamageInfo_FlagTypicalCase(var)

/*
* @Breif Get a class instance of a named hud element.
* @Pramas string
* @NativeName: HudElement
* @NativeFunctionAddress 00000001409C3C00
*/

var function HudElement(string)

/*
* @Breif Get a class instance of a named hud element.
* @Pramas string
* @NativeName: ScriptGetOrCreateHudElement
* @NativeFunctionAddress 00000001409C3B90
*/

var function GetOrCreateHudElement(string)

/*
* @Breif Run the specified animation script from hudanimations.txt.
* @Pramas string
* @NativeName: RunAnimationScript
* @NativeFunctionAddress 00000001409C3B30
*/

void function RunAnimationScript(string)

/*
* @Breif Get the size of the screen in pixels, as an array with two elements.
* @Pramas 
* @NativeName: GetScreenSize
* @NativeFunctionAddress 00000001409C3A60
*/

array< int > function GetScreenSize()

/*
* @Breif Convert vector (in world space) to screen coordinates. Returns an array with x, y, and a bool. Bool is false if the coordinate is not on-screen.
* @Pramas vector
* @NativeName: ToScreenSpace_Script
* @NativeFunctionAddress 00000001409C3990
*/

var function ToScreenSpace(vector)

/*
* @Breif Convert a vector (in world space) to clamped screen coordinates. Returns an array with x and y values. Meant to be followed up with Hud.ClipScreenPositionToBox()
* @Pramas vector pos
* @NativeName: ToScreenSpaceClamped
* @NativeFunctionAddress 00000001409C38C0
*/

array< int > function ToScreenSpaceClamped(vector pos)

/*
* @Breif Convert a vector (in world space) to clamped screen coordinates. Returns an array with x and y values. Meant to be followed up with Hud.ClipScreenPositionToBox()
* @Pramas vector, float, float
* @NativeName: Script_ToScreenSpaceClampedWithBounds
* @NativeFunctionAddress 00000001409C37B0
*/

var function ToScreenSpaceClampedWithBounds(vector, float, float)

/*
* @Breif Convert a vector (in world space) to coordinates in or on an ellipse on screen giving the player a hint which direction to look to see the target. Returns an array with x and y values.
* @Pramas vector
* @NativeName: ToScreenSpaceApproximate
* @NativeFunctionAddress 00000001409C36E0
*/

var function ToScreenSpaceApproximate(vector)

/*
* @Breif Given x, y, and left-right-top-bottom boundries, clamp the X & Y. Returns an array with x and y values.
* @Pramas int x, int y, int left, int right, int top, int bottom
* @NativeName: ClipScreenPositionToBox
* @NativeFunctionAddress 00000001409C3580
*/

array< int > function ClipScreenPositionToBox(int x, int y, int left, int right, int top, int bottom)

/*
* @Breif Convert a vector (in world space) to coordinates in or on an ellipse on screen giving the player a hint which direction to look to see the target. Returns an array with x and y values.
* @Pramas vector, float, float
* @NativeName: ToScreenSpaceApproximateWithBounds
* @NativeFunctionAddress 00000001409C3470
*/

var function ToScreenSpaceApproximateWithBounds(vector, float, float)

/*
* @Breif Enable spherical warp distortion.
* @Pramas 
* @NativeName: WarpEnable
* @NativeFunctionAddress 00000001409C3420
*/

void function WarpEnable()

/*
* @Breif Set global spherical warp settings (xWarp, xScale, yWarp, yScale, viewDist).
* @Pramas float, float, float, float, float
* @NativeName: WarpGlobalSettings
* @NativeFunctionAddress 00000001409C3340
*/

void function WarpGlobalSettings(float, float, float, float, float)

/*
* @Breif Disable spherical warp distortion.
* @Pramas 
* @NativeName: WarpDisable
* @NativeFunctionAddress 00000001409C32F0
*/

void function WarpDisable()

/*
* @Breif Returns whether this entity is client only
* @Pramas 
* @NativeName: IsClientOnly
* @NativeFunctionAddress 00000001406ACDB0
*/

bool function IsClientOnly()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsOrigin
* @NativeFunctionAddress 00000001406ACD50
*/

vector function GetOrigin()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalOrigin
* @NativeFunctionAddress 00000001406ACCF0
*/

vector function GetLocalOrigin()

/*
* @Breif 
* @Pramas 
* @NativeName: GetNoTarget
* @NativeFunctionAddress 00000001406ACC90
*/

bool function GetNoTarget()

/*
* @Breif Get whether the smart ammo system can see this target
* @Pramas 
* @NativeName: GetNoTargetSmartAmmo
* @NativeFunctionAddress 00000001406ACC30
*/

bool function GetNoTargetSmartAmmo()

/*
* @Breif Get vector to eye position - absolute coords
* @Pramas 
* @NativeName: ScriptEyePosition
* @NativeFunctionAddress 00000001406ACBD0
*/

vector function EyePosition()

/*
* @Breif The the position between the entity's eyes.
* @Pramas 
* @NativeName: PositionBetweenEyes
* @NativeFunctionAddress 00000001406ACB00
*/

vector function ShipHack_PositionBetweenEyes()

/*
* @Breif Sets the position of the entity
* @Pramas vector
* @NativeName: ScriptSetOrigin
* @NativeFunctionAddress 00000001406ACAA0
*/

void function SetOrigin(vector)

/*
* @Breif Sets the position of the entity relative to parent
* @Pramas vector
* @NativeName: ScriptSetLocalOrigin
* @NativeFunctionAddress 00000001406ACA40
*/

void function SetLocalOrigin(vector)

/*
* @Breif Stops physics for an entity
* @Pramas 
* @NativeName: ScriptStopPhysics
* @NativeFunctionAddress 00000001406AC9F0
*/

void function StopPhysics()

/*
* @Breif Sets the move type.
* @Pramas int
* @NativeName: ScriptSetPhysics
* @NativeFunctionAddress 00000001406AC980
*/

void function SetPhysics(int)

/*
* @Breif Gets the move type.
* @Pramas 
* @NativeName: ScriptGetPhysics
* @NativeFunctionAddress 00000001406AC8D0
*/

int function GetPhysics()

/*
* @Breif Clears the parent of an entity. Must be a clientside entity
* @Pramas 
* @NativeName: ScriptClearParent
* @NativeFunctionAddress 00000001406AC880
*/

void function ClearParent()

/*
* @Breif Sets this entity's move parent to be the same as the given entity's.
* @Pramas entity
* @NativeName: ScriptSetToSameParentAs
* @NativeFunctionAddress 00000001406AC800
*/

void function SetToSameParentAs(entity)

/*
* @Breif Marks this entity as an attachment that never moves away from the attachment point
* @Pramas 
* @NativeName: MarkAsNonMovingAttachment
* @NativeFunctionAddress 00000001406AC7B0
*/

void function MarkAsNonMovingAttachment()

/*
* @Breif Don't create a giant bounding box even though we are attached to an attachment
* @Pramas 
* @NativeName: DontIncludeParentBbox
* @NativeFunctionAddress 00000001406AC760
*/

void function DontIncludeParentBbox()

/*
* @Breif If in hierarchy, retrieves the entity's parent
* @Pramas 
* @NativeName: ScriptGetMoveParent
* @NativeFunctionAddress 00000001406AC700
*/

entity function GetParent()

/*
* @Breif Gives the name of the attachment that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentAttachment
* @NativeFunctionAddress 00000001406AC670
*/

string function GetParentAttachment()

/*
* @Breif Gives the index of the attachment that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentAttachmentIndex
* @NativeFunctionAddress 00000001406AC5C0
*/

int function GetParentAttachmentIndex()

/*
* @Breif Gives the index of the hitbox that we are parented to
* @Pramas 
* @NativeName: ScriptGetMoveParentHitbox
* @NativeFunctionAddress 00000001406AC510
*/

int function GetParentHitbox()

/*
* @Breif Sets the local position offset of an attached entity.
* @Pramas vector
* @NativeName: ScriptSetAttachOffsetOrigin
* @NativeFunctionAddress 00000001406AC4B0
*/

void function SetAttachOffsetOrigin(vector)

/*
* @Breif Sets the local angles offset of an attached entity.
* @Pramas vector
* @NativeName: ScriptSetAttachOffsetAngles
* @NativeFunctionAddress 00000001406AC450
*/

void function SetAttachOffsetAngles(vector)

/*
* @Breif Get entity pitch, yaw, roll as a vector
* @Pramas 
* @NativeName: ScriptGetAngles
* @NativeFunctionAddress 00000001406AC380
*/

vector function GetAngles()

/*
* @Breif Get entity pitch, yaw, roll as a vector relative to parent
* @Pramas 
* @NativeName: ScriptGetLocalAngles
* @NativeFunctionAddress 00000001406AC2B0
*/

vector function GetLocalAngles()

/*
* @Breif Set entity pitch, yaw, roll as a vector
* @Pramas vector
* @NativeName: ScriptSetAngles
* @NativeFunctionAddress 00000001406AC250
*/

void function SetAngles(vector)

/*
* @Breif Set entity pitch, yaw, roll as a vector relative to parent
* @Pramas vector
* @NativeName: ScriptSetLocalAngles
* @NativeFunctionAddress 00000001406AC1F0
*/

void function SetLocalAngles(vector)

/*
* @Breif Get eye angles
* @Pramas 
* @NativeName: ScriptEyeAngles
* @NativeFunctionAddress 00000001406AC120
*/

vector function EyeAngles()

/*
* @Breif Get the forward vector of the entity
* @Pramas 
* @NativeName: ScriptGetForward
* @NativeFunctionAddress 00000001406AC0C0
*/

vector function GetForwardVector()

/*
* @Breif Get the right vector of the entity
* @Pramas 
* @NativeName: ScriptGetRight
* @NativeFunctionAddress 00000001406AC060
*/

vector function GetRightVector()

/*
* @Breif Get the up vector of the entity
* @Pramas 
* @NativeName: ScriptGetUp
* @NativeFunctionAddress 00000001406AC000
*/

vector function GetUpVector()

/*
* @Breif 
* @Pramas vector
* @NativeName: ScriptSetAbsVelocity
* @NativeFunctionAddress 00000001406ABFA0
*/

void function SetVelocity(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTeamNumber
* @NativeFunctionAddress 00000001406ABEF0
*/

int function GetTeam()

/*
* @Breif 
* @Pramas int
* @NativeName: ChangeTeam_Script
* @NativeFunctionAddress 00000001406ABE80
*/

void function Code_SetTeam(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrade
* @NativeFunctionAddress 00000001406ABDD0
*/

int function GetGrade()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTeamMemberIndex
* @NativeFunctionAddress 00000001406ABD20
*/

int function GetTeamMemberIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSquadID
* @NativeFunctionAddress 00000001406ABC70
*/

int function GetSquadID()

/*
* @Breif Gets this entity's health
* @Pramas 
* @NativeName: GetHealth
* @NativeFunctionAddress 00000001406ABBC0
*/

int function GetHealth()

/*
* @Breif Gets this entity's maximum health
* @Pramas 
* @NativeName: GetMaxHealth
* @NativeFunctionAddress 00000001406ABB10
*/

int function GetMaxHealth()

/*
* @Breif Is this entity alive?
* @Pramas 
* @NativeName: ScriptIsAlive
* @NativeFunctionAddress 00000001406ABAB0
*/

bool function IsEntAlive()

/*
* @Breif Get the entity's armor type
* @Pramas 
* @NativeName: ScriptGetArmorType
* @NativeFunctionAddress 00000001406ABA00
*/

int function GetArmorType()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptEntIndex
* @NativeFunctionAddress 00000001406AB950
*/

int function GetEntIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: GetEncodedEHandle
* @NativeFunctionAddress 00000001406AB8A0
*/

int function GetEncodedEHandle()

/*
* @Breif Set the file path of the model
* @Pramas asset
* @NativeName: ScriptSetModel
* @NativeFunctionAddress 00000001406AB830
*/

bool function SetModel(asset)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitleForUI
* @NativeFunctionAddress 00000001406AB7A0
*/

string function GetTitleForUI()

/*
* @Breif Get's the entity's boss player's name
* @Pramas 
* @NativeName: GetBossPlayerName
* @NativeFunctionAddress 00000001406AB710
*/

string function GetBossPlayerName()

/*
* @Breif Gets the boss player for an entity
* @Pramas 
* @NativeName: Script_GetBossPlayer
* @NativeFunctionAddress 00000001406AB6B0
*/

entity function GetBossPlayer()

/*
* @Breif Avoid using outside of debug code.
* @Pramas 
* @NativeName: GetClassname
* @NativeFunctionAddress 00000001406AB620
*/

string function GetCodeClassName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetEntityName
* @NativeFunctionAddress 00000001406AB590
*/

string function GetTargetName()

/*
* @Breif Returns the script_name of this entity
* @Pramas 
* @NativeName: GetScriptName
* @NativeFunctionAddress 00000001406AB500
*/

string function GetScriptName()

/*
* @Breif Sets the script_name of this entity
* @Pramas string
* @NativeName: SetScriptName
* @NativeFunctionAddress 00000001406AB4A0
*/

void function SetScriptName(string)

/*
* @Breif Returns the instance_name of this entity
* @Pramas 
* @NativeName: GetInstanceName
* @NativeFunctionAddress 00000001406AB410
*/

string function GetInstanceName()

/*
* @Breif Works on both server and client. Can return null.
* @Pramas 
* @NativeName: ScriptGetSignifierName
* @NativeFunctionAddress 00000001406AB380
*/

string ornull function GetNetworkedClassName()

/*
* @Breif Get the entity name stripped of template unique decoration
* @Pramas 
* @NativeName: GetPreTemplateName
* @NativeFunctionAddress 00000001406AB2F0
*/

string function GetPreTemplateName()

/*
* @Breif Set sound 'code' controller for sounds attached to entity. Overrides code value (if any). (The client-side version of this script hook is not for server entities!)
* @Pramas float
* @NativeName: SetSoundCodeControllerValue
* @NativeFunctionAddress 00000001406AB280
*/

void function SetSoundCodeControllerValue(float)

/*
* @Breif Unset sound 'code' controller for sounds attached to entity. (The client-side version of this script hook is not for server entities!)
* @Pramas 
* @NativeName: UnsetSoundCodeControllerValue
* @NativeFunctionAddress 00000001406AB230
*/

void function UnsetSoundCodeControllerValue()

/*
* @Breif type safe equivalent of ent.kv.model = model
* @Pramas asset
* @NativeName: SetValueForModelKey
* @NativeFunctionAddress 00000001406AB1D0
*/

void function SetValueForModelKey(asset)

/*
* @Breif type safe equivalent of model = ent.kv.model
* @Pramas 
* @NativeName: GetValueForModelKey
* @NativeFunctionAddress 00000001406AB140
*/

asset function GetValueForModelKey()

/*
* @Breif type safe equivalent of ent.kv.texture = texture
* @Pramas asset
* @NativeName: SetValueForTextureKey
* @NativeFunctionAddress 00000001406AB0E0
*/

void function SetValueForTextureKey(asset)

/*
* @Breif type safe equivalent of texture = ent.kv.texture
* @Pramas 
* @NativeName: GetValueForTextureKey
* @NativeFunctionAddress 00000001406AB050
*/

asset function GetValueForTextureKey()

/*
* @Breif type safe equivalent of ent.kv.effect_name = effect_name
* @Pramas asset
* @NativeName: SetValueForEffectNameKey
* @NativeFunctionAddress 00000001406AAFF0
*/

void function SetValueForEffectNameKey(asset)

/*
* @Breif type safe equivalent of effect_name = ent.kv.effect_name
* @Pramas 
* @NativeName: GetValueForEffectNameKey
* @NativeFunctionAddress 00000001406AAF60
*/

asset function GetValueForEffectNameKey()

/*
* @Breif @
* @Pramas string, var
* @NativeName: ScriptSetValueForKey
* @NativeFunctionAddress 00000001406AAE30
*/

bool function SetValueForKey(string, var)

/*
* @Breif Get a string representation of the specified key's value.
* @Pramas string
* @NativeName: ScriptGetKeyValueAsString
* @NativeFunctionAddress 00000001406AADA0
*/

string function GetValueForKey(string)

/*
* @Breif Shortcut for GetValueForKey( "target" )
* @Pramas 
* @NativeName: Script_GetTarget
* @NativeFunctionAddress 00000001406AAD10
*/

string function GetTarget_Deprecated()

/*
* @Breif Returns true if the specified key exists on the entity.
* @Pramas string
* @NativeName: ScriptDoesKeyExist
* @NativeFunctionAddress 00000001406AACA0
*/

bool function HasKey(string)

/*
* @Breif Takes a key in the entity's key value list and returns the next key. Useful for iterating through key values.
* @Pramas var
* @NativeName: ScriptGetNextKey
* @NativeFunctionAddress 00000001406AAB30
*/

var function GetNextKey(var)

/*
* @Breif Ensure that an entity's script scope has been created
* @Pramas 
* @NativeName: InitializeOrValidateScriptScope
* @NativeFunctionAddress 00000001406AAAD0
*/

bool function ValidateScriptScope()

/*
* @Breif Retrieve the script-side data associated with an entity
* @Pramas 
* @NativeName: GetScriptScope
* @NativeFunctionAddress 00000001406AAA70
*/

var function GetScriptScope()

/*
* @Breif Retrieve the script-side data associated with an entity
* @Pramas 
* @NativeName: GetScriptScope
* @NativeFunctionAddress 00000001406AAA70
*/

var function scope()

/*
* @Breif Retrieve the unique identifier used to refer to the entity within the scripting system
* @Pramas 
* @NativeName: GetScriptId
* @NativeFunctionAddress 00000001406AA9E0
*/

string function GetScriptId()

/*
* @Breif Get the centerpoint of an entity.
* @Pramas 
* @NativeName: RenderedWorldSpaceCenter
* @NativeFunctionAddress 00000001406AA910
*/

vector function GetWorldSpaceCenter()

/*
* @Breif Gets this entity's owner
* @Pramas 
* @NativeName: GetScriptOwnerEntity
* @NativeFunctionAddress 00000001406AA8B0
*/

entity function GetOwner()

/*
* @Breif Returns true if entity is a player.
* @Pramas 
* @NativeName: IsPlayer
* @NativeFunctionAddress 00000001406AA850
*/

bool function IsPlayer()

/*
* @Breif Returns true if entity is an NPC.
* @Pramas 
* @NativeName: IsNPC
* @NativeFunctionAddress 00000001406AA7F0
*/

bool function IsNPC()

/*
* @Breif Returns true if entity is the world entity.
* @Pramas 
* @NativeName: IsWorld
* @NativeFunctionAddress 00000001406AA790
*/

bool function IsWorld()

/*
* @Breif Returns true if entity is a func_brush entity.
* @Pramas 
* @NativeName: IsFuncBrush
* @NativeFunctionAddress 00000001406AA730
*/

bool function IsFuncBrush()

/*
* @Breif Returns true if the entity is a predicted projectile.
* @Pramas 
* @NativeName: IsPredictedProjectile
* @NativeFunctionAddress 00000001406AA6D0
*/

bool function IsPredictedProjectile()

/*
* @Breif Returns true if this is a projectile.
* @Pramas 
* @NativeName: IsProjectile
* @NativeFunctionAddress 00000001406AA670
*/

bool function IsProjectile()

/*
* @Breif Returns the absolute velocity of this entity.
* @Pramas 
* @NativeName: GetAbsVelocity
* @NativeFunctionAddress 00000001406AA610
*/

vector function GetVelocity()

/*
* @Breif Returns the local velocity of this entity.
* @Pramas 
* @NativeName: GetLocalVelocity
* @NativeFunctionAddress 00000001406AA5B0
*/

vector function GetLocalVelocity()

/*
* @Breif Controls whether the given entity is drawn in the view model pass
* @Pramas bool
* @NativeName: RenderWithViewModels
* @NativeFunctionAddress 00000001406AA550
*/

void function RenderWithViewModels(bool)

/*
* @Breif Causes entity to render in the view model pass
* @Pramas 
* @NativeName: EnableRenderWithViewModels
* @NativeFunctionAddress 00000001406AA500
*/

void function EnableRenderWithViewModels()

/*
* @Breif Causes entity to NOT render in the view model pass
* @Pramas 
* @NativeName: DisableRenderWithViewModels
* @NativeFunctionAddress 00000001406AA4B0
*/

void function DisableRenderWithViewModels()

/*
* @Breif Returns true if the entity is rendering in the view model pass
* @Pramas 
* @NativeName: IsRenderingWithViewModels
* @NativeFunctionAddress 00000001406AA450
*/

bool function IsRenderingWithViewModels()

/*
* @Breif Causes entity to render with the cockpit
* @Pramas 
* @NativeName: ScriptEnableRenderWithCockpit
* @NativeFunctionAddress 00000001406AA400
*/

void function EnableRenderWithCockpit()

/*
* @Breif Causes entity to NOT render with the cockpit
* @Pramas 
* @NativeName: ScriptDisableRenderWithCockpit
* @NativeFunctionAddress 00000001406AA3B0
*/

void function DisableRenderWithCockpit()

/*
* @Breif Causes entity to render with the hud
* @Pramas 
* @NativeName: ScriptEnableRenderWithHud
* @NativeFunctionAddress 00000001406AA360
*/

void function EnableRenderWithHud()

/*
* @Breif Causes entity to NOT render with the hud
* @Pramas 
* @NativeName: ScriptDisableRenderWithHud
* @NativeFunctionAddress 00000001406AA310
*/

void function DisableRenderWithHud()

/*
* @Breif Causes entity to render with viewmodels, but doesn't zoom in when ADS
* @Pramas 
* @NativeName: ScriptEnableRenderWithViewModelsNoZoom
* @NativeFunctionAddress 00000001406AA2C0
*/

void function EnableRenderWithViewModelsNoZoom()

/*
* @Breif Causes entity to NOT render with viewmodels, but doesn't zoom in when ADS
* @Pramas 
* @NativeName: ScriptDisableRenderWithViewModelsNoZoom
* @NativeFunctionAddress 00000001406AA270
*/

void function DisableRenderWithViewModelsNoZoom()

/*
* @Breif Returns the name of the model
* @Pramas 
* @NativeName: ScriptGetModelName
* @NativeFunctionAddress 00000001406AA1E0
*/

asset function GetModelName()

/*
* @Breif Returns Body group name from the hitboxid.
* @Pramas int
* @NativeName: GetBodygroupNameFromHitboxId
* @NativeFunctionAddress 00000001406AA130
*/

string ornull function GetBodygroupNameFromHitboxId(int)

/*
* @Breif Destroys the entity
* @Pramas 
* @NativeName: ScriptDestroy
* @NativeFunctionAddress 00000001406AA0E0
*/

void function Destroy()

/*
* @Breif If true, this entity will be do a callback to script before being destroyed
* @Pramas bool
* @NativeName: SetDoDestroyCallback
* @NativeFunctionAddress 00000001406AA080
*/

void function SetDoDestroyCallback(bool)

/*
* @Breif Sets the take damage type, DAMAGE_NO, DAMAGE_YES, DAMAGE_EVENTS_ONLY
* @Pramas int
* @NativeName: ScriptSetTakeDamageType
* @NativeFunctionAddress 00000001406AA010
*/

void function SetTakeDamageType(int)

/*
* @Breif True if this entity is being removed (deleted or killed).
* @Pramas 
* @NativeName: ScriptIsMarkedForDeletion
* @NativeFunctionAddress 00000001406A9FB0
*/

bool function IsMarkedForDeletion()

/*
* @Breif True if this entity is ignored by the aimassist system.
* @Pramas 
* @NativeName: IsIgnoredByAimAssist
* @NativeFunctionAddress 00000001406A9F50
*/

bool function IsIgnoredByAimAssist()

/*
* @Breif Returns whether the entity is invulnerable to damage.
* @Pramas 
* @NativeName: IsInvulnerableToDamage
* @NativeFunctionAddress 00000001406A9EF0
*/

bool function IsInvulnerable()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Minimap_GetZOrder
* @NativeFunctionAddress 00000001406A9E40
*/

int function Minimap_GetZOrder()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Minimap_GetCustomState
* @NativeFunctionAddress 00000001406A9D90
*/

int function Minimap_GetCustomState()

/*
* @Breif Make a client-side entity visible to a local player (0 = first player, 1 = next player, etc.).
* @Pramas int
* @NativeName: Script_SetVisibleForLocalPlayer
* @NativeFunctionAddress 00000001406A9D20
*/

void function SetVisibleForLocalPlayer(int)

/*
* @Breif Make a client-side entity invisible to a local player (0 = first player, 1 = next player, etc.).
* @Pramas int
* @NativeName: Script_SetInvisibleForLocalPlayer
* @NativeFunctionAddress 00000001406A9CB0
*/

void function SetInvisibleForLocalPlayer(int)

/*
* @Breif Make a client-side entity visible to a local player (0 = first player, 1 = next player, etc.).
* @Pramas 
* @NativeName: Script_Show
* @NativeFunctionAddress 00000001406A9C60
*/

void function Show()

/*
* @Breif Make a client-side entity invisible to a local player (0 = first player, 1 = next player, etc.).
* @Pramas 
* @NativeName: Script_Hide
* @NativeFunctionAddress 00000001406A9C10
*/

void function Hide()

/*
* @Breif Force entity to have shadows even if it isn't visible to the client.  Useful for makingt he thirdperson model cast a shadow while in first person.
* @Pramas bool
* @NativeName: Script_ForceShadowVisible
* @NativeFunctionAddress 00000001406A9BB0
*/

void function ForceShadowVisible(bool)

/*
* @Breif True if standing on something
* @Pramas 
* @NativeName: IsOnGround
* @NativeFunctionAddress 00000001406A9B50
*/

bool function IsOnGround()

/*
* @Breif Return ground entity
* @Pramas 
* @NativeName: ScriptGetGroundEntity
* @NativeFunctionAddress 00000001406A9AF0
*/

entity function GetGroundEntity()

/*
* @Breif If entity is parented to a pusher
* @Pramas 
* @NativeName: HasPusherAncestor
* @NativeFunctionAddress 00000001406A9A90
*/

bool function HasPusherAncestor()

/*
* @Breif True if the entity is titan type.
* @Pramas 
* @NativeName: IsTitan
* @NativeFunctionAddress 00000001406A9A30
*/

bool function IsTitan()

/*
* @Breif True if the entity is human type.
* @Pramas 
* @NativeName: IsOperator
* @NativeFunctionAddress 00000001406A99D0
*/

bool function IsOperator()

/*
* @Breif True if the entity is human type.
* @Pramas 
* @NativeName: IsHuman
* @NativeFunctionAddress 00000001406A9970
*/

bool function IsHuman()

/*
* @Breif True if the entity is mechanical type
* @Pramas 
* @NativeName: IsMechanical
* @NativeFunctionAddress 00000001406A9910
*/

bool function IsMechanical()

/*
* @Breif True if the entity has gib models
* @Pramas 
* @NativeName: HasGibModel
* @NativeFunctionAddress 00000001406A98B0
*/

bool function HasGibModel()

/*
* @Breif True if the entity is a zipline type.
* @Pramas 
* @NativeName: IsZipline
* @NativeFunctionAddress 00000001406A9850
*/

bool function IsZipline()

/*
* @Breif True if the entity is a zipline type.
* @Pramas 
* @NativeName: IsRopeZipline
* @NativeFunctionAddress 00000001406A97F0
*/

bool function IsRopeZipline()

/*
* @Breif True if the entity is breakable glass.
* @Pramas 
* @NativeName: IsBreakableGlass
* @NativeFunctionAddress 00000001406A9790
*/

bool function IsBreakableGlass()

/*
* @Breif True if the entity is a player decoy.
* @Pramas 
* @NativeName: IsPlayerDecoy
* @NativeFunctionAddress 00000001406A9730
*/

bool function IsPlayerDecoy()

/*
* @Breif True if the entity is a hologram.
* @Pramas 
* @NativeName: IsHologram
* @NativeFunctionAddress 00000001406A96D0
*/

bool function IsHologram()

/*
* @Breif Return if player is cloaked
* @Pramas bool
* @NativeName: IsCloaked
* @NativeFunctionAddress 00000001406A9660
*/

bool function IsCloaked(bool)

/*
* @Breif Return when cloak ends (ie, when fade-in begins)
* @Pramas 
* @NativeName: GetCloakEndTime
* @NativeFunctionAddress 00000001406A95B0
*/

float function GetCloakEndTime()

/*
* @Breif Return the cloak fade time amount (0 = off, 1 = on)
* @Pramas 
* @NativeName: GetCloakFadeFactor
* @NativeFunctionAddress 00000001406A9500
*/

float function GetCloakFadeFactor()

/*
* @Breif Sets whether the entity can cloak or not
* @Pramas bool
* @NativeName: SetCanCloak
* @NativeFunctionAddress 00000001406A94A0
*/

void function SetCanCloak(bool)

/*
* @Breif Gets whether the entity can cloak or not
* @Pramas 
* @NativeName: CanCloak
* @NativeFunctionAddress 00000001406A9440
*/

bool function CanCloak()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsPhaseShifted
* @NativeFunctionAddress 00000001406A93E0
*/

bool function IsPhaseShifted()

/*
* @Breif Get the current highlight context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentContext
* @NativeFunctionAddress 00000001406A9330
*/

int function Highlight_GetCurrentContext()

/*
* @Breif Get the inside opacity on the current context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentInsideOpacity
* @NativeFunctionAddress 00000001406A9280
*/

float function Highlight_GetCurrentInsideOpacity()

/*
* @Breif Get the outline opacity on the current context.
* @Pramas 
* @NativeName: Script_Highlight_GetCurrentOutlineOpacity
* @NativeFunctionAddress 00000001406A91D0
*/

float function Highlight_GetCurrentOutlineOpacity()

/*
* @Breif Tells if this entity can inherit the highlighting settings from a parent entity if there is no local settings.
* @Pramas 
* @NativeName: Script_Highlight_GetInheritHighlight
* @NativeFunctionAddress 00000001406A9170
*/

bool function Highlight_GetInheritHighlight()

/*
* @Breif Get the inside function slot on the given context. 0 for a disabled a function.
* @Pramas int
* @NativeName: Script_Highlight_GetInsideFunction
* @NativeFunctionAddress 00000001406A90B0
*/

int function Highlight_GetInsideFunction(int)

/*
* @Breif Get the outline function slot on the given context. 0 for a disabled a function.
* @Pramas int
* @NativeName: Script_Highlight_GetOutlineFunction
* @NativeFunctionAddress 00000001406A8FF0
*/

int function Highlight_GetOutlineFunction(int)

/*
* @Breif Get the outline radius on the given context.
* @Pramas int
* @NativeName: Script_Highlight_GetOutlineRadius
* @NativeFunctionAddress 00000001406A8F30
*/

float function Highlight_GetOutlineRadius(int)

/*
* @Breif Get custom parameters on the given context. Parameters are shared between inside and outline functions.
* @Pramas int, int
* @NativeName: Script_Highlight_GetParam
* @NativeFunctionAddress 00000001406A8E30
*/

vector function Highlight_GetParam(int, int)

/*
* @Breif Get custom state on the given context. Parameters are shared between inside and outline functions.
* @Pramas int
* @NativeName: Script_Highlight_GetState
* @NativeFunctionAddress 00000001406A8D70
*/

int function Highlight_GetState(int)

/*
* @Breif Tells if this entity will be drawn.
* @Pramas int
* @NativeName: Script_Highlight_IsEntityVisible
* @NativeFunctionAddress 00000001406A8CF0
*/

bool function Highlight_IsEntityVisible(int)

/*
* @Breif Tells if this highlight will be drawn after all post-processes.
* @Pramas int
* @NativeName: Script_Highlight_IsAfterPostProcess
* @NativeFunctionAddress 00000001406A8C70
*/

bool function Highlight_IsAfterPostProcess(int)

/*
* @Breif Enable highlighting on this entity.
* @Pramas 
* @NativeName: Script_Highlight_Enable
* @NativeFunctionAddress 00000001406A8C20
*/

void function Highlight_Enable()

/*
* @Breif Set the current highlight context. 0 by default. Server has priority over client. Use context -1 to disable highlighting.
* @Pramas int
* @NativeName: Script_Highlight_SetCurrentContext
* @NativeFunctionAddress 00000001406A8BB0
*/

void function Highlight_SetCurrentContext(int)

/*
* @Breif Set if this entity can inherit the highlighting settings from a parent entity if there is no local settings. False by default. Shared by all contexts.
* @Pramas bool
* @NativeName: Script_Highlight_SetInheritHighlight
* @NativeFunctionAddress 00000001406A8B50
*/

void function Highlight_SetInheritHighlight(bool)

/*
* @Breif Given( contextID, insideSlot, entityVisible, outlineSlot, outlineRadius, state, afterPostProcess ) Set function slots on the given context. Use slot 0 to disable a function
* @Pramas int, int, bool, int, float, int, bool
* @NativeName: Script_Highlight_SetFunctions
* @NativeFunctionAddress 00000001406A8A60
*/

void function Highlight_SetFunctions(int, int, bool, int, float, int, bool)

/*
* @Breif Set custom parameters on the given context. Parameters are shared between inside and outline functions.
* @Pramas int, int, vector
* @NativeName: Script_Highlight_SetParam
* @NativeFunctionAddress 00000001406A89D0
*/

void function Highlight_SetParam(int, int, vector)

/*
* @Breif Hide inside function in a given duration. 0 to hide immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_HideInside
* @NativeFunctionAddress 00000001406A8960
*/

void function Highlight_HideInside(float)

/*
* @Breif Hide outline function in a given duration. 0 to hide immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_HideOutline
* @NativeFunctionAddress 00000001406A88F0
*/

void function Highlight_HideOutline(float)

/*
* @Breif Show inside function in a given duration. 0 to show immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_ShowInside
* @NativeFunctionAddress 00000001406A8880
*/

void function Highlight_ShowInside(float)

/*
* @Breif Show outline function in a given duration. 0 to show immediately. Server has priority over client.
* @Pramas float
* @NativeName: Script_Highlight_ShowOutline
* @NativeFunctionAddress 00000001406A8810
*/

void function Highlight_ShowOutline(float)

/*
* @Breif Sets fade in time for highlight.
* @Pramas float
* @NativeName: Script_Highlight_SetFadeInTime
* @NativeFunctionAddress 00000001406A87A0
*/

void function Highlight_SetFadeInTime(float)

/*
* @Breif Sets fade out time for highlight.
* @Pramas float
* @NativeName: Script_Highlight_SetFadeOutTime
* @NativeFunctionAddress 00000001406A8730
*/

void function Highlight_SetFadeOutTime(float)

/*
* @Breif Sets visibility type for highlight.
* @Pramas int
* @NativeName: Script_Highlight_SetVisibilityType
* @NativeFunctionAddress 00000001406A86C0
*/

void function Highlight_SetVisibilityType(int)

/*
* @Breif Sets how long the highlight lasts for before fading out.
* @Pramas float
* @NativeName: Script_Highlight_SetLifeTime
* @NativeFunctionAddress 00000001406A8650
*/

void function Highlight_SetLifeTime(float)

/*
* @Breif Sets fade dist
* @Pramas float
* @NativeName: Script_Highlight_SetNearFadeDist
* @NativeFunctionAddress 00000001406A85E0
*/

void function Highlight_SetNearFadeDist(float)

/*
* @Breif Sets fade dist
* @Pramas float
* @NativeName: Script_Highlight_SetFarFadeDist
* @NativeFunctionAddress 00000001406A8570
*/

void function Highlight_SetFarFadeDist(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Highlight_GetNearFadeDist
* @NativeFunctionAddress 00000001406A84C0
*/

float function Highlight_GetNearFadeDist()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Highlight_GetFarFadeDist
* @NativeFunctionAddress 00000001406A8410
*/

float function Highlight_GetFarFadeDist()

/*
* @Breif sets a flag to active or not on a highlight
* @Pramas int, bool
* @NativeName: Script_Highlight_SetFlag
* @NativeFunctionAddress 00000001406A83A0
*/

void function Highlight_SetFlag(int, bool)

/*
* @Breif sets the highlight flags back to 0
* @Pramas 
* @NativeName: Script_Highlight_ResetFlags
* @NativeFunctionAddress 00000001406A8350
*/

void function Highlight_ResetFlags()

/*
* @Breif Gets whether or not a flag is active on a highlight
* @Pramas int
* @NativeName: Script_Highlight_GetFlag
* @NativeFunctionAddress 00000001406A82D0
*/

bool function Highlight_GetFlag(int)

/*
* @Breif Starts the highlight as on no matter what.
* @Pramas 
* @NativeName: Script_Highlight_StartOn
* @NativeFunctionAddress 00000001406A8280
*/

void function Highlight_StartOn()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightEnableForTeam
* @NativeFunctionAddress 00000001406A8210
*/

void function HighlightEnableForTeam(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightDisableForTeam
* @NativeFunctionAddress 00000001406A81A0
*/

void function HighlightDisableForTeam(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_HighlightSetTeamBitField
* @NativeFunctionAddress 00000001406A8130
*/

void function HighlightSetTeamBitField(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_IsHighlightEnabledForTeam
* @NativeFunctionAddress 00000001406A80B0
*/

bool function IsHighlightEnabledForTeam(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Highlight_PushPingedState
* @NativeFunctionAddress 00000001406A8060
*/

void function Highlight_PushPingedState()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_Highlight_PopPingedState
* @NativeFunctionAddress 00000001406A8010
*/

void function Highlight_PopPingedState()

/*
* @Breif Get a vector containing min bounds, centered on object
* @Pramas 
* @NativeName: Script_GetBoundingMins
* @NativeFunctionAddress 00000001406A7F40
*/

vector function GetBoundingMins()

/*
* @Breif Get a vector containing max bounds, centered on object
* @Pramas 
* @NativeName: Script_GetBoundingMaxs
* @NativeFunctionAddress 00000001406A7E70
*/

vector function GetBoundingMaxs()

/*
* @Breif Returns minimum bounds in world-space. This takes into account all movement of the current animation.
* @Pramas 
* @NativeName: WorldSpaceSurroundingMins
* @NativeFunctionAddress 00000001406A7DA0
*/

vector function WorldSpaceSurroundingMins()

/*
* @Breif Returns maximum bounds in world-space. This takes into account all movement of the current animation.
* @Pramas 
* @NativeName: WorldSpaceSurroundingMaxs
* @NativeFunctionAddress 00000001406A7CD0
*/

vector function WorldSpaceSurroundingMaxs()

/*
* @Breif Registers the entity to have the script function ClientCallback_OnHealthChanged called when their health changes
* @Pramas 
* @NativeName: EnableHealthChangedCallback
* @NativeFunctionAddress 00000001406A7C80
*/

void function EnableHealthChangedCallback()

/*
* @Breif Unregisters the entity from having the script function ClientCallback_OnHealthChanged called when their health changes
* @Pramas 
* @NativeName: DisableHealthChangedCallback
* @NativeFunctionAddress 00000001406A7C30
*/

void function DisableHealthChangedCallback()

/*
* @Breif Turn on/off death callback on entity
* @Pramas bool
* @NativeName: DoDeathCallback
* @NativeFunctionAddress 00000001406A7BD0
*/

void function DoDeathCallback(bool)

/*
* @Breif Get the named attachement id
* @Pramas string
* @NativeName: ScriptLookupAttachment
* @NativeFunctionAddress 00000001406A7B10
*/

int function LookupAttachment(string)

/*
* @Breif Set the distance that this entity starts fading.
* @Pramas float
* @NativeName: SetFadeDist
* @NativeFunctionAddress 00000001406A7AA0
*/

void function SetFadeDistance(float)

/*
* @Breif 
* @Pramas entity, vector, vector, vector, int, int, int, int, entity, int
* @NativeName: Script_DispatchImpactEffects
* @NativeFunctionAddress 00000001406A7900
*/

void function DispatchImpactEffects(entity, vector, vector, vector, int, int, int, int, entity, int)

/*
* @Breif Draw this entity
* @Pramas 
* @NativeName: EnableDraw
* @NativeFunctionAddress 00000001406A78B0
*/

void function EnableDraw()

/*
* @Breif Disabling rendering of this entity.  Attached effects with render.
* @Pramas 
* @NativeName: DisableDraw
* @NativeFunctionAddress 00000001406A7860
*/

void function DisableDraw()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetLifeState
* @NativeFunctionAddress 00000001406A77B0
*/

int function GetLifeState()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetShieldHealth
* @NativeFunctionAddress 00000001406A7700
*/

int function GetShieldHealth()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetShieldHealthMax
* @NativeFunctionAddress 00000001406A7650
*/

int function GetShieldHealthMax()

/*
* @Breif Forces an entity to be visible during phase shift.
* @Pramas bool
* @NativeName: Script_SetForceVisibleInPhaseShift
* @NativeFunctionAddress 00000001406A75F0
*/

void function SetForceVisibleInPhaseShift(bool)

/*
* @Breif Allows the shifter to see others while not in phase shift
* @Pramas bool
* @NativeName: Script_SetSeeOtherNonShifters
* @NativeFunctionAddress 00000001406A7590
*/

void function SetSeeOtherNonShifters(bool)

/*
* @Breif Allows ent to have aim assit applied to them on non phased players while they are phased
* @Pramas bool
* @NativeName: Script_SetCanBeAimAssistTrackedWhilePhased
* @NativeFunctionAddress 00000001406A7530
*/

void function SetCanBeAimAssistTrackedWhilePhased(bool)

/*
* @Breif Returns array of entities that this entity is linked to
* @Pramas 
* @NativeName: ScriptGetLinkEntArray
* @NativeFunctionAddress 00000001406A7460
*/

array< entity > function GetLinkEntArray()

/*
* @Breif Returns array of entities that are linked to this entity
* @Pramas 
* @NativeName: ScriptGetLinkParentArray
* @NativeFunctionAddress 00000001406A7390
*/

array< entity > function GetLinkParentArray()

/*
* @Breif Returns the single entity this entity is linked to (if there is one)
* @Pramas 
* @NativeName: ScriptGetLinkEnt
* @NativeFunctionAddress 00000001406A7330
*/

entity function GetLinkEnt()

/*
* @Breif Returns the single entity that connects to this entity (if there is one)
* @Pramas 
* @NativeName: ScriptGetLinkParent
* @NativeFunctionAddress 00000001406A72D0
*/

entity function GetLinkParent()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPassThroughFlags
* @NativeFunctionAddress 00000001406A7220
*/

int function GetPassThroughFlags()

/*
* @Breif Sets flags for when pass through happens on this entity
* @Pramas int
* @NativeName: Script_SetPassThroughFlags
* @NativeFunctionAddress 00000001406A71B0
*/

void function SetPassThroughFlags(int)

/*
* @Breif Sets the thickness of and entity for pass through bullets.
* @Pramas int
* @NativeName: Script_SetPassThroughThickness
* @NativeFunctionAddress 00000001406A7140
*/

void function SetPassThroughThickness(int)

/*
* @Breif Sets the direciton the shot has to come from to pass the ent
* @Pramas float
* @NativeName: Script_SetPassThroughDirection
* @NativeFunctionAddress 00000001406A70D0
*/

void function SetPassThroughDirection(float)

/*
* @Breif Disables Id lights on this entity
* @Pramas 
* @NativeName: Script_DisableIdLights
* @NativeFunctionAddress 00000001406A7080
*/

void function DisableIdLights()

/*
* @Breif Enables Id lights on this entity
* @Pramas 
* @NativeName: Script_EnableIdLights
* @NativeFunctionAddress 00000001406A7030
*/

void function EnableIdLights()

/*
* @Breif Set the visibility flags for a given entity
* @Pramas int
* @NativeName: Script_SetVisibilityFlags
* @NativeFunctionAddress 00000001406A6FC0
*/

void function SetVisibilityFlags(int)

/*
* @Breif Make this client entity alive or dead. Needed for id lights to work.
* @Pramas bool
* @NativeName: SetAlive
* @NativeFunctionAddress 00000001406A6F60
*/

void function SetAlive(bool)

/*
* @Breif 
* @Pramas bool
* @NativeName: Script_SetPreventCrits
* @NativeFunctionAddress 00000001406A6F00
*/

void function SetPreventCrits(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetCritsPrevented
* @NativeFunctionAddress 00000001406A6EA0
*/

bool function GetCritsPrevented()

/*
* @Breif Set this entity to render always
* @Pramas 
* @NativeName: ScriptEnableRenderAlways
* @NativeFunctionAddress 00000001406A6E50
*/

void function EnableRenderAlways()

/*
* @Breif Set this entity to not render always
* @Pramas 
* @NativeName: ScriptDisableRenderAlways
* @NativeFunctionAddress 00000001406A6E00
*/

void function DisableRenderAlways()

/*
* @Breif Check if the entity belongs to the realm.
* @Pramas int realmIndex
* @NativeName: ScriptIsInRealm
* @NativeFunctionAddress 00000001406A6D80
*/

bool function IsInRealm(int realmIndex)

/*
* @Breif Removes the entity from all the realms.
* @Pramas 
* @NativeName: ScriptRemoveFromAllRealms
* @NativeFunctionAddress 00000001406A6D30
*/

void function RemoveFromAllRealms()

/*
* @Breif Copy the highlight state of the entity ent to this entity.
* @Pramas entity ent
* @NativeName: Script_CopyHighlightState
* @NativeFunctionAddress 00000001406A6CB0
*/

void function CopyHighlightState(entity ent)

/*
* @Breif Check if the entity is hidden ( Hide function for client entities ).
* @Pramas 
* @NativeName: Script_IsHidden
* @NativeFunctionAddress 00000001406A6C50
*/

bool function IsHidden()

/*
* @Breif Gets a bool network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetBool
* @NativeFunctionAddress 00000001406A6BE0
*/

bool function GetNetBool(string)

/*
* @Breif Gets an int network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetInt
* @NativeFunctionAddress 00000001406A6B20
*/

int function GetNetInt(string)

/*
* @Breif Gets a float network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetFloat
* @NativeFunctionAddress 00000001406A6A60
*/

float function GetNetFloat(string)

/*
* @Breif Gets a time (float) network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetTime
* @NativeFunctionAddress 00000001406A69A0
*/

float function GetNetTime(string)

/*
* @Breif Gets an entity network variable (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetNetEnt
* @NativeFunctionAddress 00000001406A6930
*/

entity function GetNetEnt(string)

/*
* @Breif Get Whether a script entity can be meleed - Damage and Lunge
* @Pramas 
* @NativeName: Script_CanBeMeleed
* @NativeFunctionAddress 00000001406A68D0
*/

bool function CanBeMeleed()

/*
* @Breif Parents this entity to another entity.
* @Pramas entity parentEnt, string attachment = "", bool maintainOffset = null, float blendTime = 0
* @NativeName: ScriptSetParent
* @NativeFunctionAddress 0000000140699D00
*/

var function SetParent()

/*
* @Breif Parents this entity to another entity's hitbox.
* @Pramas entity parentEnt, int hitboxIdx, bool maintainOffset = null, float blendTime = 0
* @NativeName: ScriptSetParentWithHitbox
* @NativeFunctionAddress 0000000140699D50
*/

var function SetParentWithHitbox()

/*
* @Breif Creates and returns a script table from the entity's model's $keyvalues block.
* @Pramas 
* @NativeName: ScriptCreateTableFromModelKeyValues
* @NativeFunctionAddress 0000000140699F90
*/

table function CreateTableFromModelKeyValues(var)

/*
* @Breif Check if the entity shares a realm with this entity.
* @Pramas entity otherEntity
* @NativeName: ScriptDoesShareRealms
* @NativeFunctionAddress 000000014069A5C0
*/

var function DoesShareRealms()

/*
* @Breif Get list of realms this entity belongs to.
* @Pramas 
* @NativeName: ScriptGetRealms
* @NativeFunctionAddress 000000014069A610
*/

var function GetRealms()

/*
* @Breif Get list of realms this entity shares with the other entity.
* @Pramas entity otherEntity
* @NativeName: ScriptGetSharedRealms
* @NativeFunctionAddress 000000014069A660
*/

var function GetSharedRealms()

/*
* @Breif Add this entity to all the realms the other entity belongs to, in addition to the current realms the entity is in
* @Pramas entity otherEntity
* @NativeName: ScriptAddToOtherEntitysRealms
* @NativeFunctionAddress 000000014069A6B0
*/

var function AddToOtherEntitysRealms()

/*
* @Breif Get list of children entities. ( Entities that have this as the move parent. )
* @Pramas 
* @NativeName: Script_GetChildren
* @NativeFunctionAddress 000000014069A700
*/

var function GetChildren()

/*
* @Breif Set the specified pose parameter to the specified value
* @Pramas string, float
* @NativeName: ScriptSetPoseParameter
* @NativeFunctionAddress 00000001406B1130
*/

void function SetPoseParameter(string, float)

/*
* @Breif Ask whether the main sequence is done playing
* @Pramas 
* @NativeName: IsSequenceFinished
* @NativeFunctionAddress 00000001406B10D0
*/

bool function IsSequenceFinished()

/*
* @Breif Get the attachement id's origin vector
* @Pramas int
* @NativeName: ScriptGetAttachmentOrigin
* @NativeFunctionAddress 00000001406B1050
*/

vector function GetAttachmentOrigin(int)

/*
* @Breif Get the attachement id's angles as a p,y,r vector
* @Pramas int
* @NativeName: ScriptGetAttachmentAngles
* @NativeFunctionAddress 00000001406B0FD0
*/

vector function GetAttachmentAngles(int)

/*
* @Breif Get the attachement id's forward vector
* @Pramas int
* @NativeName: ScriptGetAttachmentForward
* @NativeFunctionAddress 00000001406B0F50
*/

vector function GetAttachmentForward(int)

/*
* @Breif Get the attachement id's right vector
* @Pramas int
* @NativeName: ScriptGetAttachmentRight
* @NativeFunctionAddress 00000001406B0ED0
*/

vector function GetAttachmentRight(int)

/*
* @Breif Get the attachement id's up vector
* @Pramas int
* @NativeName: ScriptGetAttachmentUp
* @NativeFunctionAddress 00000001406B0E50
*/

vector function GetAttachmentUp(int)

/*
* @Breif Get the attachement id's origin vector on a viewmodel entity without the FOV adjustment
* @Pramas int
* @NativeName: ScriptGetAttachmentOrigin_ViewModelNoFOVAdjust
* @NativeFunctionAddress 00000001406B0D60
*/

vector function GetAttachmentOrigin_ViewModelNoFOVAdjust(int)

/*
* @Breif Returns whether this entity is a viewmodel
* @Pramas 
* @NativeName: IsViewModel
* @NativeFunctionAddress 00000001406B0D00
*/

bool function IsViewModel()

/*
* @Breif Returns the hit group of the given hitbox with the current model
* @Pramas int
* @NativeName: GetHitGroupOfHitBox
* @NativeFunctionAddress 00000001406B0C40
*/

int function GetHitGroupOfHitBox(int)

/*
* @Breif Sets the decalIndex.
* @Pramas int decalIndex
* @NativeName: Script_SetDecal
* @NativeFunctionAddress 00000001406B0720
*/

void function SetDecal(int decalIndex)

/*
* @Breif Gets the decalIndex.
* @Pramas 
* @NativeName: GetDecal
* @NativeFunctionAddress 00000001406B0670
*/

int function GetDecal()

/*
* @Breif Set whether this model should do face animations or not
* @Pramas bool
* @NativeName: ScriptSetDoFaceAnimations
* @NativeFunctionAddress 00000001406B0610
*/

void function SetDoFaceAnimations(bool)

/*
* @Breif Given ( groupIndex, modelIndex ), Sets a bodygroup's model by index
* @Pramas int, int
* @NativeName: ScriptSetBodygroupModelByIndex
* @NativeFunctionAddress 00000001406B0590
*/

void function SetBodygroupModelByIndex(int, int)

/*
* @Breif Given ( groupIndex, modelName ), Sets a bodygroup's model by name
* @Pramas int, string
* @NativeName: ScriptSetBodygroupModelByName
* @NativeFunctionAddress 00000001406B0510
*/

void function SetBodygroupModel(int, string)

/*
* @Breif Given ( groupName ), finds the index of the bodygroup with the given name. Returns -1 if it doesn't exist
* @Pramas string
* @NativeName: ScriptFindBodygroup
* @NativeFunctionAddress 00000001406B0450
*/

int function FindBodygroup(string)

/*
* @Breif Given ( groupIndex, modelName ), finds the bodygroup's model index with the given name. Returns -1 if it doesn't exist
* @Pramas int, string
* @NativeName: ScriptFindBodygroupModelIndex
* @NativeFunctionAddress 00000001406B0380
*/

int function FindBodygroupModelIndex(int, string)

/*
* @Breif Given ( groupIndex ), gets the currently active model index of a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModelIndex
* @NativeFunctionAddress 00000001406B02C0
*/

int function GetBodygroupModelIndex(int)

/*
* @Breif Given ( groupIndex ), gets the currently active model name of a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModel
* @NativeFunctionAddress 00000001406B0220
*/

string function GetBodygroupModel(int)

/*
* @Breif Given ( groupIndex, modelIndex ), gets the name of the bodygroup's model at the given index.
* @Pramas int, int
* @NativeName: ScriptGetBodygroupModelNameForIndex
* @NativeFunctionAddress 00000001406B0170
*/

string function GetBodygroupModelNameForIndex(int, int)

/*
* @Breif Given ( groupIndex ), gets the number of models in a bodygroup.
* @Pramas int
* @NativeName: ScriptGetBodygroupModelCount
* @NativeFunctionAddress 00000001406B00B0
*/

int function GetBodygroupModelCount(int)

/*
* @Breif Given ( groupIndex ), gets the index of the "blank" model, or -1 if none.
* @Pramas int
* @NativeName: ScriptGetBodygroupBlankModelIndex
* @NativeFunctionAddress 00000001406AFFF0
*/

int function GetBodygroupBlankModelIndex(int)

/*
* @Breif Set the ground FX table by name
* @Pramas string
* @NativeName: SetGroundEffectTable
* @NativeFunctionAddress 00000001406AFF90
*/

void function SetGroundEffectTable(string)

/*
* @Breif Play an anim without trying to set origin/angles (unless parented)
* @Pramas string
* @NativeName: Anim_Play
* @NativeFunctionAddress 00000001406AFF30
*/

void function Anim_Play(string)

/*
* @Breif Play an anim without trying to set origin/angles (even if parented
* @Pramas string
* @NativeName: Anim_PlayOnly
* @NativeFunctionAddress 00000001406AFED0
*/

void function Anim_PlayOnly(string)

/*
* @Breif Gets the name of the current sequence
* @Pramas 
* @NativeName: Script_GetCurrentSequenceName
* @NativeFunctionAddress 00000001406AFE40
*/

string function GetCurrentSequenceName()

/*
* @Breif Stops the current animation started by Anim_Play*()
* @Pramas 
* @NativeName: Anim_Stop
* @NativeFunctionAddress 00000001406AFDF0
*/

void function Anim_Stop()

/*
* @Breif Pause the current animtion started by Anim_Play*(). Used by the animation previewer.
* @Pramas bool
* @NativeName: Anim_SetPaused
* @NativeFunctionAddress 00000001406AFD90
*/

void function Anim_SetPaused(bool)

/*
* @Breif Just sets the current sequence, without the entity entering a scripted anim mode.
* @Pramas string
* @NativeName: Anim_NonScriptedPlay
* @NativeFunctionAddress 00000001406AFD30
*/

void function Anim_NonScriptedPlay(string)

/*
* @Breif Plays an animation with a specific ref point.
* @Pramas string, vector, vector, float
* @NativeName: Anim_PlayWithRefPoint
* @NativeFunctionAddress 00000001406AFCA0
*/

void function Anim_PlayWithRefPoint(string, vector, vector, float)

/*
* @Breif Returns true if currently playing an animation from Anim_Play*()
* @Pramas 
* @NativeName: Anim_IsActive
* @NativeFunctionAddress 00000001406AFC40
*/

bool function Anim_IsActive()

/*
* @Breif Returns bool whether the entity's model has the specified sequence.
* @Pramas string
* @NativeName: Anim_HasSequence
* @NativeFunctionAddress 00000001406AFBD0
*/

bool function Anim_HasSequence(string)

/*
* @Breif Returns bool whether the entity's model has the specified activity.
* @Pramas string
* @NativeName: Anim_HasActivity
* @NativeFunctionAddress 00000001406AFB60
*/

bool function Anim_HasActivity(string)

/*
* @Breif By default the REF attachment is checked only the first frame to get the initial offset. Then root motion is added onto that offset. Call this function to position the entity using REF every frame instead of using root motion.
* @Pramas 
* @NativeName: Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion
* @NativeFunctionAddress 00000001406AFB10
*/

void function Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion()

/*
* @Breif Sets the initial time (in seconds) that the given animation will begin playing at
* @Pramas float
* @NativeName: Anim_SetInitialTime
* @NativeFunctionAddress 00000001406AFAA0
*/

void function Anim_SetInitialTime(float)

/*
* @Breif Immediately setup up the animation like as if it had actually already started at the given start time
* @Pramas float
* @NativeName: Anim_SetStartTime
* @NativeFunctionAddress 00000001406AFA30
*/

void function Anim_SetStartTime(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Anim_GetStartTime
* @NativeFunctionAddress 00000001406AF980
*/

float function Anim_GetStartTime()

/*
* @Breif Ignore parent rotation when playing relative to a parent attachment. Turns off automatically on Anim_Stop
* @Pramas bool
* @NativeName: Anim_IgnoreParentRotation
* @NativeFunctionAddress 00000001406AF920
*/

void function Anim_IgnoreParentRotation(bool)

/*
* @Breif Leave prediction on for the player while the animation is playing.
* @Pramas 
* @NativeName: Anim_EnablePrediction
* @NativeFunctionAddress 00000001406AF8D0
*/

void function Anim_EnablePrediction()

/*
* @Breif Enable sequence transitioner for this client-only entity
* @Pramas 
* @NativeName: AddToClientSideSequenceTransitionerList
* @NativeFunctionAddress 00000001406AF880
*/

void function Anim_EnableSequenceTransitioner()

/*
* @Breif Disable sequence transitioner for this client-only entity
* @Pramas 
* @NativeName: RemoveFromClientSideSequenceTransitionerList
* @NativeFunctionAddress 00000001406AF830
*/

void function Anim_DisableSequenceTransitioner()

/*
* @Breif Get animation sequence duration in seconds
* @Pramas string
* @NativeName: ScriptGetSequenceDuration
* @NativeFunctionAddress 00000001406AF770
*/

float function GetSequenceDuration(string)

/*
* @Breif Get integer index for sequence string
* @Pramas string
* @NativeName: ScriptLookupSequence
* @NativeFunctionAddress 00000001406AF6B0
*/

int function LookupSequence(string)

/*
* @Breif Returns the cycle for the given event in the given animation sequence. Returns -1 on any errors.
* @Pramas string, string
* @NativeName: ScriptGetAnimEventCycleFrac
* @NativeFunctionAddress 00000001406AF5F0
*/

float function GetAnimEventCycleFrac(string, string)

/*
* @Breif Returns the cycle for the given AE_SV/CL_VSCRIPT_CALLBACK event, with the given option name, in the given animation sequence. Returns -1 on any errors.
* @Pramas string, string
* @NativeName: ScriptGetScriptedAnimEventCycleFrac
* @NativeFunctionAddress 00000001406AF530
*/

float function GetScriptedAnimEventCycleFrac(string, string)

/*
* @Breif Sets the sky scale for this entity.  Pass in target skyscale and time to lerp to that value.
* @Pramas float, float
* @NativeName: LerpSkyScale
* @NativeFunctionAddress 00000001406AF4A0
*/

void function LerpSkyScale(float, float)

/*
* @Breif Request this entity to do body group change callback for a specific body group, or -1 for any body group
* @Pramas bool, int
* @NativeName: DoBodyGroupChangeScriptCallback
* @NativeFunctionAddress 00000001406AF430
*/

void function DoBodyGroupChangeScriptCallback(bool, int)

/*
* @Breif Request this entity to do model change callback
* @Pramas bool
* @NativeName: DoModelChangeScriptCallback
* @NativeFunctionAddress 00000001406AF3D0
*/

void function DoModelChangeScriptCallback(bool)

/*
* @Breif Get how far through the animation is.
* @Pramas 
* @NativeName: GetCycle
* @NativeFunctionAddress 00000001406AF320
*/

float function GetCycle()

/*
* @Breif Set how far through the animation is.
* @Pramas float
* @NativeName: ScriptSetCycle
* @NativeFunctionAddress 00000001406AF2B0
*/

void function SetCycle(float)

/*
* @Breif Set the playback rate
* @Pramas float
* @NativeName: Anim_SetPlaybackRate
* @NativeFunctionAddress 00000001406AF240
*/

void function Anim_SetPlaybackRate(float)

/*
* @Breif Get the playback rate
* @Pramas 
* @NativeName: Anim_GetPlaybackRate
* @NativeFunctionAddress 00000001406AF190
*/

float function Anim_GetPlaybackRate()

/*
* @Breif Change the playback rate of an already-playing animation
* @Pramas float
* @NativeName: Anim_ChangePlaybackRate
* @NativeFunctionAddress 00000001406AF120
*/

void function Anim_ChangePlaybackRate(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetSequence
* @NativeFunctionAddress 00000001406AF070
*/

int function GetSequence()

/*
* @Breif 
* @Pramas 
* @NativeName: MakeSafeForUIScriptHack
* @NativeFunctionAddress 00000001406AF020
*/

void function MakeSafeForUIScriptHack()

/*
* @Breif Gets the scale for the model for the animating entity.
* @Pramas 
* @NativeName: GetModelScale
* @NativeFunctionAddress 00000001406AEF70
*/

float function GetModelScale()

/*
* @Breif Sets the scale for the model for the animating entity.
* @Pramas float scale
* @NativeName: SetModelScale
* @NativeFunctionAddress 00000001406AEF00
*/

void function SetModelScale(float scale)

/*
* @Breif Force sync the animation of the created anim prop entity with the parent entity.
* @Pramas entity parentEntity, float startCycle, float endCycle, string windowName
* @NativeName: Script_AnimSyncScriptProp_Begin
* @NativeFunctionAddress 00000001406AEE40
*/

void function AnimSyncScriptProp_Begin(entity parentEntity, float startCycle, float endCycle, string windowName)

/*
* @Breif Force sync the animation of the created anim prop entity with the parent entity.
* @Pramas entity parentEntity
* @NativeName: Script_AnimSyncScriptProp_End
* @NativeFunctionAddress 00000001406AEDC0
*/

void function AnimSyncScriptProp_End(entity parentEntity)

/*
* @Breif Print information about the existing windows on this animating entity.
* @Pramas 
* @NativeName: AnimWindowDebugData
* @NativeFunctionAddress 00000001406A8C20
*/

void function AnimWindowDebugData()

/*
* @Breif Print information about the existing anim props in this animating entity.
* @Pramas 
* @NativeName: AnimPropDebugData
* @NativeFunctionAddress 00000001406A8C20
*/

void function AnimPropDebugData()

/*
* @Breif Gets the starting position for an animation played with a specific ref point.
* @Pramas string animName, vector origin, vector angles
* @NativeName: Anim_GetStartForRefPoint_Script
* @NativeFunctionAddress 0000000140699290
*/

var function Anim_GetStartForRefPoint()

/*
* @Breif Gets the starting position for an animation played with a parent entity and attachment as a ref point.
* @Pramas string animName, entity ent, string attachment
* @NativeName: Anim_GetStartForRefEntity_Script
* @NativeFunctionAddress 00000001406992E0
*/

var function Anim_GetStartForRefEntity()

/*
* @Breif Gets the starting position for an animation played with a specific ref point.
* @Pramas animName, referencePosition, referenceAngles
* @NativeName: Anim_GetStartForRefPoint_ScriptOld
* @NativeFunctionAddress 0000000140699330
*/

table function Anim_GetStartForRefPoint_Old(var, string, vector, vector)

/*
* @Breif Gets the starting position for an animation played with a parent entity and attachment as a ref point.
* @Pramas animName, referenceEntity, referenceAttachment
* @NativeName: Anim_GetStartForRefEntity_ScriptOld
* @NativeFunctionAddress 0000000140699380
*/

table function Anim_GetStartForRefEntity_Old(var, string, entity, string)

/*
* @Breif Returns the position and angle of an attachment at the given time in the given animation
* @Pramas string animName, string attachName, float time
* @NativeName: Script_GetAttachmentAtTime
* @NativeFunctionAddress 00000001406994B0
*/

var function Anim_GetAttachmentAtTime()

/*
* @Breif Returns the display name of the weapon
* @Pramas 
* @NativeName: GetPrintName
* @NativeFunctionAddress 0000000140A68670
*/

string ornull function GetWeaponPrintName()

/*
* @Breif Returns the description of the weapon
* @Pramas 
* @NativeName: GetWeaponDescription
* @NativeFunctionAddress 0000000140A685E0
*/

string ornull function GetWeaponDescription()

/*
* @Breif 
* @Pramas asset
* @NativeName: Script_SetDroppedModel
* @NativeFunctionAddress 0000000140A68580
*/

void function SetDroppedModel(asset)

/*
* @Breif Returns index for the given attachment on the weapon's world model.
* @Pramas string
* @NativeName: ScriptLookupWorldModelAttachment
* @NativeFunctionAddress 0000000140A684C0
*/

int function LookupWorldModelAttachment(string)

/*
* @Breif Returns index for the given attachment on the weapon's view model.
* @Pramas string
* @NativeName: ScriptLookupViewModelAttachment
* @NativeFunctionAddress 0000000140A68400
*/

int function LookupViewModelAttachment(string)

/*
* @Breif Returns entity using the weapon
* @Pramas 
* @NativeName: GetWeaponOwner_Script
* @NativeFunctionAddress 0000000140A683A0
*/

entity function GetWeaponOwner()

/*
* @Breif Returns the position to fire from
* @Pramas 
* @NativeName: GetAttackPosition_Script
* @NativeFunctionAddress 0000000140A682D0
*/

vector function GetAttackPosition()

/*
* @Breif Returns the direction to fire from
* @Pramas 
* @NativeName: GetAttackDirection_Script
* @NativeFunctionAddress 0000000140A68200
*/

vector function GetAttackDirection()

/*
* @Breif Sets whether a weapon can be used or not
* @Pramas bool
* @NativeName: AllowUse
* @NativeFunctionAddress 0000000140A681A0
*/

void function AllowUse(bool)

/*
* @Breif Returns if weapon has a silencer
* @Pramas 
* @NativeName: HasSilencer
* @NativeFunctionAddress 0000000140A68140
*/

bool function HasSilencer()

/*
* @Breif Plays appropriate 1p and 3p sounds
* @Pramas string soundName1p, string soundName3p
* @NativeName: Script_EmitWeaponSound_1p3p
* @NativeFunctionAddress 0000000140A680D0
*/

void function EmitWeaponSound_1p3p(string soundName1p, string soundName3p)

/*
* @Breif Plays the sound on the weapon
* @Pramas string
* @NativeName: EmitWeaponSound_Script
* @NativeFunctionAddress 0000000140A68070
*/

void function EmitWeaponSound(string)

/*
* @Breif Stops the sound on the weapon
* @Pramas string
* @NativeName: StopWeaponSound_Script
* @NativeFunctionAddress 0000000140A68010
*/

void function StopWeaponSound(string)

/*
* @Breif Notifies NPCs of weapon sound
* @Pramas float, float
* @NativeName: EmitWeaponNpcSound
* @NativeFunctionAddress 0000000140A67F80
*/

void function EmitWeaponNpcSound(float, float)

/*
* @Breif Notifies NPCs of weapon sound
* @Pramas float, float
* @NativeName: EmitWeaponNpcSound_DontUpdateLastFiredTime
* @NativeFunctionAddress 0000000140A67F80
*/

void function EmitWeaponNpcSound_DontUpdateLastFiredTime(float, float)

/*
* @Breif Returns true if this weapon is net optimized *and* net weapon optimizations are enabled ('net_optimize_weapons 1')
* @Pramas 
* @NativeName: IsNetOptimized
* @NativeFunctionAddress 0000000140A67F20
*/

bool function IsNetOptimized()

/*
* @Breif Plays the effect on the weapon and return an effect handle to view model effect
* @Pramas asset, asset, string
* @NativeName: PlayWeaponEffectAndReturnViewEffectHandle_Script
* @NativeFunctionAddress 0000000140A67E50
*/

int function PlayWeaponEffectReturnViewEffectHandle(asset, asset, string)

/*
* @Breif Plays the effect on the weapons owner, use this when the weapon does NOT have a world model.
* @Pramas asset, int
* @NativeName: PlayWeaponEffectOnOwner_Script
* @NativeFunctionAddress 0000000140A67DD0
*/

void function PlayWeaponEffectOnOwner(asset, int)

/*
* @Breif Stops the effect on the weapon
* @Pramas asset, asset
* @NativeName: StopWeaponEffect_Script
* @NativeFunctionAddress 0000000140A67D60
*/

void function StopWeaponEffect(asset, asset)

/*
* @Breif Set the burst fire count
* @Pramas int
* @NativeName: SetWeaponBurstFireCount_Script
* @NativeFunctionAddress 0000000140A67CF0
*/

void function SetWeaponBurstFireCount(int)

/*
* @Breif Get the burst fire count
* @Pramas 
* @NativeName: GetWeaponBurstFireCount_Script
* @NativeFunctionAddress 0000000140A67C40
*/

int function GetWeaponBurstFireCount()

/*
* @Breif Fires a bullet
* @Pramas vector, vector, int, int
* @NativeName: FireWeaponBullet_Script
* @NativeFunctionAddress 0000000140A67B40
*/

void function FireWeaponBullet(vector, vector, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: DoDryfire
* @NativeFunctionAddress 0000000140A67AF0
*/

void function DoDryfire()

/*
* @Breif Gets the number of projectiles per shot
* @Pramas 
* @NativeName: GetProjectilesPerShot_Script
* @NativeFunctionAddress 0000000140A67A40
*/

int function GetProjectilesPerShot()

/*
* @Breif Gets the ammo consumed per shot
* @Pramas 
* @NativeName: GetAmmoPerShot_Script
* @NativeFunctionAddress 0000000140A67990
*/

int function GetAmmoPerShot()

/*
* @Breif Gets the display type of the ammo
* @Pramas 
* @NativeName: GetAmmoDisplay_Script
* @NativeFunctionAddress 0000000140A67900
*/

string function GetAmmoDisplay()

/*
* @Breif Returns the max amount of primary ammo that can be in the clip.
* @Pramas 
* @NativeName: GetWeaponPrimaryClipCountMax_Script
* @NativeFunctionAddress 0000000140A67850
*/

int function GetWeaponPrimaryClipCountMax()

/*
* @Breif Set the amount of primary ammo in the clip
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCount_Script
* @NativeFunctionAddress 0000000140A677E0
*/

void function SetWeaponPrimaryClipCount(int)

/*
* @Breif Set the amount of primary ammo in the clip
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCountAbsolute_Script
* @NativeFunctionAddress 0000000140A67770
*/

void function SetWeaponPrimaryClipCountAbsolute(int)

/*
* @Breif Sets primary ammo count, doesn't reset regen
* @Pramas int
* @NativeName: SetWeaponPrimaryClipCountNoRegenReset_Script
* @NativeFunctionAddress 0000000140A67700
*/

void function SetWeaponPrimaryClipCountNoRegenReset(int)

/*
* @Breif gets whether or not the regen ammo on this weapon is draining or not
* @Pramas 
* @NativeName: IsWeaponRegenDraining_Script
* @NativeFunctionAddress 0000000140A676A0
*/

bool function IsWeaponRegenDraining()

/*
* @Breif Returns the amount of primary ammo in the clip.
* @Pramas 
* @NativeName: GetWeaponPrimaryClipCount_Script
* @NativeFunctionAddress 0000000140A675F0
*/

int function GetWeaponPrimaryClipCount()

/*
* @Breif True if the weapon uses clips for ammo
* @Pramas 
* @NativeName: UsesClipsForAmmo
* @NativeFunctionAddress 0000000140A67590
*/

bool function UsesClipsForAmmo()

/*
* @Breif Get the ammo source this weapon is using: AMMOSOURCE_STOCKPILE, AMMOSOURCE_POOL
* @Pramas 
* @NativeName: Script_GetActiveAmmoSource
* @NativeFunctionAddress 0000000140A674E0
*/

int function GetActiveAmmoSource()

/*
* @Breif Gets the ammo pool type this weapon uses.
* @Pramas 
* @NativeName: Script_GetAmmoPoolType
* @NativeFunctionAddress 0000000140A67430
*/

int function GetWeaponAmmoPoolType()

/*
* @Breif Get the max ammo that can be available for this weapon to use
* @Pramas int
* @NativeName: Script_GetWeaponPrimaryAmmoCountMax
* @NativeFunctionAddress 0000000140A67370
*/

int function GetWeaponPrimaryAmmoCountMax(int)

/*
* @Breif Get the amount of ammo available for this weapon to use
* @Pramas int
* @NativeName: Script_GetWeaponPrimaryAmmoCount
* @NativeFunctionAddress 0000000140A672B0
*/

int function GetWeaponPrimaryAmmoCount(int)

/*
* @Breif Set the amount of primary ammo
* @Pramas int, int
* @NativeName: Script_SetWeaponPrimaryAmmoCount
* @NativeFunctionAddress 0000000140A67230
*/

void function SetWeaponPrimaryAmmoCount(int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: ShouldAutoCycleWhenOutOfAmmo
* @NativeFunctionAddress 0000000140A671D0
*/

bool function ShouldAutoCycleWhenOutOfAmmo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_RegenerateAmmoReset
* @NativeFunctionAddress 0000000140A67180
*/

void function RegenerateAmmoReset()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponShieldScale
* @NativeFunctionAddress 000000014069F220
*/

float function GetWeaponShieldScale()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetLifetimeShotsRemaining
* @NativeFunctionAddress 0000000140A1CF90
*/

int function GetLifetimeShotsRemaining()

/*
* @Breif 
* @Pramas int newCount
* @NativeName: Script_SetLifetimeShotsRemaining
* @NativeFunctionAddress 0000000140A67110
*/

void function SetLifetimeShotsRemaining(int newCount)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetLifetimeShotsRemainingInfinite
* @NativeFunctionAddress 0000000140A670C0
*/

void function SetLifetimeShotsRemainingInfinite()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetRechamberMilestone
* @NativeFunctionAddress 0000000140A67010
*/

int function GetRechamberMilestone()

/*
* @Breif 
* @Pramas int newMilestone
* @NativeName: Script_ForceRechamberMilestone
* @NativeFunctionAddress 0000000140A66FA0
*/

void function ForceRechamberMilestone(int newMilestone)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetCooldownMilestone
* @NativeFunctionAddress 0000000140A66EF0
*/

int function GetCooldownMilestone()

/*
* @Breif 
* @Pramas int newMilestone
* @NativeName: Script_ForceCooldownMilestone
* @NativeFunctionAddress 0000000140A66E80
*/

void function ForceCooldownMilestone(int newMilestone)

/*
* @Breif Get the weapon's utility entity
* @Pramas 
* @NativeName: GetWeaponUtilityEntity
* @NativeFunctionAddress 0000000140A66E20
*/

entity function GetWeaponUtilityEntity()

/*
* @Breif Returns true if the weapon is reloading
* @Pramas 
* @NativeName: IsReloading
* @NativeFunctionAddress 0000000140A66DC0
*/

bool function IsReloading()

/*
* @Breif Returns true if the weapon is in ADS
* @Pramas 
* @NativeName: IsWeaponInAds
* @NativeFunctionAddress 0000000140A66D60
*/

bool function IsWeaponInAds()

/*
* @Breif Returns true if the ADS button is pressed, even if the weapon doesn't allow zooming
* @Pramas 
* @NativeName: IsWeaponAdsButtonPressed
* @NativeFunctionAddress 0000000140A66D00
*/

bool function IsWeaponAdsButtonPressed()

/*
* @Breif Return weapon type: WT_DEFAULT, WT_SIDEARM, WT_ANTI_TITAN, WT_SHOULDER
* @Pramas 
* @NativeName: GetWeaponType
* @NativeFunctionAddress 0000000140A66C50
*/

int function GetWeaponType()

/*
* @Breif Returns true if the weapon has a charge ability.
* @Pramas 
* @NativeName: IsChargeWeapon
* @NativeFunctionAddress 0000000140A66BF0
*/

bool function IsChargeWeapon()

/*
* @Breif Returns true if the weapon is currently charging
* @Pramas 
* @NativeName: IsWeaponCharging_Script
* @NativeFunctionAddress 0000000140A66B90
*/

bool function IsWeaponCharging()

/*
* @Breif Returns how long the weapon has been charging
* @Pramas 
* @NativeName: GetWeaponChargeTime_Script
* @NativeFunctionAddress 0000000140A66AE0
*/

float function GetWeaponChargeTime()

/*
* @Breif Returns how long the weapon has left to charge
* @Pramas 
* @NativeName: GetWeaponChargeTimeRemaining_Script
* @NativeFunctionAddress 0000000140A66A30
*/

float function GetWeaponChargeTimeRemaining()

/*
* @Breif Returns fraction [0,1] where the charge level is.
* @Pramas 
* @NativeName: GetWeaponChargeFractionClamped
* @NativeFunctionAddress 0000000140A66980
*/

float function GetWeaponChargeFraction()

/*
* @Breif Sets charge of the weapon as a fraction [0,1].
* @Pramas float
* @NativeName: Script_SetWeaponChargeFraction
* @NativeFunctionAddress 0000000140A66910
*/

void function SetWeaponChargeFraction(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetWeaponChargeFractionForced
* @NativeFunctionAddress 0000000140A668A0
*/

void function SetWeaponChargeFractionForced(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponChargeLevel_Script
* @NativeFunctionAddress 0000000140A667F0
*/

int function GetWeaponChargeLevel()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponChargeLevelMax_Script
* @NativeFunctionAddress 0000000140A66740
*/

int function GetWeaponChargeLevelMax()

/*
* @Breif Gets the total charge duration of the weapon.
* @Pramas 
* @NativeName: GetChargeDuration
* @NativeFunctionAddress 0000000140A66690
*/

float function GetChargeDuration()

/*
* @Breif Returns true if the weapon needs to complete an overheat cooldown.
* @Pramas 
* @NativeName: IsOverheated
* @NativeFunctionAddress 0000000140A66630
*/

bool function IsOverheated()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponReadyToFireProgress
* @NativeFunctionAddress 0000000140A66580
*/

float function GetWeaponReadyToFireProgress()

/*
* @Breif Returns the weapon's attack spread in degrees from one side of the cone to the other.
* @Pramas 
* @NativeName: GetSpread
* @NativeFunctionAddress 0000000140A664D0
*/

float function GetAttackSpreadAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponChargeEnergyCost
* @NativeFunctionAddress 0000000140A66420
*/

int function GetWeaponChargeEnergyCost()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetWeaponDefaultEnergyCost
* @NativeFunctionAddress 0000000140A66360
*/

int function GetWeaponDefaultEnergyCost(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ResetWeaponToDefaultEnergyCost
* @NativeFunctionAddress 0000000140A66310
*/

void function ResetWeaponToDefaultEnergyCost()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponCurrentEnergyCost
* @NativeFunctionAddress 00000001406AD250
*/

int function GetWeaponCurrentEnergyCost()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetWeaponEnergyCost
* @NativeFunctionAddress 0000000140A662A0
*/

void function SetWeaponEnergyCost(int)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string
* @NativeName: GetWeaponInfoFileKeyField
* @NativeFunctionAddress 0000000140A661D0
*/

var function GetWeaponInfoFileKeyField(string)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string key
* @NativeName: GetWeaponInfoFileKeyFieldAsset
* @NativeFunctionAddress 0000000140A66130
*/

asset function GetWeaponInfoFileKeyFieldAsset(string key)

/*
* @Breif takes in a player and checks to see if the weapon is disabled
* @Pramas entity
* @NativeName: IsWeaponDisabled_Script
* @NativeFunctionAddress 0000000140A660B0
*/

bool function CheckWeaponIsDisabled(entity)

/*
* @Breif Gets the activity that the weapon is in.
* @Pramas 
* @NativeName: GetWeaponActivity_Script
* @NativeFunctionAddress 0000000140A66000
*/

int function GetWeaponActivity()

/*
* @Breif Triggers weapon deploy
* @Pramas 
* @NativeName: Script_DeployWeapon
* @NativeFunctionAddress 0000000140A65FA0
*/

bool function Deploy()

/*
* @Breif Triggers weapon deploy
* @Pramas 
* @NativeName: Script_DeployWeaponInstant
* @NativeFunctionAddress 0000000140A65F40
*/

bool function DeployInstant()

/*
* @Breif Triggers weapon raise (or equip)
* @Pramas 
* @NativeName: Raise
* @NativeFunctionAddress 0000000140A65EE0
*/

bool function Raise()

/*
* @Breif True if the weapon is being discarded and will be removed from the owner's inventory.
* @Pramas 
* @NativeName: IsDiscarding
* @NativeFunctionAddress 0000000140A65E80
*/

bool function IsDiscarding()

/*
* @Breif Returns true if it is appropriate to fire predicted projectiles on the client
* @Pramas 
* @NativeName: ShouldPredictProjectiles
* @NativeFunctionAddress 0000000140A65E20
*/

bool function ShouldPredictProjectiles()

/*
* @Breif Returns true if smart ammo tracking is enabled
* @Pramas 
* @NativeName: SmartAmmo_IsEnabled_Script
* @NativeFunctionAddress 0000000140A65DC0
*/

bool function SmartAmmo_IsEnabled()

/*
* @Breif Let script inform code it started locking on a new target in this tick
* @Pramas 
* @NativeName: SmartAmmo_SetNewTargetTime
* @NativeFunctionAddress 0000000140A65D70
*/

void function SmartAmmo_SetNewTargetTime()

/*
* @Breif Returns the last time a new target was acquired
* @Pramas 
* @NativeName: SmartAmmo_GetNewTargetTime
* @NativeFunctionAddress 0000000140A65CC0
*/

float function SmartAmmo_GetNewTargetTime()

/*
* @Breif Returns the angle used by the smart ammo cone search
* @Pramas 
* @NativeName: SmartAmmo_GetSearchAngle
* @NativeFunctionAddress 0000000140A65C10
*/

float function SmartAmmo_GetSearchAngle()

/*
* @Breif Returns a list of targets currently being tracked by the smart ammo system and their current and previous lock fractions
* @Pramas 
* @NativeName: SmartAmmo_Script_GetTargets
* @NativeFunctionAddress 0000000140A65B40
*/

array< SmartAmmoTarget > function SmartAmmo_GetTargets()

/*
* @Breif Appends new smart ammo target if not already in the list
* @Pramas entity, float
* @NativeName: SmartAmmo_Script_SetTarget
* @NativeFunctionAddress 0000000140A65AB0
*/

void function SmartAmmo_SetTarget(entity, float)

/*
* @Breif Stores the current list of smart ammo targets for later retrieval
* @Pramas 
* @NativeName: SmartAmmo_Script_StoreTargets
* @NativeFunctionAddress 0000000140A65A60
*/

void function SmartAmmo_StoreTargets()

/*
* @Breif Returns the list of targets that was last stored
* @Pramas 
* @NativeName: SmartAmmo_Script_GetStoredTargets
* @NativeFunctionAddress 0000000140A65990
*/

array< entity > function SmartAmmo_GetStoredTargets()

/*
* @Breif Clears all current smart ammo targets. Pass in true for the first argument to clear stored targets too. Pass in true for the second argument to clear trackers too.
* @Pramas bool, bool
* @NativeName: SmartAmmo_Clear
* @NativeFunctionAddress 0000000140A65920
*/

void function SmartAmmo_Clear(bool, bool)

/*
* @Breif Returns the position to fire at for this target
* @Pramas entity, int
* @NativeName: SmartAmmo_Script_GetFirePosition
* @NativeFunctionAddress 0000000140A65810
*/

vector function SmartAmmo_GetFirePosition(entity, int)

/*
* @Breif Marks an entity as trackable by the smart ammo system
* @Pramas entity, float
* @NativeName: SmartAmmo_Script_TrackEntity
* @NativeFunctionAddress 0000000140A65780
*/

void function SmartAmmo_TrackEntity(entity, float)

/*
* @Breif Clears an entity as trackable by the smart ammo system
* @Pramas entity
* @NativeName: SmartAmmo_Script_UntrackEntity
* @NativeFunctionAddress 0000000140A65700
*/

void function SmartAmmo_UntrackEntity(entity)

/*
* @Breif Returns number of trackers currently on entity
* @Pramas entity
* @NativeName: SmartAmmo_Script_GetNumTrackersOnEntity
* @NativeFunctionAddress 0000000140A65630
*/

int function SmartAmmo_GetNumTrackersOnEntity(entity)

/*
* @Breif Returns true if the given target is visible to the weapon
* @Pramas entity
* @NativeName: SmartAmmo_IsVisibleTarget
* @NativeFunctionAddress 0000000140A655B0
*/

bool function SmartAmmo_IsVisibleTarget(entity)

/*
* @Breif Returns array of all entities currently tracked by this weapon
* @Pramas 
* @NativeName: SmartAmmo_Script_GetTrackedEntities
* @NativeFunctionAddress 0000000140A654E0
*/

array< entity > function SmartAmmo_GetTrackedEntities()

/*
* @Breif Returns true if weapon is ready to fire (based on next allowed attack time)
* @Pramas 
* @NativeName: IsReadyToFire
* @NativeFunctionAddress 0000000140A65480
*/

bool function IsReadyToFire()

/*
* @Breif Returns true if a burst fire is in progress
* @Pramas 
* @NativeName: IsBurstFireInProgress
* @NativeFunctionAddress 0000000140A65420
*/

bool function IsBurstFireInProgress()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBurstFireShotsPending
* @NativeFunctionAddress 0000000140A65370
*/

int function GetBurstFireShotsPending()

/*
* @Breif Returns time remaining until ready to fire
* @Pramas 
* @NativeName: TimeUntilReadyToFire
* @NativeFunctionAddress 0000000140A652C0
*/

float function TimeUntilReadyToFire()

/*
* @Breif Returns the class name of the weapon
* @Pramas 
* @NativeName: GetWeaponName
* @NativeFunctionAddress 0000000140A65230
*/

string function GetWeaponClassName()

/*
* @Breif Gets the damage source ID for this weapon
* @Pramas 
* @NativeName: GetDamageSourceID
* @NativeFunctionAddress 0000000140A65180
*/

int function GetDamageSourceID()

/*
* @Breif Gets the largest damage far dist for current owner
* @Pramas 
* @NativeName: GetMaxDamageFarDist
* @NativeFunctionAddress 0000000140A650D0
*/

float function GetMaxDamageFarDist()

/*
* @Breif Forces the offhand weapon to release
* @Pramas 
* @NativeName: ForceRelease
* @NativeFunctionAddress 0000000140A65080
*/

void function ForceRelease()

/*
* @Breif Returns true if the offhand weapon was forced to release
* @Pramas 
* @NativeName: IsForceRelease
* @NativeFunctionAddress 0000000140A65020
*/

bool function IsForceRelease()

/*
* @Breif Given (string), returns true if mod is active on this weapon.
* @Pramas string
* @NativeName: HasMod_Script
* @NativeFunctionAddress 0000000140A64FB0
*/

bool function HasMod(string)

/*
* @Breif Given (string), add the mod from this weapon.
* @Pramas string
* @NativeName: AddMod_Script
* @NativeFunctionAddress 0000000140A64F50
*/

void function AddMod(string)

/*
* @Breif Given (string), remove the mod from this weapon.
* @Pramas string
* @NativeName: RemoveMod_Script
* @NativeFunctionAddress 0000000140A64EF0
*/

void function RemoveMod(string)

/*
* @Breif Sets mods bit field
* @Pramas int
* @NativeName: SetModBitfield_Script
* @NativeFunctionAddress 0000000140A64E80
*/

void function SetModBitField(int)

/*
* @Breif Gets mods bit field
* @Pramas 
* @NativeName: GetModBitfield_Script
* @NativeFunctionAddress 0000000140A64DD0
*/

int function GetModBitField()

/*
* @Breif Returns true if the weapon is offhand
* @Pramas 
* @NativeName: IsOffhandWeapon
* @NativeFunctionAddress 0000000140A64D70
*/

bool function IsWeaponOffhand()

/*
* @Breif Returns true if this is a melee weapon
* @Pramas 
* @NativeName: IsOffhandMeleeWeapon
* @NativeFunctionAddress 0000000140A64D10
*/

bool function IsWeaponMelee()

/*
* @Breif Returns true if this is a toss weapon
* @Pramas 
* @NativeName: IsTossWeapon
* @NativeFunctionAddress 0000000140A64CB0
*/

bool function IsTossWeapon()

/*
* @Breif Gets the viewmodel for the weapon. Viewmodels are only valid for active player weapons.
* @Pramas 
* @NativeName: GetWeaponViewmodel_Script
* @NativeFunctionAddress 0000000140A64C50
*/

entity function GetWeaponViewmodel()

/*
* @Breif Given (activityName, WeaponActivityFlags), Plays the given activity on the weapon viewmodel
* @Pramas string, int
* @NativeName: StartCustomActivity_Script
* @NativeFunctionAddress 0000000140A64BD0
*/

bool function StartCustomActivity(string, int)

/*
* @Breif Stops any custom activities currently playing on the weapon viewmodel
* @Pramas 
* @NativeName: StopCustomActivity_Script
* @NativeFunctionAddress 0000000140A64B80
*/

void function StopCustomActivity()

/*
* @Breif Queries whether the weapon viewmodel is currently playing a custom activity
* @Pramas 
* @NativeName: IsInCustomActivity
* @NativeFunctionAddress 0000000140A64B20
*/

bool function IsInCustomActivity()

/*
* @Breif Returns the fraction of the current custom weapon activity that is complete.
* @Pramas 
* @NativeName: GetCustomActivityFraction_Script
* @NativeFunctionAddress 0000000140A64A70
*/

float function GetCustomActivityFraction()

/*
* @Breif Returns the duration of the current custom weapon activity.
* @Pramas 
* @NativeName: GetCustomActivityDuration_Script
* @NativeFunctionAddress 0000000140A649C0
*/

float function GetCustomActivityDuration()

/*
* @Breif Specifies a model to be attached to the viewmodel during the current custom activity, as well as an attachment index.
* @Pramas string, string
* @NativeName: CustomActivityAttachModel_Script
* @NativeFunctionAddress 0000000140A64950
*/

void function CustomActivityAttachModel(string, string)

/*
* @Breif Clears the attached custom activity model.
* @Pramas 
* @NativeName: CustomActivityClearAttachedModel_Script
* @NativeFunctionAddress 0000000140A64900
*/

void function CustomActivityClearAttachedModel()

/*
* @Breif Get this weapon's internal when-can-I-shoot-next time.
* @Pramas 
* @NativeName: GetNextAttackAllowedTime_Script
* @NativeFunctionAddress 0000000140A64850
*/

float function GetNextAttackAllowedTime()

/*
* @Breif Get this weapon's internal when-can-I-shoot-next time, ignoring the "ready" timer
* @Pramas 
* @NativeName: GetNextAttackAllowedTimeRaw_Script
* @NativeFunctionAddress 0000000140A647A0
*/

float function GetNextAttackAllowedTimeRaw()

/*
* @Breif Set this weapon's internal when-can-I-shoot-next time.
* @Pramas float
* @NativeName: SetNextAttackAllowedTime_Script
* @NativeFunctionAddress 0000000140A1CBD0
*/

void function SetNextAttackAllowedTime(float)

/*
* @Breif 
* @Pramas float
* @NativeName: OverrideNextAttackTime_Script
* @NativeFunctionAddress 0000000140A64730
*/

void function OverrideNextAttackTime(float)

/*
* @Breif Get the damage amount this weapon should do to a titan that the player is rodeoing.
* @Pramas 
* @NativeName: GetRodeoDamage_Script
* @NativeFunctionAddress 000000014069F620
*/

int function GetRodeoDamage()

/*
* @Breif 
* @Pramas 
* @NativeName: GetShotCount_Script
* @NativeFunctionAddress 0000000140A64680
*/

int function GetShotCount()

/*
* @Breif Gets the string specified in the weapon's .txt file for 'weaponClass'.
* @Pramas 
* @NativeName: GetWeaponClass
* @NativeFunctionAddress 0000000140A645F0
*/

string function GetWeaponClass()

/*
* @Breif Returns true if weapon is in a cooldown state.
* @Pramas 
* @NativeName: IsInCooldown
* @NativeFunctionAddress 0000000140A64590
*/

bool function IsInCooldown()

/*
* @Breif Returns true if weapon is has a cooldown state pending.
* @Pramas 
* @NativeName: IsCooldownPending
* @NativeFunctionAddress 0000000140A64530
*/

bool function IsCooldownPending()

/*
* @Breif Get Weapon Type Flags
* @Pramas 
* @NativeName: GetWeaponTypeFlags
* @NativeFunctionAddress 00000001406A5FB0
*/

int function GetWeaponTypeFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponDamageFlags
* @NativeFunctionAddress 00000001406B23F0
*/

int function GetWeaponDamageFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponExplosionDamageFlags
* @NativeFunctionAddress 0000000140A64480
*/

int function GetWeaponExplosionDamageFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetImpactTableIndex
* @NativeFunctionAddress 0000000140A643D0
*/

int function GetImpactTableIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetNPCMissFastPlayer
* @NativeFunctionAddress 0000000140A64370
*/

bool function GetNPCMissFastPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeLungeTargetRange
* @NativeFunctionAddress 0000000140A642C0
*/

float function GetMeleeLungeTargetRange()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeLungeTargetAngle
* @NativeFunctionAddress 0000000140A64210
*/

float function GetMeleeLungeTargetAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeCanHitHumanSized
* @NativeFunctionAddress 0000000140A641B0
*/

bool function GetMeleeCanHitHumanSized()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeCanHitTitans
* @NativeFunctionAddress 0000000140A64150
*/

bool function GetMeleeCanHitTitans()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetDamageAmountForArmorType
* @NativeFunctionAddress 0000000140A64090
*/

int function GetDamageAmountForArmorType(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAttackRange
* @NativeFunctionAddress 0000000140A63FE0
*/

float function GetMeleeAttackRange()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAttackAngle
* @NativeFunctionAddress 0000000140A63F30
*/

float function GetMeleeAttackAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetMeleeAnim3p
* @NativeFunctionAddress 0000000140A63EA0
*/

string function GetMeleeAnim3p()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponReadyMsg
* @NativeFunctionAddress 0000000140A63E10
*/

string function GetWeaponReadyMsg()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetWeaponReadyHint
* @NativeFunctionAddress 0000000140A63D80
*/

string function GetWeaponReadyHint()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrenadeFuseTime
* @NativeFunctionAddress 0000000140A63CD0
*/

float function GetGrenadeFuseTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrenadeIgnitionTime
* @NativeFunctionAddress 0000000140A63C20
*/

float function GetGrenadeIgnitionTime()

/*
* @Breif 
* @Pramas 
* @NativeName: ZiplineGrenadeHasValidSpot
* @NativeFunctionAddress 0000000140A63BC0
*/

bool function ZiplineGrenadeHasValidSpot()

/*
* @Breif Returns the exact origin the begin station should be placed at for the zipline grenade/gun
* @Pramas entity
* @NativeName: Script_GetBeginStationOriginForZiplineGrenade
* @NativeFunctionAddress 0000000140A63AD0
*/

vector function GetBeginStationOriginForZiplineGrenade(entity)

/*
* @Breif Returns the exact angle the begin station should be placed at for the zipline grenade/gun
* @Pramas entity
* @NativeName: Script_GetBeginStationAnglesForZiplineGrenade
* @NativeFunctionAddress 0000000140A639E0
*/

vector function GetBeginStationAnglesForZiplineGrenade(entity)

/*
* @Breif Does this weapon allow for headshot damage
* @Pramas 
* @NativeName: Script_GetAllowHeadShots
* @NativeFunctionAddress 0000000140A63980
*/

bool function GetAllowHeadShots()

/*
* @Breif Gets the index for the next shot to be fired
* @Pramas 
* @NativeName: Script_GetCurrentAltFireIndex
* @NativeFunctionAddress 0000000140A638D0
*/

int function GetCurrentAltFireIndex()

/*
* @Breif Gets the current zoom FOV of the weapon
* @Pramas 
* @NativeName: Script_GetWeaponZoomFOV
* @NativeFunctionAddress 0000000140A63820
*/

float function GetWeaponZoomFOV()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetReloadMilestoneIndex
* @NativeFunctionAddress 0000000140A63770
*/

int function GetReloadMilestoneIndex()

/*
* @Breif Forces the player to ads
* @Pramas 
* @NativeName: Script_SetForcedADS
* @NativeFunctionAddress 0000000140A63720
*/

void function SetForcedADS()

/*
* @Breif Lets the player choose whether or not to ads
* @Pramas 
* @NativeName: Script_ClearForcedADS
* @NativeFunctionAddress 0000000140A636D0
*/

void function ClearForcedADS()

/*
* @Breif Gets whether or not the player is forced into ads
* @Pramas 
* @NativeName: Script_GetForcedADS
* @NativeFunctionAddress 0000000140A63620
*/

int function GetForcedADS()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetInventoryIndex
* @NativeFunctionAddress 0000000140A63570
*/

int function GetInventoryIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetChargeAnimIndex
* @NativeFunctionAddress 0000000140A634C0
*/

int function GetChargeAnimIndex()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetChargeAnimIndex
* @NativeFunctionAddress 0000000140A63450
*/

void function SetChargeAnimIndex(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWeaponDamageForce
* @NativeFunctionAddress 0000000140A633A0
*/

float function GetWeaponDamageForce()

/*
* @Breif Gets the core duration
* @Pramas 
* @NativeName: GetCoreDuration
* @NativeFunctionAddress 0000000140A632F0
*/

float function GetCoreDuration()

/*
* @Breif Indicates if this is a sustained discharge weapon.
* @Pramas 
* @NativeName: IsSustainedDischargeWeapon
* @NativeFunctionAddress 0000000140A63290
*/

bool function IsSustainedDischargeWeapon()

/*
* @Breif Indicates if the weapon is currently performing a sustained discharge
* @Pramas 
* @NativeName: IsDischarging
* @NativeFunctionAddress 0000000140A63230
*/

bool function IsDischarging()

/*
* @Breif Gets the total duration of a sustained discharge.
* @Pramas 
* @NativeName: GetSustainedDischargeDuration
* @NativeFunctionAddress 0000000140A63180
*/

float function GetSustainedDischargeDuration()

/*
* @Breif Gets the time remaining for the current sustained discharge between.
* @Pramas 
* @NativeName: GetSustainedDischargeRemainder
* @NativeFunctionAddress 0000000140A630D0
*/

float function GetSustainedDischargeRemainder()

/*
* @Breif Gets the fraction of completion for the current sustained discharge between [0, 1].
* @Pramas 
* @NativeName: GetSustainedDischargeFraction
* @NativeFunctionAddress 0000000140A63020
*/

float function GetSustainedDischargeFraction()

/*
* @Breif Gets the frequency at which pulse callbacks are dispatched if enabled. Also controls frequency of sustained laser damage.
* @Pramas 
* @NativeName: GetSustainedDischargePulseFrequency
* @NativeFunctionAddress 0000000140A62F70
*/

float function GetSustainedDischargePulseFrequency()

/*
* @Breif Forces the discharge to be at a certain fraction
* @Pramas float
* @NativeName: SetSustainedDischargeFractionForced
* @NativeFunctionAddress 0000000140A62F00
*/

void function SetSustainedDischargeFractionForced(float)

/*
* @Breif Indicates if this is a sustained laser weapon.
* @Pramas 
* @NativeName: IsSustainedLaserWeapon
* @NativeFunctionAddress 0000000140A62EA0
*/

bool function IsSustainedLaserWeapon()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_DoMeleeHitConfirmation
* @NativeFunctionAddress 0000000140A62E30
*/

void function DoMeleeHitConfirmation(float)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetScriptTime0
* @NativeFunctionAddress 0000000140A62DC0
*/

void function SetScriptTime0(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptTime0
* @NativeFunctionAddress 0000000140A62D10
*/

float function GetScriptTime0()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetScriptFlags0
* @NativeFunctionAddress 0000000140A62CA0
*/

void function SetScriptFlags0(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptFlags0
* @NativeFunctionAddress 0000000140A62BF0
*/

int function GetScriptFlags0()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetScriptInt0
* @NativeFunctionAddress 0000000140A62B80
*/

void function SetScriptInt0(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptInt0
* @NativeFunctionAddress 0000000140A62AD0
*/

int function GetScriptInt0()

/*
* @Breif 
* @Pramas 
* @NativeName: IsLoadoutPickup
* @NativeFunctionAddress 0000000140A62A70
*/

bool function IsLoadoutPickup()

/*
* @Breif Hide the weapon
* @Pramas 
* @NativeName: HideWeapon
* @NativeFunctionAddress 0000000140A62A20
*/

void function HideWeapon()

/*
* @Breif Show the weapon
* @Pramas 
* @NativeName: ShowWeapon
* @NativeFunctionAddress 0000000140A629D0
*/

void function ShowWeapon()

/*
* @Breif Set the index for bodygroup "ammo", if it exists.
* @Pramas int
* @NativeName: SetViewmodelAmmoModelIndex_Script
* @NativeFunctionAddress 0000000140A62960
*/

void function SetViewmodelAmmoModelIndex(int)

/*
* @Breif 
* @Pramas string, vector, vector, bool
* @NativeName: Weapon_CreateClientOnlyModel
* @NativeFunctionAddress 0000000140A628E0
*/

entity function Weapon_CreateClientOnlyModel(string, vector, vector, bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_GetClientOnlyModel
* @NativeFunctionAddress 0000000140A62880
*/

entity function Weapon_GetClientOnlyModel()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_DestroyClientOnlyModel
* @NativeFunctionAddress 0000000140A62830
*/

void function Weapon_DestroyClientOnlyModel()

/*
* @Breif 
* @Pramas int index
* @NativeName: Script_GetProScreenIntValForIndex
* @NativeFunctionAddress 0000000140A62770
*/

int function GetProScreenIntValForIndex(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: Script_GetProScreenFloatValForIndex
* @NativeFunctionAddress 0000000140A626B0
*/

float function GetProScreenFloatValForIndex(int index)

/*
* @Breif Get weapon charm for the weapon.
* @Pramas 
* @NativeName: Script_GetCurrentWeaponCharm
* @NativeFunctionAddress 0000000140A62650
*/

entity function GetCurrentWeaponCharm()

/*
* @Breif Get weapon charm model name for the weapon.
* @Pramas 
* @NativeName: Script_GetCharmModelName
* @NativeFunctionAddress 0000000140A625C0
*/

string function GetCharmModelName()

/*
* @Breif Set the legendary weapon model index for this instance of the weapon. The weapon will use the dafault model from weapon info if a negative index is set.
* @Pramas int legendaryIndex
* @NativeName: Script_SetLegendaryModelIndex
* @NativeFunctionAddress 0000000140A62550
*/

void function SetLegendaryModelIndex(int legendaryIndex)

/*
* @Breif Set weapon charm for the model. This spawns an entity with the provided model and attach it to the CHARM attachment on the weapon.
* @Pramas asset weaponCharmModel, string attachmentName
* @NativeName: Script_SetWeaponCharm
* @NativeFunctionAddress 0000000140A624E0
*/

void function SetWeaponCharm(asset weaponCharmModel, string attachmentName)

/*
* @Breif Set script index for weapon charm.
* @Pramas int charmScriptIndex
* @NativeName: Script_SetWeaponCharmIndex
* @NativeFunctionAddress 0000000140A62470
*/

void function SetWeaponCharmIndex(int charmScriptIndex)

/*
* @Breif Get script index for the weapon charm.
* @Pramas 
* @NativeName: Script_GetWeaponCharmIndex
* @NativeFunctionAddress 0000000140A623C0
*/

int function GetWeaponCharmIndex()

/*
* @Breif Clear the wepaon charm entity for the current weapon.
* @Pramas 
* @NativeName: ClearWeaponCharm
* @NativeFunctionAddress 0000000140A62370
*/

void function ClearWeaponCharm()

/*
* @Breif Plays the effect on the weapon, always spawn even if out of view
* @Pramas asset, asset, string, bool persistent = false
* @NativeName: PlayWeaponEffectNoCull_Script
* @NativeFunctionAddress 0000000140A61900
*/

var function PlayWeaponEffectNoCull()

/*
* @Breif Plays the effect on the weapon
* @Pramas asset, asset, string, bool persistent = false
* @NativeName: PlayWeaponEffect_Script
* @NativeFunctionAddress 0000000140A61950
*/

var function PlayWeaponEffect()

/*
* @Breif Fires a bullet, can set to skip lag compensation, have zero spread, dryfire, or only cause a whizby sound.
* @Pramas WeaponFireBulletSpecialParams
* @NativeName: FireWeaponBulletSpecial_Script
* @NativeFunctionAddress 0000000140A61AA0
*/

var function FireWeaponBullet_Special()

/*
* @Breif Fires a bolt projectile
* @Pramas WeaponFireBoltParams
* @NativeName: FireWeaponBolt_Script
* @NativeFunctionAddress 0000000140A61AF0
*/

var function FireWeaponBolt()

/*
* @Breif Fires a bolt projectile and returns the entity to script
* @Pramas WeaponFireBoltParams
* @NativeName: FireWeaponBoltAndReturnEntity_Script
* @NativeFunctionAddress 0000000140A61B40
*/

var function FireWeaponBoltAndReturnEntity()

/*
* @Breif Fires the weapon once as per weaponsettings, in a scaled blast pattern (if one is specified).
* @Pramas vector pos, vector dir, float speed, float patternScale, bool ignoreSpread
* @NativeName: FireWeapon_Default_Script
* @NativeFunctionAddress 0000000140A61B90
*/

var function FireWeapon_Default()

/*
* @Breif Fires a grenade projectile
* @Pramas WeaponFireGrenadeParams
* @NativeName: FireWeaponGrenade_Script
* @NativeFunctionAddress 0000000140A61BE0
*/

var function FireWeaponGrenade()

/*
* @Breif Fires a missile projectile
* @Pramas WeaponFireMissileParams
* @NativeName: FireWeaponMissile_Script
* @NativeFunctionAddress 0000000140A61C30
*/

var function FireWeaponMissile()

/*
* @Breif Get an array of mods active on this weapon.
* @Pramas 
* @NativeName: GetMods_Script
* @NativeFunctionAddress 0000000140A61E60
*/

var function GetMods()

/*
* @Breif Get an array of mods active or queued on this weapon.
* @Pramas 
* @NativeName: GetMods_WithQueued_Script
* @NativeFunctionAddress 0000000140A61EB0
*/

var function GetMods_WithQueued()

/*
* @Breif Reset and apply active mods on a weapon.
* @Pramas array< string > mods
* @NativeName: SetMods_Script
* @NativeFunctionAddress 0000000140A61F00
*/

var function SetMods()

/*
* @Breif Get all pending realtime mod commands. +mod_name/-mod_name for add/remove.
* @Pramas 
* @NativeName: Script_RealtimeMod_GetPendingCommands
* @NativeFunctionAddress 0000000140A61F50
*/

var function RealtimeMod_GetPendingCommands()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingInt
* @NativeFunctionAddress 0000000140A61FA0
*/

var function GetWeaponSettingInt()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar, table enumType
* @NativeName: Script_GetWeaponSettingEnum
* @NativeFunctionAddress 0000000140A61FF0
*/

var function GetWeaponSettingEnum()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingFloat
* @NativeFunctionAddress 0000000140A62040
*/

var function GetWeaponSettingFloat()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingBool
* @NativeFunctionAddress 0000000140A62090
*/

var function GetWeaponSettingBool()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingVector
* @NativeFunctionAddress 0000000140A620E0
*/

var function GetWeaponSettingVector()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingString
* @NativeFunctionAddress 0000000140A62130
*/

var function GetWeaponSettingString()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetWeaponSettingAsset
* @NativeFunctionAddress 0000000140A62180
*/

var function GetWeaponSettingAsset()

/*
* @Breif Detach the end of the zipline (so it becomes a vine)
* @Pramas 
* @NativeName: Zipline_DetachEnd
* @NativeFunctionAddress 0000000140A1BA70
*/

void function Zipline_DetachEnd()

/*
* @Breif Whether the zipline is usable
* @Pramas 
* @NativeName: Zipline_IsEnabled
* @NativeFunctionAddress 0000000140A1BA10
*/

bool function Zipline_IsEnabled()

/*
* @Breif Whether the end of the zipline is detached (or will be if used)
* @Pramas 
* @NativeName: Zipline_IsEndDetachedScript
* @NativeFunctionAddress 0000000140A1B9B0
*/

bool function Zipline_IsEndDetached()

/*
* @Breif 
* @Pramas 
* @NativeName: Zipline_IsVertical
* @NativeFunctionAddress 0000000140A1B950
*/

bool function Zipline_IsVertical()

/*
* @Breif Gets the weapon classname that fired this projectile.
* @Pramas 
* @NativeName: ProjectileGetWeaponClassName_Script
* @NativeFunctionAddress 0000000140A1D270
*/

string function ProjectileGetWeaponClassName()

/*
* @Breif Sets whether the projectile has been refired from the vortex; affects which script is run.
* @Pramas bool
* @NativeName: SetVortexRefired
* @NativeFunctionAddress 0000000140A1D210
*/

void function SetVortexRefired(bool)

/*
* @Breif Set whether projectile should do damage to alive entities only
* @Pramas bool
* @NativeName: DamageAliveOnly
* @NativeFunctionAddress 0000000140A1D1B0
*/

void function DamageAliveOnly(bool)

/*
* @Breif Resolves a string key to its value in this weapons info file.
* @Pramas string
* @NativeName: Script_ProjectileGetWeaponInfoFileKeyField
* @NativeFunctionAddress 0000000140A1D0E0
*/

var function ProjectileGetWeaponInfoFileKeyField(string)

/*
* @Breif Resolves a string key to its asset in this weapons info file.
* @Pramas string
* @NativeName: ProjectileGetWeaponInfoFileKeyFieldAsset
* @NativeFunctionAddress 0000000140A1D040
*/

asset function ProjectileGetWeaponInfoFileKeyFieldAsset(string)

/*
* @Breif Gets a weapons charge level returns 0 if not a charge weapon or has 0 charge
* @Pramas 
* @NativeName: ProjectileGetWeaponChargeLevel
* @NativeFunctionAddress 0000000140A1CF90
*/

int function ProjectileGetWeaponChargeLevel()

/*
* @Breif Get the damage amount this projectile's weapon should do to a titan that the player is rodeoing.
* @Pramas 
* @NativeName: ProjectileGetRodeoDamage_Script
* @NativeFunctionAddress 0000000140A1CEE0
*/

int function ProjectileGetRodeoDamage()

/*
* @Breif Force projectile to act as if the 'adjust_to_gun_barrel' weapon setting had been set to false.
* @Pramas bool
* @NativeName: ForceAdjustToGunBarrelDisabled_Script
* @NativeFunctionAddress 0000000140A1CE80
*/

void function ForceAdjustToGunBarrelDisabled(bool)

/*
* @Breif Returns the time the projectile was created by the player
* @Pramas 
* @NativeName: GetProjectileCreationTime
* @NativeFunctionAddress 0000000140A1CDD0
*/

float function GetProjectileCreationTime()

/*
* @Breif Return the time the projectile was created on the server
* @Pramas 
* @NativeName: GetProjectileCreationTimeServer
* @NativeFunctionAddress 0000000140A1CD20
*/

float function GetProjectileCreationTimeServer()

/*
* @Breif Specify which of the weapon's "projectile_trail_effect_#" settings this projectile should use.
* @Pramas int
* @NativeName: SetProjectilTrailEffectIndex_Script
* @NativeFunctionAddress 0000000140A1CCB0
*/

void function SetProjectilTrailEffectIndex(int)

/*
* @Breif Sets how long the projectile is alive for 0 is infinite or until it collides
* @Pramas float
* @NativeName: SetProjectileLifetime_Script
* @NativeFunctionAddress 0000000140A1CC40
*/

void function SetProjectileLifetime(float)

/*
* @Breif Sets how far the projectile can travel for 0 is infinite or until it collides
* @Pramas float
* @NativeName: SetProjectileDestructionDistance_Script
* @NativeFunctionAddress 0000000140A1CBD0
*/

void function SetProjectileDestructionDistance(float)

/*
* @Breif Gets how long before the lifetime of the projectile is up.
* @Pramas 
* @NativeName: GetTimeToProjectileDeath_Script
* @NativeFunctionAddress 0000000140A1CB20
*/

float function GetTimeToProjectileDeath()

/*
* @Breif Gets whether or not this projectile allows headshots
* @Pramas 
* @NativeName: Script_GetAllowHeadShots
* @NativeFunctionAddress 0000000140A1CAC0
*/

bool function GetProjectileAllowHeadShots()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetReducedEffects
* @NativeFunctionAddress 0000000140A1CA70
*/

void function SetReducedEffects()

/*
* @Breif Set the impact FX table to use for collisions.
* @Pramas int
* @NativeName: SetImpactEffectTable_Script
* @NativeFunctionAddress 0000000140A1CA00
*/

void function SetImpactEffectTable(int)

/*
* @Breif Set projectile's speed
* @Pramas float
* @NativeName: SetProjectileSpeed
* @NativeFunctionAddress 0000000140A1C990
*/

void function SetProjectileSpeed(float)

/*
* @Breif Get projectile's speed
* @Pramas 
* @NativeName: GetProjectileSpeed
* @NativeFunctionAddress 0000000140A1C8E0
*/

float function GetProjectileSpeed()

/*
* @Breif Returns reference to the weapon that fired this projectile
* @Pramas 
* @NativeName: GetWeaponSource
* @NativeFunctionAddress 0000000140A1C880
*/

entity function GetWeaponSource()

/*
* @Breif Get an array of mods active on the weapon that shot this projectile.
* @Pramas 
* @NativeName: ProjectileGetMods_Script
* @NativeFunctionAddress 0000000140A1ADE0
*/

var function ProjectileGetMods()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingInt
* @NativeFunctionAddress 0000000140A1AE30
*/

var function GetProjectileWeaponSettingInt()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingFloat
* @NativeFunctionAddress 0000000140A1AE80
*/

var function GetProjectileWeaponSettingFloat()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingBool
* @NativeFunctionAddress 0000000140A1AED0
*/

var function GetProjectileWeaponSettingBool()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingVector
* @NativeFunctionAddress 0000000140A1AF20
*/

var function GetProjectileWeaponSettingVector()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingString
* @NativeFunctionAddress 0000000140A1AF70
*/

var function GetProjectileWeaponSettingString()

/*
* @Breif Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.
* @Pramas int eWeaponVar
* @NativeName: Script_GetProjectileWeaponSettingAsset
* @NativeFunctionAddress 0000000140A1AFC0
*/

var function GetProjectileWeaponSettingAsset()

/*
* @Breif Set missile's homing speed
* @Pramas float, float
* @NativeName: SetHomingSpeeds
* @NativeFunctionAddress 0000000140A1C290
*/

void function SetHomingSpeeds(float, float)

/*
* @Breif Get missile's homing speed
* @Pramas 
* @NativeName: GetHomingSpeed
* @NativeFunctionAddress 0000000140A1C1E0
*/

float function GetHomingSpeed()

/*
* @Breif Get missile's homing speed -vs- dodging players.
* @Pramas 
* @NativeName: GetHomingSpeedAtDodgingPlayer
* @NativeFunctionAddress 0000000140A1C130
*/

float function GetHomingSpeedAtDodgingPlayer()

/*
* @Breif Set missile's homing target. If the missile's target position is set that will be used instead.
* @Pramas entity, vector
* @NativeName: SetTarget_Script
* @NativeFunctionAddress 0000000140A1C0B0
*/

void function SetMissileTarget(entity, vector)

/*
* @Breif Get missile's homing target
* @Pramas 
* @NativeName: GetMissileTarget
* @NativeFunctionAddress 0000000140A1C050
*/

entity function GetMissileTarget()

/*
* @Breif Sets the missile's target homing position. This will override any target entity.
* @Pramas vector
* @NativeName: SetTargetPosition
* @NativeFunctionAddress 0000000140A1BFF0
*/

void function SetMissileTargetPosition(vector)

/*
* @Breif Gets the missile's target homing position. This may be garbage if not at first set.
* @Pramas 
* @NativeName: GetTargetPosition
* @NativeFunctionAddress 0000000140A1BF90
*/

vector function GetMissileTargetPosition()

/*
* @Breif Clears the missile's target homing position.
* @Pramas 
* @NativeName: ClearTargetPosition
* @NativeFunctionAddress 0000000140A1BF40
*/

void function ClearMissileTargetPosition()

/*
* @Breif Self-destruct.
* @Pramas 
* @NativeName: MissileExplode_Script
* @NativeFunctionAddress 0000000140A1BEF0
*/

void function MissileExplode()

/*
* @Breif Init missile drift settings from weapon settings
* @Pramas vector, vector
* @NativeName: InitMissileForRandomDriftFromWeaponSettings
* @NativeFunctionAddress 0000000140A1BE90
*/

void function InitMissileForRandomDriftFromWeaponSettings(vector, vector)

/*
* @Breif Init missile drift with custom settings
* @Pramas vector, vector, float, float, float, float, float, float, float
* @NativeName: InitMissileForRandomDrift
* @NativeFunctionAddress 0000000140A1BD40
*/

void function InitMissileForRandomDrift(vector, vector, float, float, float, float, float, float, float)

/*
* @Breif Init missile path expand contract settings
* @Pramas vector, vector, float, float, float, float, vector, bool
* @NativeName: InitMissileExpandContract
* @NativeFunctionAddress 0000000140A1BC50
*/

void function InitMissileExpandContract(vector, vector, float, float, float, float, vector, bool)

/*
* @Breif Apply missile drift to velocity
* @Pramas float, float
* @NativeName: ApplyMissileControlledDrift
* @NativeFunctionAddress 0000000140A1BB50
*/

vector function ApplyMissileControlledDrift(float, float)

/*
* @Breif Init spiralling missile
* @Pramas vector, vector, int, bool, bool
* @NativeName: InitMissileSpiral
* @NativeFunctionAddress 0000000140A1BAC0
*/

void function InitMissileSpiral(vector, vector, int, bool, bool)

/*
* @Breif Sets max number of ricochet's a bolt can do
* @Pramas int
* @NativeName: Script_SetRicochetMaxCount
* @NativeFunctionAddress 0000000140A1C320
*/

void function SetRicochetMaxCount(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetBulletAbsorbedCount
* @NativeFunctionAddress 0000000140A1C440
*/

int function GetBulletAbsorbedCount()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetProjectileAbsorbedCount
* @NativeFunctionAddress 0000000140A1C390
*/

int function GetProjectileAbsorbedCount()

/*
* @Breif Gets the forward direction of the window
* @Pramas 
* @NativeName: GetNormal
* @NativeFunctionAddress 0000000140A1D850
*/

vector function GetNormal()

/*
* @Breif Gets the sideways direction of the window
* @Pramas 
* @NativeName: GetRight
* @NativeFunctionAddress 0000000140A1D780
*/

vector function GetRight()

/*
* @Breif Gets half the width of the window
* @Pramas 
* @NativeName: GetHalfWidth
* @NativeFunctionAddress 0000000140A1D6D0
*/

float function GetHalfWidth()

/*
* @Breif Gets half the height of the window
* @Pramas 
* @NativeName: GetHalfHeight
* @NativeFunctionAddress 0000000140A1D620
*/

float function GetHalfHeight()

/*
* @Breif 
* @Pramas 
* @NativeName: Hide
* @NativeFunctionAddress 0000000140A1D970
*/

void function HideFirstPersonProxy()

/*
* @Breif 
* @Pramas 
* @NativeName: Show
* @NativeFunctionAddress 0000000140A1D920
*/

void function ShowFirstPersonProxy()

/*
* @Breif Destroy a hud element.
* @Pramas 
* @NativeName: Destroy
* @NativeFunctionAddress 00000001409C32A0
*/

void function Destroy()

/*
* @Breif Reveal a hud element.
* @Pramas 
* @NativeName: Show
* @NativeFunctionAddress 00000001409C3250
*/

void function Show()

/*
* @Breif Hide a hud element.
* @Pramas 
* @NativeName: Hide
* @NativeFunctionAddress 00000001409C3200
*/

void function Hide()

/*
* @Breif Set visibility of a hud element.
* @Pramas bool
* @NativeName: SetVisible
* @NativeFunctionAddress 00000001409C31A0
*/

void function SetVisible(bool)

/*
* @Breif Refresh the visibility a hud element.
* @Pramas 
* @NativeName: UpdateVisibility
* @NativeFunctionAddress 00000001409C3150
*/

void function UpdateVisibility()

/*
* @Breif Returns whether the given hud element is currently visible.
* @Pramas 
* @NativeName: IsVisible
* @NativeFunctionAddress 00000001409C30F0
*/

bool function IsVisible()

/*
* @Breif 
* @Pramas int
* @NativeName: SetVisGroupID
* @NativeFunctionAddress 00000001409C3080
*/

void function SetVisGroupID(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetVisGroupID
* @NativeFunctionAddress 00000001409C2FD0
*/

int function GetVisGroupID()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHudName
* @NativeFunctionAddress 00000001409C2F40
*/

string function GetHudName()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptID
* @NativeFunctionAddress 00000001409C2EB0
*/

string function GetScriptID()

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas string, int, float
* @NativeName: Script_SetAutoText
* @NativeFunctionAddress 00000001409C2E20
*/

void function SetAutoText(string, int, float)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas string, string, string, int, float
* @NativeName: Script_SetAutoTextWithAlternates
* @NativeFunctionAddress 00000001409C2D70
*/

void function SetAutoTextWithAlternates(string, string, string, int, float)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas string, int, vector
* @NativeName: Script_SetAutoTextVector
* @NativeFunctionAddress 00000001409C2CF0
*/

void function SetAutoTextVector(string, int, vector)

/*
* @Breif Set the auto text settings for this HUD element
* @Pramas string, int, entity
* @NativeName: Script_SetAutoTextEntity
* @NativeFunctionAddress 00000001409C2C50
*/

void function SetAutoTextEntity(string, int, entity)

/*
* @Breif Set the auto text settings for this HUD element. ( localization token, HATT type, start value, end value, transition time )
* @Pramas string, float, float, float
* @NativeName: Script_SetAutoTextCountTo
* @NativeFunctionAddress 00000001409C2BA0
*/

void function SetAutoTextCountTo(string, float, float, float)

/*
* @Breif Enable the auto text updating
* @Pramas 
* @NativeName: Script_EnableAutoText
* @NativeFunctionAddress 00000001409C2B50
*/

void function EnableAutoText()

/*
* @Breif Disable the auto text updating
* @Pramas 
* @NativeName: Script_DisableAutoText
* @NativeFunctionAddress 00000001409C2B00
*/

void function DisableAutoText()

/*
* @Breif Returns true if an auto text has been set for it and it is enabled
* @Pramas 
* @NativeName: Script_IsAutoText
* @NativeFunctionAddress 00000001409C2AA0
*/

bool function IsAutoText()

/*
* @Breif Enable replacing key bindings with the actual key
* @Pramas 
* @NativeName: Script_EnableKeyBindingIcons
* @NativeFunctionAddress 00000001409C2A50
*/

void function EnableKeyBindingIcons()

/*
* @Breif Disable replacing key bindings with the actual key
* @Pramas 
* @NativeName: Script_DisableKeyBindingIcons
* @NativeFunctionAddress 00000001409C2A00
*/

void function DisableKeyBindingIcons()

/*
* @Breif Scale key binding icon sizes by this amount
* @Pramas float
* @NativeName: Script_SetKeyBindingIconScale
* @NativeFunctionAddress 00000001409C2990
*/

void function SetKeyBindingIconScale(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWidth
* @NativeFunctionAddress 00000001409C28E0
*/

int function GetWidth()

/*
* @Breif 
* @Pramas 
* @NativeName: GetHeight
* @NativeFunctionAddress 00000001409C2830
*/

int function GetHeight()

/*
* @Breif 
* @Pramas 
* @NativeName: GetX
* @NativeFunctionAddress 00000001409C2780
*/

int function GetX()

/*
* @Breif 
* @Pramas 
* @NativeName: GetY
* @NativeFunctionAddress 00000001409C26D0
*/

int function GetY()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsX
* @NativeFunctionAddress 00000001409C2620
*/

int function GetAbsX()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsY
* @NativeFunctionAddress 00000001409C2570
*/

int function GetAbsY()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAbsPos
* @NativeFunctionAddress 00000001409C24A0
*/

var function GetAbsPos()

/*
* @Breif 
* @Pramas 
* @NativeName: GetParentRelativePos
* @NativeFunctionAddress 00000001409C23D0
*/

var function GetParentRelativePos()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseWidth
* @NativeFunctionAddress 00000001409C2320
*/

int function GetBaseWidth()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseHeight
* @NativeFunctionAddress 00000001409C2270
*/

int function GetBaseHeight()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBasePos
* @NativeFunctionAddress 00000001409C21A0
*/

var function GetBasePos()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseSize
* @NativeFunctionAddress 00000001409C20D0
*/

var function GetBaseSize()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseX
* @NativeFunctionAddress 00000001409C2020
*/

int function GetBaseX()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseY
* @NativeFunctionAddress 00000001409C1F70
*/

int function GetBaseY()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCursorPriority
* @NativeFunctionAddress 00000001409C1EC0
*/

int function GetCursorPriority()

/*
* @Breif 
* @Pramas int
* @NativeName: SetClampToScreen
* @NativeFunctionAddress 00000001409C1E50
*/

void function SetClampToScreen(int)

/*
* @Breif 
* @Pramas float, float
* @NativeName: SetClampBounds
* @NativeFunctionAddress 00000001409C1DC0
*/

void function SetClampBounds(float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetWorldSpaceScale
* @NativeFunctionAddress 00000001409C1D00
*/

void function SetWorldSpaceScale(float, float, float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetADSFade
* @NativeFunctionAddress 00000001409C1C40
*/

void function SetADSFade(float, float, float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetDistanceFade
* @NativeFunctionAddress 00000001409C1B80
*/

void function SetDistanceFade(float, float, float, float)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetFOVFade
* @NativeFunctionAddress 00000001409C1AC0
*/

void function SetFOVFade(float, float, float, float)

/*
* @Breif 
* @Pramas float, float, float
* @NativeName: SetPulsate
* @NativeFunctionAddress 00000001409C1A20
*/

void function SetPulsate(float, float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: ClearPulsate
* @NativeFunctionAddress 00000001409C19D0
*/

void function ClearPulsate()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetOffscreenArrow
* @NativeFunctionAddress 00000001409C1970
*/

void function SetOffscreenArrow(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: IsOnScreen
* @NativeFunctionAddress 00000001409C1910
*/

bool function IsOnScreen()

/*
* @Breif 
* @Pramas 
* @NativeName: IsLabel
* @NativeFunctionAddress 00000001409C18B0
*/

bool function IsLabel()

/*
* @Breif 
* @Pramas var
* @NativeName: SetNavUp
* @NativeFunctionAddress 00000001409C1830
*/

void function SetNavUp(var)

/*
* @Breif 
* @Pramas var
* @NativeName: SetNavDown
* @NativeFunctionAddress 00000001409C17B0
*/

void function SetNavDown(var)

/*
* @Breif 
* @Pramas var
* @NativeName: SetNavLeft
* @NativeFunctionAddress 00000001409C1730
*/

void function SetNavLeft(var)

/*
* @Breif 
* @Pramas var
* @NativeName: SetNavRight
* @NativeFunctionAddress 00000001409C16B0
*/

void function SetNavRight(var)

/*
* @Breif 
* @Pramas int, int
* @NativeName: SetBaseSize
* @NativeFunctionAddress 00000001409C1630
*/

void function SetBaseSize(int, int)

/*
* @Breif 
* @Pramas string, float
* @NativeName: SetTextTypeWriter
* @NativeFunctionAddress 00000001409C15B0
*/

void function SetTextTypeWriter(string, float)

/*
* @Breif 
* @Pramas int, int
* @NativeName: SetBasePos
* @NativeFunctionAddress 00000001409C1530
*/

void function SetBasePos(int, int)

/*
* @Breif 
* @Pramas int, int, int, int
* @NativeName: SetBaseColor
* @NativeFunctionAddress 00000001409C1480
*/

void function SetBaseColor(int, int, int, int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetX
* @NativeFunctionAddress 00000001409C1410
*/

void function SetX(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetY
* @NativeFunctionAddress 00000001409C13A0
*/

void function SetY(int)

/*
* @Breif 
* @Pramas int
* @NativeName: OffsetX
* @NativeFunctionAddress 00000001409C1330
*/

void function OffsetX(int)

/*
* @Breif 
* @Pramas int
* @NativeName: OffsetY
* @NativeFunctionAddress 00000001409C12C0
*/

void function OffsetY(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseColor
* @NativeFunctionAddress 00000001409C11F0
*/

var function GetBaseColor()

/*
* @Breif 
* @Pramas 
* @NativeName: GetBaseAlpha
* @NativeFunctionAddress 00000001409C1140
*/

int function GetBaseAlpha()

/*
* @Breif 
* @Pramas int
* @NativeName: SetCursorPriority
* @NativeFunctionAddress 00000001409C10D0
*/

void function SetCursorPriority(int)

/*
* @Breif 
* @Pramas float
* @NativeName: SetBarProgress
* @NativeFunctionAddress 00000001409C1060
*/

void function SetBarProgress(float)

/*
* @Breif 
* @Pramas float, float
* @NativeName: SetBarProgressAndRate
* @NativeFunctionAddress 00000001409C0FD0
*/

void function SetBarProgressAndRate(float, float)

/*
* @Breif 
* @Pramas float, float, float
* @NativeName: SetBarProgressOverTime
* @NativeFunctionAddress 00000001409C0F30
*/

void function SetBarProgressOverTime(float, float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetBarProgress
* @NativeFunctionAddress 00000001409C0E80
*/

float function GetBarProgress()

/*
* @Breif 
* @Pramas int, int
* @NativeName: SetBarSegmentInfo
* @NativeFunctionAddress 00000001409C0E00
*/

void function SetBarSegmentInfo(int, int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarInset
* @NativeFunctionAddress 00000001409C0D90
*/

void function SetBarInset(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarMargin
* @NativeFunctionAddress 00000001409C0D20
*/

void function SetBarMargin(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarProgressDirection
* @NativeFunctionAddress 00000001409C0CB0
*/

void function SetBarProgressDirection(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarSegmentFill
* @NativeFunctionAddress 00000001409C0C40
*/

void function SetBarSegmentFill(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarProgressSource
* @NativeFunctionAddress 00000001409C0BD0
*/

void function SetBarProgressSource(int)

/*
* @Breif 
* @Pramas entity
* @NativeName: SetBarProgressSourceEntity
* @NativeFunctionAddress 00000001409C0B50
*/

void function SetBarProgressSourceEntity(entity)

/*
* @Breif 
* @Pramas float, float, float, float
* @NativeName: SetBarProgressRemap
* @NativeFunctionAddress 00000001409C0A90
*/

void function SetBarProgressRemap(float, float, float, float)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarChangeStyle
* @NativeFunctionAddress 00000001409C0A20
*/

void function SetBarChangeStyle(int)

/*
* @Breif 
* @Pramas int
* @NativeName: SetBarChangeDir
* @NativeFunctionAddress 00000001409C09B0
*/

void function SetBarChangeDir(int)

/*
* @Breif 
* @Pramas float
* @NativeName: SetBarChangeDuration
* @NativeFunctionAddress 00000001409C0940
*/

void function SetBarChangeDuration(float)

/*
* @Breif 
* @Pramas 
* @NativeName: ReturnToBaseColor
* @NativeFunctionAddress 00000001409C08F0
*/

void function ReturnToBaseColor()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetAlpha
* @NativeFunctionAddress 00000001409C0880
*/

void function SetAlpha(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetPanelAlpha
* @NativeFunctionAddress 00000001409C0810
*/

void function SetPanelAlpha(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPanelAlpha
* @NativeFunctionAddress 00000001409C0760
*/

int function GetPanelAlpha()

/*
* @Breif 
* @Pramas 
* @NativeName: GetAlpha
* @NativeFunctionAddress 00000001409C06B0
*/

int function GetAlpha()

/*
* @Breif 
* @Pramas int
* @NativeName: SetBaseAlpha
* @NativeFunctionAddress 00000001409C0640
*/

void function SetBaseAlpha(int)

/*
* @Breif Get the estimated drawn width of this label.
* @Pramas 
* @NativeName: GetTextWidth
* @NativeFunctionAddress 00000001409C0590
*/

int function GetTextWidth()

/*
* @Breif 
* @Pramas entity, vector, float, float
* @NativeName: Script_SetEntity
* @NativeFunctionAddress 00000001409C04D0
*/

void function SetEntity(entity, vector, float, float)

/*
* @Breif 
* @Pramas entity, vector, float, float
* @NativeName: Script_SetEntityOverhead
* @NativeFunctionAddress 00000001409C0410
*/

void function SetEntityOverhead(entity, vector, float, float)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetHideOnEntityOverheadCloak
* @NativeFunctionAddress 00000001409C03B0
*/

void function SetHideOnEntityOverheadCloak(bool)

/*
* @Breif 
* @Pramas vector
* @NativeName: SetOrigin
* @NativeFunctionAddress 00000001409C0350
*/

void function SetOrigin(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: ClearWorldOrigin
* @NativeFunctionAddress 00000001409C0300
*/

void function ClearWorldOrigin()

/*
* @Breif 
* @Pramas float, float
* @NativeName: SetScale
* @NativeFunctionAddress 00000001409C0270
*/

void function SetScale(float, float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetScaleX
* @NativeFunctionAddress 00000001409C0200
*/

void function SetScaleX(float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetScaleY
* @NativeFunctionAddress 00000001409C0190
*/

void function SetScaleY(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetScaleX
* @NativeFunctionAddress 00000001409C00E0
*/

float function GetScaleX()

/*
* @Breif 
* @Pramas 
* @NativeName: GetScaleY
* @NativeFunctionAddress 00000001409C0030
*/

float function GetScaleY()

/*
* @Breif 
* @Pramas 
* @NativeName: ReturnToBasePos
* @NativeFunctionAddress 00000001409BFFE0
*/

void function ReturnToBasePos()

/*
* @Breif 
* @Pramas 
* @NativeName: ReturnToBaseSize
* @NativeFunctionAddress 00000001409BFF90
*/

void function ReturnToBaseSize()

/*
* @Breif 
* @Pramas 
* @NativeName: IsSelected
* @NativeFunctionAddress 00000001409BFF30
*/

bool function IsSelected()

/*
* @Breif 
* @Pramas 
* @NativeName: IsLocked
* @NativeFunctionAddress 00000001409BFED0
*/

bool function IsLocked()

/*
* @Breif 
* @Pramas 
* @NativeName: IsNew
* @NativeFunctionAddress 00000001409BFE70
*/

bool function IsNew()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetSelected
* @NativeFunctionAddress 00000001409BFE10
*/

void function SetSelected(bool)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetLocked
* @NativeFunctionAddress 00000001409BFDB0
*/

void function SetLocked(bool)

/*
* @Breif 
* @Pramas bool
* @NativeName: SetNew
* @NativeFunctionAddress 00000001409BFD50
*/

void function SetNew(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetListSize
* @NativeFunctionAddress 00000001409BFCA0
*/

int function GetListSize()

/*
* @Breif 
* @Pramas int
* @NativeName: GetListItem
* @NativeFunctionAddress 00000001409BFC20
*/

var function GetListItem(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetListSelectedItem
* @NativeFunctionAddress 00000001409BFBC0
*/

var function GetListSelectedItem()

/*
* @Breif 
* @Pramas 
* @NativeName: GetListPanelSelectedItem
* @NativeFunctionAddress 00000001409BFB30
*/

string function GetListPanelSelectedItem()

/*
* @Breif Sets the pin sibling by name
* @Pramas string
* @NativeName: SetPinSibling
* @NativeFunctionAddress 00000001409BFAD0
*/

void function SetPinSibling(string)

/*
* @Breif 
* @Pramas float, int
* @NativeName: ReturnToBasePosOverTime
* @NativeFunctionAddress 00000001409BFA40
*/

void function ReturnToBasePosOverTime(float, int)

/*
* @Breif 
* @Pramas float, int
* @NativeName: ReturnToBaseScaleOverTime
* @NativeFunctionAddress 00000001409BF9B0
*/

void function ReturnToBaseScaleOverTime(float, int)

/*
* @Breif 
* @Pramas string
* @NativeName: Script_RunAnimationScript
* @NativeFunctionAddress 00000001409BF950
*/

void function RunAnimationScript(string)

/*
* @Breif Set the image of an imagePanel element.
* @Pramas asset imageName
* @NativeName: SetImage
* @NativeFunctionAddress 00000001409BF8F0
*/

void function SetImage(asset imageName)

/*
* @Breif Sets an image in the label on the left side, or right side if the second parameter is true.
* @Pramas asset imageName, bool rightSide
* @NativeName: SetLabelImage
* @NativeFunctionAddress 00000001409BF880
*/

void function SetLabelImage(asset imageName, bool rightSide)

/*
* @Breif 
* @Pramas string, float, float, float, int, float
* @NativeName: RunAnimationCommand
* @NativeFunctionAddress 00000001409BF790
*/

void function RunAnimationCommand(string, float, float, float, int, float)

/*
* @Breif Gets the color of an element as an array with four elements (red, green, blue, alpha).
* @Pramas 
* @NativeName: GetColor
* @NativeFunctionAddress 00000001409BF6C0
*/

var function GetColor()

/*
* @Breif Get the position of the given hud element, as an array with two elements.
* @Pramas 
* @NativeName: GetPos
* @NativeFunctionAddress 00000001409BF5F0
*/

var function GetPos()

/*
* @Breif Set the position of the given hud element.
* @Pramas int, int
* @NativeName: SetPos
* @NativeFunctionAddress 00000001409BF570
*/

void function SetPos(int, int)

/*
* @Breif Set the Z position of the given hud element.
* @Pramas int
* @NativeName: SetZ
* @NativeFunctionAddress 00000001409BF500
*/

void function SetZ(int)

/*
* @Breif Get the size of the given hud element, as an array with two elements.
* @Pramas 
* @NativeName: GetSize
* @NativeFunctionAddress 00000001409BF430
*/

var function GetSize()

/*
* @Breif Set the size of the given hud element.
* @Pramas int, int
* @NativeName: SetSize
* @NativeFunctionAddress 00000001409BF3B0
*/

void function SetSize(int, int)

/*
* @Breif Set the width of the given hud element.
* @Pramas int
* @NativeName: SetWidth
* @NativeFunctionAddress 00000001409BF340
*/

void function SetWidth(int)

/*
* @Breif Set the height of the given hud element.
* @Pramas int
* @NativeName: SetHeight
* @NativeFunctionAddress 00000001409BF2D0
*/

void function SetHeight(int)

/*
* @Breif Get the rotation of the given hud element.
* @Pramas 
* @NativeName: GetRotation
* @NativeFunctionAddress 00000001409BF220
*/

float function GetRotation()

/*
* @Breif Set the rotation of the given hud element.
* @Pramas float
* @NativeName: SetRotation
* @NativeFunctionAddress 00000001409BF1B0
*/

void function SetRotation(float)

/*
* @Breif Gets a child HUD element (for use with CNestedPanel)
* @Pramas string
* @NativeName: HudElement
* @NativeFunctionAddress 00000001409BF140
*/

var function HudElement(string)

/*
* @Breif Gets a child HUD element (for use with CNestedPanel)
* @Pramas string
* @NativeName: HudElement
* @NativeFunctionAddress 00000001409BF140
*/

var function GetChild(string)

/*
* @Breif Checks if a child HUD element for a given name exists
* @Pramas string
* @NativeName: HasChild
* @NativeFunctionAddress 00000001409BF0D0
*/

bool function HasChild(string)

/*
* @Breif Gets the parent HUD element
* @Pramas 
* @NativeName: Script_GetParent
* @NativeFunctionAddress 00000001409BF070
*/

var function GetParent()

/*
* @Breif Adds a closure to handle an event such as UIE_CLICK
* @Pramas int, var
* @NativeName: AddEventHandler
* @NativeFunctionAddress 00000001409BEFD0
*/

void function AddEventHandler(int, var)

/*
* @Breif Removes a closure that was set to handle an event
* @Pramas int, var
* @NativeName: RemoveEventHandler
* @NativeFunctionAddress 00000001409BEF30
*/

void function RemoveEventHandler(int, var)

/*
* @Breif Sets the callback for commands this element receives
* @Pramas var
* @NativeName: SetCommandHandler
* @NativeFunctionAddress 00000001409BEEB0
*/

void function SetCommandHandler(var)

/*
* @Breif Clears the callback for commands this element receives
* @Pramas 
* @NativeName: ClearCommandHandler
* @NativeFunctionAddress 00000001409BEE60
*/

void function ClearCommandHandler()

/*
* @Breif Adds a closure to handle keypress events.
* @Pramas bool functionref( var hudelem, int keyId, bool isDown ) handlerFunc
* @NativeName: AddKeyPressHandler
* @NativeFunctionAddress 00000001409BEDE0
*/

void function AddKeyPressHandler(bool functionref( var hudelem, int keyId, bool isDown ) handlerFunc)

/*
* @Breif Returns whether the element is enabled (can be interacted with)
* @Pramas 
* @NativeName: IsEnabled
* @NativeFunctionAddress 00000001409BED80
*/

bool function IsEnabled()

/*
* @Breif Sets whether the element is enabled (can be interacted with)
* @Pramas bool
* @NativeName: SetEnabled
* @NativeFunctionAddress 00000001409BED20
*/

void function SetEnabled(bool)

/*
* @Breif Returns whether the element has focus
* @Pramas 
* @NativeName: IsFocused
* @NativeFunctionAddress 00000001409BECC0
*/

bool function IsFocused()

/*
* @Breif Gives the element focus
* @Pramas 
* @NativeName: SetFocused
* @NativeFunctionAddress 00000001409BEC60
*/

bool function SetFocused()

/*
* @Breif Enable spherical warp distortion.
* @Pramas 
* @NativeName: WarpEnable
* @NativeFunctionAddress 00000001409BEC10
*/

void function WarpEnable()

/*
* @Breif Disable spherical warp distortion.
* @Pramas 
* @NativeName: WarpDisable
* @NativeFunctionAddress 00000001409BEBC0
*/

void function WarpDisable()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetUTF8Text
* @NativeFunctionAddress 00000001409BEB30
*/

string function GetUTF8Text()

/*
* @Breif 
* @Pramas string
* @NativeName: Script_SetUTF8Text
* @NativeFunctionAddress 00000001409BEAD0
*/

void function SetUTF8Text(string)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SelectAll
* @NativeFunctionAddress 00000001409BEA80
*/

void function SelectAll()

/*
* @Breif Populates a GridButtonListPanel with a given number of RuiButtons.
* @Pramas int numButtons
* @NativeName: InitGridButtons
* @NativeFunctionAddress 00000001409BEA10
*/

void function InitGridButtons(int numButtons)

/*
* @Breif Populates a GridButtonListPanel with a specified number of RuiButtons, rows, and columns.
* @Pramas int numButtons, int rows, int cols
* @NativeName: InitGridButtonsDetailed
* @NativeFunctionAddress 00000001409BE970
*/

void function InitGridButtonsDetailed(int numButtons, int rows, int cols)

/*
* @Breif Sets the color of an element with components (red, green, blue, alpha) given as 0-255 values.
* @Pramas 
* @NativeName: Script_SetColor
* @NativeFunctionAddress 00000001409B1590
*/

void function SetColor(var, var, var, var, var)

/*
* @Breif Sets the background color of an element with components (red, green, blue, alpha) given as 0-255 values.
* @Pramas 
* @NativeName: Script_SetColorBG
* @NativeFunctionAddress 00000001409B15E0
*/

void function SetColorBG(var, var, var, var, var)

/*
* @Breif 
* @Pramas x, y, duration, [interpolator]
* @NativeName: Script_MoveOverTime
* @NativeFunctionAddress 00000001409B17A0
*/

void function MoveOverTime(var, number, number, number, int)

/*
* @Breif 
* @Pramas r, g, b, a, duration, [interpolator]
* @NativeName: Script_ColorOverTime
* @NativeFunctionAddress 00000001409B17F0
*/

void function ColorOverTime(var, int, int, int, int, number, int)

/*
* @Breif 
* @Pramas wScale, hScale, duration, [interpolator]
* @NativeName: Script_ScaleOverTime
* @NativeFunctionAddress 00000001409B1840
*/

void function ScaleOverTime(var, number, number, number, int)

/*
* @Breif 
* @Pramas x, y, duration, [interpolator]
* @NativeName: Script_OffsetOverTime
* @NativeFunctionAddress 00000001409B1890
*/

void function OffsetOverTime(var, number, number, number, int)

/*
* @Breif 
* @Pramas a, duration, [interpolator]
* @NativeName: Script_FadeOverTime
* @NativeFunctionAddress 00000001409B18E0
*/

void function FadeOverTime(var, int, number, int)

/*
* @Breif 
* @Pramas x, duration, [interpolator]
* @NativeName: Script_SetXOverTime
* @NativeFunctionAddress 00000001409B19D0
*/

void function SetXOverTime(var, number, number, int)

/*
* @Breif 
* @Pramas y, duration, [interpolator]
* @NativeName: Script_SetYOverTime
* @NativeFunctionAddress 00000001409B1A20
*/

void function SetYOverTime(var, number, number, int)

/*
* @Breif 
* @Pramas x, duration, [interpolator]
* @NativeName: Script_OffsetXOverTime
* @NativeFunctionAddress 00000001409B1A70
*/

void function OffsetXOverTime(var, number, number, int)

/*
* @Breif 
* @Pramas y, duration, [interpolator]
* @NativeName: Script_OffsetYOverTime
* @NativeFunctionAddress 00000001409B1AC0
*/

void function OffsetYOverTime(var, number, number, int)

/*
* @Breif 
* @Pramas duration, [interpolator]
* @NativeName: Script_HideOverTime
* @NativeFunctionAddress 00000001409B1B10
*/

void function HideOverTime(var, number, int)

/*
* @Breif 
* @Pramas r, g, b, a, duration, delay, [interpolator]
* @NativeName: Script_ColorOverTimeDelayed
* @NativeFunctionAddress 00000001409B1B60
*/

void function ColorOverTimeDelayed(var, int, int, int, int, number, number, int)

/*
* @Breif 
* @Pramas a, duration, delay, [interpolator]
* @NativeName: Script_FadeOverTimeDelayed
* @NativeFunctionAddress 00000001409B1BB0
*/

void function FadeOverTimeDelayed(var, int, number, number, int)

/*
* @Breif Set the text of a label element. Optional parameters for localized-string '%s1'-type format vars.
* @Pramas index, string, [param1, param2, param3...]
* @NativeName: Script_SetText
* @NativeFunctionAddress 00000001409B1C00
*/

void function SetText(var, string)

/*
* @Breif Returns time spent in cockpit so far.
* @Pramas 
* @NativeName: Script_GetTimeInCockpit
* @NativeFunctionAddress 00000001409C4540
*/

float function GetTimeInCockpit()

/*
* @Breif Plays an animation sequence by name.
* @Pramas string
* @NativeName: Script_StartAnimationSequence
* @NativeFunctionAddress 00000001409C44E0
*/

void function StartAnimationSequence(string)

/*
* @Breif Sets offset of viewmodel when cockpit is open.
* @Pramas float, float, float
* @NativeName: Script_SetOpenViewmodelOffset
* @NativeFunctionAddress 00000001409C4440
*/

void function SetOpenViewmodelOffset(float, float, float)

/*
* @Breif Sets offset for interior camera.
* @Pramas float, float, float, float, float, float
* @NativeName: Script_SetInteriorCameraOffset
* @NativeFunctionAddress 00000001409C4340
*/

void function SetInteriorCameraOffset(float, float, float, float, float, float)

/*
* @Breif Sets the transparency amount for the cockpit panel. 1 = Transparent, 0 = Opaque
* @Pramas int, float
* @NativeName: Script_SetCockpitPanelTransparency
* @NativeFunctionAddress 00000001409C42C0
*/

void function SetCockpitPanelTransparency(int, float)

/*
* @Breif Clears the transparency amount for the cockpit panel.
* @Pramas int
* @NativeName: Script_ClearCockpitPanelTransparency
* @NativeFunctionAddress 00000001409C4250
*/

void function ClearCockpitPanelTransparency(int)

/*
* @Breif Sets the chroma amount for the cockpit panel. 1 = Full Chromatic Aberration, 0 = No Chromatic Aberration
* @Pramas int, float
* @NativeName: Script_SetCockpitPanelChroma
* @NativeFunctionAddress 00000001409C41D0
*/

void function SetCockpitPanelChroma(int, float)

/*
* @Breif Clears the chroma amount for the cockpit panel.
* @Pramas int
* @NativeName: Script_ClearCockpitPanelChroma
* @NativeFunctionAddress 00000001409C4160
*/

void function ClearCockpitPanelChroma(int)

/*
* @Breif Sets an additional offset XY for the cockpit panel. (-1, -1) to (1, 1)  
* @Pramas int, float, float
* @NativeName: Script_SetCockpitPanelOffsetXY
* @NativeFunctionAddress 00000001409C40C0
*/

void function SetCockpitPanelOffsetXY(int, float, float)

/*
* @Breif Sets fov of cockpit.
* @Pramas float
* @NativeName: SetCockpitFOV
* @NativeFunctionAddress 00000001409C4050
*/

void function SetCockpitFOV(float)

/*
* @Breif Opens the cockpit (Puts it into the world.)
* @Pramas bool
* @NativeName: SetIsOpen
* @NativeFunctionAddress 00000001409C3FF0
*/

void function SetIsOpen(bool)

/*
* @Breif Returns whether cockpit is open.
* @Pramas 
* @NativeName: GetIsOpen
* @NativeFunctionAddress 00000001409C3F90
*/

bool function GetIsOpen()

/*
* @Breif Sets that the world view is saved off before viewmodels are rendered.
* @Pramas bool
* @NativeName: Script_SetCaptureScreenBeforeViewmodels
* @NativeFunctionAddress 00000001409C3F30
*/

void function SetCaptureScreenBeforeViewmodels(bool)

/*
* @Breif Tell code a panel was damaged.
* @Pramas int, float
* @NativeName: AddToTitanHudDamageHistory
* @NativeFunctionAddress 00000001409C3EB0
*/

void function AddToTitanHudDamageHistory(int, float)

/*
* @Breif Sets light color for one of the cockpit lights.
* @Pramas int, float, float, float
* @NativeName: SetScreenLightColor
* @NativeFunctionAddress 00000001409C4700
*/

void function SetScreenLightColor(int, float, float, float)

/*
* @Breif Sets screen space position of the cockpit light.
* @Pramas int, float, float
* @NativeName: SetScreenLightPosition
* @NativeFunctionAddress 00000001409C4660
*/

void function SetScreenLightPosition(int, float, float)

/*
* @Breif Sets a 0-1 scale for the amount of self illum for materials in the cockpit.
* @Pramas float
* @NativeName: SetCockpitSelfIllumScale
* @NativeFunctionAddress 00000001409C45F0
*/

void function SetCockpitSelfIllumScale(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetScriptPropFlags
* @NativeFunctionAddress 000000014069CD20
*/

int function GetScriptPropFlags()

/*
* @Breif Sets the type of custom smart ammo target this is
* @Pramas int
* @NativeName: Script_SetSmartAmmoLockType
* @NativeFunctionAddress 000000014069CCB0
*/

void function SetSmartAmmoLockType(int)

/*
* @Breif Gets the type of custom smart ammo target this is
* @Pramas 
* @NativeName: Script_GetSmartAmmoLockType
* @NativeFunctionAddress 000000014069CC00
*/

int function GetSmartAmmoLockType()

/*
* @Breif Get node the train is currently set to stop at
* @Pramas 
* @NativeName: Script_Train_GetStopNode
* @NativeFunctionAddress 00000001408FC070
*/

entity function Train_GetStopNode()

/*
* @Breif Returns true if the train is currently moving to a train node
* @Pramas 
* @NativeName: Train_IsMovingToTrainNode
* @NativeFunctionAddress 00000001408FC010
*/

bool function Train_IsMovingToTrainNode()

/*
* @Breif Stop all movement/rotation immediately
* @Pramas 
* @NativeName: Script_NonPhysicsStop
* @NativeFunctionAddress 00000001408FBFC0
*/

void function NonPhysicsStop()

/*
* @Breif Move to a given point over time. Specify total travel time, acceleration time, and deceleration time.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsMoveTo
* @NativeFunctionAddress 00000001408FBF10
*/

void function NonPhysicsMoveTo(vector, float, float, float)

/*
* @Breif Move to a given point over time. The point is specified in the local space (i.e. relative to our parent), but the movement is linear in world space.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsMoveInWorldSpaceToLocalPos
* @NativeFunctionAddress 00000001408FBE60
*/

void function NonPhysicsMoveInWorldSpaceToLocalPos(vector, float, float, float)

/*
* @Breif Move with a given starting velocity and apply the given gravity over time
* @Pramas vector, vector
* @NativeName: Script_NonPhysicsMoveWithGravity
* @NativeFunctionAddress 00000001408FBE00
*/

void function NonPhysicsMoveWithGravity(vector, vector)

/*
* @Breif Rotate to given angles over time. Specify total travel time.
* @Pramas vector, float, float, float
* @NativeName: Script_NonPhysicsRotateTo
* @NativeFunctionAddress 00000001408FBD50
*/

void function NonPhysicsRotateTo(vector, float, float, float)

/*
* @Breif Rotate around the given axis with the given speed. Use an axis or speed of 0 to stop.
* @Pramas vector, float
* @NativeName: Script_NonPhysicsRotate
* @NativeFunctionAddress 00000001408FBCE0
*/

void function NonPhysicsRotate(vector, float)

/*
* @Breif When set true, will use local positions.
* @Pramas bool
* @NativeName: Script_NonPhysicsSetMoveModeLocal
* @NativeFunctionAddress 00000001408FBC80
*/

void function NonPhysicsSetMoveModeLocal(bool)

/*
* @Breif When set true, will use local rotation.
* @Pramas bool
* @NativeName: Script_NonPhysicsSetRotateModeLocal
* @NativeFunctionAddress 00000001408FBC20
*/

void function NonPhysicsSetRotateModeLocal(bool)

/*
* @Breif Get speed train is trying to go at.
* @Pramas 
* @NativeName: Script_Train_GetGoalSpeed
* @NativeFunctionAddress 00000001408FBB70
*/

float function Train_GetGoalSpeed()

/*
* @Breif Get time until the train reaches its goal speed.
* @Pramas 
* @NativeName: Script_Train_GetTotalTimeToGoalSpeed
* @NativeFunctionAddress 00000001408FBAC0
*/

float function Train_GetTotalTimeToGoalSpeed()

/*
* @Breif Get current speed moving to train node.
* @Pramas 
* @NativeName: Train_GetCurrentSpeed
* @NativeFunctionAddress 00000001408FBA10
*/

float function Train_GetCurrentSpeed()

/*
* @Breif Get the script_mover_train_node the train was traveling on before it stopped.
* @Pramas 
* @NativeName: Script_Train_GetLastNode
* @NativeFunctionAddress 00000001408FB9B0
*/

entity function Train_GetLastNode()

/*
* @Breif Get the distance the train was at before it stopped.
* @Pramas 
* @NativeName: Script_Train_GetLastDistance
* @NativeFunctionAddress 00000001408FB900
*/

float function Train_GetLastDistance()

/*
* @Breif Get the speed the train was moving at before it stopped.
* @Pramas 
* @NativeName: Train_GetLastSpeed
* @NativeFunctionAddress 00000001408FB850
*/

float function Train_GetLastSpeed()

/*
* @Breif Gets door flags. Really just a networked int.
* @Pramas 
* @NativeName: GetDoorFlags
* @NativeFunctionAddress 00000001408FB740
*/

int function GetDoorFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointType
* @NativeFunctionAddress 00000001408FD720
*/

int function GetWaypointType()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointBitfield
* @NativeFunctionAddress 000000014070D010
*/

int function GetWaypointBitfield()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointCustomType
* @NativeFunctionAddress 00000001408FD690
*/

string function GetWaypointCustomType()

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointEntity
* @NativeFunctionAddress 00000001408FD610
*/

entity function GetWaypointEntity(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointVector
* @NativeFunctionAddress 00000001408FD520
*/

vector function GetWaypointVector(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointGametime
* @NativeFunctionAddress 00000001408FD460
*/

float function GetWaypointGametime(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointInt
* @NativeFunctionAddress 00000001408FD3A0
*/

int function GetWaypointInt(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointFloat
* @NativeFunctionAddress 00000001408FD2E0
*/

float function GetWaypointFloat(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointString
* @NativeFunctionAddress 00000001408FD240
*/

string function GetWaypointString(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetWaypointAsset
* @NativeFunctionAddress 00000001408FD190
*/

asset function GetWaypointAsset(int index)

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointObjectivePackedInt
* @NativeFunctionAddress 00000001408FD0E0
*/

int function GetWaypointObjectivePackedInt()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointGroupName
* @NativeFunctionAddress 00000001408FD050
*/

string function GetWaypointGroupName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetWaypointGroupFlags
* @NativeFunctionAddress 00000001408FCFA0
*/

int function GetWaypointGroupFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: WaypointFocusTracking_Register
* @NativeFunctionAddress 00000001408FCF50
*/

void function WaypointFocusTracking_Register()

/*
* @Breif 
* @Pramas 
* @NativeName: WaypointFocusTracking_Deregister
* @NativeFunctionAddress 00000001408FCF00
*/

void function WaypointFocusTracking_Deregister()

/*
* @Breif 
* @Pramas entity trackEnt, int trackProp, int customInt
* @NativeName: WaypointFocusTracking_TrackPos
* @NativeFunctionAddress 00000001408FCE50
*/

void function WaypointFocusTracking_TrackPos(entity trackEnt, int trackProp, int customInt)

/*
* @Breif 
* @Pramas bool isTrackingDisabled
* @NativeName: WaypointFocusTracking_SetDisabled
* @NativeFunctionAddress 00000001408FCDF0
*/

void function WaypointFocusTracking_SetDisabled(bool isTrackingDisabled)

/*
* @Breif Adds a waypoint flag to a waypoint
* @Pramas int
* @NativeName: Script_WaypointAddFlag
* @NativeFunctionAddress 00000001408FCD80
*/

void function WaypointAddFlag(int)

/*
* @Breif Removes a waypoint flag
* @Pramas int
* @NativeName: Script_WaypointRemoveFlag
* @NativeFunctionAddress 00000001408FCD10
*/

void function WaypointRemoveFlag(int)

/*
* @Breif Whether or not a waypoint flag is set
* @Pramas int flag
* @NativeName: WaypointIsFlagSet
* @NativeFunctionAddress 00000001408FCC90
*/

bool function WaypointIsFlagSet(int flag)

/*
* @Breif The distance at which this waypoint can be seen
* @Pramas float dist
* @NativeName: WaypointSetCheckDist
* @NativeFunctionAddress 00000001408FCC20
*/

void function WaypointSetCheckDist(float dist)

/*
* @Breif gets the valid check distance for a waypoint
* @Pramas 
* @NativeName: WaypointGetCheckDist
* @NativeFunctionAddress 00000001408FCB70
*/

float function WaypointGetCheckDist()

/*
* @Breif gets the lifetime for a waypoint
* @Pramas 
* @NativeName: WaypointGetLifetime
* @NativeFunctionAddress 00000001408FCAC0
*/

float function WaypointGetLifetime()

/*
* @Breif gets the creation time for a waypoint
* @Pramas 
* @NativeName: WaypointGetCreationTime
* @NativeFunctionAddress 00000001408FCA10
*/

float function WaypointGetCreationTime()

/*
* @Breif gets the id for a waypoint
* @Pramas 
* @NativeName: WaypointGetID
* @NativeFunctionAddress 00000001408FC960
*/

int function WaypointGetID()

/*
* @Breif sets the id for a waypoint
* @Pramas int id
* @NativeName: WaypointSetID
* @NativeFunctionAddress 00000001408FC8F0
*/

void function WaypointSetID(int id)

/*
* @Breif gets if the given waypoint is visible this frame
* @Pramas 
* @NativeName: WaypointIsVisible
* @NativeFunctionAddress 00000001408FC890
*/

bool function WaypointIsVisible()

/*
* @Breif gets the entity this waypoint is attached to
* @Pramas 
* @NativeName: WaypointGetAttachedPOIEnt
* @NativeFunctionAddress 00000001408FC830
*/

entity function WaypointGetAttachedPOIEnt()

/*
* @Breif gets the waypoint position
* @Pramas 
* @NativeName: WaypointGetPOIPosition
* @NativeFunctionAddress 00000001408FC760
*/

vector function WaypointGetPOIPosition()

/*
* @Breif is this waypoint in focus
* @Pramas 
* @NativeName: WaypointIsInFocus
* @NativeFunctionAddress 00000001408FC700
*/

bool function WaypointIsInFocus()

/*
* @Breif was this waypoint in focus last frame too
* @Pramas 
* @NativeName: WaypointInFocusPrevFrame
* @NativeFunctionAddress 00000001408FC6A0
*/

bool function WaypointInFocusPrevFrame()

/*
* @Breif Gets the poi type of this waypoint
* @Pramas 
* @NativeName: WaypointGetPOIType
* @NativeFunctionAddress 00000001408FC5F0
*/

int function WaypointGetPOIType()

/*
* @Breif Sets the waypoint to not trace for visibility for a certain time
* @Pramas float endTime
* @NativeName: WaypointSetAlwaysVisibleEndTime
* @NativeFunctionAddress 00000001408FC580
*/

void function WaypointSetAlwaysVisibleEndTime(float endTime)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTasklistCustomInt
* @NativeFunctionAddress 000000014070D010
*/

int function GetTasklistCustomInt()

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistStatus
* @NativeFunctionAddress 00000001408FDE30
*/

int function GetTasklistStatus(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistType
* @NativeFunctionAddress 00000001408FDD70
*/

int function GetTasklistType(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistCountGoal
* @NativeFunctionAddress 00000001408FDCB0
*/

int function GetTasklistCountGoal(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistCountNow
* @NativeFunctionAddress 00000001408FDBF0
*/

int function GetTasklistCountNow(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistFlags
* @NativeFunctionAddress 00000001408FDB30
*/

int function GetTasklistFlags(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistGameTime
* @NativeFunctionAddress 00000001408FDA70
*/

float function GetTasklistGameTime(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistInt
* @NativeFunctionAddress 00000001408FD9B0
*/

int function GetTasklistInt(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistFloat
* @NativeFunctionAddress 00000001408FD8F0
*/

float function GetTasklistFloat(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistEntity
* @NativeFunctionAddress 00000001408FD870
*/

entity function GetTasklistEntity(int index)

/*
* @Breif 
* @Pramas int index
* @NativeName: GetTasklistString
* @NativeFunctionAddress 00000001408FD7D0
*/

string function GetTasklistString(int index)

/*
* @Breif Sets the entity used for weapon hand IK
* @Pramas entity
* @NativeName: Script_SetIKWeapon
* @NativeFunctionAddress 000000014069CB80
*/

void function SetIKWeapon(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetDoorIsLocked
* @NativeFunctionAddress 0000000140849D50
*/

bool function GetDoorIsLocked()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsDoorOpen
* @NativeFunctionAddress 0000000140849CF0
*/

bool function IsDoorOpen()

/*
* @Breif Get the attached door on a double door
* @Pramas 
* @NativeName: Script_GetOppositeDoor
* @NativeFunctionAddress 0000000140849C90
*/

entity function GetOppositeDoor()

/*
* @Breif Forces the grenade to ignite immediately.
* @Pramas 
* @NativeName: Script_GrenadeIgnite
* @NativeFunctionAddress 000000014084A450
*/

void function GrenadeIgnite()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GrenadeHasIgnited
* @NativeFunctionAddress 000000014084A3F0
*/

bool function GrenadeHasIgnited()

/*
* @Breif Forces the grenade to explode immediately.
* @Pramas vector
* @NativeName: Script_GrenadeExplode
* @NativeFunctionAddress 000000014084A390
*/

void function GrenadeExplode(vector)

/*
* @Breif Forces the grenade to explode immediately.
* @Pramas vector
* @NativeName: Script_GrenadeExplodeForCollisionCallback
* @NativeFunctionAddress 000000014084A330
*/

void function ExplodeForCollisionCallback(vector)

/*
* @Breif Gets the damage radius
* @Pramas 
* @NativeName: Script_GetDamageRadius
* @NativeFunctionAddress 000000014084A280
*/

float function GetDamageRadius()

/*
* @Breif Gets the explosion radius
* @Pramas 
* @NativeName: Script_GetExplosionRadius
* @NativeFunctionAddress 000000014084A1D0
*/

float function GetExplosionRadius()

/*
* @Breif Gets the maximum damage amount
* @Pramas int
* @NativeName: Script_GetDamageAmount
* @NativeFunctionAddress 000000014084A110
*/

float function GetDamageAmount(int)

/*
* @Breif Gets the time this grenade was created.
* @Pramas 
* @NativeName: Script_GetCreationTime
* @NativeFunctionAddress 000000014084A060
*/

float function GetCreationTime()

/*
* @Breif Gets the fuse time of the grenade
* @Pramas 
* @NativeName: Script_GetFuseTime
* @NativeFunctionAddress 0000000140849FB0
*/

float function GetFuseTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_MarkAsAttached
* @NativeFunctionAddress 0000000140849F60
*/

void function MarkAsAttached()

/*
* @Breif Gets who through the grenade.
* @Pramas 
* @NativeName: Script_GetThrower
* @NativeFunctionAddress 0000000140849F00
*/

entity function GetThrower()

/*
* @Breif Sets whether or not the grenade explodes
* @Pramas bool
* @NativeName: Script_SetDoesExplode
* @NativeFunctionAddress 0000000140849EA0
*/

void function SetDoesExplode(bool)

/*
* @Breif Init magnetic grenade parameters
* @Pramas float, string
* @NativeName: InitMagnetic
* @NativeFunctionAddress 0000000140849E20
*/

void function InitMagnetic(float, string)

/*
* @Breif Returns an interface to the hud panel.
* @Pramas 
* @NativeName: Script_GetPanel
* @NativeFunctionAddress 000000014070BBE0
*/

var function GetPanel()

/*
* @Breif ( bool ) Sets whether the panel renders as translucent.
* @Pramas bool
* @NativeName: Script_SetTranslucent
* @NativeFunctionAddress 000000014070BB80
*/

void function SetTranslucent(bool)

/*
* @Breif Sets the alpha modifier for the panel
* @Pramas int
* @NativeName: Script_SetAlpha
* @NativeFunctionAddress 000000014070BB10
*/

void function SetAlpha(int)

/*
* @Breif Sets the width and height of the panel
* @Pramas float, float
* @NativeName: Script_SetSize
* @NativeFunctionAddress 000000014070BA80
*/

void function SetSize(float, float)

/*
* @Breif Sets whether to capture a refract screen before drawing (COSTS GPU!)
* @Pramas bool
* @NativeName: Script_SetRefract
* @NativeFunctionAddress 000000014070BA20
*/

void function SetRefract(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_VehicleGetDriver
* @NativeFunctionAddress 000000014070BE60
*/

entity function VehicleGetDriver()

/*
* @Breif Stops the vehicle from updating (stops movement, aiming, etc)
* @Pramas 
* @NativeName: Script_VehicleDeactivate
* @NativeFunctionAddress 000000014070BE10
*/

void function VehicleDeactivate()

/*
* @Breif Checks driver and passengers
* @Pramas entity
* @NativeName: Script_IsPlayerInVehicle
* @NativeFunctionAddress 000000014070BD90
*/

bool function IsPlayerInVehicle(entity)

/*
* @Breif 
* @Pramas entity
* @NativeName: VehicleIsDriver
* @NativeFunctionAddress 000000014070BD10
*/

bool function VehicleIsDriver(entity)

/*
* @Breif Gets the internal speed of the vehicle
* @Pramas 
* @NativeName: Script_GetVehicleVelocity
* @NativeFunctionAddress 000000014070BC40
*/

vector function GetVehicleVelocity()

/*
* @Breif Get array of players in vehicle
* @Pramas 
* @NativeName: Script_VehicleGetPlayerArray
* @NativeFunctionAddress 0000000140709E30
*/

var function VehicleGetPlayerArray()

/*
* @Breif Set the light origin
* @Pramas vector
* @NativeName: ScriptSetLightOrigin
* @NativeFunctionAddress 000000014070C560
*/

void function SetTweakLightOrigin(vector)

/*
* @Breif Set the light color
* @Pramas vector
* @NativeName: ScriptSetLightColor
* @NativeFunctionAddress 000000014070C500
*/

void function SetTweakLightColor(vector)

/*
* @Breif Set the light brightness
* @Pramas float
* @NativeName: ScriptSetLightBrightness
* @NativeFunctionAddress 000000014070C490
*/

void function SetTweakLightBrightness(float)

/*
* @Breif Set the light cone (degrees of spread)
* @Pramas float
* @NativeName: ScriptSetLightCone
* @NativeFunctionAddress 000000014070C420
*/

void function SetTweakLightCone(float)

/*
* @Breif Set the light distance that the light will travel
* @Pramas float
* @NativeName: ScriptSetLightDist
* @NativeFunctionAddress 000000014070C3B0
*/

void function SetTweakLightDistance(float)

/*
* @Breif Set the the percentage of the distance that the light wil falloff halfway
* @Pramas float
* @NativeName: ScriptSetLightHalfBrightFrac
* @NativeFunctionAddress 000000014070C340
*/

void function SetTweakLightHalfBrightFrac(float)

/*
* @Breif Set the light inner cone (degrees of spread for inner cone)
* @Pramas float
* @NativeName: ScriptSetLightInnerCone
* @NativeFunctionAddress 000000014070C2D0
*/

void function SetTweakLightInnerCone(float)

/*
* @Breif Sets if this light should use the pbr falloff or not
* @Pramas bool
* @NativeName: ScriptSetLightPBRFalloff
* @NativeFunctionAddress 000000014070C270
*/

void function SetTweakLightPBRFalloff(bool)

/*
* @Breif Sets this lights specular intensity
* @Pramas float
* @NativeName: ScriptSetLightSpecIntensity
* @NativeFunctionAddress 000000014070C200
*/

void function SetTweakLightSpecIntensity(float)

/*
* @Breif Sets this light to use realtime shadows or not
* @Pramas bool
* @NativeName: ScriptSetLightRealtimeShadows
* @NativeFunctionAddress 000000014070C1A0
*/

void function SetTweakLightRealtimeShadows(bool)

/*
* @Breif Updates the shadows cast from this light every frame
* @Pramas bool
* @NativeName: ScriptSetLightUpdateEveryFrame
* @NativeFunctionAddress 000000014070C140
*/

void function SetTweakLightUpdateShadowsEveryFrame(bool)

/*
* @Breif Sets the shadow filter size
* @Pramas int
* @NativeName: ScriptSetLightShadowFilterSize
* @NativeFunctionAddress 000000014070C0D0
*/

void function SetTweakLightShadowFilterSize(int)

/*
* @Breif Sets the shadow upres size
* @Pramas int
* @NativeName: ScriptSetLightShadowUpres
* @NativeFunctionAddress 000000014070C060
*/

void function SetTweakLightShadowUpres(int)

/*
* @Breif Set the light angles
* @Pramas vector
* @NativeName: ScriptSetLightAngles
* @NativeFunctionAddress 000000014070C000
*/

void function SetTweakLightAngles(vector)

/*
* @Breif Set emission radius
* @Pramas float
* @NativeName: ScriptSetLightEmitRadius
* @NativeFunctionAddress 000000014070BF90
*/

void function SetLightEmitRadius(float)

/*
* @Breif Get the light origin
* @Pramas 
* @NativeName: ScriptGetLightOrigin
* @NativeFunctionAddress 000000014070BEC0
*/

vector function GetTweakLightOrigin()

/*
* @Breif Tests if the trigger is being touched by any entity that can trigger it.
* @Pramas 
* @NativeName: Script_IsTouched
* @NativeFunctionAddress 000000014070C640
*/

bool function IsTouched()

/*
* @Breif Tests if the trigger contains a given entity.
* @Pramas entity
* @NativeName: Script_IsTouching
* @NativeFunctionAddress 000000014070C5C0
*/

bool function IsTouching(entity)

/*
* @Breif Get array of touching entities
* @Pramas 
* @NativeName: Script_GetTouchingEntities
* @NativeFunctionAddress 0000000140709DE0
*/

var function GetTouchingEntities()

/*
* @Breif Grabs the current trigger type of a given heavy trigger
* @Pramas 
* @NativeName: Script_GetTriggerType
* @NativeFunctionAddress 000000014070CAB0
*/

int function GetTriggerType()

/*
* @Breif Sets how long the trap is obstructed for
* @Pramas float
* @NativeName: Script_SetObstructedEndTime
* @NativeFunctionAddress 000000014070CA40
*/

void function SetObstructedEndTime(float)

/*
* @Breif Gets when the trap will stop being obstructed for
* @Pramas 
* @NativeName: Script_GetObstructedEndTime
* @NativeFunctionAddress 000000014070C990
*/

float function GetObstructedEndTime()

/*
* @Breif Gets the Height of the trap
* @Pramas 
* @NativeName: Script_GetTeslaTrapHeight
* @NativeFunctionAddress 000000014070C8E0
*/

float function GetTeslaTrapHeight()

/*
* @Breif Sets the index for effects used by the tesla trap
* @Pramas int
* @NativeName: Script_SetTeslaLinkFXIdx
* @NativeFunctionAddress 000000014070C870
*/

void function SetTeslaLinkFXIdx(int)

/*
* @Breif Grabs the fx index used by script
* @Pramas 
* @NativeName: Script_GetTeslaLinkFXIdx
* @NativeFunctionAddress 000000014070C7C0
*/

int function GetTeslaLinkFXIdx()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsTeslaTrapObstructed
* @NativeFunctionAddress 000000014070C760
*/

bool function IsTeslaTrapObstructed()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTeslaTrapStart
* @NativeFunctionAddress 000000014070C700
*/

entity function GetTeslaTrapStart()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetTeslaTrapEnd
* @NativeFunctionAddress 000000014070C6A0
*/

entity function GetTeslaTrapEnd()

/*
* @Breif Sets a function to be called when an entity enters the trigger.
* @Pramas void functionref( entity trig, entity ent )
* @NativeName: Script_SetEnterCallback
* @NativeFunctionAddress 0000000140709D90
*/

var function SetClientEnterCallback()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointState
* @NativeFunctionAddress 000000014070D010
*/

int function GetHardpointState()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointEstimatedCaptureTime
* @NativeFunctionAddress 000000014070CF60
*/

float function GetEstimatedCaptureTime()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetHardpointProgressRefPoint
* @NativeFunctionAddress 000000014070CEB0
*/

float function GetHardpointProgressRefPoint()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointAICount
* @NativeFunctionAddress 000000014070CDF0
*/

int function GetHardpointAICount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointPlayerCount
* @NativeFunctionAddress 000000014070CD30
*/

int function GetHardpointPlayerCount(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetHardpointPlayerTitanCount
* @NativeFunctionAddress 000000014070CC70
*/

int function GetHardpointPlayerTitanCount(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetHardpointID
* @NativeFunctionAddress 000000014070CBC0
*/

int function GetHardpointID()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTerminal
* @NativeFunctionAddress 000000014070CB60
*/

entity function GetTerminal()

/*
* @Breif Gets the ID of the impact color used for the shield.
* @Pramas 
* @NativeName: GetImpactEffectColorID
* @NativeFunctionAddress 000000014069C4B0
*/

int function GetImpactEffectColorID()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCustomOwnerName
* @NativeFunctionAddress 000000014069C560
*/

string function GetCustomOwnerName()

/*
* @Breif Sets the custom int script can put on survival props
* @Pramas int
* @NativeName: Script_SetSurvivalInt
* @NativeFunctionAddress 000000014069CB10
*/

void function SetSurvivalInt(int)

/*
* @Breif Gets the custom int script can put on survival props
* @Pramas 
* @NativeName: Script_GetSurvivalInt
* @NativeFunctionAddress 000000014069CA60
*/

int function GetSurvivalInt()

/*
* @Breif Gets the weapon name for a survival pickup
* @Pramas 
* @NativeName: GetWeaponName
* @NativeFunctionAddress 000000014069C9D0
*/

string function GetWeaponName()

/*
* @Breif Sets the weapon name for a survival pickup
* @Pramas string
* @NativeName: SetWeaponName
* @NativeFunctionAddress 000000014069C970
*/

void function SetWeaponName(string)

/*
* @Breif Gets the clip count for a survival weapon pickup
* @Pramas 
* @NativeName: GetClipCount
* @NativeFunctionAddress 000000014069C8C0
*/

int function GetClipCount()

/*
* @Breif Sets mods bit field
* @Pramas int
* @NativeName: Script_SetModBitField
* @NativeFunctionAddress 000000014069C850
*/

void function SetWeaponModBitField(int)

/*
* @Breif Gets mods bit field
* @Pramas 
* @NativeName: Script_GetModBitField
* @NativeFunctionAddress 000000014069C7A0
*/

int function GetWeaponModBitField()

/*
* @Breif Gets the integer that represents this survival pickup's custom property
* @Pramas 
* @NativeName: GetSurvivalProperty
* @NativeFunctionAddress 000000014069C6F0
*/

int function GetSurvivalProperty()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetPredictiveHideForPickup
* @NativeFunctionAddress 000000014069C6A0
*/

void function SetPredictiveHideForPickup()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ClearPredictiveHideForPickup
* @NativeFunctionAddress 000000014069C650
*/

void function ClearPredictiveHideForPickup()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_HasPredictiveHideForPickup
* @NativeFunctionAddress 000000014069C5F0
*/

bool function HasPredictiveHideForPickup()

/*
* @Breif Get an array of mods on this weapon pickup
* @Pramas 
* @NativeName: Script_GetMods
* @NativeFunctionAddress 000000014069C410
*/

var function GetWeaponMods()

/*
* @Breif Set an array of mods on this weapon pickup
* @Pramas array< string > mods
* @NativeName: Script_SetMods
* @NativeFunctionAddress 000000014069C460
*/

var function SetWeaponMods()

/*
* @Breif Sets whether this point camera should be active
* @Pramas bool
* @NativeName: ScriptSetActive
* @NativeFunctionAddress 000000014069D370
*/

void function SetActive(bool)

/*
* @Breif Sets the FOV of this point camera
* @Pramas float
* @NativeName: ScriptSetFOV
* @NativeFunctionAddress 000000014069D300
*/

void function SetFOV(float)

/*
* @Breif Enable or disable fog on this point camera
* @Pramas bool
* @NativeName: ScriptSetFogEnable
* @NativeFunctionAddress 000000014069D2A0
*/

void function SetFogEnable(bool)

/*
* @Breif Render to this render texture id slot when camera is active. Set to -1 to disable.
* @Pramas int
* @NativeName: ScriptSetMonitorId
* @NativeFunctionAddress 000000014069D230
*/

void function SetMonitorId(int)

/*
* @Breif Sets the exposure override for this camera when used as a monitor.
* @Pramas float
* @NativeName: ScriptSetMonitorExposure
* @NativeFunctionAddress 000000014069D1C0
*/

void function SetMonitorExposure(float)

/*
* @Breif Sets the far clipping plane distance for this camera when used as a monitor.
* @Pramas float
* @NativeName: ScriptSetMonitorZFar
* @NativeFunctionAddress 000000014069D150
*/

void function SetMonitorZFar(float)

/*
* @Breif Queues a snapshot of the monitor to the designated render texture id. Calls ClientCodeCallback_MonitorSnapshotDone on completion.
* @Pramas int
* @NativeName: ScriptQueueMonitorSnapshot
* @NativeFunctionAddress 000000014069D0E0
*/

void function QueueMonitorSnapshot(int)

/*
* @Breif Dequeues the queued monitor snapshot.
* @Pramas 
* @NativeName: ScriptDequeueMonitorSnapshot
* @NativeFunctionAddress 000000014069D090
*/

void function DequeueMonitorSnapshot()

/*
* @Breif Sets the interp target of the camera
* @Pramas entity, float, bool, int, float
* @NativeName: Script_SetTarget
* @NativeFunctionAddress 000000014069CFC0
*/

void function SetTarget(entity, float, bool, int, float)

/*
* @Breif Sets the position target of the camera
* @Pramas vector, bool, int, float
* @NativeName: Script_SetTargetPosition
* @NativeFunctionAddress 000000014069CF20
*/

void function SetTargetPosition(vector, bool, int, float)

/*
* @Breif Sets the interp FOV of the camera
* @Pramas float, bool, int, float
* @NativeName: Script_SetTargetFOV
* @NativeFunctionAddress 000000014069CE70
*/

void function SetTargetFOV(float, bool, int, float)

/*
* @Breif Sets the interp Angles of the camera
* @Pramas vector, bool, int, float
* @NativeName: Script_SetTargetAngles
* @NativeFunctionAddress 000000014069CDD0
*/

void function SetTargetAngles(vector, bool, int, float)

/*
* @Breif Returns the active weapon.
* @Pramas int
* @NativeName: Script_GetActiveWeapon
* @NativeFunctionAddress 00000001406AED40
*/

entity function GetActiveWeapon(int)

/*
* @Breif Returns the anti titan weapon.
* @Pramas 
* @NativeName: Script_GetAntiTitanWeapon
* @NativeFunctionAddress 00000001406AECE0
*/

entity function GetAntiTitanWeapon()

/*
* @Breif Returns the active weapon.
* @Pramas 
* @NativeName: Script_GetSidearmWeapon
* @NativeFunctionAddress 00000001406AEC80
*/

entity function GetSidearmWeapon()

/*
* @Breif Returns the last primary weapon used
* @Pramas int
* @NativeName: Script_GetLatestPrimaryWeapon
* @NativeFunctionAddress 00000001406AEC00
*/

entity function GetLatestPrimaryWeapon(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_GetLatestPrimaryWeaponForIndexZeroOrOne
* @NativeFunctionAddress 00000001406AEB80
*/

entity function GetLatestPrimaryWeaponForIndexZeroOrOne(int)

/*
* @Breif Get the offhand weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_GetOffhand
* @NativeFunctionAddress 00000001406AEB00
*/

entity function GetOffhandWeapon(int)

/*
* @Breif Get the normal weapon in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_GetNormal
* @NativeFunctionAddress 00000001406AEA80
*/

entity function GetNormalWeapon(int)

/*
* @Breif Set the selected offhand weapon.
* @Pramas int, entity
* @NativeName: Script_Weapon_SetSelectedOffhand
* @NativeFunctionAddress 00000001406AE9F0
*/

void function SetSelectedOffhand(int, entity)

/*
* @Breif Returns the selected weapon.
* @Pramas int
* @NativeName: Script_GetSelectedWeapon
* @NativeFunctionAddress 00000001406AE970
*/

entity function GetSelectedWeapon(int)

/*
* @Breif Returns true if the weapon slot is disabled
* @Pramas int
* @NativeName: Script_Weapon_IsSlotDisabled
* @NativeFunctionAddress 00000001406AE8F0
*/

bool function IsWeaponSlotDisabled(int)

/*
* @Breif Returns the weapon disable flags that are active
* @Pramas 
* @NativeName: Script_Weapon_GetDisableFlags
* @NativeFunctionAddress 00000001406AE840
*/

int function GetWeaponDisableFlags()

/*
* @Breif Returns true if player is using an offhand weapon in the active slot.
* @Pramas int
* @NativeName: Script_Weapon_IsUsingOffhand
* @NativeFunctionAddress 00000001406AE7C0
*/

bool function IsUsingOffhandWeapon(int)

/*
* @Breif Clear the player's offhand ability
* @Pramas int
* @NativeName: Script_Weapon_ClearOffhand
* @NativeFunctionAddress 00000001406AE750
*/

void function ClearOffhand(int)

/*
* @Breif Returns true if the player is switching weapons in the specified slot.
* @Pramas int
* @NativeName: Script_Weapon_IsSwitching
* @NativeFunctionAddress 00000001406AE6D0
*/

bool function IsSwitching(int)

/*
* @Breif Returns whether in the middle of any context action (like melee or leeching)
* @Pramas 
* @NativeName: ContextAction_IsActive
* @NativeFunctionAddress 00000001406AE670
*/

bool function ContextAction_IsActive()

/*
* @Breif Returns whether in the middle of a busy context action
* @Pramas 
* @NativeName: ContextAction_IsBusy
* @NativeFunctionAddress 00000001406AE610
*/

bool function ContextAction_IsBusy()

/*
* @Breif Returns whether in the middle of a leeching context action
* @Pramas 
* @NativeName: ContextAction_IsLeeching
* @NativeFunctionAddress 00000001406AE5B0
*/

bool function ContextAction_IsLeeching()

/*
* @Breif Returns true if the entity is in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecution
* @NativeFunctionAddress 00000001406AE550
*/

bool function ContextAction_IsMeleeExecution()

/*
* @Breif Returns true if the entity is an attacker in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecutionAttacker
* @NativeFunctionAddress 00000001406AE4F0
*/

bool function ContextAction_IsMeleeExecutionAttacker()

/*
* @Breif Returns true if the entity is a target in the middle of a melee execution context action
* @Pramas 
* @NativeName: ContextAction_IsMeleeExecutionTarget
* @NativeFunctionAddress 00000001406AE490
*/

bool function ContextAction_IsMeleeExecutionTarget()

/*
* @Breif Returns whether entity is in the middle of a battery requisition context action
* @Pramas 
* @NativeName: ContextAction_IsRequisitionBattery
* @NativeFunctionAddress 00000001406AE430
*/

bool function ContextAction_IsRequisitionBattery()

/*
* @Breif Returns whether the player is in a rodeo context action
* @Pramas 
* @NativeName: ContextAction_IsRodeo
* @NativeFunctionAddress 00000001406AE3D0
*/

bool function ContextAction_IsRodeo()

/*
* @Breif Returns whether the player is in a vehicle context action
* @Pramas 
* @NativeName: ContextAction_IsInVehicle
* @NativeFunctionAddress 00000001406AE370
*/

bool function ContextAction_IsInVehicle()

/*
* @Breif Returns whether the player is in a zipline context action
* @Pramas 
* @NativeName: ContextAction_IsZipline
* @NativeFunctionAddress 00000001406AE310
*/

bool function ContextAction_IsZipline()

/*
* @Breif Returns whether the player is in a fastball context action
* @Pramas 
* @NativeName: ContextAction_IsFastball
* @NativeFunctionAddress 00000001406AE2B0
*/

bool function ContextAction_IsFastball()

/*
* @Breif Returns whether the player is in a revive context action
* @Pramas 
* @NativeName: ContextAction_IsReviving
* @NativeFunctionAddress 00000001406AE250
*/

bool function ContextAction_IsReviving()

/*
* @Breif Returns whether the player is in a being-revived context action
* @Pramas 
* @NativeName: ContextAction_IsBeingRevived
* @NativeFunctionAddress 00000001406AE1F0
*/

bool function ContextAction_IsBeingRevived()

/*
* @Breif Marks the entity as in the middle of a busy context action (so other things don't interrupt them)
* @Pramas 
* @NativeName: ContextAction_SetBusy
* @NativeFunctionAddress 00000001406AE1A0
*/

void function ContextAction_SetBusy()

/*
* @Breif Marks the entity as no longer doing some kind of context action
* @Pramas 
* @NativeName: ContextAction_ClearBusy
* @NativeFunctionAddress 00000001406AE150
*/

void function ContextAction_ClearBusy()

/*
* @Breif Marks the entity as inside a vehicle
* @Pramas 
* @NativeName: ContextAction_SetInVehicle
* @NativeFunctionAddress 00000001406AE100
*/

void function ContextAction_SetInVehicle()

/*
* @Breif Marks the entity as no longer inside a vehicle
* @Pramas 
* @NativeName: ContextAction_ClearInVehicle
* @NativeFunctionAddress 00000001406AE0B0
*/

void function ContextAction_ClearInVehicle()

/*
* @Breif Marks the entity is executing a fastball
* @Pramas 
* @NativeName: ContextAction_SetFastball
* @NativeFunctionAddress 00000001406AE060
*/

void function ContextAction_SetFastball()

/*
* @Breif Marks the entity as no longer executing a fastball
* @Pramas 
* @NativeName: ContextAction_ClearFastball
* @NativeFunctionAddress 00000001406AE010
*/

void function ContextAction_ClearFastball()

/*
* @Breif Marks the entity as executing a revive
* @Pramas 
* @NativeName: ContextAction_SetReviving
* @NativeFunctionAddress 00000001406ADFC0
*/

void function ContextAction_SetReviving()

/*
* @Breif Marks the entity as no longer executing a revive
* @Pramas 
* @NativeName: ContextAction_ClearReviving
* @NativeFunctionAddress 00000001406ADF70
*/

void function ContextAction_ClearReviving()

/*
* @Breif Marks the entity as being revived
* @Pramas 
* @NativeName: ContextAction_SetBeingRevived
* @NativeFunctionAddress 00000001406ADF20
*/

void function ContextAction_SetBeingRevived()

/*
* @Breif Marks the entity as no longer being revived
* @Pramas 
* @NativeName: ContextAction_ClearBeingRevived
* @NativeFunctionAddress 00000001406ADED0
*/

void function ContextAction_ClearBeingRevived()

/*
* @Breif Returns position that has been offset relative to the view
* @Pramas vector, vector
* @NativeName: OffsetPositionFromView_Script
* @NativeFunctionAddress 00000001406ADDF0
*/

vector function OffsetPositionFromView(vector, vector)

/*
* @Breif Returns angles that has been offset relative to the view
* @Pramas vector
* @NativeName: OffsetFromViewAngles_Script
* @NativeFunctionAddress 00000001406ADD10
*/

vector function OffsetFromViewAngles(vector)

/*
* @Breif Get the amount of currently loaded ammo in the active weapon.
* @Pramas int
* @NativeName: Script_GetActiveWeaponPrimaryAmmoLoaded
* @NativeFunctionAddress 00000001406ADC50
*/

int function GetActiveWeaponPrimaryAmmoLoaded(int)

/*
* @Breif Get deferred trace fraction from eye to local player eye
* @Pramas 
* @NativeName: Script_TraceToLocalPlayerSimple
* @NativeFunctionAddress 00000001406ADBA0
*/

float function TraceToLocalPlayerSimple()

/*
* @Breif Let script tell code a melee attack has started (for the attacker)
* @Pramas float
* @NativeName: PlayerMelee_ExecutionStartAttacker
* @NativeFunctionAddress 00000001406ADB20
*/

bool function PlayerMelee_ExecutionStartAttacker(float)

/*
* @Breif Let script tell code a melee attack has started (for the target/victim)
* @Pramas entity
* @NativeName: PlayerMelee_ExecutionStartTarget
* @NativeFunctionAddress 00000001406ADAA0
*/

bool function PlayerMelee_ExecutionStartTarget(entity)

/*
* @Breif Let script tell code a melee attack has ended (for the attacker)
* @Pramas 
* @NativeName: PlayerMelee_ExecutionEndAttacker
* @NativeFunctionAddress 00000001406ADA40
*/

bool function PlayerMelee_ExecutionEndAttacker()

/*
* @Breif Let script tell code a melee attack has ended (for the target/victim)
* @Pramas 
* @NativeName: PlayerMelee_ExecutionEndTarget
* @NativeFunctionAddress 00000001406AD9E0
*/

bool function PlayerMelee_ExecutionEndTarget()

/*
* @Breif Gets the titanSoul for this entity
* @Pramas 
* @NativeName: Script_GetTitanSoul
* @NativeFunctionAddress 00000001406AD980
*/

entity function GetTitanSoul()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_IsPhaseShiftedOrPending
* @NativeFunctionAddress 00000001406AD920
*/

bool function IsPhaseShiftedOrPending()

/*
* @Breif 
* @Pramas float, float
* @NativeName: Script_PhaseShiftBegin
* @NativeFunctionAddress 00000001406AD890
*/

void function PhaseShiftBegin(float, float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnablePhaseShiftFlags
* @NativeFunctionAddress 00000001406AD840
*/

void function EnablePhaseShiftFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisablePhaseShiftFlags
* @NativeFunctionAddress 00000001406AD7F0
*/

void function DisablePhaseShiftFlags()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_PhaseShiftCancel
* @NativeFunctionAddress 00000001406AD7A0
*/

void function PhaseShiftCancel()

/*
* @Breif Time left in phase shift.
* @Pramas 
* @NativeName: Script_PhaseShiftTimeRemaining
* @NativeFunctionAddress 00000001406AD6F0
*/

float function PhaseShiftTimeRemaining()

/*
* @Breif 
* @Pramas 
* @NativeName: PhaseShiftTimePassed
* @NativeFunctionAddress 00000001406AD640
*/

float function PhaseShiftTimePassed()

/*
* @Breif Gets the entity you are about to phase shift into
* @Pramas 
* @NativeName: Script_GetEntityAtPhaseShiftExitPosition
* @NativeFunctionAddress 00000001406AD5E0
*/

entity function GetEntityAtPhaseShiftExitPosition()

/*
* @Breif Gets the view vector of a player or NPC. Prefer GetViewVector or GetNPCViewVector when you know whether you're working with a player or NPC.
* @Pramas 
* @NativeName: ScriptGetPlayerOrNPCViewVector
* @NativeFunctionAddress 00000001406AD510
*/

vector function GetPlayerOrNPCViewVector()

/*
* @Breif Returns the last time the entity fired a bullet weapon.
* @Pramas 
* @NativeName: GetLastFiredTime
* @NativeFunctionAddress 00000001406AD460
*/

float function GetLastFiredTime()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_AddSharedEnergy
* @NativeFunctionAddress 00000001406AD3F0
*/

void function AddSharedEnergy(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_TakeSharedEnergy
* @NativeFunctionAddress 00000001406AD380
*/

void function TakeSharedEnergy(int)

/*
* @Breif 
* @Pramas int
* @NativeName: Script_CanUseSharedEnergy
* @NativeFunctionAddress 00000001406AD300
*/

bool function CanUseSharedEnergy(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyCount
* @NativeFunctionAddress 00000001406AD250
*/

int function GetSharedEnergyCount()

/*
* @Breif 
* @Pramas int
* @NativeName: Script_SetSharedEnergyTotal
* @NativeFunctionAddress 00000001406AD1E0
*/

void function SetSharedEnergyTotal(int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyTotal
* @NativeFunctionAddress 00000001406AD130
*/

int function GetSharedEnergyTotal()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetSharedEnergyRegenRate
* @NativeFunctionAddress 00000001406AD0C0
*/

void function SetSharedEnergyRegenRate(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyRegenRate
* @NativeFunctionAddress 00000001406AD010
*/

float function GetSharedEnergyRegenRate()

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetSharedEnergyRegenDelay
* @NativeFunctionAddress 00000001406ACFA0
*/

void function SetSharedEnergyRegenDelay(float)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetSharedEnergyRegenDelay
* @NativeFunctionAddress 00000001406ACEF0
*/

float function GetSharedEnergyRegenDelay()

/*
* @Breif 
* @Pramas float duration
* @NativeName: Script_SetSharedEnergyPenaltyDuration
* @NativeFunctionAddress 00000001406ACE80
*/

void function SetSharedEnergyPenaltyDuration(float duration)

/*
* @Breif 
* @Pramas int threshold
* @NativeName: Script_SetSharedEnergyLockoutThreshold
* @NativeFunctionAddress 00000001406ACE10
*/

void function SetSharedEnergyLockoutThreshold(int threshold)

/*
* @Breif Returns all active weapons. Array indices will not match active weapon slot values and the array will have no null elements.
* @Pramas 
* @NativeName: Script_GetAllActiveWeapons
* @NativeFunctionAddress 00000001406998C0
*/

var function GetAllActiveWeapons()

/*
* @Breif Get array of the main weapons.
* @Pramas 
* @NativeName: Script_Weapon_GetMainArray
* @NativeFunctionAddress 0000000140699910
*/

var function GetMainWeapons()

/*
* @Breif Get array of the offhand weapons.
* @Pramas 
* @NativeName: Script_Weapon_GetOffhandArray
* @NativeFunctionAddress 0000000140699A00
*/

var function GetOffhandWeapons()

/*
* @Breif Get deferred trace result from eye to local player eye, return NULL if deferred trace is not available
* @Pramas 
* @NativeName: Script_TraceToLocalPlayer
* @NativeFunctionAddress 0000000140699B60
*/

var function TraceToLocalPlayer()

/*
* @Breif Returns the view model entity.
* @Pramas 
* @NativeName: GetViewModelEntity_Script
* @NativeFunctionAddress 00000001406A5DA0
*/

entity function GetViewModelEntity()

/*
* @Breif Returns the view model arms attachment entity.
* @Pramas 
* @NativeName: GetViewModelArmsAttachment_Script
* @NativeFunctionAddress 00000001406A5D40
*/

entity function GetViewModelArmsAttachment()

/*
* @Breif Transforms a weapon attack spread angle to screen pixels.
* @Pramas float
* @NativeName: TransformAttackSpreadToScreenSpace
* @NativeFunctionAddress 00000001406A5C70
*/

float function TransformAttackSpreadToScreenSpace(float)

/*
* @Breif Returns an enemy target if the player is aiming at it and it is in maximum damage range.
* @Pramas 
* @NativeName: ScriptGetTargetInCrosshairRange
* @NativeFunctionAddress 00000001406A5C10
*/

entity function GetTargetInCrosshairRange()

/*
* @Breif Gets the end position for the crosshair trace that we do all the time
* @Pramas 
* @NativeName: ScriptGetCrosshairTraceEndPos
* @NativeFunctionAddress 00000001406A5B40
*/

vector function GetCrosshairTraceEndPos()

/*
* @Breif Activate the sniper cam to target this entity
* @Pramas entity, float
* @NativeName: SniperCam_Activate
* @NativeFunctionAddress 00000001406A5AA0
*/

bool function SniperCam_Activate(entity, float)

/*
* @Breif Fade out and deactivate the sniper cam
* @Pramas float
* @NativeName: SniperCam_Deactivate
* @NativeFunctionAddress 00000001406A5A20
*/

bool function SniperCam_Deactivate(float)

/*
* @Breif Set sniper cam parameters
* @Pramas var
* @NativeName: SniperCam_SetParams
* @NativeFunctionAddress 00000001406A59A0
*/

bool function SniperCam_SetParams(var)

/*
* @Breif Get sniper cam parameters
* @Pramas 
* @NativeName: SniperCam_GetParams
* @NativeFunctionAddress 00000001406A58D0
*/

var function SniperCam_GetParams()

/*
* @Breif Does sniper cam exist and is it active
* @Pramas 
* @NativeName: SniperCam_IsActive
* @NativeFunctionAddress 00000001406A5870
*/

bool function SniperCam_IsActive()

/*
* @Breif Execute command on this client
* @Pramas string
* @NativeName: ScriptClientCommand
* @NativeFunctionAddress 00000001406A5810
*/

void function ClientCommand(string)

/*
* @Breif Hint to the client system that script has a menu up.
* @Pramas 
* @NativeName: ScriptSetScriptMenuOn
* @NativeFunctionAddress 00000001406A57C0
*/

void function SetScriptMenuOn()

/*
* @Breif Hint to the client system that script has turned off its menu.
* @Pramas 
* @NativeName: ScriptSetScriptMenuOff
* @NativeFunctionAddress 00000001406A5770
*/

void function SetScriptMenuOff()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsScriptMenuOn
* @NativeFunctionAddress 00000001406A5710
*/

bool function IsScriptMenuOn()

/*
* @Breif Freeze player's controls.
* @Pramas 
* @NativeName: ScriptFreezeControlsOnClient
* @NativeFunctionAddress 00000001406A56C0
*/

void function FreezeControlsOnClient()

/*
* @Breif Unfreeze player's controls.
* @Pramas 
* @NativeName: ScriptUnfreezeControlsOnClient
* @NativeFunctionAddress 00000001406A5670
*/

void function UnfreezeControlsOnClient()

/*
* @Breif Checks to see if the low health effects should be on
* @Pramas 
* @NativeName: ScriptLowHealthEffectsEnabled
* @NativeFunctionAddress 00000001406A5610
*/

bool function LowHealthEffectsEnabled()

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptGetBleedoutState
* @NativeFunctionAddress 00000001406A5560
*/

int function GetBleedoutState()

/*
* @Breif Suppress drawing of player/AI names on the HUD.
* @Pramas 
* @NativeName: ScriptHideCrosshairNames
* @NativeFunctionAddress 00000001406A5510
*/

void function HideCrosshairNames()

/*
* @Breif Suppress drawing of player/AI names on the HUD.
* @Pramas 
* @NativeName: ScriptUnhideCrosshairNames
* @NativeFunctionAddress 00000001406A54C0
*/

void function UnhideCrosshairNames()

/*
* @Breif 
* @Pramas bool isEnabled
* @NativeName: ScriptSetLCDPlayerClassSettingsEnabled
* @NativeFunctionAddress 00000001406A5460
*/

void function SetLCDPlayerClassSettingsEnabled(bool isEnabled)

/*
* @Breif 
* @Pramas 
* @NativeName: ScriptIsThirdPersonShoulderModeOn
* @NativeFunctionAddress 00000001406A5400
*/

bool function IsThirdPersonShoulderModeOn()

/*
* @Breif Whether player has a use prompt
* @Pramas 
* @NativeName: ScriptHasUsePrompt
* @NativeFunctionAddress 00000001406A53A0
*/

bool function HasUsePrompt()

/*
* @Breif 
* @Pramas int
* @NativeName: ScriptSetHoldToSwapSlot
* @NativeFunctionAddress 00000001406A5330
*/

void function SetHoldToSwapSlot(int)

/*
* @Breif Returns current entity for which the use prompt is displayed, if any.
* @Pramas 
* @NativeName: ScriptGetUsePromptEntity
* @NativeFunctionAddress 00000001406A52D0
*/

entity function GetUsePromptEntity()

/*
* @Breif Returns the use position for the current use entity.
* @Pramas 
* @NativeName: ScriptGetUsePromptPosition
* @NativeFunctionAddress 00000001406A5200
*/

vector function GetUsePromptPosition()

/*
* @Breif Get the forward view vector of the player
* @Pramas 
* @NativeName: GetViewVector
* @NativeFunctionAddress 00000001406A5130
*/

vector function GetViewVector()

/*
* @Breif Get the forward view vector of the player
* @Pramas 
* @NativeName: GetViewVector
* @NativeFunctionAddress 00000001406A5130
*/

vector function GetViewForward()

/*
* @Breif Get the right view vector of the player
* @Pramas 
* @NativeName: GetViewRight
* @NativeFunctionAddress 00000001406A5060
*/

vector function GetViewRight()

/*
* @Breif Get the up view vector of the player
* @Pramas 
* @NativeName: GetViewUp
* @NativeFunctionAddress 00000001406A4F90
*/

vector function GetViewUp()

/*
* @Breif Get FOV of the player
* @Pramas 
* @NativeName: GetFOV
* @NativeFunctionAddress 00000001406A4EE0
*/

float function GetFOV()

/*
* @Breif Get current camera position
* @Pramas 
* @NativeName: CameraPosition
* @NativeFunctionAddress 00000001406A4E80
*/

vector function CameraPosition()

/*
* @Breif Get current camera angles
* @Pramas 
* @NativeName: CameraAngles
* @NativeFunctionAddress 00000001406A4E20
*/

vector function CameraAngles()

/*
* @Breif pass in ent you want to get player eye position for
* @Pramas entity
* @NativeName: UseableEyePosition
* @NativeFunctionAddress 00000001406A4D30
*/

vector function UseableEyePosition(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_HasThirdPersonAttackFocus
* @NativeFunctionAddress 00000001406A4CD0
*/

bool function HasThirdPersonAttackFocus()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetThirdPersonAttackFocus
* @NativeFunctionAddress 00000001406A4C70
*/

vector function GetThirdPersonAttackFocus()

/*
* @Breif Get the player's name.
* @Pramas 
* @NativeName: GetPlayerName
* @NativeFunctionAddress 00000001406A4BE0
*/

string function GetPlayerName()

/*
* @Breif Get the player's name with their clan tag in front.
* @Pramas 
* @NativeName: GetPlayerNameWithClanTag
* @NativeFunctionAddress 00000001406A4B50
*/

string function GetPlayerNameWithClanTag()

/*
* @Breif Gets the player's UID
* @Pramas 
* @NativeName: GetPlatformUID
* @NativeFunctionAddress 00000001406A4AC0
*/

string function GetPlatformUID()

/*
* @Breif Gets the name of the player's current hardware
* @Pramas 
* @NativeName: GetHardware
* @NativeFunctionAddress 00000001406A4A30
*/

string function GetHardware()

/*
* @Breif Returns true if this player is our party leader.
* @Pramas 
* @NativeName: IsPartyLeader
* @NativeFunctionAddress 00000001406A49D0
*/

bool function IsPartyLeader()

/*
* @Breif Returns the players pet titan.
* @Pramas 
* @NativeName: Script_GetPetTitan
* @NativeFunctionAddress 00000001406A4970
*/

entity function GetPetTitan()

/*
* @Breif Returns the players pet titan mode.
* @Pramas 
* @NativeName: Script_GetPetTitanMode
* @NativeFunctionAddress 00000001406A48C0
*/

int function GetPetTitanMode()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlayerModHealthPerSegment
* @NativeFunctionAddress 00000001406A4810
*/

float function GetPlayerModHealthPerSegment()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetPlayerModHealth
* @NativeFunctionAddress 00000001406A4760
*/

float function GetPlayerModHealth()

/*
* @Breif Creates a client point camera.
* @Pramas vector, vector, float
* @NativeName: Script_CreateClientPointCamera
* @NativeFunctionAddress 00000001406A46D0
*/

entity function CreateClientPointCamera(vector, vector, float)

/*
* @Breif Get the ammo count in the ammo pool.
* @Pramas int
* @NativeName: Script_AmmoPool_GetCount
* @NativeFunctionAddress 00000001406A4610
*/

int function AmmoPool_GetCount(int)

/*
* @Breif Get the capacity of the ammo pool
* @Pramas 
* @NativeName: Script_AmmoPool_GetCapacity
* @NativeFunctionAddress 00000001406A4560
*/

int function AmmoPool_GetCapacity()

/*
* @Breif Get the number of filled slots in the mod inventory.
* @Pramas 
* @NativeName: Script_ModInventory_GetCount
* @NativeFunctionAddress 00000001406A44B0
*/

int function ModInventory_GetCount()

/*
* @Breif Get the number of filled slots in the consumable inventory.
* @Pramas 
* @NativeName: Script_ConsumableInventory_GetCount
* @NativeFunctionAddress 00000001406A4400
*/

int function ConsumableInventory_GetCount()

/*
* @Breif Returns true if code thinks the player's inventory screen is open
* @Pramas 
* @NativeName: IsInventoryOpen
* @NativeFunctionAddress 00000001406A43A0
*/

bool function IsInventoryOpen()

/*
* @Breif 
* @Pramas vector offset, vector velocity
* @NativeName: Script_JoltCockpitOrigin
* @NativeFunctionAddress 00000001406A4340
*/

void function JoltCockpitOrigin(vector offset, vector velocity)

/*
* @Breif 
* @Pramas float offsetPitch, float offsetYaw, float offsetRoll, float velocityPitch, float velocityYaw, float velocityRoll
* @NativeName: Script_JoltCockpitAngles
* @NativeFunctionAddress 00000001406A4240
*/

void function JoltCockpitAngles(float offsetPitch, float offsetYaw, float offsetRoll, float velocityPitch, float velocityYaw, float velocityRoll)

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINNucleusId
* @NativeFunctionAddress 00000001406A41B0
*/

string function GetPINNucleusId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINNucleusPid
* @NativeFunctionAddress 00000001406A4120
*/

string function GetPINNucleusPid()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPINPlatformId
* @NativeFunctionAddress 00000001406A4090
*/

string function GetPINPlatformId()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerPINPlatformName
* @NativeFunctionAddress 00000001406A4000
*/

string function GetPlayerPINPlatformName()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerPINTitleId
* @NativeFunctionAddress 00000001406A3F70
*/

string function GetPlayerPINTitleId()

/*
* @Breif Overrides the view entity on the client only
* @Pramas entity
* @NativeName: SetMenuCameraEntity
* @NativeFunctionAddress 00000001406A3EF0
*/

void function SetMenuCameraEntity(entity)

/*
* @Breif Overrides the near z value when using the menu camera.
* @Pramas float nearZval
* @NativeName: SetMenuCameraNearZScriptOverride
* @NativeFunctionAddress 00000001406A3E80
*/

void function SetMenuCameraNearZ(float nearZval)

/*
* @Breif Overrides the view entity on the client only, also brings audio listener position along.
* @Pramas entity
* @NativeName: SetMenuCameraEntityWithAudio
* @NativeFunctionAddress 00000001406A3E00
*/

void function SetMenuCameraEntityWithAudio(entity)

/*
* @Breif Clears overrides of the view entity on the client only
* @Pramas 
* @NativeName: ClearMenuCameraEntity
* @NativeFunctionAddress 00000001406A3DB0
*/

void function ClearMenuCameraEntity()

/*
* @Breif Returns true if this player has a Twitch Prime reward
* @Pramas string
* @NativeName: DoesUserHaveTwitchPrimeReward
* @NativeFunctionAddress 00000001406A3D40
*/

bool function DoesUserHaveTwitchPrimeReward(string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetNextTitanRespawnAvailable
* @NativeFunctionAddress 00000001406A3C90
*/

float function GetNextTitanRespawnAvailable()

/*
* @Breif Returns the players current hardpoint.
* @Pramas 
* @NativeName: Script_GetHardpointEntity
* @NativeFunctionAddress 00000001406A3C30
*/

entity function GetHardpointEntity()

/*
* @Breif Given (string), returns true if mod is active on this player
* @Pramas string
* @NativeName: HasClassMod_Script
* @NativeFunctionAddress 00000001406A3BC0
*/

bool function HasClassMod(string)

/*
* @Breif Given (string), returns true if given mod is available to use for this player
* @Pramas string, string
* @NativeName: IsClassModAvailableForPlayerSetting_Script
* @NativeFunctionAddress 00000001406A3B40
*/

bool function IsClassModAvailableForPlayerSetting(string, string)

/*
* @Breif 
* @Pramas 
* @NativeName: GetClassPosCount_Script
* @NativeFunctionAddress 00000001406A3A90
*/

int function GetClassPosCount()

/*
* @Breif What class has the player requested
* @Pramas 
* @NativeName: ScriptGetPlayerRequestedClassName
* @NativeFunctionAddress 00000001406A3A00
*/

asset function GetPlayerRequestedClass()

/*
* @Breif What class is the player
* @Pramas 
* @NativeName: GetPlayerClassName
* @NativeFunctionAddress 00000001406A3970
*/

asset function GetPlayerSettings()

/*
* @Breif What class has the player requested
* @Pramas 
* @NativeName: GetPlayerRequestedClassName
* @NativeFunctionAddress 00000001406A38E0
*/

asset function GetPlayerRequestedSettings()

/*
* @Breif What general class is the player (pilot/titan)
* @Pramas 
* @NativeName: GetPlayerGeneralClassName
* @NativeFunctionAddress 00000001406A3850
*/

string function GetPlayerClass()

/*
* @Breif What class is the player (wallrun/boost)
* @Pramas 
* @NativeName: GetPlayerSubClassName
* @NativeFunctionAddress 00000001406A37C0
*/

string function GetPlayerSubClass()

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingBool
* @NativeFunctionAddress 00000001406A3750
*/

bool function GetPlayerSettingBool(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingInt
* @NativeFunctionAddress 00000001406A3690
*/

int function GetPlayerSettingInt(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingFloat
* @NativeFunctionAddress 00000001406A35D0
*/

float function GetPlayerSettingFloat(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingVector
* @NativeFunctionAddress 00000001406A34F0
*/

vector function GetPlayerSettingVector(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingString
* @NativeFunctionAddress 00000001406A3460
*/

string function GetPlayerSettingString(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingAsset
* @NativeFunctionAddress 00000001406A33C0
*/

asset function GetPlayerSettingAsset(string)

/*
* @Breif Gets the value of the given player settings field for the player's current settings
* @Pramas string
* @NativeName: GetPlayerSettingStringAsAsset
* @NativeFunctionAddress 00000001406A3320
*/

asset function GetPlayerSettingStringAsAsset(string)

/*
* @Breif Gets the player cockpit entity.
* @Pramas 
* @NativeName: ScriptGetCockpit
* @NativeFunctionAddress 00000001406A32C0
*/

entity function GetCockpit()

/*
* @Breif Get the current ADS fraction amount [0-1]
* @Pramas 
* @NativeName: GetZoomFrac
* @NativeFunctionAddress 00000001406A3210
*/

float function GetAdsFraction()

/*
* @Breif Create and get the player's first person proxy
* @Pramas 
* @NativeName: ScriptGetFirstPersonProxy
* @NativeFunctionAddress 00000001406A31B0
*/

entity function GetFirstPersonProxy()

/*
* @Breif Create and get the player's predicted first person proxy
* @Pramas 
* @NativeName: ScriptGetPredictedFirstPersonProxy
* @NativeFunctionAddress 00000001406A3150
*/

entity function GetPredictedFirstPersonProxy()

/*
* @Breif Set view offset entity for first-person animation.
* @Pramas entity
* @NativeName: Script_ViewOffsetEntity_SetEntity
* @NativeFunctionAddress 00000001406A30D0
*/

void function ViewOffsetEntity_SetEntity(entity)

/*
* @Breif Sets the lerp-in duration for the anim view entity (and view offset entity). Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: ViewOffsetEntity_SetLerpInTime
* @NativeFunctionAddress 00000001406A3060
*/

void function ViewOffsetEntity_SetLerpInTime(float)

/*
* @Breif Sets the lerp-out duration for the anim view entity (and view offset entity). Setting the entity resets the time to zero, so call this after setting the view entity.
* @Pramas float
* @NativeName: ViewOffsetEntity_SetLerpOutTime
* @NativeFunctionAddress 00000001406A2FF0
*/

void function ViewOffsetEntity_SetLerpOutTime(float)

/*
* @Breif Gets the TAPPED or HELD binding for the given +ability command.
* @Pramas int, int
* @NativeName: ScriptGetAbilityDownBinding
* @NativeFunctionAddress 00000001406A2F40
*/

string function GetAbilityDownBinding(int, int)

/*
* @Breif Gets the TAPPED or HELD binding for the given +ability command.
* @Pramas int, int
* @NativeName: ScriptGetAbilityUpBinding
* @NativeFunctionAddress 00000001406A2E90
*/

string function GetAbilityUpBinding(int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_SetLookStickDebounce
* @NativeFunctionAddress 00000001406A2E40
*/

void function SetLookStickDebounce()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_ClearLookStickDebounce
* @NativeFunctionAddress 00000001406A2DF0
*/

void function ClearLookStickDebounce()

/*
* @Breif Disable the player's weapon
* @Pramas 
* @NativeName: Weapon_Disable_Script
* @NativeFunctionAddress 00000001406A2DA0
*/

void function DisableWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_DisableWithSlowHolster_Script
* @NativeFunctionAddress 00000001406A2D50
*/

void function DisableWeaponWithSlowHolster()

/*
* @Breif Enable the player's weapon
* @Pramas 
* @NativeName: Weapon_Enable_Script
* @NativeFunctionAddress 00000001406A2D00
*/

void function EnableWeapon()

/*
* @Breif 
* @Pramas 
* @NativeName: Weapon_EnableWithSlowDeploy_Script
* @NativeFunctionAddress 00000001406A2CB0
*/

void function EnableWeaponWithSlowDeploy()

/*
* @Breif 
* @Pramas float
* @NativeName: Weapon_DelayEnableWithSlowDeploy_Script
* @NativeFunctionAddress 00000001406A2C40
*/

void function DelayEnableWeaponWithSlowDeploy(float)

/*
* @Breif Holster player's weapon with slower holster animation
* @Pramas 
* @NativeName: Weapon_Holster_Script
* @NativeFunctionAddress 00000001406A2BF0
*/

void function HolsterWeapon()

/*
* @Breif Pull out the player's weapon using slow deploy animation
* @Pramas 
* @NativeName: Weapon_Deploy_Script
* @NativeFunctionAddress 00000001406A2BA0
*/

void function DeployWeapon()

/*
* @Breif Disable the player's weapon viewmodel
* @Pramas 
* @NativeName: Weapon_DisableViewModel
* @NativeFunctionAddress 00000001406A2B50
*/

void function DisableWeaponViewModel()

/*
* @Breif Enable the player's weapon viewmodel
* @Pramas 
* @NativeName: Weapon_EnableViewModel
* @NativeFunctionAddress 00000001406A2B00
*/

void function EnableWeaponViewModel()

/*
* @Breif Gets the raw dodge power of the suit
* @Pramas 
* @NativeName: Script_GetDodgePower
* @NativeFunctionAddress 00000001406A2A50
*/

float function GetDodgePower()

/*
* @Breif Gets the percentage of "suit power" remaining (used for sprint, etc)
* @Pramas 
* @NativeName: Script_GetSuitPower
* @NativeFunctionAddress 00000001406A2A50
*/

float function GetSuitPower()

/*
* @Breif Gets the percentage of "suit jump power" remaining (used for double jump)
* @Pramas 
* @NativeName: Script_GetSuitJumpPower
* @NativeFunctionAddress 00000001406A29A0
*/

float function GetSuitJumpPower()

/*
* @Breif Gets the percentage of "grapple power" remaining
* @Pramas 
* @NativeName: Script_GetSuitGrapplePower
* @NativeFunctionAddress 00000001406A28F0
*/

float function GetSuitGrapplePower()

/*
* @Breif Returns true if the player is currently speaking over voice chat (and we can hear them)
* @Pramas 
* @NativeName: Script_IsTalking
* @NativeFunctionAddress 00000001406A2890
*/

bool function IsTalking()

/*
* @Breif Returns true if the player has a mic plugged in
* @Pramas 
* @NativeName: Script_HasMic
* @NativeFunctionAddress 00000001406A2830
*/

bool function HasMic()

/*
* @Breif Returns true if the player is in party chat
* @Pramas 
* @NativeName: Script_InPartyChat
* @NativeFunctionAddress 00000001406A27D0
*/

bool function InPartyChat()

/*
* @Breif Returns true if the player is muted
* @Pramas 
* @NativeName: Script_IsVoiceMuted
* @NativeFunctionAddress 00000001406A2770
*/

bool function IsVoiceMuted()

/*
* @Breif Returns true if the player is muted
* @Pramas 
* @NativeName: Script_IsTextMuted
* @NativeFunctionAddress 00000001406A2710
*/

bool function IsTextMuted()

/*
* @Breif Gets the use entity that would be found if the player tried to use something this frame
* @Pramas 
* @NativeName: Script_GetUseEntity
* @NativeFunctionAddress 00000001406A26B0
*/

entity function GetUseEntity()

/*
* @Breif Returns whether the player is wallrunning
* @Pramas 
* @NativeName: IsWallRunning
* @NativeFunctionAddress 00000001406A2650
*/

bool function IsWallRunning()

/*
* @Breif Returns whether the player is wall-hanging.
* @Pramas 
* @NativeName: IsWallHanging
* @NativeFunctionAddress 00000001406A25F0
*/

bool function IsWallHanging()

/*
* @Breif Returns whether the player is sprinting
* @Pramas 
* @NativeName: IsSprinting
* @NativeFunctionAddress 00000001406A2590
*/

bool function IsSprinting()

/*
* @Breif Returns whether the player is in the middle of a double-jump.
* @Pramas 
* @NativeName: IsDoubleJumping
* @NativeFunctionAddress 00000001406A2530
*/

bool function IsDoubleJumping()

/*
* @Breif Returns whether the player is dodging.
* @Pramas 
* @NativeName: IsDodging
* @NativeFunctionAddress 00000001406A24D0
*/

bool function IsDodging()

/*
* @Breif Returns whether the player is traversing (i.e. mantle or window anims).
* @Pramas 
* @NativeName: IsTraversing
* @NativeFunctionAddress 00000001406A2470
*/

bool function IsTraversing()

/*
* @Breif Returns whether the player is mantling.
* @Pramas 
* @NativeName: IsMantling
* @NativeFunctionAddress 00000001406A2410
*/

bool function IsMantling()

/*
* @Breif Returns whether this player has grapple available in general.
* @Pramas 
* @NativeName: HasGrapple
* @NativeFunctionAddress 00000001406A23B0
*/

bool function HasGrapple()

/*
* @Breif Returns whether this player can grapple the surface they're looking at.
* @Pramas 
* @NativeName: MayGrapple
* @NativeFunctionAddress 00000001406A2350
*/

bool function MayGrapple()

/*
* @Breif Returns whether the player is sliding
* @Pramas 
* @NativeName: IsSliding
* @NativeFunctionAddress 00000001406A22F0
*/

bool function IsSliding()

/*
* @Breif Return time freefall started
* @Pramas 
* @NativeName: Player_GetFreefallStartTime
* @NativeFunctionAddress 00000001406A2240
*/

float function Player_GetFreefallStartTime()

/*
* @Breif Return time freefall ended
* @Pramas 
* @NativeName: Player_GetFreefallEndTime
* @NativeFunctionAddress 00000001406A2190
*/

float function Player_GetFreefallEndTime()

/*
* @Breif Return time freefall anticipation started
* @Pramas 
* @NativeName: Player_GetFreefallAnticipateStartTime
* @NativeFunctionAddress 00000001406A20E0
*/

float function Player_GetFreefallAnticipateStartTime()

/*
* @Breif Return time freefall anticipation ended
* @Pramas 
* @NativeName: Player_GetFreefallAnticipateEndTime
* @NativeFunctionAddress 00000001406A2030
*/

float function Player_GetFreefallAnticipateEndTime()

/*
* @Breif Returns true if the player is freefalling
* @Pramas 
* @NativeName: Player_IsFreefalling
* @NativeFunctionAddress 00000001406A1FD0
*/

bool function Player_IsFreefalling()

/*
* @Breif Returns true if the player is freefalling and about to land
* @Pramas 
* @NativeName: Player_IsFreefallAnticipating
* @NativeFunctionAddress 00000001406A1F70
*/

bool function Player_IsFreefallAnticipating()

/*
* @Breif 
* @Pramas 
* @NativeName: Player_GetFreefallDistanceToLand
* @NativeFunctionAddress 00000001406A1EC0
*/

float function Player_GetFreefallDistanceToLand()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetStrafeAngle
* @NativeFunctionAddress 00000001406A1E10
*/

float function Skydive_GetStrafeAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetSpeed
* @NativeFunctionAddress 00000001406A1D60
*/

float function Skydive_GetSpeed()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetDiveAngle
* @NativeFunctionAddress 00000001406A1CB0
*/

float function Skydive_GetDiveAngle()

/*
* @Breif 
* @Pramas bool
* @NativeName: Skydive_SetFreelookMode
* @NativeFunctionAddress 00000001406A1C50
*/

void function Skydive_SetFreelookMode(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_IsFreelooking
* @NativeFunctionAddress 00000001406A1BF0
*/

bool function Skydive_IsFreelooking()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_GetFreelookLockedAngle
* @NativeFunctionAddress 00000001406A1B20
*/

vector function Skydive_GetFreelookLockedAngle()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_IsFollowing
* @NativeFunctionAddress 00000001406A1AC0
*/

bool function Skydive_IsFollowing()

/*
* @Breif 
* @Pramas entity
* @NativeName: Skydive_FollowPlayer
* @NativeFunctionAddress 00000001406A1A40
*/

void function Skydive_FollowPlayer(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_StopFollowing
* @NativeFunctionAddress 00000001406A19F0
*/

void function Skydive_StopFollowing()

/*
* @Breif 
* @Pramas 
* @NativeName: Skydive_QueueStopFollowing
* @NativeFunctionAddress 00000001406A19A0
*/

void function Skydive_QueueStopFollowing()

/*
* @Breif Returns whether the player is in an observer mode
* @Pramas 
* @NativeName: IsObserver
* @NativeFunctionAddress 00000001406A1940
*/

bool function IsObserver()

/*
* @Breif Returns the player's observer mode
* @Pramas 
* @NativeName: GetObserverMode
* @NativeFunctionAddress 00000001406A1890
*/

int function GetObserverMode()

/*
* @Breif Returns the player's observer target
* @Pramas 
* @NativeName: GetObserverTarget
* @NativeFunctionAddress 00000001406A1830
*/

entity function GetObserverTarget()

/*
* @Breif 
* @Pramas 
* @NativeName: IsThirdPersonObserver
* @NativeFunctionAddress 00000001406A17D0
*/

bool function IsThirdPersonObserver()

/*
* @Breif Returns if this player is in a third person replay (usually when killed by AI)
* @Pramas 
* @NativeName: IsInThirdPersonReplay
* @NativeFunctionAddress 00000001406A1770
*/

bool function IsInThirdPersonReplay()

/*
* @Breif Returns true if this player is a bot
* @Pramas 
* @NativeName: IsBot
* @NativeFunctionAddress 00000001406A1710
*/

bool function IsBot()

/*
* @Breif Returns true if this player is a a bot created to play back a recording from 'bot_record'
* @Pramas 
* @NativeName: IsPlayback
* @NativeFunctionAddress 00000001406A16B0
*/

bool function IsPlayback()

/*
* @Breif Let code know a melee attack has started
* @Pramas int
* @NativeName: PlayerMelee_StartAttack
* @NativeFunctionAddress 00000001406A1640
*/

void function PlayerMelee_StartAttack(int)

/*
* @Breif Let code know a melee attack has ended
* @Pramas 
* @NativeName: PlayerMelee_EndAttack
* @NativeFunctionAddress 00000001406A15F0
*/

void function PlayerMelee_EndAttack()

/*
* @Breif Let script query whether a melee attack is currently started
* @Pramas 
* @NativeName: PlayerMelee_IsAttackActive
* @NativeFunctionAddress 00000001406A1590
*/

bool function PlayerMelee_IsAttackActive()

/*
* @Breif Returns true if currently doing a melee attack and the attack was started while sprinting
* @Pramas 
* @NativeName: PlayerMelee_IsSprintAttack
* @NativeFunctionAddress 00000001406A1530
*/

bool function PlayerMelee_IsSprintAttack()

/*
* @Breif Let code know the melee attack hit something (so code will stop the lunge movement)
* @Pramas entity
* @NativeName: PlayerMelee_SetAttackHitEntity
* @NativeFunctionAddress 00000001406A14B0
*/

void function PlayerMelee_SetAttackHitEntity(entity)

/*
* @Breif 
* @Pramas bool
* @NativeName: PlayerMelee_SetAttackRecoveryShouldBeQuick
* @NativeFunctionAddress 00000001406A1450
*/

void function PlayerMelee_SetAttackRecoveryShouldBeQuick(bool)

/*
* @Breif Let script query whether the melee attack hit flag has been set
* @Pramas 
* @NativeName: PlayerMelee_GetAttackHitEntity
* @NativeFunctionAddress 00000001406A13F0
*/

entity function PlayerMelee_GetAttackHitEntity()

/*
* @Breif Sets scripted melee state (arbitrary integer)
* @Pramas int
* @NativeName: PlayerMelee_Script_SetState
* @NativeFunctionAddress 00000001406A1380
*/

void function PlayerMelee_SetState(int)

/*
* @Breif Gets scripted melee state (arbitrary integer)
* @Pramas 
* @NativeName: PlayerMelee_Script_GetState
* @NativeFunctionAddress 00000001406A12D0
*/

int function PlayerMelee_GetState()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetTitanEmbarkEnabled
* @NativeFunctionAddress 00000001406A1270
*/

void function SetTitanEmbarkEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanEmbarkEnabled
* @NativeFunctionAddress 00000001406A1210
*/

bool function GetTitanEmbarkEnabled()

/*
* @Breif 
* @Pramas bool
* @NativeName: SetTitanDisembarkEnabled
* @NativeFunctionAddress 00000001406A11B0
*/

void function SetTitanDisembarkEnabled(bool)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanDisembarkEnabled
* @NativeFunctionAddress 00000001406A1150
*/

bool function GetTitanDisembarkEnabled()

/*
* @Breif Increments disabled melee counter
* @Pramas 
* @NativeName: Script_SetMeleeDisabled
* @NativeFunctionAddress 00000001406A1100
*/

void function SetMeleeDisabled()

/*
* @Breif Decrements disabled melee counter
* @Pramas 
* @NativeName: Script_ClearMeleeDisabled
* @NativeFunctionAddress 00000001406A10B0
*/

void function ClearMeleeDisabled()

/*
* @Breif Gets the disabled melee counter
* @Pramas 
* @NativeName: Script_GetMeleeDisabled
* @NativeFunctionAddress 00000001406A1000
*/

int function GetMeleeDisabled()

/*
* @Breif Make the player lerp towards the given target
* @Pramas entity
* @NativeName: Lunge_SetTargetEntity
* @NativeFunctionAddress 00000001406A0F80
*/

bool function Lunge_SetTargetEntity(entity)

/*
* @Breif Get the current lunge target
* @Pramas 
* @NativeName: Lunge_GetTargetEntity
* @NativeFunctionAddress 00000001406A0F20
*/

entity function Lunge_GetTargetEntity()

/*
* @Breif Make the player lerp towards the given position
* @Pramas vector
* @NativeName: Lunge_SetTargetPosition
* @NativeFunctionAddress 00000001406A0EC0
*/

void function Lunge_SetTargetPosition(vector)

/*
* @Breif Get the position the player is lunging towards
* @Pramas 
* @NativeName: Lunge_GetTargetPosition
* @NativeFunctionAddress 00000001406A0DF0
*/

vector function Lunge_GetTargetPosition()

/*
* @Breif 
* @Pramas vector
* @NativeName: Lunge_SetEndPositionOffset
* @NativeFunctionAddress 00000001406A0D90
*/

void function Lunge_SetEndPositionOffset(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: Lunge_GetEndPositionOffset
* @NativeFunctionAddress 00000001406A0CC0
*/

vector function Lunge_GetEndPositionOffset()

/*
* @Breif Clears any lunging currently going on
* @Pramas 
* @NativeName: Lunge_ClearTarget
* @NativeFunctionAddress 00000001406A0C70
*/

void function Lunge_ClearTarget()

/*
* @Breif Allow the lunge to fly into the air, if it needs to
* @Pramas 
* @NativeName: Lunge_EnableFlying
* @NativeFunctionAddress 00000001406A0C20
*/

void function Lunge_EnableFlying()

/*
* @Breif Whether lunging to adjust the player's view pitch
* @Pramas bool
* @NativeName: Lunge_LockPitch
* @NativeFunctionAddress 00000001406A0BC0
*/

void function Lunge_LockPitch(bool)

/*
* @Breif Returns how long the lunge will last for
* @Pramas 
* @NativeName: Lunge_GetSmoothTime
* @NativeFunctionAddress 00000001406A0B10
*/

float function Lunge_GetSmoothTime()

/*
* @Breif Sets how long it takes to lunge to the target
* @Pramas float
* @NativeName: Lunge_SetSmoothTime
* @NativeFunctionAddress 00000001406A0AA0
*/

void function Lunge_SetSmoothTime(float)

/*
* @Breif Sets maximum time for how long a lunge will go on for
* @Pramas float
* @NativeName: Lunge_SetMaxTime
* @NativeFunctionAddress 00000001406A0A30
*/

void function Lunge_SetMaxTime(float)

/*
* @Breif Sets the maximum speed the player can end lunging with
* @Pramas float
* @NativeName: Lunge_SetMaxEndSpeed
* @NativeFunctionAddress 00000001406A09C0
*/

void function Lunge_SetMaxEndSpeed(float)

/*
* @Breif Is the player lunging.
* @Pramas 
* @NativeName: Lunge_IsActive
* @NativeFunctionAddress 00000001406A0960
*/

bool function Lunge_IsActive()

/*
* @Breif Is the player lunging towards an entity
* @Pramas 
* @NativeName: Lunge_IsLungingToEntity
* @NativeFunctionAddress 00000001406A0900
*/

bool function Lunge_IsLungingToEntity()

/*
* @Breif Is the player lunging towards a position
* @Pramas 
* @NativeName: Lunge_IsLungingToPosition
* @NativeFunctionAddress 00000001406A08A0
*/

bool function Lunge_IsLungingToPosition()

/*
* @Breif Is the player lunging to ground execute
* @Pramas 
* @NativeName: Lunge_IsGroundExecute
* @NativeFunctionAddress 00000001406A0840
*/

bool function Lunge_IsGroundExecute()

/*
* @Breif Returns the initial relative position of the player from the lunge target
* @Pramas 
* @NativeName: Lunge_GetStartPositionOffset
* @NativeFunctionAddress 00000001406A0770
*/

vector function Lunge_GetStartPositionOffset()

/*
* @Breif Gets the ragdoll of the player on the client
* @Pramas 
* @NativeName: Script_GetPlayerRagdoll
* @NativeFunctionAddress 00000001406A0710
*/

entity function GetPlayerRagdoll()

/*
* @Breif Plays a controller rumble on the current player. Takes three parameters: rumble index (the wave pattern of the vibration or 0 to stop all rumbles), rumble data (optional data for the rumble flags parameter that follows), and rumble flags (additional flags for the rumble). See rumble_shared.h for further details.
* @Pramas int, int, int
* @NativeName: Script_RumbleEffect
* @NativeFunctionAddress 00000001406A0670
*/

void function RumbleEffect(int, int, int)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_EnableSlowMo
* @NativeFunctionAddress 00000001406A0620
*/

void function EnableSlowMo()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_DisableSlowMo
* @NativeFunctionAddress 00000001406A05D0
*/

void function DisableSlowMo()

/*
* @Breif 
* @Pramas vector, float
* @NativeName: CockpitJolt
* @NativeFunctionAddress 00000001406A0560
*/

void function CockpitJolt(vector, float)

/*
* @Breif Gets crosshair position as a fraction of screen size (0..1)
* @Pramas 
* @NativeName: Script_GetCrosshairPos
* @NativeFunctionAddress 00000001406A0490
*/

var function GetCrosshairPos()

/*
* @Breif Gets the defense score for this player
* @Pramas int
* @NativeName: Script_GetPlayerGameStat
* @NativeFunctionAddress 00000001406A03D0
*/

int function GetPlayerGameStat(int)

/*
* @Breif Get how zoomed-in a player is. Result is between (0.0, 1.0).
* @Pramas 
* @NativeName: GetZoomFrac
* @NativeFunctionAddress 00000001406A3210
*/

float function GetZoomFrac()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDamagedByOtherPlayer
* @NativeFunctionAddress 00000001406A0320
*/

float function GetLastTimeDamagedByOtherPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDamagedByNPC
* @NativeFunctionAddress 00000001406A0270
*/

float function GetLastTimeDamagedByNPC()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDidDamageToOtherPlayer
* @NativeFunctionAddress 00000001406A01C0
*/

float function GetLastTimeDidDamageToOtherPlayer()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastTimeDidDamageToNPC
* @NativeFunctionAddress 00000001406A0110
*/

float function GetLastTimeDidDamageToNPC()

/*
* @Breif Returns player's minimum bounds
* @Pramas 
* @NativeName: GetPlayerMins
* @NativeFunctionAddress 00000001406A00B0
*/

vector function GetPlayerMins()

/*
* @Breif Returns player's maximum bounds
* @Pramas 
* @NativeName: GetPlayerMaxs
* @NativeFunctionAddress 00000001406A0050
*/

vector function GetPlayerMaxs()

/*
* @Breif Returns true if the player is ziplining (in either direction)
* @Pramas 
* @NativeName: Zipline_IsZiplining
* @NativeFunctionAddress 000000014069FFF0
*/

bool function IsZiplining()

/*
* @Breif Returns true if the player is ziplining in reverse
* @Pramas 
* @NativeName: Zipline_IsZipliningInReverse
* @NativeFunctionAddress 000000014069FF90
*/

bool function IsZipliningInReverse()

/*
* @Breif Returns true if the player is ziplining vertically
* @Pramas 
* @NativeName: Zipline_IsZipliningVertically
* @NativeFunctionAddress 000000014069FF30
*/

bool function Zipline_IsZipliningVertically()

/*
* @Breif Returns true if the player is mounting a zipline
* @Pramas 
* @NativeName: Zipline_IsMountingZipline
* @NativeFunctionAddress 000000014069FED0
*/

bool function IsMountingZipline()

/*
* @Breif Get the zipline entity the player is currently using
* @Pramas 
* @NativeName: Zipline_GetActiveZipline
* @NativeFunctionAddress 000000014069FE70
*/

entity function Zipline_GetActiveZipline()

/*
* @Breif Get the zipline entity the player was last using
* @Pramas 
* @NativeName: Zipline_GetLastZipline
* @NativeFunctionAddress 000000014069FE10
*/

entity function Zipline_GetLastZipline()

/*
* @Breif Returns the highest fraction value a smart-ammo-enabled weapon has locked onto this entity right now
* @Pramas 
* @NativeName: SmartAmmo_GetHighestLockOnMeFraction
* @NativeFunctionAddress 000000014069FD60
*/

float function SmartAmmo_GetHighestLockOnMeFraction()

/*
* @Breif Returns the previous highest fraction value
* @Pramas 
* @NativeName: SmartAmmo_GetPreviousHighestLockOnMeFraction
* @NativeFunctionAddress 000000014069FCB0
*/

float function SmartAmmo_GetPreviousHighestLockOnMeFraction()

/*
* @Breif Returns an array of the weapon entities with the highest fraction/locks on us
* @Pramas 
* @NativeName: SmartAmmo_Script_GetHighestLocksOnMeEntities
* @NativeFunctionAddress 000000014069FBE0
*/

array< entity > function SmartAmmo_GetHighestLocksOnMeEntities()

/*
* @Breif Enable one-handed weapon anims.
* @Pramas 
* @NativeName: Script_SetOneHandedWeaponUsageOn
* @NativeFunctionAddress 000000014069FB90
*/

void function SetOneHandedWeaponUsageOn()

/*
* @Breif Disable one-handed weapon anims.
* @Pramas 
* @NativeName: Script_SetOneHandedWeaponUsageOff
* @NativeFunctionAddress 000000014069FB40
*/

void function SetOneHandedWeaponUsageOff()

/*
* @Breif Set the safe health fraction used by some titan material proxies.
* @Pramas float
* @NativeName: SetSafeHealthFrac
* @NativeFunctionAddress 000000014069FAD0
*/

void function SetSafeHealthFrac(float)

/*
* @Breif Tell code that we are starting the arc cannon effect on this player.
* @Pramas 
* @NativeName: StartArcCannon
* @NativeFunctionAddress 000000014069FA80
*/

void function StartArcCannon()

/*
* @Breif Tell code to stop the arc cannon effect on this player.
* @Pramas 
* @NativeName: StopArcCannon
* @NativeFunctionAddress 000000014069FA30
*/

void function StopArcCannon()

/*
* @Breif Sets if boost should be activated
* @Pramas bool
* @NativeName: Script_SetActivateBoost
* @NativeFunctionAddress 000000014069F9D0
*/

void function SetActivateBoost(bool)

/*
* @Breif 
* @Pramas float
* @NativeName: Script_SetBoostMeter
* @NativeFunctionAddress 000000014069F960
*/

void function SetBoostMeter(float)

/*
* @Breif 
* @Pramas vector
* @NativeName: Script_CanUseJetpack
* @NativeFunctionAddress 000000014069F8F0
*/

bool function CanUseJetpack(vector)

/*
* @Breif Set if jetpack should be activated
* @Pramas bool
* @NativeName: Script_SetActivateJetpack
* @NativeFunctionAddress 000000014069F890
*/

void function SetActivateJetpack(bool)

/*
* @Breif Gets the entity that should be time-aligned with the player
* @Pramas 
* @NativeName: Script_GetSyncedEntity
* @NativeFunctionAddress 000000014069F830
*/

entity function GetSyncedEntity()

/*
* @Breif Returns time of the hot drop impact
* @Pramas 
* @NativeName: GetHotDropImpactTime
* @NativeFunctionAddress 000000014069F780
*/

float function GetHotDropImpactTime()

/*
* @Breif Returns time that the player will die if he stays out of bounds
* @Pramas 
* @NativeName: GetOutOfBoundsDeadTime
* @NativeFunctionAddress 000000014069F6D0
*/

float function GetOutOfBoundsDeadTime()

/*
* @Breif Get index that client script can use for objective info
* @Pramas 
* @NativeName: GetObjectiveIndex
* @NativeFunctionAddress 000000014069F620
*/

int function GetObjectiveIndex()

/*
* @Breif Get entity that client script can use for objectives
* @Pramas 
* @NativeName: GetObjectiveEntity
* @NativeFunctionAddress 000000014069F5C0
*/

entity function GetObjectiveEntity()

/*
* @Breif Get time when the object will expire
* @Pramas 
* @NativeName: GetObjectiveEndTime
* @NativeFunctionAddress 000000014069F510
*/

float function GetObjectiveEndTime()

/*
* @Breif Get index that client script can use for voice pack info
* @Pramas 
* @NativeName: GetVoicePackIndex
* @NativeFunctionAddress 000000014069F460
*/

int function GetVoicePackIndex()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCinematicEventFlags
* @NativeFunctionAddress 000000014069F3B0
*/

int function GetCinematicEventFlags()

/*
* @Breif 
* @Pramas int
* @NativeName: HasPassive
* @NativeFunctionAddress 000000014069F330
*/

bool function HasPassive(int)

/*
* @Breif 
* @Pramas 
* @NativeName: GetForcedDialogueOnly
* @NativeFunctionAddress 000000014069F2D0
*/

bool function GetForcedDialogueOnly()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanBuildTime
* @NativeFunctionAddress 000000014069F220
*/

float function GetTitanBuildTime()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTitanBubbleShieldTime
* @NativeFunctionAddress 000000014069F170
*/

float function GetTitanBubbleShieldTime()

/*
* @Breif Returns true if this player has a bad reputation
* @Pramas 
* @NativeName: DoesPlayerHaveBadReputation
* @NativeFunctionAddress 000000014069F110
*/

bool function HasBadReputation()

/*
* @Breif Gets the player's XP
* @Pramas 
* @NativeName: GetXP
* @NativeFunctionAddress 000000014069F060
*/

int function GetXP()

/*
* @Breif Gets the player's Level
* @Pramas 
* @NativeName: GetLevel
* @NativeFunctionAddress 000000014069EFB0
*/

int function GetLevel()

/*
* @Breif Gets the player's generation
* @Pramas 
* @NativeName: GetGen
* @NativeFunctionAddress 000000014069EF00
*/

int function GetGen()

/*
* @Breif Gets the player's rank
* @Pramas 
* @NativeName: GetRank
* @NativeFunctionAddress 000000014069EE50
*/

int function GetRank()

/*
* @Breif Find out if the player is playing in ranked mode
* @Pramas 
* @NativeName: IsPlayingRanked
* @NativeFunctionAddress 000000014069EDF0
*/

bool function IsPlayingRanked()

/*
* @Breif Returns if the player is standing.
* @Pramas 
* @NativeName: IsStanding
* @NativeFunctionAddress 000000014069ED90
*/

bool function IsStanding()

/*
* @Breif Returns if the player is crouched.
* @Pramas 
* @NativeName: IsCrouched
* @NativeFunctionAddress 000000014069ED30
*/

bool function IsCrouched()

/*
* @Breif Returns true if the player is already standing or has space to stand
* @Pramas 
* @NativeName: CanStand
* @NativeFunctionAddress 000000014069ECD0
*/

bool function CanStand()

/*
* @Breif Toggles grapple
* @Pramas vector
* @NativeName: Grapple
* @NativeFunctionAddress 000000014069EC60
*/

bool function Grapple(vector)

/*
* @Breif 
* @Pramas 
* @NativeName: GrappleDetach
* @NativeFunctionAddress 000000014069EC10
*/

void function GrappleDetach()

/*
* @Breif Checks if grapple hook is deployed (not necesssarily attached).
* @Pramas 
* @NativeName: IsGrappleActive
* @NativeFunctionAddress 000000014069EBB0
*/

bool function IsGrappleActive()

/*
* @Breif Checks if grapple hook is attached (not necessarily pulling yet).
* @Pramas 
* @NativeName: IsGrappleAttached
* @NativeFunctionAddress 000000014069EB50
*/

bool function IsGrappleAttached()

/*
* @Breif Checks if grapple hook is pulling the player.
* @Pramas 
* @NativeName: IsGrapplePulling
* @NativeFunctionAddress 000000014069EAF0
*/

bool function IsGrapplePulling()

/*
* @Breif 
* @Pramas 
* @NativeName: IsGrapplingZipline
* @NativeFunctionAddress 000000014069EA90
*/

bool function IsGrapplingZipline()

/*
* @Breif Gets the grapple hook entity for this player.
* @Pramas 
* @NativeName: Script_GetGrappleHook
* @NativeFunctionAddress 000000014069EA30
*/

entity function GetGrappleHook()

/*
* @Breif Make grapple seek out this target when it is fired
* @Pramas entity
* @NativeName: SetGrappleAutoAimTarget
* @NativeFunctionAddress 000000014069E9B0
*/

void function SetGrappleAutoAimTarget(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetGrappleAutoAimTarget
* @NativeFunctionAddress 000000014069E950
*/

entity function GetGrappleAutoAimTarget()

/*
* @Breif 
* @Pramas 
* @NativeName: GetSkillMU
* @NativeFunctionAddress 000000014069E8A0
*/

float function GetSkillMU()

/*
* @Breif Get the players pilot class index.
* @Pramas 
* @NativeName: GetPilotClassIndex
* @NativeFunctionAddress 000000014069E7F0
*/

int function GetPilotClassIndex()

/*
* @Breif Returns true if the player is currently boosting
* @Pramas 
* @NativeName: IsBoosting
* @NativeFunctionAddress 000000014069E790
*/

bool function IsBoosting()

/*
* @Breif Returns true if the player is currently gliding
* @Pramas 
* @NativeName: IsGliding
* @NativeFunctionAddress 000000014069E730
*/

bool function IsGliding()

/*
* @Breif Returns current glide meter value
* @Pramas 
* @NativeName: GetGlideMeter
* @NativeFunctionAddress 000000014069E680
*/

float function GetGlideMeter()

/*
* @Breif Returns true if the player is currently hovering
* @Pramas 
* @NativeName: IsHovering
* @NativeFunctionAddress 000000014069E620
*/

bool function IsHovering()

/*
* @Breif Returns true if the player can hover
* @Pramas 
* @NativeName: IsHoverEnabled
* @NativeFunctionAddress 000000014069E5C0
*/

bool function IsHoverEnabled()

/*
* @Breif Returns true if the player is in air slowmo
* @Pramas 
* @NativeName: IsInAirSlowMo
* @NativeFunctionAddress 000000014069E560
*/

bool function IsInAirSlowMo()

/*
* @Breif Get a titan available for smart targetting type uses.
* @Pramas bool, float, float
* @NativeName: Script_GetTitanTarget
* @NativeFunctionAddress 000000014069E4C0
*/

entity function GetTitanTarget(bool, float, float)

/*
* @Breif Indicates if the specified input command is being pressed. Only works for the local view player.
* @Pramas int
* @NativeName: IsInputCommandHeld
* @NativeFunctionAddress 000000014069E440
*/

bool function IsInputCommandHeld(int)

/*
* @Breif Indicates if the specified input command was pressed this frame. Only works for the local view player.
* @Pramas int
* @NativeName: IsInputCommandPressed
* @NativeFunctionAddress 000000014069E3C0
*/

bool function IsInputCommandPressed(int)

/*
* @Breif Indicates if the specified input command was released this frame. Only works for the local view player.
* @Pramas int
* @NativeName: IsInputCommandReleased
* @NativeFunctionAddress 000000014069E340
*/

bool function IsInputCommandReleased(int)

/*
* @Breif Looks at the latest raw usercommand input for the given local player.
* @Pramas int
* @NativeName: IsUserCommandButtonHeld
* @NativeFunctionAddress 000000014069E2C0
*/

bool function IsUserCommandButtonHeld(int)

/*
* @Breif Gets the amount the left stick or WASD keys are pressed forward between -1 to 1.
* @Pramas 
* @NativeName: ScriptGetInputAxisForward
* @NativeFunctionAddress 000000014069E210
*/

float function GetInputAxisForward()

/*
* @Breif Gets the amount the left stick or WASD keys are pressed right between -1 to 1.
* @Pramas 
* @NativeName: ScriptGetInputAxisRight
* @NativeFunctionAddress 000000014069E160
*/

float function GetInputAxisRight()

/*
* @Breif Gets a bool network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetBool
* @NativeFunctionAddress 000000014069E0F0
*/

bool function GetPlayerNetBool(string)

/*
* @Breif Gets an int network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetInt
* @NativeFunctionAddress 000000014069E030
*/

int function GetPlayerNetInt(string)

/*
* @Breif Gets a float network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetFloat
* @NativeFunctionAddress 000000014069DF70
*/

float function GetPlayerNetFloat(string)

/*
* @Breif Gets a time (float) network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetTime
* @NativeFunctionAddress 000000014069DEB0
*/

float function GetPlayerNetTime(string)

/*
* @Breif Gets an entity network variable on the player (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetPlayerNetEnt
* @NativeFunctionAddress 000000014069DE40
*/

entity function GetPlayerNetEnt(string)

/*
* @Breif 
* @Pramas asset, string
* @NativeName: Script_StartEffectOnPlayerHands
* @NativeFunctionAddress 000000014069DDD0
*/

void function StartEffectOnPlayerHands(asset, string)

/*
* @Breif 
* @Pramas 
* @NativeName: Script_StopEffectOnPlayerHands
* @NativeFunctionAddress 000000014069DD80
*/

void function StopEffectOnPlayerHands()

/*
* @Breif Sets a value of a control point on the player hands effect
* @Pramas int, vector
* @NativeName: Script_SetHandsEffectControlPoint
* @NativeFunctionAddress 000000014069DD10
*/

void function SetHandsEffectControlPoint(int, vector)

/*
* @Breif TEMPDEV_SetFOVScale( scale, lerp_time ). Sets a scale on FOV, lerping to the desired scale over the specified duration.
* @Pramas float, float
* @NativeName: SetFOVScale
* @NativeFunctionAddress 000000014069DC80
*/

void function SetFOVScale(float, float)

/*
* @Breif Gets the name of the community this player is currently playing in
* @Pramas 
* @NativeName: GetCommunityName
* @NativeFunctionAddress 000000014069DBF0
*/

string function GetCommunityName()

/*
* @Breif Gets the name of the faction this player is currently playing for
* @Pramas 
* @NativeName: GetFaction
* @NativeFunctionAddress 000000014069DB60
*/

string function GetFaction()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalGravityDirection
* @NativeFunctionAddress 000000014069DA90
*/

vector function GetLocalGravityDirection()

/*
* @Breif 
* @Pramas 
* @NativeName: GetLocalGravityStrength
* @NativeFunctionAddress 000000014069D9E0
*/

float function GetLocalGravityStrength()

/*
* @Breif Zoom scale lerps over time, this returns the final target after the lerp
* @Pramas 
* @NativeName: Script_GetMinimapTargetZoomScale
* @NativeFunctionAddress 000000014069D930
*/

float function GetMinimapTargetZoomScale()

/*
* @Breif Zoom scale lerps over time, this returns the current value of the minimap zoom scale
* @Pramas 
* @NativeName: Script_GetMinimapCurrentZoomScale
* @NativeFunctionAddress 000000014069D880
*/

float function GetMinimapCurrentZoomScale()

/*
* @Breif 
* @Pramas 
* @NativeName: Script_GetGrappleWeapon
* @NativeFunctionAddress 000000014069D820
*/

entity function GetGrappleWeapon()

/*
* @Breif "scriptOffset", "scriptOffsetClientOnly" or "convar". Returns whether it uses the old method: distance set by convars c_maxdistance and cam_idealdist, or uses the new offset set by SetTrackEntityOffset.
* @Pramas 
* @NativeName: GetTrackEntityDistanceMode
* @NativeFunctionAddress 000000014069D790
*/

string function GetTrackEntityDistanceMode()

/*
* @Breif 
* @Pramas float
* @NativeName: SetTrackEntityOffsetDistance
* @NativeFunctionAddress 000000014069D720
*/

void function SetTrackEntityOffsetDistance(float)

/*
* @Breif 
* @Pramas float
* @NativeName: SetTrackEntityOffsetHeight
* @NativeFunctionAddress 000000014069D6B0
*/

void function SetTrackEntityOffsetHeight(float)

/*
* @Breif 
* @Pramas 
* @NativeName: GetTrackEntityOffsetDistance
* @NativeFunctionAddress 000000014069D600
*/

float function GetTrackEntityOffsetDistance()

/*
* @Breif 
* @Pramas 
* @NativeName: GetTrackEntityOffsetHeight
* @NativeFunctionAddress 000000014069D550
*/

float function GetTrackEntityOffsetHeight()

/*
* @Breif Returns the last main weapon slot that the player had cycled to.
* @Pramas 
* @NativeName: Script_GetLastCycleSlot
* @NativeFunctionAddress 000000014069D4A0
*/

int function GetLastCycleSlot()

/*
* @Breif Is this player in shadow form?
* @Pramas 
* @NativeName: Script_IsShadowForm
* @NativeFunctionAddress 000000014069D440
*/

bool function IsShadowForm()

/*
* @Breif 
* @Pramas vector, float
* @NativeName: KnockBack
* @NativeFunctionAddress 000000014069D3D0
*/

void function KnockBack(vector, float)

/*
* @Breif Get the mod inventory.
* @Pramas 
* @NativeName: Script_ModInventory_Get
* @NativeFunctionAddress 000000014069BAC0
*/

var function ModInventory_Get()

/*
* @Breif Get the consumable inventory.
* @Pramas 
* @NativeName: Script_ConsumableInventory_Get
* @NativeFunctionAddress 000000014069BB10
*/

var function ConsumableInventory_Get()

/*
* @Breif Get an array of mods active on this player
* @Pramas 
* @NativeName: GetPlayerSettingsMods_Script
* @NativeFunctionAddress 000000014069BD50
*/

var function GetPlayerSettingsMods()

/*
* @Breif Gets the player's player settings as a settings block for calls into GetSettingsBlockInt/Float/etc
* @Pramas 
* @NativeName: GetPlayerSettingsBlock
* @NativeFunctionAddress 000000014069BE40
*/

var function GetPlayerSettingsBlock()

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: GetPersistentVar
* @NativeFunctionAddress 000000014069C150
*/

var function GetPersistentVar(var, string)

/*
* @Breif 
* @Pramas "variableName"
* @NativeName: GetPersistentVarAsInt
* @NativeFunctionAddress 000000014069C1A0
*/

int function GetPersistentVarAsInt(var, string)

/*
* @Breif Gets the AI body type
* @Pramas 
* @NativeName: GetBodyType
* @NativeFunctionAddress 00000001406B2640
*/

string function GetBodyType()

/*
* @Breif Gets the AI Class
* @Pramas 
* @NativeName: Script_GetAIClass
* @NativeFunctionAddress 00000001406B2590
*/

int function GetAIClass()

/*
* @Breif Gets the AI Class by name
* @Pramas 
* @NativeName: Script_GetAIClassName
* @NativeFunctionAddress 00000001406B2500
*/

string function GetAIClassName()

/*
* @Breif Returns if AI is in a state that can be interrupted
* @Pramas 
* @NativeName: IsInterruptable
* @NativeFunctionAddress 00000001406B24A0
*/

bool function IsInterruptable()

/*
* @Breif Gets the AI's subclass type
* @Pramas 
* @NativeName: GetSubclass
* @NativeFunctionAddress 00000001406B23F0
*/

int function GetSubclass()

/*
* @Breif Returns if AI can be melee executed
* @Pramas 
* @NativeName: CanBeMeleeExecuted
* @NativeFunctionAddress 00000001406B2390
*/

bool function CanBeMeleeExecuted()

/*
* @Breif Returns if AI can be ground executed
* @Pramas 
* @NativeName: CanBeGroundExecuted
* @NativeFunctionAddress 00000001406B2330
*/

bool function CanBeGroundExecuted()

/*
* @Breif Returns if AI is a non-combat AI
* @Pramas 
* @NativeName: IsNonCombatAI
* @NativeFunctionAddress 00000001406B22D0
*/

bool function IsNonCombatAI()

/*
* @Breif Gets the AI settings name
* @Pramas 
* @NativeName: GetAISettingsName
* @NativeFunctionAddress 00000001406B2240
*/

string function GetAISettingsName()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_MaxFlyingSpeed
* @NativeFunctionAddress 00000001406B2190
*/

float function AISetting_MaxFlyingSpeed()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_MeleeChargeSet
* @NativeFunctionAddress 00000001406B2100
*/

string function AISetting_MeleeChargeSet()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechAnimSet
* @NativeFunctionAddress 00000001406B2070
*/

string function AISetting_LeechAnimSet()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechAnimTag
* @NativeFunctionAddress 00000001406B1FE0
*/

string function AISetting_LeechAnimTag()

/*
* @Breif 
* @Pramas 
* @NativeName: AISetting_LeechDataKnifeTag
* @NativeFunctionAddress 00000001406B1F50
*/

string function AISetting_LeechDataKnifeTag()

/*
* @Breif 
* @Pramas entity
* @NativeName: GetMeleeDamageMaxForTarget
* @NativeFunctionAddress 00000001406B1E80
*/

int function GetMeleeDamageMaxForTarget(entity)

/*
* @Breif Get AI setting key field.
* @Pramas string
* @NativeName: Script_GetAISettingByKeyField
* @NativeFunctionAddress 00000001406B1DB0
*/

var function Dev_GetAISettingByKeyField(string)

/*
* @Breif Get AI setting key field. Assume return type is an asset
* @Pramas string
* @NativeName: Script_GetAISettingAssetByKeyField
* @NativeFunctionAddress 00000001406B1D10
*/

asset function Dev_GetAISettingAssetByKeyField(string)

/*
* @Breif Gets the turret's current state. Enum values under TURRET_***
* @Pramas 
* @NativeName: GetTurretState
* @NativeFunctionAddress 00000001406A5FB0
*/

int function GetTurretState()

/*
* @Breif Gets the turret's control panel set on the server
* @Pramas 
* @NativeName: GetControlPanel
* @NativeFunctionAddress 00000001406A5F50
*/

entity function GetControlPanel()

/*
* @Breif Get the canStand set from the server for this npc titan.
* @Pramas 
* @NativeName: GetCanStand
* @NativeFunctionAddress 00000001406A6060
*/

int function GetCanStand()

/*
* @Breif 
* @Pramas 
* @NativeName: IsJetWakeFXEnabled
* @NativeFunctionAddress 00000001406A6110
*/

bool function IsJetWakeFXEnabled()

/*
* @Breif Sets new environment light angles ("x y")
* @Pramas float, float
* @NativeName: ScriptOverrideLightAngles
* @NativeFunctionAddress 00000001406A62A0
*/

void function OverrideAngles(float, float)

/*
* @Breif Returns to server environment light angles
* @Pramas 
* @NativeName: ScriptUseServerLightAngles
* @NativeFunctionAddress 00000001406A6250
*/

void function UseServerAngles()

/*
* @Breif Sets scale factor each for sun and sky intensity
* @Pramas float, float
* @NativeName: ScriptScaleSunSkyIntensity
* @NativeFunctionAddress 00000001406A61C0
*/

void function ScaleSunSkyIntensity(float, float)

/*
* @Breif Set the light color
* @Pramas vector
* @NativeName: ScriptSetLightColor
* @NativeFunctionAddress 00000001406A6470
*/

void function SetLightColor(vector)

/*
* @Breif Set the light radius
* @Pramas float
* @NativeName: ScriptSetLightRadius
* @NativeFunctionAddress 00000001406A6400
*/

void function SetLightRadius(float)

/*
* @Breif Set the light exponent
* @Pramas int
* @NativeName: ScriptSetLightExponent
* @NativeFunctionAddress 00000001406A6390
*/

void function SetLightExponent(int)

/*
* @Breif Cockpit lights affect the cockpit only
* @Pramas bool
* @NativeName: ScriptSetCockpitLight
* @NativeFunctionAddress 00000001406A6330
*/

void function SetCockpitLight(bool)

/*
* @Breif Set whether this ambientgeneric is enabled.
* @Pramas bool
* @NativeName: SetEnabled
* @NativeFunctionAddress 00000001406B13B0
*/

void function SetEnabled(bool)

/*
* @Breif Set the sound event name for this ambientgeneric.
* @Pramas string
* @NativeName: ScriptSetSoundName
* @NativeFunctionAddress 00000001406B1350
*/

void function SetSoundName(string)

/*
* @Breif Set the endpoints for the line segment along which this ambientgeneric will play.
* @Pramas vector, vector
* @NativeName: ScriptSetSegmentEndpoints
* @NativeFunctionAddress 00000001406B12F0
*/

void function SetSegmentEndpoints(vector, vector)

/*
* @Breif Remove the line segment along which this ambientgeneric played.
* @Pramas 
* @NativeName: ScriptRemoveSegmentEndpoints
* @NativeFunctionAddress 00000001406B12A0
*/

void function RemoveSegmentEndpoints()

/*
* @Breif Set the radius (in world units) within which this AmbientGeneric should be audible.
* @Pramas float
* @NativeName: ScriptSetRadius
* @NativeFunctionAddress 00000001406B1230
*/

void function SetAudibleRadius(float)

/*
* @Breif Set the entity from which this AmbientGeneric derives its CodeValue controller value.
* @Pramas entity
* @NativeName: ScriptSetSoundCodeControllerEntity
* @NativeFunctionAddress 00000001406B11B0
*/

void function SetSoundCodeControllerEntity(entity)

/*
* @Breif 
* @Pramas 
* @NativeName: GetLastRodeoHitTime
* @NativeFunctionAddress 00000001406B1C60
*/

float function GetLastRodeoHitTime()

/*
* @Breif 
* @Pramas 
* @NativeName: GetStance
* @NativeFunctionAddress 00000001406B1BB0
*/

int function GetStance()

/*
* @Breif 
* @Pramas 
* @NativeName: GetPlayerSettingsName
* @NativeFunctionAddress 00000001406B1B20
*/

asset function GetPlayerSettingsName()

/*
* @Breif 
* @Pramas 
* @NativeName: IsDoomed
* @NativeFunctionAddress 00000001406B1AC0
*/

bool function IsDoomed()

/*
* @Breif 
* @Pramas 
* @NativeName: GetInvalidHealthBarEnt
* @NativeFunctionAddress 00000001406B1A60
*/

bool function GetInvalidHealthBarEnt()

/*
* @Breif 
* @Pramas 
* @NativeName: IsEjecting
* @NativeFunctionAddress 00000001406B1A00
*/

bool function IsEjecting()

/*
* @Breif Returns if the titanSoul has a valid titan
* @Pramas 
* @NativeName: Script_HasValidTitan
* @NativeFunctionAddress 00000001406B19A0
*/

bool function HasValidTitan()

/*
* @Breif Gets the titan for this titanSoul entity
* @Pramas 
* @NativeName: Script_GetTitan
* @NativeFunctionAddress 00000001406B1940
*/

entity function GetTitan()

/*
* @Breif 
* @Pramas 
* @NativeName: GetNextCoreChargeAvailable
* @NativeFunctionAddress 00000001406B1890
*/

float function GetNextCoreChargeAvailable()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreChargeExpireTime
* @NativeFunctionAddress 00000001406B17E0
*/

float function GetCoreChargeExpireTime()

/*
* @Breif 
* @Pramas 
* @NativeName: GetCoreChargeStartTime
* @NativeFunctionAddress 00000001406B1730
*/

float function GetCoreChargeStartTime()

/*
* @Breif Gets a bool network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetBool
* @NativeFunctionAddress 00000001406B16C0
*/

bool function GetTitanSoulNetBool(string)

/*
* @Breif Gets an int network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetInt
* @NativeFunctionAddress 00000001406B1600
*/

int function GetTitanSoulNetInt(string)

/*
* @Breif Gets a float network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetFloat
* @NativeFunctionAddress 00000001406B1540
*/

float function GetTitanSoulNetFloat(string)

/*
* @Breif Gets a time (float) network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetTime
* @NativeFunctionAddress 00000001406B1480
*/

float function GetTitanSoulNetTime(string)

/*
* @Breif Gets an entity network variable on the titan soul (see RegisterNetworkedVariable)
* @Pramas string
* @NativeName: Script_GetTitanSoulNetEnt
* @NativeFunctionAddress 00000001406B1410
*/

entity function GetTitanSoulNetEnt(string)

